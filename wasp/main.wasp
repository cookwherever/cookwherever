app cookwherever {
  wasp: {
    version: "^0.9.0"
  },
  title: "cookwherever",

  auth: {
    // Expects entity User to have (username:String) and (password:String) fields.
    userEntity: User,
    methods: {
      // We also support Google, with more on the way!
      usernameAndPassword: {}
    },
    // We'll see how this is used a bit later
    onAuthFailedRedirectTo: "/login"
  },

  dependencies: [
    ("baseui", "12.2.0"),
    ("styletron-engine-atomic", "1.5.0"),
    ("styletron-react", "6.1.0"),
    ("wink-nlp", "1.13.0"),
    ("wink-eng-lite-web-model", "1.4.3"),
    ("@types/mocha", "10.0.1"),
    ("react-markdown", "8.0.5"),
    ("html-react-parser", "3.0.8")
  ],

  db: {
    system: PostgreSQL
  }
}

entity Recipe {=psl
  id                 String             @id @unique @default(cuid())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime?          @default(now()) @updatedAt
  creator            User               @relation(fields: [userId], references: [id])
  name               String
  source             Source             @relation(fields: [sourceId], references: [id])
  sourcePath         String
  imageUrl           String?
  videoUrl           String?
  recipeDirections   RecipeDirection[]
  recipeIngredients  RecipeIngredient[]
  userId             String
  sourceId           String
  @@unique([name, sourcePath])
psl=}

entity User {=psl
  id       String   @id @unique @default(cuid())
  username String  @unique
  password String
  Recipe   Recipe[]
  groceryListItems GroceryListItem[]
psl=}

entity Source {=psl
  id     String   @id @unique @default(cuid())
  name   String   @unique
  url    String?
  Recipe Recipe[]
psl=}

entity RecipeIngredient {=psl
  id           String      @id @unique @default(cuid())
  sequence     Int
  text         String
  amount       Float?
  name         String?
  comment      String?
  unit         FoodUnit?   @relation(fields: [foodUnitId], references: [id])
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  Recipe       Recipe?     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     String?
  foodUnitId   String?
  ingredientId String?
  directionIngredients DirectionIngredient[]
  groceryListItems GroceryListItem[]
  @@unique([recipeId, sequence])
psl=}

entity FoodUnit {=psl
  id               String             @id @unique @default(cuid())
  name             String
  gramCoefficient  Float?
  RecipeIngredient RecipeIngredient[]
  FoodMeasurement  FoodMeasurement[]
  @@unique([name])
psl=}

entity FoodMeasurement {=psl
  id         String   @id @unique @default(cuid())
  sequence     Int
  amount     Int
  unit       FoodUnit @relation(fields: [foodUnitId], references: [id], onDelete: Cascade)
  comment          String?
  mass       Float
  food       Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodUnitId String
  foodId     String
  @@unique([foodId, sequence])
psl=}

entity Food {=psl
  id           String            @id @unique @default(cuid())
  description  String            @unique
  fdcId        Int?
  measurements FoodMeasurement[]
  ingredient   Ingredient[]
psl=}

entity RecipeDirection {=psl
  id       String  @id @unique @default(cuid())
  sequence Int
  text     String
  formattedText String?
  Recipe   Recipe? @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String?
  ingredients  DirectionIngredient[]
  measurements DirectionMeasurement[]
  actions      DirectionAction[]
  equipment    DirectionEquipment[]
  durations    DirectionDuration[]
  temperatures DirectionTemperature[]
  @@unique([recipeId, sequence])
psl=}

entity Ingredient {=psl
  id               String             @id @unique @default(cuid())
  food             Food               @relation(fields: [foodId], references: [id])
  RecipeIngredient RecipeIngredient[]
  foodId           String
  IngredientName   IngredientName[]
  groceryListItems GroceryListItem[]
psl=}

entity IngredientName {=psl
  id           String     @id @unique @default(cuid())
  name         String
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  ingredientId String?
  @@unique([name])
psl=}

entity DirectionIngredient {=psl
  id                 String            @id @unique @default(cuid())
  name               String
  ingredient         RecipeIngredient? @relation(fields: [recipeIngredientId], references: [id], onDelete: Cascade)
  direction          RecipeDirection   @relation(fields: [recipeDirectionId], references: [id], onDelete: Cascade)
  recipeIngredientId String?
  recipeDirectionId  String
psl=}

entity DirectionMeasurement {=psl
  id                String          @id @unique @default(cuid())
  text              String
  direction         RecipeDirection @relation(fields: [recipeDirectionId], references: [id], onDelete: Cascade)
  recipeDirectionId String
psl=}

entity DirectionAction {=psl
  id                String          @id @unique @default(cuid())
  text              String
  direction         RecipeDirection @relation(fields: [recipeDirectionId], references: [id], onDelete: Cascade)
  recipeDirectionId String
psl=}

entity DirectionEquipment {=psl
  id                String          @id @unique @default(cuid())
  text              String
  direction         RecipeDirection @relation(fields: [recipeDirectionId], references: [id], onDelete: Cascade)
  recipeDirectionId String
psl=}

entity DirectionDuration {=psl
  id                String          @id @unique @default(cuid())
  text              String
  direction         RecipeDirection @relation(fields: [recipeDirectionId], references: [id], onDelete: Cascade)
  recipeDirectionId String
psl=}

entity DirectionTemperature {=psl
  id                String          @id @unique @default(cuid())
  text              String
  direction         RecipeDirection @relation(fields: [recipeDirectionId], references: [id], onDelete: Cascade)
  recipeDirectionId String
psl=}

entity GroceryListItem {=psl
  id           String      @id @unique @default(cuid())
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  recipeIngredient RecipeIngredient? @relation(fields: [recipeIngredientId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
  createdAt    DateTime    @default(now())
  text         String
  ingredientId String?
  recipeIngredientId String? @unique
  userId       String
  obtainedAt       DateTime?
psl=}

query getSearchProperties {
    fn: import { getSearchProperties } from "@server/queries/get-search-properties.js",
    entities: [Source]
}

query listRecipes {
    fn: import { listRecipes } from "@server/queries/list-recipes.js",
    entities: [Recipe]
}

query viewRecipe {
    fn: import { viewRecipe } from "@server/queries/view-recipe.js",
    entities: [Recipe]
}

query adminIngredients {
    fn: import { adminIngredients } from "@server/queries/admin-ingredients.js",
    entities: [RecipeIngredient, IngredientName]
}

query viewGroceryList {
    fn: import { viewGroceryList } from "@server/queries/view-grocery-list.js",
    entities: [GroceryListItem]
}

action searchFoodForIngredient {
    fn: import { searchFoodForIngredient } from "@server/actions/search-food-for-ingredient.js",
    entities: [Food]
}

action createRecipe {
    fn: import { createRecipe } from "@server/actions/create-recipe.js",
    entities: [Recipe, RecipeIngredient, RecipeDirection, FoodUnit, IngredientName, DirectionIngredient, DirectionMeasurement, DirectionAction, DirectionEquipment, DirectionDuration, DirectionTemperature]
}

action upsertFdcFood {
    fn: import { upsertFdcFood } from "@server/actions/upsert-fdc-food.js",
    entities: [Food, FoodUnit, FoodMeasurement]
}

action upsertIngredientFood {
    fn: import { upsertIngredientFood } from "@server/actions/upsert-ingredient-food.js",
    entities: [Ingredient, IngredientName, RecipeIngredient, Food]
}

action parseDirections {
    fn: import { parseDirections } from "@server/parsing/parse-direction.js",
    entities: []
}

action saveGroceryListItem {
    fn: import { saveGroceryListItem } from "@server/actions/save-grocery-list-item.js",
    entities: [GroceryListItem]
}

action markGroceryListItem {
    fn: import { markGroceryListItem } from "@server/actions/mark-grocery-list-item.js",
    entities: [GroceryListItem]
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import Main from "@client/MainPage"
}

route SaveRecipeRoute { path: "/recipe/save", to: SaveRecipePage }
page SaveRecipePage {
  component: import SaveRecipePage from "@client/recipe/SaveRecipe"
}

route ViewRecipeRoute { path: "/recipe/:id", to: ViewRecipePage }
page ViewRecipePage {
  component: import ViewRecipePage from "@client/recipe/ViewRecipe/ViewRecipePage"
}

route AdminIngredientsRoute { path: "/admin/ingredients", to: AdminIngredientsPage }
page AdminIngredientsPage {
  component: import AdminIngredientsPage from "@client/admin/IngredientsPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/auth/SignupPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/auth/LoginPage"
}

route GroceryListRoute { path: "/grocery/list", to: GroceryListPage }
page GroceryListPage {
  component: import GroceryListPage from "@client/grocery/GroceryListPage"
}
