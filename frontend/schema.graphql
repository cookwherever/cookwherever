schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _isNull: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "equipment.config"
"""
type EquipmentConfig implements Node {
  config(
    """JSON select path"""
    path: String
  ): jsonb

  """An object relationship"""
  equipment: EquipmentEquipment
  equipmentId: uuid
  id: ID!
}

"""
aggregated selection of "equipment.config"
"""
type EquipmentConfigAggregate {
  aggregate: EquipmentConfigAggregateFields
  nodes: [EquipmentConfig!]!
}

"""
aggregate fields of "equipment.config"
"""
type EquipmentConfigAggregateFields {
  count(columns: [EquipmentConfigSelectColumn!], distinct: Boolean): Int!
  max: EquipmentConfigMaxFields
  min: EquipmentConfigMinFields
}

"""
order by aggregate values of table "equipment.config"
"""
input EquipmentConfigAggregateOrderBy {
  count: OrderBy
  max: equipment_config_max_order_by
  min: equipment_config_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input EquipmentConfigAppendInput {
  config: jsonb
}

"""
input type for inserting array relation for remote table "equipment.config"
"""
input EquipmentConfigArrRelInsertInput {
  data: [EquipmentConfigInsertInput!]!

  """upsert condition"""
  onConflict: EquipmentConfigOnConflict
}

"""
Boolean expression to filter rows from the table "equipment.config". All fields are combined with a logical 'AND'.
"""
input EquipmentConfigBoolExp {
  _and: [EquipmentConfigBoolExp!]
  _not: EquipmentConfigBoolExp
  _or: [EquipmentConfigBoolExp!]
  config: JsonbComparisonExp
  equipment: EquipmentEquipmentBoolExp
  equipmentId: UuidComparisonExp
  id: UuidComparisonExp
}

"""
A Relay connection object on "equipment.config"
"""
type EquipmentConfigConnection {
  edges: [EquipmentConfigEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "equipment.config"
"""
enum EquipmentConfigConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  config_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input EquipmentConfigDeleteAtPathInput {
  config: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input EquipmentConfigDeleteElemInput {
  config: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input EquipmentConfigDeleteKeyInput {
  config: String
}

type EquipmentConfigEdge {
  cursor: String!
  node: EquipmentConfig!
}

"""
input type for inserting data into table "equipment.config"
"""
input EquipmentConfigInsertInput {
  config: jsonb
  equipment: EquipmentEquipmentObjRelInsertInput
  equipmentId: uuid
  id: uuid
}

"""aggregate max on columns"""
type EquipmentConfigMaxFields {
  equipmentId: uuid
  id: uuid
}

"""aggregate min on columns"""
type EquipmentConfigMinFields {
  equipmentId: uuid
  id: uuid
}

"""
response of any mutation on the table "equipment.config"
"""
type EquipmentConfigMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [EquipmentConfig!]!
}

"""
on_conflict condition type for table "equipment.config"
"""
input EquipmentConfigOnConflict {
  constraint: EquipmentConfigConstraint!
  update_columns: [EquipmentConfigUpdateColumn!]! = []
  where: EquipmentConfigBoolExp
}

"""Ordering options when selecting data from "equipment.config"."""
input EquipmentConfigOrderBy {
  config: OrderBy
  equipment: EquipmentEquipmentOrderBy
  equipmentId: OrderBy
  id: OrderBy
}

"""primary key columns input for table: equipment.config"""
input EquipmentConfigPkColumnsInput {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input EquipmentConfigPrependInput {
  config: jsonb
}

"""
select columns of table "equipment.config"
"""
enum EquipmentConfigSelectColumn {
  """column name"""
  config

  """column name"""
  equipmentId

  """column name"""
  id
}

"""
input type for updating data in table "equipment.config"
"""
input EquipmentConfigSetInput {
  config: jsonb
  equipmentId: uuid
  id: uuid
}

"""
update columns of table "equipment.config"
"""
enum EquipmentConfigUpdateColumn {
  """column name"""
  config

  """column name"""
  equipmentId

  """column name"""
  id
}

input EquipmentConfigUpdates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: EquipmentConfigAppendInput

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _deleteAtPath: EquipmentConfigDeleteAtPathInput

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _deleteElem: EquipmentConfigDeleteElemInput

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _deleteKey: EquipmentConfigDeleteKeyInput

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: EquipmentConfigPrependInput

  """sets the columns of the filtered rows to the given values"""
  _set: EquipmentConfigSetInput
  where: EquipmentConfigBoolExp!
}

"""
columns and relationships of "equipment.equipment"
"""
type EquipmentEquipment implements Node {
  """An array relationship"""
  configs(
    """distinct select on columns"""
    distinctOn: [EquipmentConfigSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EquipmentConfigOrderBy!]

    """filter the rows returned"""
    where: EquipmentConfigBoolExp
  ): [EquipmentConfig!]!

  """An aggregate relationship"""
  configsAggregate(
    """distinct select on columns"""
    distinctOn: [EquipmentConfigSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EquipmentConfigOrderBy!]

    """filter the rows returned"""
    where: EquipmentConfigBoolExp
  ): EquipmentConfigAggregate!

  """An array relationship connection"""
  configs_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [EquipmentConfigSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [EquipmentConfigOrderBy!]

    """filter the rows returned"""
    where: EquipmentConfigBoolExp
  ): EquipmentConfigConnection!

  """An array relationship"""
  equipment(
    """distinct select on columns"""
    distinctOn: [RecipeEquipmentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeEquipmentOrderBy!]

    """filter the rows returned"""
    where: RecipeEquipmentBoolExp
  ): [RecipeEquipment!]!

  """An aggregate relationship"""
  equipmentAggregate(
    """distinct select on columns"""
    distinctOn: [RecipeEquipmentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeEquipmentOrderBy!]

    """filter the rows returned"""
    where: RecipeEquipmentBoolExp
  ): RecipeEquipmentAggregate!

  """An array relationship connection"""
  equipment_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeEquipmentSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeEquipmentOrderBy!]

    """filter the rows returned"""
    where: RecipeEquipmentBoolExp
  ): RecipeEquipmentConnection!
  id: ID!
  name: String
}

"""
Boolean expression to filter rows from the table "equipment.equipment". All fields are combined with a logical 'AND'.
"""
input EquipmentEquipmentBoolExp {
  _and: [EquipmentEquipmentBoolExp!]
  _not: EquipmentEquipmentBoolExp
  _or: [EquipmentEquipmentBoolExp!]
  configs: EquipmentConfigBoolExp
  configs_aggregate: equipment_config_aggregate_bool_exp
  equipment: RecipeEquipmentBoolExp
  equipment_aggregate: recipe_equipment_aggregate_bool_exp
  id: UuidComparisonExp
  name: StringComparisonExp
}

"""
A Relay connection object on "equipment.equipment"
"""
type EquipmentEquipmentConnection {
  edges: [EquipmentEquipmentEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "equipment.equipment"
"""
enum EquipmentEquipmentConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  equipment_pkey
}

type EquipmentEquipmentEdge {
  cursor: String!
  node: EquipmentEquipment!
}

"""
input type for inserting data into table "equipment.equipment"
"""
input EquipmentEquipmentInsertInput {
  configs: EquipmentConfigArrRelInsertInput
  equipment: RecipeEquipmentArrRelInsertInput
  id: uuid
  name: String
}

"""
response of any mutation on the table "equipment.equipment"
"""
type EquipmentEquipmentMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [EquipmentEquipment!]!
}

"""
input type for inserting object relation for remote table "equipment.equipment"
"""
input EquipmentEquipmentObjRelInsertInput {
  data: EquipmentEquipmentInsertInput!

  """upsert condition"""
  onConflict: EquipmentEquipmentOnConflict
}

"""
on_conflict condition type for table "equipment.equipment"
"""
input EquipmentEquipmentOnConflict {
  constraint: EquipmentEquipmentConstraint!
  update_columns: [EquipmentEquipmentUpdateColumn!]! = []
  where: EquipmentEquipmentBoolExp
}

"""Ordering options when selecting data from "equipment.equipment"."""
input EquipmentEquipmentOrderBy {
  configsAggregate: EquipmentConfigAggregateOrderBy
  equipmentAggregate: RecipeEquipmentAggregateOrderBy
  id: OrderBy
  name: OrderBy
}

"""primary key columns input for table: equipment.equipment"""
input EquipmentEquipmentPkColumnsInput {
  id: uuid!
}

"""
select columns of table "equipment.equipment"
"""
enum EquipmentEquipmentSelectColumn {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "equipment.equipment"
"""
input EquipmentEquipmentSetInput {
  id: uuid
  name: String
}

"""
update columns of table "equipment.equipment"
"""
enum EquipmentEquipmentUpdateColumn {
  """column name"""
  id

  """column name"""
  name
}

input EquipmentEquipmentUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: EquipmentEquipmentSetInput
  where: EquipmentEquipmentBoolExp!
}

"""
columns and relationships of "food.food"
"""
type FoodFood implements Node {
  fdcId: Int
  id: ID!
}

"""
Boolean expression to filter rows from the table "food.food". All fields are combined with a logical 'AND'.
"""
input FoodFoodBoolExp {
  _and: [FoodFoodBoolExp!]
  _not: FoodFoodBoolExp
  _or: [FoodFoodBoolExp!]
  fdcId: IntComparisonExp
  id: UuidComparisonExp
}

"""
A Relay connection object on "food.food"
"""
type FoodFoodConnection {
  edges: [FoodFoodEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "food.food"
"""
enum FoodFoodConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  food_pkey
}

type FoodFoodEdge {
  cursor: String!
  node: FoodFood!
}

"""
input type for incrementing numeric columns in table "food.food"
"""
input FoodFoodIncInput {
  fdcId: Int
}

"""
input type for inserting data into table "food.food"
"""
input FoodFoodInsertInput {
  fdcId: Int
  id: uuid
}

"""
columns and relationships of "food.food_measurement"
"""
type FoodFoodMeasurement implements Node {
  foodId: uuid
  id: ID!
  measurementId: uuid
}

"""
Boolean expression to filter rows from the table "food.food_measurement". All fields are combined with a logical 'AND'.
"""
input FoodFoodMeasurementBoolExp {
  _and: [FoodFoodMeasurementBoolExp!]
  _not: FoodFoodMeasurementBoolExp
  _or: [FoodFoodMeasurementBoolExp!]
  foodId: UuidComparisonExp
  id: UuidComparisonExp
  measurementId: UuidComparisonExp
}

"""
A Relay connection object on "food.food_measurement"
"""
type FoodFoodMeasurementConnection {
  edges: [FoodFoodMeasurementEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "food.food_measurement"
"""
enum FoodFoodMeasurementConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  food_measurement_pkey
}

type FoodFoodMeasurementEdge {
  cursor: String!
  node: FoodFoodMeasurement!
}

"""
input type for inserting data into table "food.food_measurement"
"""
input FoodFoodMeasurementInsertInput {
  foodId: uuid
  id: uuid
  measurementId: uuid
}

"""
response of any mutation on the table "food.food_measurement"
"""
type FoodFoodMeasurementMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [FoodFoodMeasurement!]!
}

"""
on_conflict condition type for table "food.food_measurement"
"""
input FoodFoodMeasurementOnConflict {
  constraint: FoodFoodMeasurementConstraint!
  update_columns: [FoodFoodMeasurementUpdateColumn!]! = []
  where: FoodFoodMeasurementBoolExp
}

"""Ordering options when selecting data from "food.food_measurement"."""
input FoodFoodMeasurementOrderBy {
  foodId: OrderBy
  id: OrderBy
  measurementId: OrderBy
}

"""primary key columns input for table: food.food_measurement"""
input FoodFoodMeasurementPkColumnsInput {
  id: uuid!
}

"""
select columns of table "food.food_measurement"
"""
enum FoodFoodMeasurementSelectColumn {
  """column name"""
  foodId

  """column name"""
  id

  """column name"""
  measurementId
}

"""
input type for updating data in table "food.food_measurement"
"""
input FoodFoodMeasurementSetInput {
  foodId: uuid
  id: uuid
  measurementId: uuid
}

"""
update columns of table "food.food_measurement"
"""
enum FoodFoodMeasurementUpdateColumn {
  """column name"""
  foodId

  """column name"""
  id

  """column name"""
  measurementId
}

input FoodFoodMeasurementUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: FoodFoodMeasurementSetInput
  where: FoodFoodMeasurementBoolExp!
}

"""
response of any mutation on the table "food.food"
"""
type FoodFoodMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [FoodFood!]!
}

"""
on_conflict condition type for table "food.food"
"""
input FoodFoodOnConflict {
  constraint: FoodFoodConstraint!
  update_columns: [FoodFoodUpdateColumn!]! = []
  where: FoodFoodBoolExp
}

"""Ordering options when selecting data from "food.food"."""
input FoodFoodOrderBy {
  fdcId: OrderBy
  id: OrderBy
}

"""primary key columns input for table: food.food"""
input FoodFoodPkColumnsInput {
  id: uuid!
}

"""
select columns of table "food.food"
"""
enum FoodFoodSelectColumn {
  """column name"""
  fdcId

  """column name"""
  id
}

"""
input type for updating data in table "food.food"
"""
input FoodFoodSetInput {
  fdcId: Int
  id: uuid
}

"""
update columns of table "food.food"
"""
enum FoodFoodUpdateColumn {
  """column name"""
  fdcId

  """column name"""
  id
}

input FoodFoodUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: FoodFoodIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: FoodFoodSetInput
  where: FoodFoodBoolExp!
}

"""
columns and relationships of "food.measurement"
"""
type FoodMeasurement implements Node {
  amount: Int
  id: ID!
  mass: Int
  unitId: uuid
}

"""
Boolean expression to filter rows from the table "food.measurement". All fields are combined with a logical 'AND'.
"""
input FoodMeasurementBoolExp {
  _and: [FoodMeasurementBoolExp!]
  _not: FoodMeasurementBoolExp
  _or: [FoodMeasurementBoolExp!]
  amount: IntComparisonExp
  id: UuidComparisonExp
  mass: IntComparisonExp
  unitId: UuidComparisonExp
}

"""
A Relay connection object on "food.measurement"
"""
type FoodMeasurementConnection {
  edges: [FoodMeasurementEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "food.measurement"
"""
enum FoodMeasurementConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  measurement_pkey
}

type FoodMeasurementEdge {
  cursor: String!
  node: FoodMeasurement!
}

"""
input type for incrementing numeric columns in table "food.measurement"
"""
input FoodMeasurementIncInput {
  amount: Int
  mass: Int
}

"""
input type for inserting data into table "food.measurement"
"""
input FoodMeasurementInsertInput {
  amount: Int
  id: uuid
  mass: Int
  unitId: uuid
}

"""
response of any mutation on the table "food.measurement"
"""
type FoodMeasurementMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [FoodMeasurement!]!
}

"""
on_conflict condition type for table "food.measurement"
"""
input FoodMeasurementOnConflict {
  constraint: FoodMeasurementConstraint!
  update_columns: [FoodMeasurementUpdateColumn!]! = []
  where: FoodMeasurementBoolExp
}

"""Ordering options when selecting data from "food.measurement"."""
input FoodMeasurementOrderBy {
  amount: OrderBy
  id: OrderBy
  mass: OrderBy
  unitId: OrderBy
}

"""primary key columns input for table: food.measurement"""
input FoodMeasurementPkColumnsInput {
  id: uuid!
}

"""
select columns of table "food.measurement"
"""
enum FoodMeasurementSelectColumn {
  """column name"""
  amount

  """column name"""
  id

  """column name"""
  mass

  """column name"""
  unitId
}

"""
input type for updating data in table "food.measurement"
"""
input FoodMeasurementSetInput {
  amount: Int
  id: uuid
  mass: Int
  unitId: uuid
}

"""
update columns of table "food.measurement"
"""
enum FoodMeasurementUpdateColumn {
  """column name"""
  amount

  """column name"""
  id

  """column name"""
  mass

  """column name"""
  unitId
}

input FoodMeasurementUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: FoodMeasurementIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: FoodMeasurementSetInput
  where: FoodMeasurementBoolExp!
}

"""
columns and relationships of "food.unit"
"""
type FoodUnit implements Node {
  gramCoefficient: Int
  id: ID!
  name: String
}

"""
Boolean expression to filter rows from the table "food.unit". All fields are combined with a logical 'AND'.
"""
input FoodUnitBoolExp {
  _and: [FoodUnitBoolExp!]
  _not: FoodUnitBoolExp
  _or: [FoodUnitBoolExp!]
  gramCoefficient: IntComparisonExp
  id: UuidComparisonExp
  name: StringComparisonExp
}

"""
A Relay connection object on "food.unit"
"""
type FoodUnitConnection {
  edges: [FoodUnitEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "food.unit"
"""
enum FoodUnitConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  unit_pkey
}

type FoodUnitEdge {
  cursor: String!
  node: FoodUnit!
}

"""
input type for incrementing numeric columns in table "food.unit"
"""
input FoodUnitIncInput {
  gramCoefficient: Int
}

"""
input type for inserting data into table "food.unit"
"""
input FoodUnitInsertInput {
  gramCoefficient: Int
  id: uuid
  name: String
}

"""
response of any mutation on the table "food.unit"
"""
type FoodUnitMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [FoodUnit!]!
}

"""
input type for inserting object relation for remote table "food.unit"
"""
input FoodUnitObjRelInsertInput {
  data: FoodUnitInsertInput!

  """upsert condition"""
  onConflict: FoodUnitOnConflict
}

"""
on_conflict condition type for table "food.unit"
"""
input FoodUnitOnConflict {
  constraint: FoodUnitConstraint!
  update_columns: [FoodUnitUpdateColumn!]! = []
  where: FoodUnitBoolExp
}

"""Ordering options when selecting data from "food.unit"."""
input FoodUnitOrderBy {
  gramCoefficient: OrderBy
  id: OrderBy
  name: OrderBy
}

"""primary key columns input for table: food.unit"""
input FoodUnitPkColumnsInput {
  id: uuid!
}

"""
select columns of table "food.unit"
"""
enum FoodUnitSelectColumn {
  """column name"""
  gramCoefficient

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "food.unit"
"""
input FoodUnitSetInput {
  gramCoefficient: Int
  id: uuid
  name: String
}

"""
update columns of table "food.unit"
"""
enum FoodUnitUpdateColumn {
  """column name"""
  gramCoefficient

  """column name"""
  id

  """column name"""
  name
}

input FoodUnitUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: FoodUnitIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: FoodUnitSetInput
  where: FoodUnitBoolExp!
}

"""
columns and relationships of "ingredient.ingredient"
"""
type IngredientIngredient implements Node {
  foodId: uuid
  id: ID!
  recipeId: uuid
  wikiUrl: String
}

"""
aggregated selection of "ingredient.ingredient"
"""
type IngredientIngredientAggregate {
  aggregate: IngredientIngredientAggregateFields
  nodes: [IngredientIngredient!]!
}

"""
aggregate fields of "ingredient.ingredient"
"""
type IngredientIngredientAggregateFields {
  count(columns: [IngredientIngredientSelectColumn!], distinct: Boolean): Int!
  max: IngredientIngredientMaxFields
  min: IngredientIngredientMinFields
}

"""
order by aggregate values of table "ingredient.ingredient"
"""
input IngredientIngredientAggregateOrderBy {
  count: OrderBy
  max: ingredient_ingredient_max_order_by
  min: ingredient_ingredient_min_order_by
}

"""
input type for inserting array relation for remote table "ingredient.ingredient"
"""
input IngredientIngredientArrRelInsertInput {
  data: [IngredientIngredientInsertInput!]!

  """upsert condition"""
  onConflict: IngredientIngredientOnConflict
}

"""
Boolean expression to filter rows from the table "ingredient.ingredient". All fields are combined with a logical 'AND'.
"""
input IngredientIngredientBoolExp {
  _and: [IngredientIngredientBoolExp!]
  _not: IngredientIngredientBoolExp
  _or: [IngredientIngredientBoolExp!]
  foodId: UuidComparisonExp
  id: UuidComparisonExp
  recipeId: UuidComparisonExp
  wikiUrl: StringComparisonExp
}

"""
A Relay connection object on "ingredient.ingredient"
"""
type IngredientIngredientConnection {
  edges: [IngredientIngredientEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "ingredient.ingredient"
"""
enum IngredientIngredientConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  ingredient_pkey
}

type IngredientIngredientEdge {
  cursor: String!
  node: IngredientIngredient!
}

"""
input type for inserting data into table "ingredient.ingredient"
"""
input IngredientIngredientInsertInput {
  foodId: uuid
  id: uuid
  recipeId: uuid
  wikiUrl: String
}

"""aggregate max on columns"""
type IngredientIngredientMaxFields {
  foodId: uuid
  id: uuid
  recipeId: uuid
  wikiUrl: String
}

"""aggregate min on columns"""
type IngredientIngredientMinFields {
  foodId: uuid
  id: uuid
  recipeId: uuid
  wikiUrl: String
}

"""
response of any mutation on the table "ingredient.ingredient"
"""
type IngredientIngredientMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [IngredientIngredient!]!
}

"""
input type for inserting object relation for remote table "ingredient.ingredient"
"""
input IngredientIngredientObjRelInsertInput {
  data: IngredientIngredientInsertInput!

  """upsert condition"""
  onConflict: IngredientIngredientOnConflict
}

"""
on_conflict condition type for table "ingredient.ingredient"
"""
input IngredientIngredientOnConflict {
  constraint: IngredientIngredientConstraint!
  update_columns: [IngredientIngredientUpdateColumn!]! = []
  where: IngredientIngredientBoolExp
}

"""Ordering options when selecting data from "ingredient.ingredient"."""
input IngredientIngredientOrderBy {
  foodId: OrderBy
  id: OrderBy
  recipeId: OrderBy
  wikiUrl: OrderBy
}

"""primary key columns input for table: ingredient.ingredient"""
input IngredientIngredientPkColumnsInput {
  id: uuid!
}

"""
select columns of table "ingredient.ingredient"
"""
enum IngredientIngredientSelectColumn {
  """column name"""
  foodId

  """column name"""
  id

  """column name"""
  recipeId

  """column name"""
  wikiUrl
}

"""
input type for updating data in table "ingredient.ingredient"
"""
input IngredientIngredientSetInput {
  foodId: uuid
  id: uuid
  recipeId: uuid
  wikiUrl: String
}

"""
update columns of table "ingredient.ingredient"
"""
enum IngredientIngredientUpdateColumn {
  """column name"""
  foodId

  """column name"""
  id

  """column name"""
  recipeId

  """column name"""
  wikiUrl
}

input IngredientIngredientUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: IngredientIngredientSetInput
  where: IngredientIngredientBoolExp!
}

"""
columns and relationships of "ingredient.name"
"""
type IngredientName implements Node {
  id: ID!
  ingredientId: uuid
  name: String
}

"""
Boolean expression to filter rows from the table "ingredient.name". All fields are combined with a logical 'AND'.
"""
input IngredientNameBoolExp {
  _and: [IngredientNameBoolExp!]
  _not: IngredientNameBoolExp
  _or: [IngredientNameBoolExp!]
  id: UuidComparisonExp
  ingredientId: UuidComparisonExp
  name: StringComparisonExp
}

"""
A Relay connection object on "ingredient.name"
"""
type IngredientNameConnection {
  edges: [IngredientNameEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "ingredient.name"
"""
enum IngredientNameConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  name_pkey
}

type IngredientNameEdge {
  cursor: String!
  node: IngredientName!
}

"""
input type for inserting data into table "ingredient.name"
"""
input IngredientNameInsertInput {
  id: uuid
  ingredientId: uuid
  name: String
}

"""
response of any mutation on the table "ingredient.name"
"""
type IngredientNameMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [IngredientName!]!
}

"""
on_conflict condition type for table "ingredient.name"
"""
input IngredientNameOnConflict {
  constraint: IngredientNameConstraint!
  update_columns: [IngredientNameUpdateColumn!]! = []
  where: IngredientNameBoolExp
}

"""Ordering options when selecting data from "ingredient.name"."""
input IngredientNameOrderBy {
  id: OrderBy
  ingredientId: OrderBy
  name: OrderBy
}

"""primary key columns input for table: ingredient.name"""
input IngredientNamePkColumnsInput {
  id: uuid!
}

"""
select columns of table "ingredient.name"
"""
enum IngredientNameSelectColumn {
  """column name"""
  id

  """column name"""
  ingredientId

  """column name"""
  name
}

"""
input type for updating data in table "ingredient.name"
"""
input IngredientNameSetInput {
  id: uuid
  ingredientId: uuid
  name: String
}

"""
update columns of table "ingredient.name"
"""
enum IngredientNameUpdateColumn {
  """column name"""
  id

  """column name"""
  ingredientId

  """column name"""
  name
}

input IngredientNameUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: IngredientNameSetInput
  where: IngredientNameBoolExp!
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _isNull: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

input JsonbCastExp {
  String: StringComparisonExp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
  _cast: JsonbCastExp

  """is the column contained in the given json value"""
  _containedIn: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _hasKey: String

  """do all of these strings exist as top-level keys in the column"""
  _hasKeysAll: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _hasKeysAny: [String!]
  _in: [jsonb!]
  _isNull: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""An object with globally unique ID"""
interface Node {
  """A globally unique identifier"""
  id: ID!
}

"""column ordering options"""
enum OrderBy {
  """in ascending order, nulls last"""
  ASC

  """in ascending order, nulls first"""
  ASC_NULLS_FIRST

  """in ascending order, nulls last"""
  ASC_NULLS_LAST

  """in descending order, nulls first"""
  DESC

  """in descending order, nulls first"""
  DESC_NULLS_FIRST

  """in descending order, nulls last"""
  DESC_NULLS_LAST
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

"""
columns and relationships of "recipe.direction"
"""
type RecipeDirection implements Node {
  action: String

  """An array relationship"""
  equipment(
    """distinct select on columns"""
    distinctOn: [RecipeDirectionEquipmentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionEquipmentOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionEquipmentBoolExp
  ): [RecipeDirectionEquipment!]!

  """An aggregate relationship"""
  equipmentAggregate(
    """distinct select on columns"""
    distinctOn: [RecipeDirectionEquipmentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionEquipmentOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionEquipmentBoolExp
  ): RecipeDirectionEquipmentAggregate!

  """An array relationship connection"""
  equipment_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeDirectionEquipmentSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionEquipmentOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionEquipmentBoolExp
  ): RecipeDirectionEquipmentConnection!
  id: ID!

  """An array relationship"""
  ingredients(
    """distinct select on columns"""
    distinctOn: [RecipeDirectionIngredientSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionIngredientOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionIngredientBoolExp
  ): [RecipeDirectionIngredient!]!

  """An aggregate relationship"""
  ingredientsAggregate(
    """distinct select on columns"""
    distinctOn: [RecipeDirectionIngredientSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionIngredientOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionIngredientBoolExp
  ): RecipeDirectionIngredientAggregate!

  """An array relationship connection"""
  ingredients_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeDirectionIngredientSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionIngredientOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionIngredientBoolExp
  ): RecipeDirectionIngredientConnection!

  """An object relationship"""
  recipe: RecipeRecipe
  recipeId: uuid
  seq: Int
  text: String
  videoTimestampId: uuid

  """An object relationship"""
  video_timestamp: RecipeVideoTimestamp
}

"""
aggregated selection of "recipe.direction"
"""
type RecipeDirectionAggregate {
  aggregate: RecipeDirectionAggregateFields
  nodes: [RecipeDirection!]!
}

"""
aggregate fields of "recipe.direction"
"""
type RecipeDirectionAggregateFields {
  avg: RecipeDirectionAvgFields
  count(columns: [RecipeDirectionSelectColumn!], distinct: Boolean): Int!
  max: RecipeDirectionMaxFields
  min: RecipeDirectionMinFields
  stddev: RecipeDirectionStddevFields
  stddevPop: RecipeDirectionStddev_popFields
  stddevSamp: RecipeDirectionStddev_sampFields
  sum: RecipeDirectionSumFields
  varPop: RecipeDirectionVar_popFields
  varSamp: RecipeDirectionVar_sampFields
  variance: RecipeDirectionVarianceFields
}

"""
order by aggregate values of table "recipe.direction"
"""
input RecipeDirectionAggregateOrderBy {
  avg: recipe_direction_avg_order_by
  count: OrderBy
  max: recipe_direction_max_order_by
  min: recipe_direction_min_order_by
  stddev: recipe_direction_stddev_order_by
  stddev_pop: recipe_direction_stddev_pop_order_by
  stddev_samp: recipe_direction_stddev_samp_order_by
  sum: recipe_direction_sum_order_by
  var_pop: recipe_direction_var_pop_order_by
  var_samp: recipe_direction_var_samp_order_by
  variance: recipe_direction_variance_order_by
}

"""
input type for inserting array relation for remote table "recipe.direction"
"""
input RecipeDirectionArrRelInsertInput {
  data: [RecipeDirectionInsertInput!]!

  """upsert condition"""
  onConflict: RecipeDirectionOnConflict
}

"""aggregate avg on columns"""
type RecipeDirectionAvgFields {
  seq: Float
}

"""
Boolean expression to filter rows from the table "recipe.direction". All fields are combined with a logical 'AND'.
"""
input RecipeDirectionBoolExp {
  _and: [RecipeDirectionBoolExp!]
  _not: RecipeDirectionBoolExp
  _or: [RecipeDirectionBoolExp!]
  action: StringComparisonExp
  equipment: RecipeDirectionEquipmentBoolExp
  equipment_aggregate: recipe_direction_equipment_aggregate_bool_exp
  id: UuidComparisonExp
  ingredients: RecipeDirectionIngredientBoolExp
  ingredients_aggregate: recipe_direction_ingredient_aggregate_bool_exp
  recipe: RecipeRecipeBoolExp
  recipeId: UuidComparisonExp
  seq: IntComparisonExp
  text: StringComparisonExp
  videoTimestampId: UuidComparisonExp
  video_timestamp: RecipeVideoTimestampBoolExp
}

"""
A Relay connection object on "recipe.direction"
"""
type RecipeDirectionConnection {
  edges: [RecipeDirectionEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "recipe.direction"
"""
enum RecipeDirectionConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  direction_pkey
}

type RecipeDirectionEdge {
  cursor: String!
  node: RecipeDirection!
}

"""
columns and relationships of "recipe.direction_equipment"
"""
type RecipeDirectionEquipment implements Node {
  """An object relationship"""
  direction: RecipeDirection
  directionId: uuid

  """An object relationship"""
  equipment: RecipeEquipment
  equipmentId: uuid
  id: ID!
}

"""
aggregated selection of "recipe.direction_equipment"
"""
type RecipeDirectionEquipmentAggregate {
  aggregate: RecipeDirectionEquipmentAggregateFields
  nodes: [RecipeDirectionEquipment!]!
}

"""
aggregate fields of "recipe.direction_equipment"
"""
type RecipeDirectionEquipmentAggregateFields {
  count(columns: [RecipeDirectionEquipmentSelectColumn!], distinct: Boolean): Int!
  max: RecipeDirectionEquipmentMaxFields
  min: RecipeDirectionEquipmentMinFields
}

"""
order by aggregate values of table "recipe.direction_equipment"
"""
input RecipeDirectionEquipmentAggregateOrderBy {
  count: OrderBy
  max: recipe_direction_equipment_max_order_by
  min: recipe_direction_equipment_min_order_by
}

"""
input type for inserting array relation for remote table "recipe.direction_equipment"
"""
input RecipeDirectionEquipmentArrRelInsertInput {
  data: [RecipeDirectionEquipmentInsertInput!]!

  """upsert condition"""
  onConflict: RecipeDirectionEquipmentOnConflict
}

"""
Boolean expression to filter rows from the table "recipe.direction_equipment". All fields are combined with a logical 'AND'.
"""
input RecipeDirectionEquipmentBoolExp {
  _and: [RecipeDirectionEquipmentBoolExp!]
  _not: RecipeDirectionEquipmentBoolExp
  _or: [RecipeDirectionEquipmentBoolExp!]
  direction: RecipeDirectionBoolExp
  directionId: UuidComparisonExp
  equipment: RecipeEquipmentBoolExp
  equipmentId: UuidComparisonExp
  id: UuidComparisonExp
}

"""
A Relay connection object on "recipe.direction_equipment"
"""
type RecipeDirectionEquipmentConnection {
  edges: [RecipeDirectionEquipmentEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "recipe.direction_equipment"
"""
enum RecipeDirectionEquipmentConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  direction_equipment_pkey
}

type RecipeDirectionEquipmentEdge {
  cursor: String!
  node: RecipeDirectionEquipment!
}

"""
input type for inserting data into table "recipe.direction_equipment"
"""
input RecipeDirectionEquipmentInsertInput {
  direction: RecipeDirectionObjRelInsertInput
  directionId: uuid
  equipment: RecipeEquipmentObjRelInsertInput
  equipmentId: uuid
  id: uuid
}

"""aggregate max on columns"""
type RecipeDirectionEquipmentMaxFields {
  directionId: uuid
  equipmentId: uuid
  id: uuid
}

"""aggregate min on columns"""
type RecipeDirectionEquipmentMinFields {
  directionId: uuid
  equipmentId: uuid
  id: uuid
}

"""
response of any mutation on the table "recipe.direction_equipment"
"""
type RecipeDirectionEquipmentMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [RecipeDirectionEquipment!]!
}

"""
on_conflict condition type for table "recipe.direction_equipment"
"""
input RecipeDirectionEquipmentOnConflict {
  constraint: RecipeDirectionEquipmentConstraint!
  update_columns: [RecipeDirectionEquipmentUpdateColumn!]! = []
  where: RecipeDirectionEquipmentBoolExp
}

"""
Ordering options when selecting data from "recipe.direction_equipment".
"""
input RecipeDirectionEquipmentOrderBy {
  direction: RecipeDirectionOrderBy
  directionId: OrderBy
  equipment: RecipeEquipmentOrderBy
  equipmentId: OrderBy
  id: OrderBy
}

"""primary key columns input for table: recipe.direction_equipment"""
input RecipeDirectionEquipmentPkColumnsInput {
  id: uuid!
}

"""
select columns of table "recipe.direction_equipment"
"""
enum RecipeDirectionEquipmentSelectColumn {
  """column name"""
  directionId

  """column name"""
  equipmentId

  """column name"""
  id
}

"""
input type for updating data in table "recipe.direction_equipment"
"""
input RecipeDirectionEquipmentSetInput {
  directionId: uuid
  equipmentId: uuid
  id: uuid
}

"""
update columns of table "recipe.direction_equipment"
"""
enum RecipeDirectionEquipmentUpdateColumn {
  """column name"""
  directionId

  """column name"""
  equipmentId

  """column name"""
  id
}

input RecipeDirectionEquipmentUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: RecipeDirectionEquipmentSetInput
  where: RecipeDirectionEquipmentBoolExp!
}

"""
input type for incrementing numeric columns in table "recipe.direction"
"""
input RecipeDirectionIncInput {
  seq: Int
}

"""
columns and relationships of "recipe.direction_ingredient"
"""
type RecipeDirectionIngredient implements Node {
  """An object relationship"""
  direction: RecipeDirection
  directionId: uuid
  id: ID!

  """An object relationship"""
  ingredient: IngredientIngredient
  ingredientId: uuid
}

"""
aggregated selection of "recipe.direction_ingredient"
"""
type RecipeDirectionIngredientAggregate {
  aggregate: RecipeDirectionIngredientAggregateFields
  nodes: [RecipeDirectionIngredient!]!
}

"""
aggregate fields of "recipe.direction_ingredient"
"""
type RecipeDirectionIngredientAggregateFields {
  count(columns: [RecipeDirectionIngredientSelectColumn!], distinct: Boolean): Int!
  max: RecipeDirectionIngredientMaxFields
  min: RecipeDirectionIngredientMinFields
}

"""
order by aggregate values of table "recipe.direction_ingredient"
"""
input RecipeDirectionIngredientAggregateOrderBy {
  count: OrderBy
  max: recipe_direction_ingredient_max_order_by
  min: recipe_direction_ingredient_min_order_by
}

"""
input type for inserting array relation for remote table "recipe.direction_ingredient"
"""
input RecipeDirectionIngredientArrRelInsertInput {
  data: [RecipeDirectionIngredientInsertInput!]!

  """upsert condition"""
  onConflict: RecipeDirectionIngredientOnConflict
}

"""
Boolean expression to filter rows from the table "recipe.direction_ingredient". All fields are combined with a logical 'AND'.
"""
input RecipeDirectionIngredientBoolExp {
  _and: [RecipeDirectionIngredientBoolExp!]
  _not: RecipeDirectionIngredientBoolExp
  _or: [RecipeDirectionIngredientBoolExp!]
  direction: RecipeDirectionBoolExp
  directionId: UuidComparisonExp
  id: UuidComparisonExp
  ingredient: IngredientIngredientBoolExp
  ingredientId: UuidComparisonExp
}

"""
A Relay connection object on "recipe.direction_ingredient"
"""
type RecipeDirectionIngredientConnection {
  edges: [RecipeDirectionIngredientEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "recipe.direction_ingredient"
"""
enum RecipeDirectionIngredientConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  direction_ingredient_pkey
}

type RecipeDirectionIngredientEdge {
  cursor: String!
  node: RecipeDirectionIngredient!
}

"""
input type for inserting data into table "recipe.direction_ingredient"
"""
input RecipeDirectionIngredientInsertInput {
  direction: RecipeDirectionObjRelInsertInput
  directionId: uuid
  id: uuid
  ingredient: IngredientIngredientObjRelInsertInput
  ingredientId: uuid
}

"""aggregate max on columns"""
type RecipeDirectionIngredientMaxFields {
  directionId: uuid
  id: uuid
  ingredientId: uuid
}

"""aggregate min on columns"""
type RecipeDirectionIngredientMinFields {
  directionId: uuid
  id: uuid
  ingredientId: uuid
}

"""
response of any mutation on the table "recipe.direction_ingredient"
"""
type RecipeDirectionIngredientMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [RecipeDirectionIngredient!]!
}

"""
on_conflict condition type for table "recipe.direction_ingredient"
"""
input RecipeDirectionIngredientOnConflict {
  constraint: RecipeDirectionIngredientConstraint!
  update_columns: [RecipeDirectionIngredientUpdateColumn!]! = []
  where: RecipeDirectionIngredientBoolExp
}

"""
Ordering options when selecting data from "recipe.direction_ingredient".
"""
input RecipeDirectionIngredientOrderBy {
  direction: RecipeDirectionOrderBy
  directionId: OrderBy
  id: OrderBy
  ingredient: IngredientIngredientOrderBy
  ingredientId: OrderBy
}

"""primary key columns input for table: recipe.direction_ingredient"""
input RecipeDirectionIngredientPkColumnsInput {
  id: uuid!
}

"""
select columns of table "recipe.direction_ingredient"
"""
enum RecipeDirectionIngredientSelectColumn {
  """column name"""
  directionId

  """column name"""
  id

  """column name"""
  ingredientId
}

"""
input type for updating data in table "recipe.direction_ingredient"
"""
input RecipeDirectionIngredientSetInput {
  directionId: uuid
  id: uuid
  ingredientId: uuid
}

"""
update columns of table "recipe.direction_ingredient"
"""
enum RecipeDirectionIngredientUpdateColumn {
  """column name"""
  directionId

  """column name"""
  id

  """column name"""
  ingredientId
}

input RecipeDirectionIngredientUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: RecipeDirectionIngredientSetInput
  where: RecipeDirectionIngredientBoolExp!
}

"""
input type for inserting data into table "recipe.direction"
"""
input RecipeDirectionInsertInput {
  action: String
  equipment: RecipeDirectionEquipmentArrRelInsertInput
  id: uuid
  ingredients: RecipeDirectionIngredientArrRelInsertInput
  recipe: RecipeRecipeObjRelInsertInput
  recipeId: uuid
  seq: Int
  text: String
  videoTimestampId: uuid
  video_timestamp: RecipeVideoTimestampObjRelInsertInput
}

"""aggregate max on columns"""
type RecipeDirectionMaxFields {
  action: String
  id: uuid
  recipeId: uuid
  seq: Int
  text: String
  videoTimestampId: uuid
}

"""aggregate min on columns"""
type RecipeDirectionMinFields {
  action: String
  id: uuid
  recipeId: uuid
  seq: Int
  text: String
  videoTimestampId: uuid
}

"""
response of any mutation on the table "recipe.direction"
"""
type RecipeDirectionMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [RecipeDirection!]!
}

"""
input type for inserting object relation for remote table "recipe.direction"
"""
input RecipeDirectionObjRelInsertInput {
  data: RecipeDirectionInsertInput!

  """upsert condition"""
  onConflict: RecipeDirectionOnConflict
}

"""
on_conflict condition type for table "recipe.direction"
"""
input RecipeDirectionOnConflict {
  constraint: RecipeDirectionConstraint!
  update_columns: [RecipeDirectionUpdateColumn!]! = []
  where: RecipeDirectionBoolExp
}

"""Ordering options when selecting data from "recipe.direction"."""
input RecipeDirectionOrderBy {
  action: OrderBy
  equipmentAggregate: RecipeDirectionEquipmentAggregateOrderBy
  id: OrderBy
  ingredientsAggregate: RecipeDirectionIngredientAggregateOrderBy
  recipe: RecipeRecipeOrderBy
  recipeId: OrderBy
  seq: OrderBy
  text: OrderBy
  videoTimestampId: OrderBy
  video_timestamp: RecipeVideoTimestampOrderBy
}

"""primary key columns input for table: recipe.direction"""
input RecipeDirectionPkColumnsInput {
  id: uuid!
}

"""
select columns of table "recipe.direction"
"""
enum RecipeDirectionSelectColumn {
  """column name"""
  action

  """column name"""
  id

  """column name"""
  recipeId

  """column name"""
  seq

  """column name"""
  text

  """column name"""
  videoTimestampId
}

"""
input type for updating data in table "recipe.direction"
"""
input RecipeDirectionSetInput {
  action: String
  id: uuid
  recipeId: uuid
  seq: Int
  text: String
  videoTimestampId: uuid
}

"""aggregate stddev on columns"""
type RecipeDirectionStddevFields {
  seq: Float
}

"""aggregate stddev_pop on columns"""
type RecipeDirectionStddev_popFields {
  seq: Float
}

"""aggregate stddev_samp on columns"""
type RecipeDirectionStddev_sampFields {
  seq: Float
}

"""aggregate sum on columns"""
type RecipeDirectionSumFields {
  seq: Int
}

"""
update columns of table "recipe.direction"
"""
enum RecipeDirectionUpdateColumn {
  """column name"""
  action

  """column name"""
  id

  """column name"""
  recipeId

  """column name"""
  seq

  """column name"""
  text

  """column name"""
  videoTimestampId
}

input RecipeDirectionUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: RecipeDirectionIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: RecipeDirectionSetInput
  where: RecipeDirectionBoolExp!
}

"""aggregate var_pop on columns"""
type RecipeDirectionVar_popFields {
  seq: Float
}

"""aggregate var_samp on columns"""
type RecipeDirectionVar_sampFields {
  seq: Float
}

"""aggregate variance on columns"""
type RecipeDirectionVarianceFields {
  seq: Float
}

"""
columns and relationships of "recipe.equipment"
"""
type RecipeEquipment implements Node {
  """An object relationship"""
  equipment: EquipmentEquipment
  equipmentId: uuid
  id: ID!

  """An object relationship"""
  recipe: RecipeRecipe
  recipeId: uuid
}

"""
aggregated selection of "recipe.equipment"
"""
type RecipeEquipmentAggregate {
  aggregate: RecipeEquipmentAggregateFields
  nodes: [RecipeEquipment!]!
}

"""
aggregate fields of "recipe.equipment"
"""
type RecipeEquipmentAggregateFields {
  count(columns: [RecipeEquipmentSelectColumn!], distinct: Boolean): Int!
  max: RecipeEquipmentMaxFields
  min: RecipeEquipmentMinFields
}

"""
order by aggregate values of table "recipe.equipment"
"""
input RecipeEquipmentAggregateOrderBy {
  count: OrderBy
  max: recipe_equipment_max_order_by
  min: recipe_equipment_min_order_by
}

"""
input type for inserting array relation for remote table "recipe.equipment"
"""
input RecipeEquipmentArrRelInsertInput {
  data: [RecipeEquipmentInsertInput!]!

  """upsert condition"""
  onConflict: RecipeEquipmentOnConflict
}

"""
Boolean expression to filter rows from the table "recipe.equipment". All fields are combined with a logical 'AND'.
"""
input RecipeEquipmentBoolExp {
  _and: [RecipeEquipmentBoolExp!]
  _not: RecipeEquipmentBoolExp
  _or: [RecipeEquipmentBoolExp!]
  equipment: EquipmentEquipmentBoolExp
  equipmentId: UuidComparisonExp
  id: UuidComparisonExp
  recipe: RecipeRecipeBoolExp
  recipeId: UuidComparisonExp
}

"""
A Relay connection object on "recipe.equipment"
"""
type RecipeEquipmentConnection {
  edges: [RecipeEquipmentEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "recipe.equipment"
"""
enum RecipeEquipmentConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  equipment_pkey
}

type RecipeEquipmentEdge {
  cursor: String!
  node: RecipeEquipment!
}

"""
input type for inserting data into table "recipe.equipment"
"""
input RecipeEquipmentInsertInput {
  equipment: EquipmentEquipmentObjRelInsertInput
  equipmentId: uuid
  id: uuid
  recipe: RecipeRecipeObjRelInsertInput
  recipeId: uuid
}

"""aggregate max on columns"""
type RecipeEquipmentMaxFields {
  equipmentId: uuid
  id: uuid
  recipeId: uuid
}

"""aggregate min on columns"""
type RecipeEquipmentMinFields {
  equipmentId: uuid
  id: uuid
  recipeId: uuid
}

"""
response of any mutation on the table "recipe.equipment"
"""
type RecipeEquipmentMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [RecipeEquipment!]!
}

"""
input type for inserting object relation for remote table "recipe.equipment"
"""
input RecipeEquipmentObjRelInsertInput {
  data: RecipeEquipmentInsertInput!

  """upsert condition"""
  onConflict: RecipeEquipmentOnConflict
}

"""
on_conflict condition type for table "recipe.equipment"
"""
input RecipeEquipmentOnConflict {
  constraint: RecipeEquipmentConstraint!
  update_columns: [RecipeEquipmentUpdateColumn!]! = []
  where: RecipeEquipmentBoolExp
}

"""Ordering options when selecting data from "recipe.equipment"."""
input RecipeEquipmentOrderBy {
  equipment: EquipmentEquipmentOrderBy
  equipmentId: OrderBy
  id: OrderBy
  recipe: RecipeRecipeOrderBy
  recipeId: OrderBy
}

"""primary key columns input for table: recipe.equipment"""
input RecipeEquipmentPkColumnsInput {
  id: uuid!
}

"""
select columns of table "recipe.equipment"
"""
enum RecipeEquipmentSelectColumn {
  """column name"""
  equipmentId

  """column name"""
  id

  """column name"""
  recipeId
}

"""
input type for updating data in table "recipe.equipment"
"""
input RecipeEquipmentSetInput {
  equipmentId: uuid
  id: uuid
  recipeId: uuid
}

"""
update columns of table "recipe.equipment"
"""
enum RecipeEquipmentUpdateColumn {
  """column name"""
  equipmentId

  """column name"""
  id

  """column name"""
  recipeId
}

input RecipeEquipmentUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: RecipeEquipmentSetInput
  where: RecipeEquipmentBoolExp!
}

"""
columns and relationships of "recipe.ingredient"
"""
type RecipeIngredient implements Node {
  amount: Int
  comment: String
  id: ID!

  """An object relationship"""
  ingredient: IngredientIngredient
  ingredientId: uuid
  name: String

  """An object relationship"""
  recipe: RecipeRecipe
  recipeId: uuid
  seq: Int
  text: String

  """An object relationship"""
  unit: FoodUnit
  unitId: uuid
  videoTimestampId: uuid

  """An object relationship"""
  video_timestamp: RecipeVideoTimestamp
}

"""
aggregated selection of "recipe.ingredient"
"""
type RecipeIngredientAggregate {
  aggregate: RecipeIngredientAggregateFields
  nodes: [RecipeIngredient!]!
}

"""
aggregate fields of "recipe.ingredient"
"""
type RecipeIngredientAggregateFields {
  avg: RecipeIngredientAvgFields
  count(columns: [RecipeIngredientSelectColumn!], distinct: Boolean): Int!
  max: RecipeIngredientMaxFields
  min: RecipeIngredientMinFields
  stddev: RecipeIngredientStddevFields
  stddevPop: RecipeIngredientStddev_popFields
  stddevSamp: RecipeIngredientStddev_sampFields
  sum: RecipeIngredientSumFields
  varPop: RecipeIngredientVar_popFields
  varSamp: RecipeIngredientVar_sampFields
  variance: RecipeIngredientVarianceFields
}

"""
order by aggregate values of table "recipe.ingredient"
"""
input RecipeIngredientAggregateOrderBy {
  avg: recipe_ingredient_avg_order_by
  count: OrderBy
  max: recipe_ingredient_max_order_by
  min: recipe_ingredient_min_order_by
  stddev: recipe_ingredient_stddev_order_by
  stddev_pop: recipe_ingredient_stddev_pop_order_by
  stddev_samp: recipe_ingredient_stddev_samp_order_by
  sum: recipe_ingredient_sum_order_by
  var_pop: recipe_ingredient_var_pop_order_by
  var_samp: recipe_ingredient_var_samp_order_by
  variance: recipe_ingredient_variance_order_by
}

"""
input type for inserting array relation for remote table "recipe.ingredient"
"""
input RecipeIngredientArrRelInsertInput {
  data: [RecipeIngredientInsertInput!]!

  """upsert condition"""
  onConflict: RecipeIngredientOnConflict
}

"""aggregate avg on columns"""
type RecipeIngredientAvgFields {
  amount: Float
  seq: Float
}

"""
Boolean expression to filter rows from the table "recipe.ingredient". All fields are combined with a logical 'AND'.
"""
input RecipeIngredientBoolExp {
  _and: [RecipeIngredientBoolExp!]
  _not: RecipeIngredientBoolExp
  _or: [RecipeIngredientBoolExp!]
  amount: IntComparisonExp
  comment: StringComparisonExp
  id: UuidComparisonExp
  ingredient: IngredientIngredientBoolExp
  ingredientId: UuidComparisonExp
  name: StringComparisonExp
  recipe: RecipeRecipeBoolExp
  recipeId: UuidComparisonExp
  seq: IntComparisonExp
  text: StringComparisonExp
  unit: FoodUnitBoolExp
  unitId: UuidComparisonExp
  videoTimestampId: UuidComparisonExp
  video_timestamp: RecipeVideoTimestampBoolExp
}

"""
A Relay connection object on "recipe.ingredient"
"""
type RecipeIngredientConnection {
  edges: [RecipeIngredientEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "recipe.ingredient"
"""
enum RecipeIngredientConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  ingredient_pkey
}

type RecipeIngredientEdge {
  cursor: String!
  node: RecipeIngredient!
}

"""
input type for incrementing numeric columns in table "recipe.ingredient"
"""
input RecipeIngredientIncInput {
  amount: Int
  seq: Int
}

"""
input type for inserting data into table "recipe.ingredient"
"""
input RecipeIngredientInsertInput {
  amount: Int
  comment: String
  id: uuid
  ingredient: IngredientIngredientObjRelInsertInput
  ingredientId: uuid
  name: String
  recipe: RecipeRecipeObjRelInsertInput
  recipeId: uuid
  seq: Int
  text: String
  unit: FoodUnitObjRelInsertInput
  unitId: uuid
  videoTimestampId: uuid
  video_timestamp: RecipeVideoTimestampObjRelInsertInput
}

"""aggregate max on columns"""
type RecipeIngredientMaxFields {
  amount: Int
  comment: String
  id: uuid
  ingredientId: uuid
  name: String
  recipeId: uuid
  seq: Int
  text: String
  unitId: uuid
  videoTimestampId: uuid
}

"""aggregate min on columns"""
type RecipeIngredientMinFields {
  amount: Int
  comment: String
  id: uuid
  ingredientId: uuid
  name: String
  recipeId: uuid
  seq: Int
  text: String
  unitId: uuid
  videoTimestampId: uuid
}

"""
response of any mutation on the table "recipe.ingredient"
"""
type RecipeIngredientMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [RecipeIngredient!]!
}

"""
on_conflict condition type for table "recipe.ingredient"
"""
input RecipeIngredientOnConflict {
  constraint: RecipeIngredientConstraint!
  update_columns: [RecipeIngredientUpdateColumn!]! = []
  where: RecipeIngredientBoolExp
}

"""Ordering options when selecting data from "recipe.ingredient"."""
input RecipeIngredientOrderBy {
  amount: OrderBy
  comment: OrderBy
  id: OrderBy
  ingredient: IngredientIngredientOrderBy
  ingredientId: OrderBy
  name: OrderBy
  recipe: RecipeRecipeOrderBy
  recipeId: OrderBy
  seq: OrderBy
  text: OrderBy
  unit: FoodUnitOrderBy
  unitId: OrderBy
  videoTimestampId: OrderBy
  video_timestamp: RecipeVideoTimestampOrderBy
}

"""primary key columns input for table: recipe.ingredient"""
input RecipeIngredientPkColumnsInput {
  id: uuid!
}

"""
select columns of table "recipe.ingredient"
"""
enum RecipeIngredientSelectColumn {
  """column name"""
  amount

  """column name"""
  comment

  """column name"""
  id

  """column name"""
  ingredientId

  """column name"""
  name

  """column name"""
  recipeId

  """column name"""
  seq

  """column name"""
  text

  """column name"""
  unitId

  """column name"""
  videoTimestampId
}

"""
input type for updating data in table "recipe.ingredient"
"""
input RecipeIngredientSetInput {
  amount: Int
  comment: String
  id: uuid
  ingredientId: uuid
  name: String
  recipeId: uuid
  seq: Int
  text: String
  unitId: uuid
  videoTimestampId: uuid
}

"""aggregate stddev on columns"""
type RecipeIngredientStddevFields {
  amount: Float
  seq: Float
}

"""aggregate stddev_pop on columns"""
type RecipeIngredientStddev_popFields {
  amount: Float
  seq: Float
}

"""aggregate stddev_samp on columns"""
type RecipeIngredientStddev_sampFields {
  amount: Float
  seq: Float
}

"""aggregate sum on columns"""
type RecipeIngredientSumFields {
  amount: Int
  seq: Int
}

"""
update columns of table "recipe.ingredient"
"""
enum RecipeIngredientUpdateColumn {
  """column name"""
  amount

  """column name"""
  comment

  """column name"""
  id

  """column name"""
  ingredientId

  """column name"""
  name

  """column name"""
  recipeId

  """column name"""
  seq

  """column name"""
  text

  """column name"""
  unitId

  """column name"""
  videoTimestampId
}

input RecipeIngredientUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: RecipeIngredientIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: RecipeIngredientSetInput
  where: RecipeIngredientBoolExp!
}

"""aggregate var_pop on columns"""
type RecipeIngredientVar_popFields {
  amount: Float
  seq: Float
}

"""aggregate var_samp on columns"""
type RecipeIngredientVar_sampFields {
  amount: Float
  seq: Float
}

"""aggregate variance on columns"""
type RecipeIngredientVarianceFields {
  amount: Float
  seq: Float
}

"""
columns and relationships of "recipe.list"
"""
type RecipeList implements Node {
  id: ID!

  """An aggregate relationship"""
  listItemsAggregate(
    """distinct select on columns"""
    distinctOn: [RecipeListItemSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeListItemOrderBy!]

    """filter the rows returned"""
    where: RecipeListItemBoolExp
  ): RecipeListItemAggregate!

  """An array relationship"""
  list_items(
    """distinct select on columns"""
    distinctOn: [RecipeListItemSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeListItemOrderBy!]

    """filter the rows returned"""
    where: RecipeListItemBoolExp
  ): [RecipeListItem!]!

  """An array relationship connection"""
  list_items_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeListItemSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeListItemOrderBy!]

    """filter the rows returned"""
    where: RecipeListItemBoolExp
  ): RecipeListItemConnection!
  name: String
  userId: uuid
}

"""
Boolean expression to filter rows from the table "recipe.list". All fields are combined with a logical 'AND'.
"""
input RecipeListBoolExp {
  _and: [RecipeListBoolExp!]
  _not: RecipeListBoolExp
  _or: [RecipeListBoolExp!]
  id: UuidComparisonExp
  list_items: RecipeListItemBoolExp
  list_items_aggregate: recipe_list_item_aggregate_bool_exp
  name: StringComparisonExp
  userId: UuidComparisonExp
}

"""
A Relay connection object on "recipe.list"
"""
type RecipeListConnection {
  edges: [RecipeListEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "recipe.list"
"""
enum RecipeListConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  list_pkey
}

type RecipeListEdge {
  cursor: String!
  node: RecipeList!
}

"""
input type for inserting data into table "recipe.list"
"""
input RecipeListInsertInput {
  id: uuid
  list_items: RecipeListItemArrRelInsertInput
  name: String
  userId: uuid
}

"""
columns and relationships of "recipe.list_item"
"""
type RecipeListItem implements Node {
  id: ID!

  """An object relationship"""
  list: RecipeList
  listId: uuid

  """An object relationship"""
  recipe: RecipeRecipe
  recipeId: uuid
  seq: Int!
}

"""
aggregated selection of "recipe.list_item"
"""
type RecipeListItemAggregate {
  aggregate: RecipeListItemAggregateFields
  nodes: [RecipeListItem!]!
}

"""
aggregate fields of "recipe.list_item"
"""
type RecipeListItemAggregateFields {
  avg: RecipeListItemAvgFields
  count(columns: [RecipeListItemSelectColumn!], distinct: Boolean): Int!
  max: RecipeListItemMaxFields
  min: RecipeListItemMinFields
  stddev: RecipeListItemStddevFields
  stddevPop: RecipeListItemStddev_popFields
  stddevSamp: RecipeListItemStddev_sampFields
  sum: RecipeListItemSumFields
  varPop: RecipeListItemVar_popFields
  varSamp: RecipeListItemVar_sampFields
  variance: RecipeListItemVarianceFields
}

"""
order by aggregate values of table "recipe.list_item"
"""
input RecipeListItemAggregateOrderBy {
  avg: recipe_list_item_avg_order_by
  count: OrderBy
  max: recipe_list_item_max_order_by
  min: recipe_list_item_min_order_by
  stddev: recipe_list_item_stddev_order_by
  stddev_pop: recipe_list_item_stddev_pop_order_by
  stddev_samp: recipe_list_item_stddev_samp_order_by
  sum: recipe_list_item_sum_order_by
  var_pop: recipe_list_item_var_pop_order_by
  var_samp: recipe_list_item_var_samp_order_by
  variance: recipe_list_item_variance_order_by
}

"""
input type for inserting array relation for remote table "recipe.list_item"
"""
input RecipeListItemArrRelInsertInput {
  data: [RecipeListItemInsertInput!]!

  """upsert condition"""
  onConflict: RecipeListItemOnConflict
}

"""aggregate avg on columns"""
type RecipeListItemAvgFields {
  seq: Float
}

"""
Boolean expression to filter rows from the table "recipe.list_item". All fields are combined with a logical 'AND'.
"""
input RecipeListItemBoolExp {
  _and: [RecipeListItemBoolExp!]
  _not: RecipeListItemBoolExp
  _or: [RecipeListItemBoolExp!]
  id: UuidComparisonExp
  list: RecipeListBoolExp
  listId: UuidComparisonExp
  recipe: RecipeRecipeBoolExp
  recipeId: UuidComparisonExp
  seq: IntComparisonExp
}

"""
A Relay connection object on "recipe.list_item"
"""
type RecipeListItemConnection {
  edges: [RecipeListItemEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "recipe.list_item"
"""
enum RecipeListItemConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  list_item_pkey
}

type RecipeListItemEdge {
  cursor: String!
  node: RecipeListItem!
}

"""
input type for incrementing numeric columns in table "recipe.list_item"
"""
input RecipeListItemIncInput {
  seq: Int
}

"""
input type for inserting data into table "recipe.list_item"
"""
input RecipeListItemInsertInput {
  id: uuid
  list: RecipeListObjRelInsertInput
  listId: uuid
  recipe: RecipeRecipeObjRelInsertInput
  recipeId: uuid
  seq: Int
}

"""aggregate max on columns"""
type RecipeListItemMaxFields {
  id: uuid
  listId: uuid
  recipeId: uuid
  seq: Int
}

"""aggregate min on columns"""
type RecipeListItemMinFields {
  id: uuid
  listId: uuid
  recipeId: uuid
  seq: Int
}

"""
response of any mutation on the table "recipe.list_item"
"""
type RecipeListItemMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [RecipeListItem!]!
}

"""
on_conflict condition type for table "recipe.list_item"
"""
input RecipeListItemOnConflict {
  constraint: RecipeListItemConstraint!
  update_columns: [RecipeListItemUpdateColumn!]! = []
  where: RecipeListItemBoolExp
}

"""Ordering options when selecting data from "recipe.list_item"."""
input RecipeListItemOrderBy {
  id: OrderBy
  list: RecipeListOrderBy
  listId: OrderBy
  recipe: RecipeRecipeOrderBy
  recipeId: OrderBy
  seq: OrderBy
}

"""primary key columns input for table: recipe.list_item"""
input RecipeListItemPkColumnsInput {
  id: uuid!
}

"""
select columns of table "recipe.list_item"
"""
enum RecipeListItemSelectColumn {
  """column name"""
  id

  """column name"""
  listId

  """column name"""
  recipeId

  """column name"""
  seq
}

"""
input type for updating data in table "recipe.list_item"
"""
input RecipeListItemSetInput {
  id: uuid
  listId: uuid
  recipeId: uuid
  seq: Int
}

"""aggregate stddev on columns"""
type RecipeListItemStddevFields {
  seq: Float
}

"""aggregate stddev_pop on columns"""
type RecipeListItemStddev_popFields {
  seq: Float
}

"""aggregate stddev_samp on columns"""
type RecipeListItemStddev_sampFields {
  seq: Float
}

"""aggregate sum on columns"""
type RecipeListItemSumFields {
  seq: Int
}

"""
update columns of table "recipe.list_item"
"""
enum RecipeListItemUpdateColumn {
  """column name"""
  id

  """column name"""
  listId

  """column name"""
  recipeId

  """column name"""
  seq
}

input RecipeListItemUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: RecipeListItemIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: RecipeListItemSetInput
  where: RecipeListItemBoolExp!
}

"""aggregate var_pop on columns"""
type RecipeListItemVar_popFields {
  seq: Float
}

"""aggregate var_samp on columns"""
type RecipeListItemVar_sampFields {
  seq: Float
}

"""aggregate variance on columns"""
type RecipeListItemVarianceFields {
  seq: Float
}

"""
response of any mutation on the table "recipe.list"
"""
type RecipeListMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [RecipeList!]!
}

"""
input type for inserting object relation for remote table "recipe.list"
"""
input RecipeListObjRelInsertInput {
  data: RecipeListInsertInput!

  """upsert condition"""
  onConflict: RecipeListOnConflict
}

"""
on_conflict condition type for table "recipe.list"
"""
input RecipeListOnConflict {
  constraint: RecipeListConstraint!
  update_columns: [RecipeListUpdateColumn!]! = []
  where: RecipeListBoolExp
}

"""Ordering options when selecting data from "recipe.list"."""
input RecipeListOrderBy {
  id: OrderBy
  list_itemsAggregate: RecipeListItemAggregateOrderBy
  name: OrderBy
  userId: OrderBy
}

"""primary key columns input for table: recipe.list"""
input RecipeListPkColumnsInput {
  id: uuid!
}

"""
select columns of table "recipe.list"
"""
enum RecipeListSelectColumn {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  userId
}

"""
input type for updating data in table "recipe.list"
"""
input RecipeListSetInput {
  id: uuid
  name: String
  userId: uuid
}

"""
update columns of table "recipe.list"
"""
enum RecipeListUpdateColumn {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  userId
}

input RecipeListUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: RecipeListSetInput
  where: RecipeListBoolExp!
}

"""
columns and relationships of "recipe.recipe"
"""
type RecipeRecipe implements Node {
  createdAt: timestamp

  """User who created the recipe."""
  creatorId: uuid!

  """An array relationship"""
  directions(
    """distinct select on columns"""
    distinctOn: [RecipeDirectionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionBoolExp
  ): [RecipeDirection!]!

  """An aggregate relationship"""
  directionsAggregate(
    """distinct select on columns"""
    distinctOn: [RecipeDirectionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionBoolExp
  ): RecipeDirectionAggregate!

  """An array relationship connection"""
  directions_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeDirectionSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionBoolExp
  ): RecipeDirectionConnection!

  """An array relationship"""
  equipment(
    """distinct select on columns"""
    distinctOn: [RecipeEquipmentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeEquipmentOrderBy!]

    """filter the rows returned"""
    where: RecipeEquipmentBoolExp
  ): [RecipeEquipment!]!

  """An aggregate relationship"""
  equipmentAggregate(
    """distinct select on columns"""
    distinctOn: [RecipeEquipmentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeEquipmentOrderBy!]

    """filter the rows returned"""
    where: RecipeEquipmentBoolExp
  ): RecipeEquipmentAggregate!

  """An array relationship connection"""
  equipment_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeEquipmentSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeEquipmentOrderBy!]

    """filter the rows returned"""
    where: RecipeEquipmentBoolExp
  ): RecipeEquipmentConnection!
  extractionMetadata(
    """JSON select path"""
    path: String
  ): jsonb
  hidden: Boolean
  id: ID!
  imageUrl: String

  """An array relationship"""
  ingredients(
    """distinct select on columns"""
    distinctOn: [IngredientIngredientSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IngredientIngredientOrderBy!]

    """filter the rows returned"""
    where: IngredientIngredientBoolExp
  ): [IngredientIngredient!]!

  """An aggregate relationship"""
  ingredientsAggregate(
    """distinct select on columns"""
    distinctOn: [IngredientIngredientSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IngredientIngredientOrderBy!]

    """filter the rows returned"""
    where: IngredientIngredientBoolExp
  ): IngredientIngredientAggregate!

  """An array relationship connection"""
  ingredients_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [IngredientIngredientSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [IngredientIngredientOrderBy!]

    """filter the rows returned"""
    where: IngredientIngredientBoolExp
  ): IngredientIngredientConnection!
  name: String!

  """An object relationship"""
  parent: RecipeRecipe
  parentId: uuid
  slug: String!
  sourcePath: String
  sourceProviderId: uuid

  """An object relationship"""
  source_provider: RecipeSourceProvider
  updatedAt: timestamp
  videoUrl: String
}

"""
aggregated selection of "recipe.recipe"
"""
type RecipeRecipeAggregate {
  aggregate: RecipeRecipeAggregateFields
  nodes: [RecipeRecipe!]!
}

"""
aggregate fields of "recipe.recipe"
"""
type RecipeRecipeAggregateFields {
  count(columns: [RecipeRecipeSelectColumn!], distinct: Boolean): Int!
  max: RecipeRecipeMaxFields
  min: RecipeRecipeMinFields
}

"""
order by aggregate values of table "recipe.recipe"
"""
input RecipeRecipeAggregateOrderBy {
  count: OrderBy
  max: recipe_recipe_max_order_by
  min: recipe_recipe_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input RecipeRecipeAppendInput {
  extractionMetadata: jsonb
}

"""
input type for inserting array relation for remote table "recipe.recipe"
"""
input RecipeRecipeArrRelInsertInput {
  data: [RecipeRecipeInsertInput!]!

  """upsert condition"""
  onConflict: RecipeRecipeOnConflict
}

"""
Boolean expression to filter rows from the table "recipe.recipe". All fields are combined with a logical 'AND'.
"""
input RecipeRecipeBoolExp {
  _and: [RecipeRecipeBoolExp!]
  _not: RecipeRecipeBoolExp
  _or: [RecipeRecipeBoolExp!]
  createdAt: TimestampComparisonExp
  creatorId: UuidComparisonExp
  directions: RecipeDirectionBoolExp
  directions_aggregate: recipe_direction_aggregate_bool_exp
  equipment: RecipeEquipmentBoolExp
  equipment_aggregate: recipe_equipment_aggregate_bool_exp
  extractionMetadata: JsonbComparisonExp
  hidden: BooleanComparisonExp
  id: UuidComparisonExp
  imageUrl: StringComparisonExp
  ingredients: IngredientIngredientBoolExp
  ingredients_aggregate: ingredient_ingredient_aggregate_bool_exp
  name: StringComparisonExp
  parent: RecipeRecipeBoolExp
  parentId: UuidComparisonExp
  slug: StringComparisonExp
  sourcePath: StringComparisonExp
  sourceProviderId: UuidComparisonExp
  source_provider: RecipeSourceProviderBoolExp
  updatedAt: TimestampComparisonExp
  videoUrl: StringComparisonExp
}

"""
A Relay connection object on "recipe.recipe"
"""
type RecipeRecipeConnection {
  edges: [RecipeRecipeEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "recipe.recipe"
"""
enum RecipeRecipeConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  recipe_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input RecipeRecipeDeleteAtPathInput {
  extractionMetadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input RecipeRecipeDeleteElemInput {
  extractionMetadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input RecipeRecipeDeleteKeyInput {
  extractionMetadata: String
}

type RecipeRecipeEdge {
  cursor: String!
  node: RecipeRecipe!
}

"""
input type for inserting data into table "recipe.recipe"
"""
input RecipeRecipeInsertInput {
  createdAt: timestamp

  """User who created the recipe."""
  creatorId: uuid
  directions: RecipeDirectionArrRelInsertInput
  equipment: RecipeEquipmentArrRelInsertInput
  extractionMetadata: jsonb
  hidden: Boolean
  id: uuid
  imageUrl: String
  ingredients: IngredientIngredientArrRelInsertInput
  name: String
  parent: RecipeRecipeObjRelInsertInput
  parentId: uuid
  slug: String
  sourcePath: String
  sourceProviderId: uuid
  source_provider: RecipeSourceProviderObjRelInsertInput
  updatedAt: timestamp
  videoUrl: String
}

"""aggregate max on columns"""
type RecipeRecipeMaxFields {
  createdAt: timestamp

  """User who created the recipe."""
  creatorId: uuid
  id: uuid
  imageUrl: String
  name: String
  parentId: uuid
  slug: String
  sourcePath: String
  sourceProviderId: uuid
  updatedAt: timestamp
  videoUrl: String
}

"""aggregate min on columns"""
type RecipeRecipeMinFields {
  createdAt: timestamp

  """User who created the recipe."""
  creatorId: uuid
  id: uuid
  imageUrl: String
  name: String
  parentId: uuid
  slug: String
  sourcePath: String
  sourceProviderId: uuid
  updatedAt: timestamp
  videoUrl: String
}

"""
response of any mutation on the table "recipe.recipe"
"""
type RecipeRecipeMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [RecipeRecipe!]!
}

"""
input type for inserting object relation for remote table "recipe.recipe"
"""
input RecipeRecipeObjRelInsertInput {
  data: RecipeRecipeInsertInput!

  """upsert condition"""
  onConflict: RecipeRecipeOnConflict
}

"""
on_conflict condition type for table "recipe.recipe"
"""
input RecipeRecipeOnConflict {
  constraint: RecipeRecipeConstraint!
  update_columns: [RecipeRecipeUpdateColumn!]! = []
  where: RecipeRecipeBoolExp
}

"""Ordering options when selecting data from "recipe.recipe"."""
input RecipeRecipeOrderBy {
  createdAt: OrderBy
  creatorId: OrderBy
  directionsAggregate: RecipeDirectionAggregateOrderBy
  equipmentAggregate: RecipeEquipmentAggregateOrderBy
  extractionMetadata: OrderBy
  hidden: OrderBy
  id: OrderBy
  imageUrl: OrderBy
  ingredientsAggregate: IngredientIngredientAggregateOrderBy
  name: OrderBy
  parent: RecipeRecipeOrderBy
  parentId: OrderBy
  slug: OrderBy
  sourcePath: OrderBy
  sourceProviderId: OrderBy
  source_provider: RecipeSourceProviderOrderBy
  updatedAt: OrderBy
  videoUrl: OrderBy
}

"""primary key columns input for table: recipe.recipe"""
input RecipeRecipePkColumnsInput {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input RecipeRecipePrependInput {
  extractionMetadata: jsonb
}

"""
select columns of table "recipe.recipe"
"""
enum RecipeRecipeSelectColumn {
  """column name"""
  createdAt

  """column name"""
  creatorId

  """column name"""
  extractionMetadata

  """column name"""
  hidden

  """column name"""
  id

  """column name"""
  imageUrl

  """column name"""
  name

  """column name"""
  parentId

  """column name"""
  slug

  """column name"""
  sourcePath

  """column name"""
  sourceProviderId

  """column name"""
  updatedAt

  """column name"""
  videoUrl
}

"""
input type for updating data in table "recipe.recipe"
"""
input RecipeRecipeSetInput {
  createdAt: timestamp

  """User who created the recipe."""
  creatorId: uuid
  extractionMetadata: jsonb
  hidden: Boolean
  id: uuid
  imageUrl: String
  name: String
  parentId: uuid
  slug: String
  sourcePath: String
  sourceProviderId: uuid
  updatedAt: timestamp
  videoUrl: String
}

"""
update columns of table "recipe.recipe"
"""
enum RecipeRecipeUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  creatorId

  """column name"""
  extractionMetadata

  """column name"""
  hidden

  """column name"""
  id

  """column name"""
  imageUrl

  """column name"""
  name

  """column name"""
  parentId

  """column name"""
  slug

  """column name"""
  sourcePath

  """column name"""
  sourceProviderId

  """column name"""
  updatedAt

  """column name"""
  videoUrl
}

input RecipeRecipeUpdates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: RecipeRecipeAppendInput

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _deleteAtPath: RecipeRecipeDeleteAtPathInput

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _deleteElem: RecipeRecipeDeleteElemInput

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _deleteKey: RecipeRecipeDeleteKeyInput

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: RecipeRecipePrependInput

  """sets the columns of the filtered rows to the given values"""
  _set: RecipeRecipeSetInput
  where: RecipeRecipeBoolExp!
}

"""
columns and relationships of "recipe.source_provider"
"""
type RecipeSourceProvider implements Node {
  description: String
  id: ID!
  name: String

  """An array relationship"""
  recipes(
    """distinct select on columns"""
    distinctOn: [RecipeRecipeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeRecipeOrderBy!]

    """filter the rows returned"""
    where: RecipeRecipeBoolExp
  ): [RecipeRecipe!]!

  """An aggregate relationship"""
  recipesAggregate(
    """distinct select on columns"""
    distinctOn: [RecipeRecipeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeRecipeOrderBy!]

    """filter the rows returned"""
    where: RecipeRecipeBoolExp
  ): RecipeRecipeAggregate!

  """An array relationship connection"""
  recipes_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeRecipeSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeRecipeOrderBy!]

    """filter the rows returned"""
    where: RecipeRecipeBoolExp
  ): RecipeRecipeConnection!
  url: String
}

"""
Boolean expression to filter rows from the table "recipe.source_provider". All fields are combined with a logical 'AND'.
"""
input RecipeSourceProviderBoolExp {
  _and: [RecipeSourceProviderBoolExp!]
  _not: RecipeSourceProviderBoolExp
  _or: [RecipeSourceProviderBoolExp!]
  description: StringComparisonExp
  id: UuidComparisonExp
  name: StringComparisonExp
  recipes: RecipeRecipeBoolExp
  recipes_aggregate: recipe_recipe_aggregate_bool_exp
  url: StringComparisonExp
}

"""
A Relay connection object on "recipe.source_provider"
"""
type RecipeSourceProviderConnection {
  edges: [RecipeSourceProviderEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "recipe.source_provider"
"""
enum RecipeSourceProviderConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  source_provider_pkey
}

type RecipeSourceProviderEdge {
  cursor: String!
  node: RecipeSourceProvider!
}

"""
input type for inserting data into table "recipe.source_provider"
"""
input RecipeSourceProviderInsertInput {
  description: String
  id: uuid
  name: String
  recipes: RecipeRecipeArrRelInsertInput
  url: String
}

"""
response of any mutation on the table "recipe.source_provider"
"""
type RecipeSourceProviderMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [RecipeSourceProvider!]!
}

"""
input type for inserting object relation for remote table "recipe.source_provider"
"""
input RecipeSourceProviderObjRelInsertInput {
  data: RecipeSourceProviderInsertInput!

  """upsert condition"""
  onConflict: RecipeSourceProviderOnConflict
}

"""
on_conflict condition type for table "recipe.source_provider"
"""
input RecipeSourceProviderOnConflict {
  constraint: RecipeSourceProviderConstraint!
  update_columns: [RecipeSourceProviderUpdateColumn!]! = []
  where: RecipeSourceProviderBoolExp
}

"""Ordering options when selecting data from "recipe.source_provider"."""
input RecipeSourceProviderOrderBy {
  description: OrderBy
  id: OrderBy
  name: OrderBy
  recipesAggregate: RecipeRecipeAggregateOrderBy
  url: OrderBy
}

"""primary key columns input for table: recipe.source_provider"""
input RecipeSourceProviderPkColumnsInput {
  id: uuid!
}

"""
select columns of table "recipe.source_provider"
"""
enum RecipeSourceProviderSelectColumn {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  url
}

"""
input type for updating data in table "recipe.source_provider"
"""
input RecipeSourceProviderSetInput {
  description: String
  id: uuid
  name: String
  url: String
}

"""
update columns of table "recipe.source_provider"
"""
enum RecipeSourceProviderUpdateColumn {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  url
}

input RecipeSourceProviderUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: RecipeSourceProviderSetInput
  where: RecipeSourceProviderBoolExp!
}

"""
columns and relationships of "recipe.video_timestamp"
"""
type RecipeVideoTimestamp implements Node {
  """An array relationship"""
  directions(
    """distinct select on columns"""
    distinctOn: [RecipeDirectionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionBoolExp
  ): [RecipeDirection!]!

  """An aggregate relationship"""
  directionsAggregate(
    """distinct select on columns"""
    distinctOn: [RecipeDirectionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionBoolExp
  ): RecipeDirectionAggregate!

  """An array relationship connection"""
  directions_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeDirectionSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionBoolExp
  ): RecipeDirectionConnection!
  end: Int
  id: ID!

  """An array relationship"""
  ingredients(
    """distinct select on columns"""
    distinctOn: [RecipeIngredientSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeIngredientOrderBy!]

    """filter the rows returned"""
    where: RecipeIngredientBoolExp
  ): [RecipeIngredient!]!

  """An aggregate relationship"""
  ingredientsAggregate(
    """distinct select on columns"""
    distinctOn: [RecipeIngredientSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeIngredientOrderBy!]

    """filter the rows returned"""
    where: RecipeIngredientBoolExp
  ): RecipeIngredientAggregate!

  """An array relationship connection"""
  ingredients_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeIngredientSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeIngredientOrderBy!]

    """filter the rows returned"""
    where: RecipeIngredientBoolExp
  ): RecipeIngredientConnection!
  start: Int
}

"""
Boolean expression to filter rows from the table "recipe.video_timestamp". All fields are combined with a logical 'AND'.
"""
input RecipeVideoTimestampBoolExp {
  _and: [RecipeVideoTimestampBoolExp!]
  _not: RecipeVideoTimestampBoolExp
  _or: [RecipeVideoTimestampBoolExp!]
  directions: RecipeDirectionBoolExp
  directions_aggregate: recipe_direction_aggregate_bool_exp
  end: IntComparisonExp
  id: UuidComparisonExp
  ingredients: RecipeIngredientBoolExp
  ingredients_aggregate: recipe_ingredient_aggregate_bool_exp
  start: IntComparisonExp
}

"""
A Relay connection object on "recipe.video_timestamp"
"""
type RecipeVideoTimestampConnection {
  edges: [RecipeVideoTimestampEdge!]!
  pageInfo: PageInfo!
}

"""
unique or primary key constraints on table "recipe.video_timestamp"
"""
enum RecipeVideoTimestampConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  video_timestamp_pkey
}

type RecipeVideoTimestampEdge {
  cursor: String!
  node: RecipeVideoTimestamp!
}

"""
input type for incrementing numeric columns in table "recipe.video_timestamp"
"""
input RecipeVideoTimestampIncInput {
  end: Int
  start: Int
}

"""
input type for inserting data into table "recipe.video_timestamp"
"""
input RecipeVideoTimestampInsertInput {
  directions: RecipeDirectionArrRelInsertInput
  end: Int
  id: uuid
  ingredients: RecipeIngredientArrRelInsertInput
  start: Int
}

"""
response of any mutation on the table "recipe.video_timestamp"
"""
type RecipeVideoTimestampMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [RecipeVideoTimestamp!]!
}

"""
input type for inserting object relation for remote table "recipe.video_timestamp"
"""
input RecipeVideoTimestampObjRelInsertInput {
  data: RecipeVideoTimestampInsertInput!

  """upsert condition"""
  onConflict: RecipeVideoTimestampOnConflict
}

"""
on_conflict condition type for table "recipe.video_timestamp"
"""
input RecipeVideoTimestampOnConflict {
  constraint: RecipeVideoTimestampConstraint!
  update_columns: [RecipeVideoTimestampUpdateColumn!]! = []
  where: RecipeVideoTimestampBoolExp
}

"""Ordering options when selecting data from "recipe.video_timestamp"."""
input RecipeVideoTimestampOrderBy {
  directionsAggregate: RecipeDirectionAggregateOrderBy
  end: OrderBy
  id: OrderBy
  ingredientsAggregate: RecipeIngredientAggregateOrderBy
  start: OrderBy
}

"""primary key columns input for table: recipe.video_timestamp"""
input RecipeVideoTimestampPkColumnsInput {
  id: uuid!
}

"""
select columns of table "recipe.video_timestamp"
"""
enum RecipeVideoTimestampSelectColumn {
  """column name"""
  end

  """column name"""
  id

  """column name"""
  start
}

"""
input type for updating data in table "recipe.video_timestamp"
"""
input RecipeVideoTimestampSetInput {
  end: Int
  id: uuid
  start: Int
}

"""
update columns of table "recipe.video_timestamp"
"""
enum RecipeVideoTimestampUpdateColumn {
  """column name"""
  end

  """column name"""
  id

  """column name"""
  start
}

input RecipeVideoTimestampUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: RecipeVideoTimestampIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: RecipeVideoTimestampSetInput
  where: RecipeVideoTimestampBoolExp!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _isNull: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input TimestampComparisonExp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _isNull: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input UuidComparisonExp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _isNull: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

input equipment_config_aggregate_bool_exp {
  count: equipment_config_aggregate_bool_exp_count
}

input equipment_config_aggregate_bool_exp_count {
  arguments: [EquipmentConfigSelectColumn!]
  distinct: Boolean
  filter: EquipmentConfigBoolExp
  predicate: IntComparisonExp!
}

"""
order by max() on columns of table "equipment.config"
"""
input equipment_config_max_order_by {
  equipmentId: OrderBy
  id: OrderBy
}

"""
order by min() on columns of table "equipment.config"
"""
input equipment_config_min_order_by {
  equipmentId: OrderBy
  id: OrderBy
}

input ingredient_ingredient_aggregate_bool_exp {
  count: ingredient_ingredient_aggregate_bool_exp_count
}

input ingredient_ingredient_aggregate_bool_exp_count {
  arguments: [IngredientIngredientSelectColumn!]
  distinct: Boolean
  filter: IngredientIngredientBoolExp
  predicate: IntComparisonExp!
}

"""
order by max() on columns of table "ingredient.ingredient"
"""
input ingredient_ingredient_max_order_by {
  foodId: OrderBy
  id: OrderBy
  recipeId: OrderBy
  wikiUrl: OrderBy
}

"""
order by min() on columns of table "ingredient.ingredient"
"""
input ingredient_ingredient_min_order_by {
  foodId: OrderBy
  id: OrderBy
  recipeId: OrderBy
  wikiUrl: OrderBy
}

scalar jsonb

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "equipment.config"
  """
  deleteEquipmentConfig(
    """filter the rows which have to be deleted"""
    where: EquipmentConfigBoolExp!
  ): EquipmentConfigMutationResponse

  """
  delete single row from the table: "equipment.config"
  """
  deleteEquipmentConfigByPk(id: uuid!): EquipmentConfig

  """
  delete data from the table: "equipment.equipment"
  """
  deleteEquipmentEquipment(
    """filter the rows which have to be deleted"""
    where: EquipmentEquipmentBoolExp!
  ): EquipmentEquipmentMutationResponse

  """
  delete single row from the table: "equipment.equipment"
  """
  deleteEquipmentEquipmentByPk(id: uuid!): EquipmentEquipment

  """
  delete data from the table: "food.food"
  """
  deleteFoodFood(
    """filter the rows which have to be deleted"""
    where: FoodFoodBoolExp!
  ): FoodFoodMutationResponse

  """
  delete single row from the table: "food.food"
  """
  deleteFoodFoodByPk(id: uuid!): FoodFood

  """
  delete data from the table: "food.food_measurement"
  """
  deleteFoodFoodMeasurement(
    """filter the rows which have to be deleted"""
    where: FoodFoodMeasurementBoolExp!
  ): FoodFoodMeasurementMutationResponse

  """
  delete single row from the table: "food.food_measurement"
  """
  deleteFoodFoodMeasurementByPk(id: uuid!): FoodFoodMeasurement

  """
  delete data from the table: "food.measurement"
  """
  deleteFoodMeasurement(
    """filter the rows which have to be deleted"""
    where: FoodMeasurementBoolExp!
  ): FoodMeasurementMutationResponse

  """
  delete single row from the table: "food.measurement"
  """
  deleteFoodMeasurementByPk(id: uuid!): FoodMeasurement

  """
  delete data from the table: "food.unit"
  """
  deleteFoodUnit(
    """filter the rows which have to be deleted"""
    where: FoodUnitBoolExp!
  ): FoodUnitMutationResponse

  """
  delete single row from the table: "food.unit"
  """
  deleteFoodUnitByPk(id: uuid!): FoodUnit

  """
  delete data from the table: "ingredient.ingredient"
  """
  deleteIngredientIngredient(
    """filter the rows which have to be deleted"""
    where: IngredientIngredientBoolExp!
  ): IngredientIngredientMutationResponse

  """
  delete single row from the table: "ingredient.ingredient"
  """
  deleteIngredientIngredientByPk(id: uuid!): IngredientIngredient

  """
  delete data from the table: "ingredient.name"
  """
  deleteIngredientName(
    """filter the rows which have to be deleted"""
    where: IngredientNameBoolExp!
  ): IngredientNameMutationResponse

  """
  delete single row from the table: "ingredient.name"
  """
  deleteIngredientNameByPk(id: uuid!): IngredientName

  """
  delete data from the table: "recipe.direction"
  """
  deleteRecipeDirection(
    """filter the rows which have to be deleted"""
    where: RecipeDirectionBoolExp!
  ): RecipeDirectionMutationResponse

  """
  delete single row from the table: "recipe.direction"
  """
  deleteRecipeDirectionByPk(id: uuid!): RecipeDirection

  """
  delete data from the table: "recipe.direction_equipment"
  """
  deleteRecipeDirectionEquipment(
    """filter the rows which have to be deleted"""
    where: RecipeDirectionEquipmentBoolExp!
  ): RecipeDirectionEquipmentMutationResponse

  """
  delete single row from the table: "recipe.direction_equipment"
  """
  deleteRecipeDirectionEquipmentByPk(id: uuid!): RecipeDirectionEquipment

  """
  delete data from the table: "recipe.direction_ingredient"
  """
  deleteRecipeDirectionIngredient(
    """filter the rows which have to be deleted"""
    where: RecipeDirectionIngredientBoolExp!
  ): RecipeDirectionIngredientMutationResponse

  """
  delete single row from the table: "recipe.direction_ingredient"
  """
  deleteRecipeDirectionIngredientByPk(id: uuid!): RecipeDirectionIngredient

  """
  delete data from the table: "recipe.equipment"
  """
  deleteRecipeEquipment(
    """filter the rows which have to be deleted"""
    where: RecipeEquipmentBoolExp!
  ): RecipeEquipmentMutationResponse

  """
  delete single row from the table: "recipe.equipment"
  """
  deleteRecipeEquipmentByPk(id: uuid!): RecipeEquipment

  """
  delete data from the table: "recipe.ingredient"
  """
  deleteRecipeIngredient(
    """filter the rows which have to be deleted"""
    where: RecipeIngredientBoolExp!
  ): RecipeIngredientMutationResponse

  """
  delete single row from the table: "recipe.ingredient"
  """
  deleteRecipeIngredientByPk(id: uuid!): RecipeIngredient

  """
  delete data from the table: "recipe.list"
  """
  deleteRecipeList(
    """filter the rows which have to be deleted"""
    where: RecipeListBoolExp!
  ): RecipeListMutationResponse

  """
  delete single row from the table: "recipe.list"
  """
  deleteRecipeListByPk(id: uuid!): RecipeList

  """
  delete data from the table: "recipe.list_item"
  """
  deleteRecipeListItem(
    """filter the rows which have to be deleted"""
    where: RecipeListItemBoolExp!
  ): RecipeListItemMutationResponse

  """
  delete single row from the table: "recipe.list_item"
  """
  deleteRecipeListItemByPk(id: uuid!): RecipeListItem

  """
  delete data from the table: "recipe.recipe"
  """
  deleteRecipeRecipe(
    """filter the rows which have to be deleted"""
    where: RecipeRecipeBoolExp!
  ): RecipeRecipeMutationResponse

  """
  delete single row from the table: "recipe.recipe"
  """
  deleteRecipeRecipeByPk(id: uuid!): RecipeRecipe

  """
  delete data from the table: "recipe.source_provider"
  """
  deleteRecipeSourceProvider(
    """filter the rows which have to be deleted"""
    where: RecipeSourceProviderBoolExp!
  ): RecipeSourceProviderMutationResponse

  """
  delete single row from the table: "recipe.source_provider"
  """
  deleteRecipeSourceProviderByPk(id: uuid!): RecipeSourceProvider

  """
  delete data from the table: "recipe.video_timestamp"
  """
  deleteRecipeVideoTimestamp(
    """filter the rows which have to be deleted"""
    where: RecipeVideoTimestampBoolExp!
  ): RecipeVideoTimestampMutationResponse

  """
  delete single row from the table: "recipe.video_timestamp"
  """
  deleteRecipeVideoTimestampByPk(id: uuid!): RecipeVideoTimestamp

  """
  insert data into the table: "equipment.config"
  """
  insertEquipmentConfig(
    """the rows to be inserted"""
    objects: [EquipmentConfigInsertInput!]!

    """upsert condition"""
    onConflict: EquipmentConfigOnConflict
  ): EquipmentConfigMutationResponse

  """
  insert a single row into the table: "equipment.config"
  """
  insertEquipmentConfigOne(
    """the row to be inserted"""
    object: EquipmentConfigInsertInput!

    """upsert condition"""
    onConflict: EquipmentConfigOnConflict
  ): EquipmentConfig

  """
  insert data into the table: "equipment.equipment"
  """
  insertEquipmentEquipment(
    """the rows to be inserted"""
    objects: [EquipmentEquipmentInsertInput!]!

    """upsert condition"""
    onConflict: EquipmentEquipmentOnConflict
  ): EquipmentEquipmentMutationResponse

  """
  insert a single row into the table: "equipment.equipment"
  """
  insertEquipmentEquipmentOne(
    """the row to be inserted"""
    object: EquipmentEquipmentInsertInput!

    """upsert condition"""
    onConflict: EquipmentEquipmentOnConflict
  ): EquipmentEquipment

  """
  insert data into the table: "food.food"
  """
  insertFoodFood(
    """the rows to be inserted"""
    objects: [FoodFoodInsertInput!]!

    """upsert condition"""
    onConflict: FoodFoodOnConflict
  ): FoodFoodMutationResponse

  """
  insert data into the table: "food.food_measurement"
  """
  insertFoodFoodMeasurement(
    """the rows to be inserted"""
    objects: [FoodFoodMeasurementInsertInput!]!

    """upsert condition"""
    onConflict: FoodFoodMeasurementOnConflict
  ): FoodFoodMeasurementMutationResponse

  """
  insert a single row into the table: "food.food_measurement"
  """
  insertFoodFoodMeasurementOne(
    """the row to be inserted"""
    object: FoodFoodMeasurementInsertInput!

    """upsert condition"""
    onConflict: FoodFoodMeasurementOnConflict
  ): FoodFoodMeasurement

  """
  insert a single row into the table: "food.food"
  """
  insertFoodFoodOne(
    """the row to be inserted"""
    object: FoodFoodInsertInput!

    """upsert condition"""
    onConflict: FoodFoodOnConflict
  ): FoodFood

  """
  insert data into the table: "food.measurement"
  """
  insertFoodMeasurement(
    """the rows to be inserted"""
    objects: [FoodMeasurementInsertInput!]!

    """upsert condition"""
    onConflict: FoodMeasurementOnConflict
  ): FoodMeasurementMutationResponse

  """
  insert a single row into the table: "food.measurement"
  """
  insertFoodMeasurementOne(
    """the row to be inserted"""
    object: FoodMeasurementInsertInput!

    """upsert condition"""
    onConflict: FoodMeasurementOnConflict
  ): FoodMeasurement

  """
  insert data into the table: "food.unit"
  """
  insertFoodUnit(
    """the rows to be inserted"""
    objects: [FoodUnitInsertInput!]!

    """upsert condition"""
    onConflict: FoodUnitOnConflict
  ): FoodUnitMutationResponse

  """
  insert a single row into the table: "food.unit"
  """
  insertFoodUnitOne(
    """the row to be inserted"""
    object: FoodUnitInsertInput!

    """upsert condition"""
    onConflict: FoodUnitOnConflict
  ): FoodUnit

  """
  insert data into the table: "ingredient.ingredient"
  """
  insertIngredientIngredient(
    """the rows to be inserted"""
    objects: [IngredientIngredientInsertInput!]!

    """upsert condition"""
    onConflict: IngredientIngredientOnConflict
  ): IngredientIngredientMutationResponse

  """
  insert a single row into the table: "ingredient.ingredient"
  """
  insertIngredientIngredientOne(
    """the row to be inserted"""
    object: IngredientIngredientInsertInput!

    """upsert condition"""
    onConflict: IngredientIngredientOnConflict
  ): IngredientIngredient

  """
  insert data into the table: "ingredient.name"
  """
  insertIngredientName(
    """the rows to be inserted"""
    objects: [IngredientNameInsertInput!]!

    """upsert condition"""
    onConflict: IngredientNameOnConflict
  ): IngredientNameMutationResponse

  """
  insert a single row into the table: "ingredient.name"
  """
  insertIngredientNameOne(
    """the row to be inserted"""
    object: IngredientNameInsertInput!

    """upsert condition"""
    onConflict: IngredientNameOnConflict
  ): IngredientName

  """
  insert data into the table: "recipe.direction"
  """
  insertRecipeDirection(
    """the rows to be inserted"""
    objects: [RecipeDirectionInsertInput!]!

    """upsert condition"""
    onConflict: RecipeDirectionOnConflict
  ): RecipeDirectionMutationResponse

  """
  insert data into the table: "recipe.direction_equipment"
  """
  insertRecipeDirectionEquipment(
    """the rows to be inserted"""
    objects: [RecipeDirectionEquipmentInsertInput!]!

    """upsert condition"""
    onConflict: RecipeDirectionEquipmentOnConflict
  ): RecipeDirectionEquipmentMutationResponse

  """
  insert a single row into the table: "recipe.direction_equipment"
  """
  insertRecipeDirectionEquipmentOne(
    """the row to be inserted"""
    object: RecipeDirectionEquipmentInsertInput!

    """upsert condition"""
    onConflict: RecipeDirectionEquipmentOnConflict
  ): RecipeDirectionEquipment

  """
  insert data into the table: "recipe.direction_ingredient"
  """
  insertRecipeDirectionIngredient(
    """the rows to be inserted"""
    objects: [RecipeDirectionIngredientInsertInput!]!

    """upsert condition"""
    onConflict: RecipeDirectionIngredientOnConflict
  ): RecipeDirectionIngredientMutationResponse

  """
  insert a single row into the table: "recipe.direction_ingredient"
  """
  insertRecipeDirectionIngredientOne(
    """the row to be inserted"""
    object: RecipeDirectionIngredientInsertInput!

    """upsert condition"""
    onConflict: RecipeDirectionIngredientOnConflict
  ): RecipeDirectionIngredient

  """
  insert a single row into the table: "recipe.direction"
  """
  insertRecipeDirectionOne(
    """the row to be inserted"""
    object: RecipeDirectionInsertInput!

    """upsert condition"""
    onConflict: RecipeDirectionOnConflict
  ): RecipeDirection

  """
  insert data into the table: "recipe.equipment"
  """
  insertRecipeEquipment(
    """the rows to be inserted"""
    objects: [RecipeEquipmentInsertInput!]!

    """upsert condition"""
    onConflict: RecipeEquipmentOnConflict
  ): RecipeEquipmentMutationResponse

  """
  insert a single row into the table: "recipe.equipment"
  """
  insertRecipeEquipmentOne(
    """the row to be inserted"""
    object: RecipeEquipmentInsertInput!

    """upsert condition"""
    onConflict: RecipeEquipmentOnConflict
  ): RecipeEquipment

  """
  insert data into the table: "recipe.ingredient"
  """
  insertRecipeIngredient(
    """the rows to be inserted"""
    objects: [RecipeIngredientInsertInput!]!

    """upsert condition"""
    onConflict: RecipeIngredientOnConflict
  ): RecipeIngredientMutationResponse

  """
  insert a single row into the table: "recipe.ingredient"
  """
  insertRecipeIngredientOne(
    """the row to be inserted"""
    object: RecipeIngredientInsertInput!

    """upsert condition"""
    onConflict: RecipeIngredientOnConflict
  ): RecipeIngredient

  """
  insert data into the table: "recipe.list"
  """
  insertRecipeList(
    """the rows to be inserted"""
    objects: [RecipeListInsertInput!]!

    """upsert condition"""
    onConflict: RecipeListOnConflict
  ): RecipeListMutationResponse

  """
  insert data into the table: "recipe.list_item"
  """
  insertRecipeListItem(
    """the rows to be inserted"""
    objects: [RecipeListItemInsertInput!]!

    """upsert condition"""
    onConflict: RecipeListItemOnConflict
  ): RecipeListItemMutationResponse

  """
  insert a single row into the table: "recipe.list_item"
  """
  insertRecipeListItemOne(
    """the row to be inserted"""
    object: RecipeListItemInsertInput!

    """upsert condition"""
    onConflict: RecipeListItemOnConflict
  ): RecipeListItem

  """
  insert a single row into the table: "recipe.list"
  """
  insertRecipeListOne(
    """the row to be inserted"""
    object: RecipeListInsertInput!

    """upsert condition"""
    onConflict: RecipeListOnConflict
  ): RecipeList

  """
  insert data into the table: "recipe.recipe"
  """
  insertRecipeRecipe(
    """the rows to be inserted"""
    objects: [RecipeRecipeInsertInput!]!

    """upsert condition"""
    onConflict: RecipeRecipeOnConflict
  ): RecipeRecipeMutationResponse

  """
  insert a single row into the table: "recipe.recipe"
  """
  insertRecipeRecipeOne(
    """the row to be inserted"""
    object: RecipeRecipeInsertInput!

    """upsert condition"""
    onConflict: RecipeRecipeOnConflict
  ): RecipeRecipe

  """
  insert data into the table: "recipe.source_provider"
  """
  insertRecipeSourceProvider(
    """the rows to be inserted"""
    objects: [RecipeSourceProviderInsertInput!]!

    """upsert condition"""
    onConflict: RecipeSourceProviderOnConflict
  ): RecipeSourceProviderMutationResponse

  """
  insert a single row into the table: "recipe.source_provider"
  """
  insertRecipeSourceProviderOne(
    """the row to be inserted"""
    object: RecipeSourceProviderInsertInput!

    """upsert condition"""
    onConflict: RecipeSourceProviderOnConflict
  ): RecipeSourceProvider

  """
  insert data into the table: "recipe.video_timestamp"
  """
  insertRecipeVideoTimestamp(
    """the rows to be inserted"""
    objects: [RecipeVideoTimestampInsertInput!]!

    """upsert condition"""
    onConflict: RecipeVideoTimestampOnConflict
  ): RecipeVideoTimestampMutationResponse

  """
  insert a single row into the table: "recipe.video_timestamp"
  """
  insertRecipeVideoTimestampOne(
    """the row to be inserted"""
    object: RecipeVideoTimestampInsertInput!

    """upsert condition"""
    onConflict: RecipeVideoTimestampOnConflict
  ): RecipeVideoTimestamp

  """
  update data of the table: "equipment.config"
  """
  updateEquipmentConfig(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: EquipmentConfigAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: EquipmentConfigDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _deleteElem: EquipmentConfigDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: EquipmentConfigDeleteKeyInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: EquipmentConfigPrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: EquipmentConfigSetInput

    """filter the rows which have to be updated"""
    where: EquipmentConfigBoolExp!
  ): EquipmentConfigMutationResponse

  """
  update single row of the table: "equipment.config"
  """
  updateEquipmentConfigByPk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: EquipmentConfigAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: EquipmentConfigDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _deleteElem: EquipmentConfigDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: EquipmentConfigDeleteKeyInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: EquipmentConfigPrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: EquipmentConfigSetInput
    pk_columns: EquipmentConfigPkColumnsInput!
  ): EquipmentConfig

  """
  update multiples rows of table: "equipment.config"
  """
  updateEquipmentConfigMany(
    """updates to execute, in order"""
    updates: [EquipmentConfigUpdates!]!
  ): [EquipmentConfigMutationResponse]

  """
  update data of the table: "equipment.equipment"
  """
  updateEquipmentEquipment(
    """sets the columns of the filtered rows to the given values"""
    _set: EquipmentEquipmentSetInput

    """filter the rows which have to be updated"""
    where: EquipmentEquipmentBoolExp!
  ): EquipmentEquipmentMutationResponse

  """
  update single row of the table: "equipment.equipment"
  """
  updateEquipmentEquipmentByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: EquipmentEquipmentSetInput
    pk_columns: EquipmentEquipmentPkColumnsInput!
  ): EquipmentEquipment

  """
  update multiples rows of table: "equipment.equipment"
  """
  updateEquipmentEquipmentMany(
    """updates to execute, in order"""
    updates: [EquipmentEquipmentUpdates!]!
  ): [EquipmentEquipmentMutationResponse]

  """
  update data of the table: "food.food"
  """
  updateFoodFood(
    """increments the numeric columns with given value of the filtered values"""
    _inc: FoodFoodIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: FoodFoodSetInput

    """filter the rows which have to be updated"""
    where: FoodFoodBoolExp!
  ): FoodFoodMutationResponse

  """
  update single row of the table: "food.food"
  """
  updateFoodFoodByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: FoodFoodIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: FoodFoodSetInput
    pk_columns: FoodFoodPkColumnsInput!
  ): FoodFood

  """
  update multiples rows of table: "food.food"
  """
  updateFoodFoodMany(
    """updates to execute, in order"""
    updates: [FoodFoodUpdates!]!
  ): [FoodFoodMutationResponse]

  """
  update data of the table: "food.food_measurement"
  """
  updateFoodFoodMeasurement(
    """sets the columns of the filtered rows to the given values"""
    _set: FoodFoodMeasurementSetInput

    """filter the rows which have to be updated"""
    where: FoodFoodMeasurementBoolExp!
  ): FoodFoodMeasurementMutationResponse

  """
  update single row of the table: "food.food_measurement"
  """
  updateFoodFoodMeasurementByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: FoodFoodMeasurementSetInput
    pk_columns: FoodFoodMeasurementPkColumnsInput!
  ): FoodFoodMeasurement

  """
  update multiples rows of table: "food.food_measurement"
  """
  updateFoodFoodMeasurementMany(
    """updates to execute, in order"""
    updates: [FoodFoodMeasurementUpdates!]!
  ): [FoodFoodMeasurementMutationResponse]

  """
  update data of the table: "food.measurement"
  """
  updateFoodMeasurement(
    """increments the numeric columns with given value of the filtered values"""
    _inc: FoodMeasurementIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: FoodMeasurementSetInput

    """filter the rows which have to be updated"""
    where: FoodMeasurementBoolExp!
  ): FoodMeasurementMutationResponse

  """
  update single row of the table: "food.measurement"
  """
  updateFoodMeasurementByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: FoodMeasurementIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: FoodMeasurementSetInput
    pk_columns: FoodMeasurementPkColumnsInput!
  ): FoodMeasurement

  """
  update multiples rows of table: "food.measurement"
  """
  updateFoodMeasurementMany(
    """updates to execute, in order"""
    updates: [FoodMeasurementUpdates!]!
  ): [FoodMeasurementMutationResponse]

  """
  update data of the table: "food.unit"
  """
  updateFoodUnit(
    """increments the numeric columns with given value of the filtered values"""
    _inc: FoodUnitIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: FoodUnitSetInput

    """filter the rows which have to be updated"""
    where: FoodUnitBoolExp!
  ): FoodUnitMutationResponse

  """
  update single row of the table: "food.unit"
  """
  updateFoodUnitByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: FoodUnitIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: FoodUnitSetInput
    pk_columns: FoodUnitPkColumnsInput!
  ): FoodUnit

  """
  update multiples rows of table: "food.unit"
  """
  updateFoodUnitMany(
    """updates to execute, in order"""
    updates: [FoodUnitUpdates!]!
  ): [FoodUnitMutationResponse]

  """
  update data of the table: "ingredient.ingredient"
  """
  updateIngredientIngredient(
    """sets the columns of the filtered rows to the given values"""
    _set: IngredientIngredientSetInput

    """filter the rows which have to be updated"""
    where: IngredientIngredientBoolExp!
  ): IngredientIngredientMutationResponse

  """
  update single row of the table: "ingredient.ingredient"
  """
  updateIngredientIngredientByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: IngredientIngredientSetInput
    pk_columns: IngredientIngredientPkColumnsInput!
  ): IngredientIngredient

  """
  update multiples rows of table: "ingredient.ingredient"
  """
  updateIngredientIngredientMany(
    """updates to execute, in order"""
    updates: [IngredientIngredientUpdates!]!
  ): [IngredientIngredientMutationResponse]

  """
  update data of the table: "ingredient.name"
  """
  updateIngredientName(
    """sets the columns of the filtered rows to the given values"""
    _set: IngredientNameSetInput

    """filter the rows which have to be updated"""
    where: IngredientNameBoolExp!
  ): IngredientNameMutationResponse

  """
  update single row of the table: "ingredient.name"
  """
  updateIngredientNameByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: IngredientNameSetInput
    pk_columns: IngredientNamePkColumnsInput!
  ): IngredientName

  """
  update multiples rows of table: "ingredient.name"
  """
  updateIngredientNameMany(
    """updates to execute, in order"""
    updates: [IngredientNameUpdates!]!
  ): [IngredientNameMutationResponse]

  """
  update data of the table: "recipe.direction"
  """
  updateRecipeDirection(
    """increments the numeric columns with given value of the filtered values"""
    _inc: RecipeDirectionIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: RecipeDirectionSetInput

    """filter the rows which have to be updated"""
    where: RecipeDirectionBoolExp!
  ): RecipeDirectionMutationResponse

  """
  update single row of the table: "recipe.direction"
  """
  updateRecipeDirectionByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: RecipeDirectionIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: RecipeDirectionSetInput
    pk_columns: RecipeDirectionPkColumnsInput!
  ): RecipeDirection

  """
  update data of the table: "recipe.direction_equipment"
  """
  updateRecipeDirectionEquipment(
    """sets the columns of the filtered rows to the given values"""
    _set: RecipeDirectionEquipmentSetInput

    """filter the rows which have to be updated"""
    where: RecipeDirectionEquipmentBoolExp!
  ): RecipeDirectionEquipmentMutationResponse

  """
  update single row of the table: "recipe.direction_equipment"
  """
  updateRecipeDirectionEquipmentByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: RecipeDirectionEquipmentSetInput
    pk_columns: RecipeDirectionEquipmentPkColumnsInput!
  ): RecipeDirectionEquipment

  """
  update multiples rows of table: "recipe.direction_equipment"
  """
  updateRecipeDirectionEquipmentMany(
    """updates to execute, in order"""
    updates: [RecipeDirectionEquipmentUpdates!]!
  ): [RecipeDirectionEquipmentMutationResponse]

  """
  update data of the table: "recipe.direction_ingredient"
  """
  updateRecipeDirectionIngredient(
    """sets the columns of the filtered rows to the given values"""
    _set: RecipeDirectionIngredientSetInput

    """filter the rows which have to be updated"""
    where: RecipeDirectionIngredientBoolExp!
  ): RecipeDirectionIngredientMutationResponse

  """
  update single row of the table: "recipe.direction_ingredient"
  """
  updateRecipeDirectionIngredientByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: RecipeDirectionIngredientSetInput
    pk_columns: RecipeDirectionIngredientPkColumnsInput!
  ): RecipeDirectionIngredient

  """
  update multiples rows of table: "recipe.direction_ingredient"
  """
  updateRecipeDirectionIngredientMany(
    """updates to execute, in order"""
    updates: [RecipeDirectionIngredientUpdates!]!
  ): [RecipeDirectionIngredientMutationResponse]

  """
  update multiples rows of table: "recipe.direction"
  """
  updateRecipeDirectionMany(
    """updates to execute, in order"""
    updates: [RecipeDirectionUpdates!]!
  ): [RecipeDirectionMutationResponse]

  """
  update data of the table: "recipe.equipment"
  """
  updateRecipeEquipment(
    """sets the columns of the filtered rows to the given values"""
    _set: RecipeEquipmentSetInput

    """filter the rows which have to be updated"""
    where: RecipeEquipmentBoolExp!
  ): RecipeEquipmentMutationResponse

  """
  update single row of the table: "recipe.equipment"
  """
  updateRecipeEquipmentByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: RecipeEquipmentSetInput
    pk_columns: RecipeEquipmentPkColumnsInput!
  ): RecipeEquipment

  """
  update multiples rows of table: "recipe.equipment"
  """
  updateRecipeEquipmentMany(
    """updates to execute, in order"""
    updates: [RecipeEquipmentUpdates!]!
  ): [RecipeEquipmentMutationResponse]

  """
  update data of the table: "recipe.ingredient"
  """
  updateRecipeIngredient(
    """increments the numeric columns with given value of the filtered values"""
    _inc: RecipeIngredientIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: RecipeIngredientSetInput

    """filter the rows which have to be updated"""
    where: RecipeIngredientBoolExp!
  ): RecipeIngredientMutationResponse

  """
  update single row of the table: "recipe.ingredient"
  """
  updateRecipeIngredientByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: RecipeIngredientIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: RecipeIngredientSetInput
    pk_columns: RecipeIngredientPkColumnsInput!
  ): RecipeIngredient

  """
  update multiples rows of table: "recipe.ingredient"
  """
  updateRecipeIngredientMany(
    """updates to execute, in order"""
    updates: [RecipeIngredientUpdates!]!
  ): [RecipeIngredientMutationResponse]

  """
  update data of the table: "recipe.list"
  """
  updateRecipeList(
    """sets the columns of the filtered rows to the given values"""
    _set: RecipeListSetInput

    """filter the rows which have to be updated"""
    where: RecipeListBoolExp!
  ): RecipeListMutationResponse

  """
  update single row of the table: "recipe.list"
  """
  updateRecipeListByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: RecipeListSetInput
    pk_columns: RecipeListPkColumnsInput!
  ): RecipeList

  """
  update data of the table: "recipe.list_item"
  """
  updateRecipeListItem(
    """increments the numeric columns with given value of the filtered values"""
    _inc: RecipeListItemIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: RecipeListItemSetInput

    """filter the rows which have to be updated"""
    where: RecipeListItemBoolExp!
  ): RecipeListItemMutationResponse

  """
  update single row of the table: "recipe.list_item"
  """
  updateRecipeListItemByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: RecipeListItemIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: RecipeListItemSetInput
    pk_columns: RecipeListItemPkColumnsInput!
  ): RecipeListItem

  """
  update multiples rows of table: "recipe.list_item"
  """
  updateRecipeListItemMany(
    """updates to execute, in order"""
    updates: [RecipeListItemUpdates!]!
  ): [RecipeListItemMutationResponse]

  """
  update multiples rows of table: "recipe.list"
  """
  updateRecipeListMany(
    """updates to execute, in order"""
    updates: [RecipeListUpdates!]!
  ): [RecipeListMutationResponse]

  """
  update data of the table: "recipe.recipe"
  """
  updateRecipeRecipe(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: RecipeRecipeAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: RecipeRecipeDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _deleteElem: RecipeRecipeDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: RecipeRecipeDeleteKeyInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: RecipeRecipePrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: RecipeRecipeSetInput

    """filter the rows which have to be updated"""
    where: RecipeRecipeBoolExp!
  ): RecipeRecipeMutationResponse

  """
  update single row of the table: "recipe.recipe"
  """
  updateRecipeRecipeByPk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: RecipeRecipeAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: RecipeRecipeDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _deleteElem: RecipeRecipeDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: RecipeRecipeDeleteKeyInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: RecipeRecipePrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: RecipeRecipeSetInput
    pk_columns: RecipeRecipePkColumnsInput!
  ): RecipeRecipe

  """
  update multiples rows of table: "recipe.recipe"
  """
  updateRecipeRecipeMany(
    """updates to execute, in order"""
    updates: [RecipeRecipeUpdates!]!
  ): [RecipeRecipeMutationResponse]

  """
  update data of the table: "recipe.source_provider"
  """
  updateRecipeSourceProvider(
    """sets the columns of the filtered rows to the given values"""
    _set: RecipeSourceProviderSetInput

    """filter the rows which have to be updated"""
    where: RecipeSourceProviderBoolExp!
  ): RecipeSourceProviderMutationResponse

  """
  update single row of the table: "recipe.source_provider"
  """
  updateRecipeSourceProviderByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: RecipeSourceProviderSetInput
    pk_columns: RecipeSourceProviderPkColumnsInput!
  ): RecipeSourceProvider

  """
  update multiples rows of table: "recipe.source_provider"
  """
  updateRecipeSourceProviderMany(
    """updates to execute, in order"""
    updates: [RecipeSourceProviderUpdates!]!
  ): [RecipeSourceProviderMutationResponse]

  """
  update data of the table: "recipe.video_timestamp"
  """
  updateRecipeVideoTimestamp(
    """increments the numeric columns with given value of the filtered values"""
    _inc: RecipeVideoTimestampIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: RecipeVideoTimestampSetInput

    """filter the rows which have to be updated"""
    where: RecipeVideoTimestampBoolExp!
  ): RecipeVideoTimestampMutationResponse

  """
  update single row of the table: "recipe.video_timestamp"
  """
  updateRecipeVideoTimestampByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: RecipeVideoTimestampIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: RecipeVideoTimestampSetInput
    pk_columns: RecipeVideoTimestampPkColumnsInput!
  ): RecipeVideoTimestamp

  """
  update multiples rows of table: "recipe.video_timestamp"
  """
  updateRecipeVideoTimestampMany(
    """updates to execute, in order"""
    updates: [RecipeVideoTimestampUpdates!]!
  ): [RecipeVideoTimestampMutationResponse]
}

type query_root {
  """
  fetch data from the table: "equipment.config"
  """
  equipmentConfigConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [EquipmentConfigSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [EquipmentConfigOrderBy!]

    """filter the rows returned"""
    where: EquipmentConfigBoolExp
  ): EquipmentConfigConnection!

  """
  fetch data from the table: "equipment.equipment"
  """
  equipmentEquipmentConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [EquipmentEquipmentSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [EquipmentEquipmentOrderBy!]

    """filter the rows returned"""
    where: EquipmentEquipmentBoolExp
  ): EquipmentEquipmentConnection!

  """
  fetch data from the table: "food.food"
  """
  foodFoodConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [FoodFoodSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [FoodFoodOrderBy!]

    """filter the rows returned"""
    where: FoodFoodBoolExp
  ): FoodFoodConnection!

  """
  fetch data from the table: "food.food_measurement"
  """
  foodFoodMeasurementConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [FoodFoodMeasurementSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [FoodFoodMeasurementOrderBy!]

    """filter the rows returned"""
    where: FoodFoodMeasurementBoolExp
  ): FoodFoodMeasurementConnection!

  """
  fetch data from the table: "food.measurement"
  """
  foodMeasurementConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [FoodMeasurementSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [FoodMeasurementOrderBy!]

    """filter the rows returned"""
    where: FoodMeasurementBoolExp
  ): FoodMeasurementConnection!

  """
  fetch data from the table: "food.unit"
  """
  foodUnitConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [FoodUnitSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [FoodUnitOrderBy!]

    """filter the rows returned"""
    where: FoodUnitBoolExp
  ): FoodUnitConnection!

  """
  fetch data from the table: "ingredient.ingredient"
  """
  ingredientIngredientConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [IngredientIngredientSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [IngredientIngredientOrderBy!]

    """filter the rows returned"""
    where: IngredientIngredientBoolExp
  ): IngredientIngredientConnection!

  """
  fetch data from the table: "ingredient.name"
  """
  ingredientNameConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [IngredientNameSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [IngredientNameOrderBy!]

    """filter the rows returned"""
    where: IngredientNameBoolExp
  ): IngredientNameConnection!
  node(
    """A globally unique id"""
    id: ID!
  ): Node

  """
  fetch data from the table: "recipe.direction"
  """
  recipeDirectionConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeDirectionSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionBoolExp
  ): RecipeDirectionConnection!

  """
  fetch data from the table: "recipe.direction_equipment"
  """
  recipeDirectionEquipmentConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeDirectionEquipmentSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionEquipmentOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionEquipmentBoolExp
  ): RecipeDirectionEquipmentConnection!

  """
  fetch data from the table: "recipe.direction_ingredient"
  """
  recipeDirectionIngredientConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeDirectionIngredientSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionIngredientOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionIngredientBoolExp
  ): RecipeDirectionIngredientConnection!

  """
  fetch data from the table: "recipe.equipment"
  """
  recipeEquipmentConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeEquipmentSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeEquipmentOrderBy!]

    """filter the rows returned"""
    where: RecipeEquipmentBoolExp
  ): RecipeEquipmentConnection!

  """
  fetch data from the table: "recipe.ingredient"
  """
  recipeIngredientConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeIngredientSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeIngredientOrderBy!]

    """filter the rows returned"""
    where: RecipeIngredientBoolExp
  ): RecipeIngredientConnection!

  """
  fetch data from the table: "recipe.list"
  """
  recipeListConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeListSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeListOrderBy!]

    """filter the rows returned"""
    where: RecipeListBoolExp
  ): RecipeListConnection!

  """
  fetch data from the table: "recipe.list_item"
  """
  recipeListItemConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeListItemSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeListItemOrderBy!]

    """filter the rows returned"""
    where: RecipeListItemBoolExp
  ): RecipeListItemConnection!

  """
  fetch data from the table: "recipe.recipe"
  """
  recipeRecipeConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeRecipeSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeRecipeOrderBy!]

    """filter the rows returned"""
    where: RecipeRecipeBoolExp
  ): RecipeRecipeConnection!

  """
  fetch data from the table: "recipe.source_provider"
  """
  recipeSourceProviderConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeSourceProviderSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeSourceProviderOrderBy!]

    """filter the rows returned"""
    where: RecipeSourceProviderBoolExp
  ): RecipeSourceProviderConnection!

  """
  fetch data from the table: "recipe.video_timestamp"
  """
  recipeVideoTimestampConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeVideoTimestampSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeVideoTimestampOrderBy!]

    """filter the rows returned"""
    where: RecipeVideoTimestampBoolExp
  ): RecipeVideoTimestampConnection!
}

input recipe_direction_aggregate_bool_exp {
  count: recipe_direction_aggregate_bool_exp_count
}

input recipe_direction_aggregate_bool_exp_count {
  arguments: [RecipeDirectionSelectColumn!]
  distinct: Boolean
  filter: RecipeDirectionBoolExp
  predicate: IntComparisonExp!
}

"""
order by avg() on columns of table "recipe.direction"
"""
input recipe_direction_avg_order_by {
  seq: OrderBy
}

input recipe_direction_equipment_aggregate_bool_exp {
  count: recipe_direction_equipment_aggregate_bool_exp_count
}

input recipe_direction_equipment_aggregate_bool_exp_count {
  arguments: [RecipeDirectionEquipmentSelectColumn!]
  distinct: Boolean
  filter: RecipeDirectionEquipmentBoolExp
  predicate: IntComparisonExp!
}

"""
order by max() on columns of table "recipe.direction_equipment"
"""
input recipe_direction_equipment_max_order_by {
  directionId: OrderBy
  equipmentId: OrderBy
  id: OrderBy
}

"""
order by min() on columns of table "recipe.direction_equipment"
"""
input recipe_direction_equipment_min_order_by {
  directionId: OrderBy
  equipmentId: OrderBy
  id: OrderBy
}

input recipe_direction_ingredient_aggregate_bool_exp {
  count: recipe_direction_ingredient_aggregate_bool_exp_count
}

input recipe_direction_ingredient_aggregate_bool_exp_count {
  arguments: [RecipeDirectionIngredientSelectColumn!]
  distinct: Boolean
  filter: RecipeDirectionIngredientBoolExp
  predicate: IntComparisonExp!
}

"""
order by max() on columns of table "recipe.direction_ingredient"
"""
input recipe_direction_ingredient_max_order_by {
  directionId: OrderBy
  id: OrderBy
  ingredientId: OrderBy
}

"""
order by min() on columns of table "recipe.direction_ingredient"
"""
input recipe_direction_ingredient_min_order_by {
  directionId: OrderBy
  id: OrderBy
  ingredientId: OrderBy
}

"""
order by max() on columns of table "recipe.direction"
"""
input recipe_direction_max_order_by {
  action: OrderBy
  id: OrderBy
  recipeId: OrderBy
  seq: OrderBy
  text: OrderBy
  videoTimestampId: OrderBy
}

"""
order by min() on columns of table "recipe.direction"
"""
input recipe_direction_min_order_by {
  action: OrderBy
  id: OrderBy
  recipeId: OrderBy
  seq: OrderBy
  text: OrderBy
  videoTimestampId: OrderBy
}

"""
order by stddev() on columns of table "recipe.direction"
"""
input recipe_direction_stddev_order_by {
  seq: OrderBy
}

"""
order by stddev_pop() on columns of table "recipe.direction"
"""
input recipe_direction_stddev_pop_order_by {
  seq: OrderBy
}

"""
order by stddev_samp() on columns of table "recipe.direction"
"""
input recipe_direction_stddev_samp_order_by {
  seq: OrderBy
}

"""
order by sum() on columns of table "recipe.direction"
"""
input recipe_direction_sum_order_by {
  seq: OrderBy
}

"""
order by var_pop() on columns of table "recipe.direction"
"""
input recipe_direction_var_pop_order_by {
  seq: OrderBy
}

"""
order by var_samp() on columns of table "recipe.direction"
"""
input recipe_direction_var_samp_order_by {
  seq: OrderBy
}

"""
order by variance() on columns of table "recipe.direction"
"""
input recipe_direction_variance_order_by {
  seq: OrderBy
}

input recipe_equipment_aggregate_bool_exp {
  count: recipe_equipment_aggregate_bool_exp_count
}

input recipe_equipment_aggregate_bool_exp_count {
  arguments: [RecipeEquipmentSelectColumn!]
  distinct: Boolean
  filter: RecipeEquipmentBoolExp
  predicate: IntComparisonExp!
}

"""
order by max() on columns of table "recipe.equipment"
"""
input recipe_equipment_max_order_by {
  equipmentId: OrderBy
  id: OrderBy
  recipeId: OrderBy
}

"""
order by min() on columns of table "recipe.equipment"
"""
input recipe_equipment_min_order_by {
  equipmentId: OrderBy
  id: OrderBy
  recipeId: OrderBy
}

input recipe_ingredient_aggregate_bool_exp {
  count: recipe_ingredient_aggregate_bool_exp_count
}

input recipe_ingredient_aggregate_bool_exp_count {
  arguments: [RecipeIngredientSelectColumn!]
  distinct: Boolean
  filter: RecipeIngredientBoolExp
  predicate: IntComparisonExp!
}

"""
order by avg() on columns of table "recipe.ingredient"
"""
input recipe_ingredient_avg_order_by {
  amount: OrderBy
  seq: OrderBy
}

"""
order by max() on columns of table "recipe.ingredient"
"""
input recipe_ingredient_max_order_by {
  amount: OrderBy
  comment: OrderBy
  id: OrderBy
  ingredientId: OrderBy
  name: OrderBy
  recipeId: OrderBy
  seq: OrderBy
  text: OrderBy
  unitId: OrderBy
  videoTimestampId: OrderBy
}

"""
order by min() on columns of table "recipe.ingredient"
"""
input recipe_ingredient_min_order_by {
  amount: OrderBy
  comment: OrderBy
  id: OrderBy
  ingredientId: OrderBy
  name: OrderBy
  recipeId: OrderBy
  seq: OrderBy
  text: OrderBy
  unitId: OrderBy
  videoTimestampId: OrderBy
}

"""
order by stddev() on columns of table "recipe.ingredient"
"""
input recipe_ingredient_stddev_order_by {
  amount: OrderBy
  seq: OrderBy
}

"""
order by stddev_pop() on columns of table "recipe.ingredient"
"""
input recipe_ingredient_stddev_pop_order_by {
  amount: OrderBy
  seq: OrderBy
}

"""
order by stddev_samp() on columns of table "recipe.ingredient"
"""
input recipe_ingredient_stddev_samp_order_by {
  amount: OrderBy
  seq: OrderBy
}

"""
order by sum() on columns of table "recipe.ingredient"
"""
input recipe_ingredient_sum_order_by {
  amount: OrderBy
  seq: OrderBy
}

"""
order by var_pop() on columns of table "recipe.ingredient"
"""
input recipe_ingredient_var_pop_order_by {
  amount: OrderBy
  seq: OrderBy
}

"""
order by var_samp() on columns of table "recipe.ingredient"
"""
input recipe_ingredient_var_samp_order_by {
  amount: OrderBy
  seq: OrderBy
}

"""
order by variance() on columns of table "recipe.ingredient"
"""
input recipe_ingredient_variance_order_by {
  amount: OrderBy
  seq: OrderBy
}

input recipe_list_item_aggregate_bool_exp {
  count: recipe_list_item_aggregate_bool_exp_count
}

input recipe_list_item_aggregate_bool_exp_count {
  arguments: [RecipeListItemSelectColumn!]
  distinct: Boolean
  filter: RecipeListItemBoolExp
  predicate: IntComparisonExp!
}

"""
order by avg() on columns of table "recipe.list_item"
"""
input recipe_list_item_avg_order_by {
  seq: OrderBy
}

"""
order by max() on columns of table "recipe.list_item"
"""
input recipe_list_item_max_order_by {
  id: OrderBy
  listId: OrderBy
  recipeId: OrderBy
  seq: OrderBy
}

"""
order by min() on columns of table "recipe.list_item"
"""
input recipe_list_item_min_order_by {
  id: OrderBy
  listId: OrderBy
  recipeId: OrderBy
  seq: OrderBy
}

"""
order by stddev() on columns of table "recipe.list_item"
"""
input recipe_list_item_stddev_order_by {
  seq: OrderBy
}

"""
order by stddev_pop() on columns of table "recipe.list_item"
"""
input recipe_list_item_stddev_pop_order_by {
  seq: OrderBy
}

"""
order by stddev_samp() on columns of table "recipe.list_item"
"""
input recipe_list_item_stddev_samp_order_by {
  seq: OrderBy
}

"""
order by sum() on columns of table "recipe.list_item"
"""
input recipe_list_item_sum_order_by {
  seq: OrderBy
}

"""
order by var_pop() on columns of table "recipe.list_item"
"""
input recipe_list_item_var_pop_order_by {
  seq: OrderBy
}

"""
order by var_samp() on columns of table "recipe.list_item"
"""
input recipe_list_item_var_samp_order_by {
  seq: OrderBy
}

"""
order by variance() on columns of table "recipe.list_item"
"""
input recipe_list_item_variance_order_by {
  seq: OrderBy
}

input recipe_recipe_aggregate_bool_exp {
  bool_and: recipe_recipe_aggregate_bool_exp_bool_and
  bool_or: recipe_recipe_aggregate_bool_exp_bool_or
  count: recipe_recipe_aggregate_bool_exp_count
}

input recipe_recipe_aggregate_bool_exp_bool_and {
  arguments: recipe_recipe_select_column_recipe_recipe_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: RecipeRecipeBoolExp
  predicate: BooleanComparisonExp!
}

input recipe_recipe_aggregate_bool_exp_bool_or {
  arguments: recipe_recipe_select_column_recipe_recipe_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: RecipeRecipeBoolExp
  predicate: BooleanComparisonExp!
}

input recipe_recipe_aggregate_bool_exp_count {
  arguments: [RecipeRecipeSelectColumn!]
  distinct: Boolean
  filter: RecipeRecipeBoolExp
  predicate: IntComparisonExp!
}

"""
order by max() on columns of table "recipe.recipe"
"""
input recipe_recipe_max_order_by {
  createdAt: OrderBy

  """User who created the recipe."""
  creatorId: OrderBy
  id: OrderBy
  imageUrl: OrderBy
  name: OrderBy
  parentId: OrderBy
  slug: OrderBy
  sourcePath: OrderBy
  sourceProviderId: OrderBy
  updatedAt: OrderBy
  videoUrl: OrderBy
}

"""
order by min() on columns of table "recipe.recipe"
"""
input recipe_recipe_min_order_by {
  createdAt: OrderBy

  """User who created the recipe."""
  creatorId: OrderBy
  id: OrderBy
  imageUrl: OrderBy
  name: OrderBy
  parentId: OrderBy
  slug: OrderBy
  sourcePath: OrderBy
  sourceProviderId: OrderBy
  updatedAt: OrderBy
  videoUrl: OrderBy
}

"""
select "recipe_recipe_aggregate_bool_exp_bool_and_arguments_columns" columns of table "recipe.recipe"
"""
enum recipe_recipe_select_column_recipe_recipe_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  hidden
}

"""
select "recipe_recipe_aggregate_bool_exp_bool_or_arguments_columns" columns of table "recipe.recipe"
"""
enum recipe_recipe_select_column_recipe_recipe_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  hidden
}

type subscription_root {
  """
  fetch data from the table: "equipment.config"
  """
  equipmentConfigConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [EquipmentConfigSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [EquipmentConfigOrderBy!]

    """filter the rows returned"""
    where: EquipmentConfigBoolExp
  ): EquipmentConfigConnection!

  """
  fetch data from the table: "equipment.equipment"
  """
  equipmentEquipmentConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [EquipmentEquipmentSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [EquipmentEquipmentOrderBy!]

    """filter the rows returned"""
    where: EquipmentEquipmentBoolExp
  ): EquipmentEquipmentConnection!

  """
  fetch data from the table: "food.food"
  """
  foodFoodConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [FoodFoodSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [FoodFoodOrderBy!]

    """filter the rows returned"""
    where: FoodFoodBoolExp
  ): FoodFoodConnection!

  """
  fetch data from the table: "food.food_measurement"
  """
  foodFoodMeasurementConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [FoodFoodMeasurementSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [FoodFoodMeasurementOrderBy!]

    """filter the rows returned"""
    where: FoodFoodMeasurementBoolExp
  ): FoodFoodMeasurementConnection!

  """
  fetch data from the table: "food.measurement"
  """
  foodMeasurementConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [FoodMeasurementSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [FoodMeasurementOrderBy!]

    """filter the rows returned"""
    where: FoodMeasurementBoolExp
  ): FoodMeasurementConnection!

  """
  fetch data from the table: "food.unit"
  """
  foodUnitConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [FoodUnitSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [FoodUnitOrderBy!]

    """filter the rows returned"""
    where: FoodUnitBoolExp
  ): FoodUnitConnection!

  """
  fetch data from the table: "ingredient.ingredient"
  """
  ingredientIngredientConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [IngredientIngredientSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [IngredientIngredientOrderBy!]

    """filter the rows returned"""
    where: IngredientIngredientBoolExp
  ): IngredientIngredientConnection!

  """
  fetch data from the table: "ingredient.name"
  """
  ingredientNameConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [IngredientNameSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [IngredientNameOrderBy!]

    """filter the rows returned"""
    where: IngredientNameBoolExp
  ): IngredientNameConnection!
  node(
    """A globally unique id"""
    id: ID!
  ): Node

  """
  fetch data from the table: "recipe.direction"
  """
  recipeDirectionConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeDirectionSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionBoolExp
  ): RecipeDirectionConnection!

  """
  fetch data from the table: "recipe.direction_equipment"
  """
  recipeDirectionEquipmentConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeDirectionEquipmentSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionEquipmentOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionEquipmentBoolExp
  ): RecipeDirectionEquipmentConnection!

  """
  fetch data from the table: "recipe.direction_ingredient"
  """
  recipeDirectionIngredientConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeDirectionIngredientSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeDirectionIngredientOrderBy!]

    """filter the rows returned"""
    where: RecipeDirectionIngredientBoolExp
  ): RecipeDirectionIngredientConnection!

  """
  fetch data from the table: "recipe.equipment"
  """
  recipeEquipmentConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeEquipmentSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeEquipmentOrderBy!]

    """filter the rows returned"""
    where: RecipeEquipmentBoolExp
  ): RecipeEquipmentConnection!

  """
  fetch data from the table: "recipe.ingredient"
  """
  recipeIngredientConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeIngredientSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeIngredientOrderBy!]

    """filter the rows returned"""
    where: RecipeIngredientBoolExp
  ): RecipeIngredientConnection!

  """
  fetch data from the table: "recipe.list"
  """
  recipeListConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeListSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeListOrderBy!]

    """filter the rows returned"""
    where: RecipeListBoolExp
  ): RecipeListConnection!

  """
  fetch data from the table: "recipe.list_item"
  """
  recipeListItemConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeListItemSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeListItemOrderBy!]

    """filter the rows returned"""
    where: RecipeListItemBoolExp
  ): RecipeListItemConnection!

  """
  fetch data from the table: "recipe.recipe"
  """
  recipeRecipeConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeRecipeSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeRecipeOrderBy!]

    """filter the rows returned"""
    where: RecipeRecipeBoolExp
  ): RecipeRecipeConnection!

  """
  fetch data from the table: "recipe.source_provider"
  """
  recipeSourceProviderConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeSourceProviderSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeSourceProviderOrderBy!]

    """filter the rows returned"""
    where: RecipeSourceProviderBoolExp
  ): RecipeSourceProviderConnection!

  """
  fetch data from the table: "recipe.video_timestamp"
  """
  recipeVideoTimestampConnection(
    after: String
    before: String

    """distinct select on columns"""
    distinctOn: [RecipeVideoTimestampSelectColumn!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    orderBy: [RecipeVideoTimestampOrderBy!]

    """filter the rows returned"""
    where: RecipeVideoTimestampBoolExp
  ): RecipeVideoTimestampConnection!
}

scalar timestamp

scalar uuid

