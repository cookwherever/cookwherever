"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports2, module2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName2 = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName2 + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName2);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign2 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component15(props, context3, updater) {
            this.props = props;
            this.context = context3;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component15.prototype.isReactComponent = {};
          Component15.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component15.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component15.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component15.prototype;
          function PureComponent3(props, context3, updater) {
            this.props = props;
            this.context = context3;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent3.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent3;
          assign2(pureComponentPrototype, Component15.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef8() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context3 = type;
                  return getContextName(context3) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty16 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty16.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty16.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName2 = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName2]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName2, config.ref);
                  didWarnAboutStringRefs[componentName2] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source2, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source2
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement55(type, config, children2) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source2 = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source2 = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty16.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children2;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps6 = type.defaultProps;
              for (propName in defaultProps6) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps6[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source2, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement3(element, config, children2) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign2({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source2 = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps6;
              if (element.type && element.type.defaultProps) {
                defaultProps6 = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty16.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps6 !== void 0) {
                    props[propName] = defaultProps6[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children2;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source2, owner, props);
          }
          function isValidElement5(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index2) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index2.toString(36);
          }
          function mapIntoArray(children2, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children2;
            if (type === "undefined" || type === "boolean") {
              children2 = null;
            }
            var invokeCallback = false;
            if (children2 === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children2.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children2;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray2(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement5(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray2(children2)) {
              for (var i = 0; i < children2.length; i++) {
                child = children2[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children2);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children2;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children2);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children2).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children2, func2, context3) {
            if (children2 == null) {
              return children2;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children2, result, "", "", function(child) {
              return func2.call(context3, child, count++);
            });
            return result;
          }
          function countChildren(children2) {
            var n = 0;
            mapChildren(children2, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children2, forEachFunc, forEachContext) {
            mapChildren(children2, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray3(children2) {
            return mapChildren(children2, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children2) {
            if (!isValidElement5(children2)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children2;
          }
          function createContext16(defaultValue) {
            var context3 = {
              $$typeof: REACT_CONTEXT_TYPE,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
              _defaultValue: null,
              _globalName: null
            };
            context3.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context3
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer3 = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context3
              };
              Object.defineProperties(Consumer3, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context3.Provider;
                  },
                  set: function(_Provider) {
                    context3.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context3._currentValue;
                  },
                  set: function(_currentValue) {
                    context3._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context3._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context3._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context3._threadCount;
                  },
                  set: function(_threadCount) {
                    context3._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context3.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context3.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context3.Consumer = Consumer3;
            }
            {
              context3._currentRenderer = null;
              context3._currentRenderer2 = null;
            }
            return context3;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps6;
              var propTypes4;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps6;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps6 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes4;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes4 = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef56(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType3(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare2) {
            {
              if (!isValidElementType3(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare2 === void 0 ? null : compare2
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext18(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState17(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer3(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef11(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect12(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect4(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback8(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo13(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue2(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore3(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source2, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match && match[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source2, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component16) {
            var prototype = Component16.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source2, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source2, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source2, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values5, location, componentName2, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty16);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err2 = Error((componentName2 || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err2.name = "Invariant Violation";
                      throw err2;
                    }
                    error$1 = typeSpecs[typeSpecName](values5, typeSpecName, componentName2, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName2 || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source2) {
            if (source2 !== void 0) {
              var fileName = source2.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source2.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node5, parentType) {
            if (typeof node5 !== "object") {
              return;
            }
            if (isArray2(node5)) {
              for (var i = 0; i < node5.length; i++) {
                var child = node5[i];
                if (isValidElement5(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement5(node5)) {
              if (node5._store) {
                node5._store.validated = true;
              }
            } else if (node5) {
              var iteratorFn = getIteratorFn(node5);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node5.entries) {
                  var iterator = iteratorFn.call(node5);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement5(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes4;
              if (typeof type === "function") {
                propTypes4 = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes4 = type.propTypes;
              } else {
                return;
              }
              if (propTypes4) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes4, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children2) {
            var validType = isValidElementType3(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray2(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement55.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children2) {
            var newElement = cloneElement3.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module2 && module2[requireString];
                enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children5 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray3,
            only: onlyChild
          };
          exports2.Children = Children5;
          exports2.Component = Component15;
          exports2.Fragment = REACT_FRAGMENT_TYPE;
          exports2.Profiler = REACT_PROFILER_TYPE;
          exports2.PureComponent = PureComponent3;
          exports2.StrictMode = REACT_STRICT_MODE_TYPE;
          exports2.Suspense = REACT_SUSPENSE_TYPE;
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports2.cloneElement = cloneElement$1;
          exports2.createContext = createContext16;
          exports2.createElement = createElement$1;
          exports2.createFactory = createFactory;
          exports2.createRef = createRef8;
          exports2.forwardRef = forwardRef56;
          exports2.isValidElement = isValidElement5;
          exports2.lazy = lazy;
          exports2.memo = memo2;
          exports2.startTransition = startTransition;
          exports2.unstable_act = act;
          exports2.useCallback = useCallback8;
          exports2.useContext = useContext18;
          exports2.useDebugValue = useDebugValue2;
          exports2.useDeferredValue = useDeferredValue;
          exports2.useEffect = useEffect12;
          exports2.useId = useId;
          exports2.useImperativeHandle = useImperativeHandle;
          exports2.useInsertionEffect = useInsertionEffect;
          exports2.useLayoutEffect = useLayoutEffect4;
          exports2.useMemo = useMemo13;
          exports2.useReducer = useReducer3;
          exports2.useRef = useRef11;
          exports2.useState = useState17;
          exports2.useSyncExternalStore = useSyncExternalStore3;
          exports2.useTransition = useTransition;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node5) {
            var index2 = heap.length;
            heap.push(node5);
            siftUp(heap, node5, index2);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last2 = heap.pop();
            if (last2 !== first) {
              heap[0] = last2;
              siftDown(heap, last2, 0);
            }
            return first;
          }
          function siftUp(heap, node5, i) {
            var index2 = i;
            while (index2 > 0) {
              var parentIndex = index2 - 1 >>> 1;
              var parent2 = heap[parentIndex];
              if (compare2(parent2, node5) > 0) {
                heap[parentIndex] = node5;
                heap[index2] = parent2;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node5, i) {
            var index2 = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index2 < halfLength) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare2(left, node5) < 0) {
                if (rightIndex < length && compare2(right, left) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node5;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left;
                  heap[leftIndex] = node5;
                  index2 = leftIndex;
                }
              } else if (rightIndex < length && compare2(right, node5) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node5;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare2(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms2) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports2.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports2.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports2.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports2.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports2.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports2.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports2.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms2) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports2.unstable_now());
            }, ms2);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports2.unstable_IdlePriority = IdlePriority;
          exports2.unstable_ImmediatePriority = ImmediatePriority;
          exports2.unstable_LowPriority = LowPriority;
          exports2.unstable_NormalPriority = NormalPriority;
          exports2.unstable_Profiling = unstable_Profiling;
          exports2.unstable_UserBlockingPriority = UserBlockingPriority;
          exports2.unstable_cancelCallback = unstable_cancelCallback;
          exports2.unstable_continueExecution = unstable_continueExecution;
          exports2.unstable_forceFrameRate = forceFrameRate;
          exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports2.unstable_next = unstable_next;
          exports2.unstable_pauseExecution = unstable_pauseExecution;
          exports2.unstable_requestPaint = unstable_requestPaint;
          exports2.unstable_runWithPriority = unstable_runWithPriority;
          exports2.unstable_scheduleCallback = unstable_scheduleCallback;
          exports2.unstable_shouldYield = shouldYieldToHost;
          exports2.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React112 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React112.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment9 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM2 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty16 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty16.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty16.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties3.hasOwnProperty(name) ? properties3[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties3 = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties3[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              name,
              null,
              false,
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref2) {
            var name = _ref2[0], attributeName = _ref2[1];
            properties3[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties3[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties3[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              name,
              null,
              false,
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties3[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties3[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              name,
              null,
              false,
              false
            );
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties3[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              name,
              null,
              false,
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties3[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              name,
              null,
              false,
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties3[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize2 = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties3[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties3[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties3[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties3[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              false,
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties3[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties3[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              true,
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node5, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node5[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node5.hasAttribute(attributeName)) {
                    var value = node5.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node5.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node5.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node5.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node5, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node5.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node5.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node5, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node5.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node5.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node5[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node5[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node5.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node5.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node5.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source2, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match && match[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source2, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source2, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component15) {
            var prototype = Component15.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source2, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source2, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source2, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source2 = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node5 = workInProgress2;
              do {
                info += describeFiber(node5);
                node5 = node5.return;
              } while (node5);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context3 = type;
                  return getContextName(context3) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context3 = type;
                return getContextName$1(context3) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment9:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString2(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node5) {
            return node5._valueTracker;
          }
          function detachTracker(node5) {
            node5._valueTracker = null;
          }
          function getValueFromNode(node5) {
            var value = "";
            if (!node5) {
              return value;
            }
            if (isCheckable(node5)) {
              value = node5.checked ? "true" : "false";
            } else {
              value = node5.value;
            }
            return value;
          }
          function trackValueOnNode(node5) {
            var valueField = isCheckable(node5) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node5.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node5[valueField]);
            }
            var currentValue = "" + node5[valueField];
            if (node5.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get3 = descriptor.get, set3 = descriptor.set;
            Object.defineProperty(node5, valueField, {
              configurable: true,
              get: function() {
                return get3.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set3.call(this, value);
              }
            });
            Object.defineProperty(node5, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node5);
                delete node5[valueField];
              }
            };
            return tracker;
          }
          function track(node5) {
            if (getTracker(node5)) {
              return;
            }
            node5._valueTracker = trackValueOnNode(node5);
          }
          function updateValueIfChanged(node5) {
            if (!node5) {
              return false;
            }
            var tracker = getTracker(node5);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node5);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement2(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node5 = element;
            var checked = props.checked;
            var hostProps = assign2({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node5._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node5 = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node5._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node5 = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node5, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node5 = element;
            {
              var controlled = isControlled(props);
              if (!node5._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node5._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node5.value === "" || node5.value != value) {
                  node5.value = toString2(value);
                }
              } else if (node5.value !== toString2(value)) {
                node5.value = toString2(value);
              }
            } else if (type === "submit" || type === "reset") {
              node5.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node5, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node5, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node5.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node5 = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString2(node5._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node5.value) {
                    node5.value = initialValue;
                  }
                }
              }
              {
                node5.defaultValue = initialValue;
              }
            }
            var name = node5.name;
            if (name !== "") {
              node5.name = "";
            }
            {
              node5.defaultChecked = !node5.defaultChecked;
              node5.defaultChecked = !!node5._wrapperState.initialChecked;
            }
            if (name !== "") {
              node5.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node5 = element;
            updateWrapper(node5, props);
            updateNamedCousins(node5, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node5, type, value) {
            if (type !== "number" || getActiveElement2(node5.ownerDocument) !== node5) {
              if (value == null) {
                node5.defaultValue = toString2(node5._wrapperState.initialValue);
              } else if (node5.defaultValue !== toString2(value)) {
                node5.defaultValue = toString2(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React112.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString2(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray2(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node5, multiple, propValue, setDefaultSelected) {
            var options2 = node5.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString2(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign2({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node5 = element;
            {
              checkSelectPropTypes(props);
            }
            node5._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node5 = element;
            node5.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node5, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node5, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node5 = element;
            var wasMultiple = node5._wrapperState.wasMultiple;
            node5._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node5, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node5, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node5, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node5 = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node5, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node5 = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign2({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString2(node5._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node5 = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children2 = props.children, defaultValue = props.defaultValue;
              if (children2 != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray2(children2)) {
                    if (children2.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children2 = children2[0];
                  }
                  defaultValue = children2;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node5._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node5 = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString2(value);
              if (newValue !== node5.value) {
                node5.value = newValue;
              }
              if (props.defaultValue == null && node5.defaultValue !== newValue) {
                node5.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node5.defaultValue = toString2(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node5 = element;
            var textContent = node5.textContent;
            if (textContent === node5._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node5.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func2) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func2(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func2;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node5, html) {
            if (node5.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node5)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node5.firstChild) {
                  node5.removeChild(node5.firstChild);
                }
                while (svgNode.firstChild) {
                  node5.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node5.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node5, text) {
            if (text) {
              var firstChild = node5.firstChild;
              if (firstChild && firstChild === node5.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node5.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes7 = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes7.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty2 = value == null || typeof value === "boolean" || value === "";
            if (isEmpty2) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern2 = /([A-Z])/g;
          var msPattern2 = /^ms-/;
          function hyphenateStyleName2(name) {
            return name.replace(uppercasePattern2, "-$1").toLowerCase().replace(msPattern2, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize2 = function(string2) {
              return string2.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                camelize2(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName2(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node5, styles) {
            var style2 = node5.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = assign2({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty16.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty16.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM2) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func2, context3, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func2.apply(context3, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func2, context3, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func2.apply(context3, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner2) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func2, context3, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func2, context3, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get2(key) {
            return key._reactInternals;
          }
          function has2(key) {
            return key._reactInternals !== void 0;
          }
          function set2(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var ChildDeletion = 16;
          var ContentReset = 32;
          var Callback = 64;
          var DidCapture = 128;
          var ForceClientRender = 256;
          var Ref = 512;
          var Snapshot2 = 1024;
          var Passive = 2048;
          var Hydrating = 4096;
          var Visibility = 8192;
          var StoreConsistency = 16384;
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot2 | StoreConsistency;
          var HostEffectMask = 32767;
          var Incomplete = 32768;
          var ShouldCapture = 65536;
          var ForceUpdateForLegacySuspense = 131072;
          var Forked = 1048576;
          var RefStatic = 2097152;
          var LayoutStatic = 4194304;
          var PassiveStatic = 8388608;
          var MountLayoutDev = 16777216;
          var MountPassiveDev = 33554432;
          var BeforeMutationMask = Update | Snapshot2 | 0;
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node5 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node5;
              do {
                node5 = nextNode;
                if ((node5.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node5.return;
                }
                nextNode = node5.return;
              } while (nextNode);
            } else {
              while (node5.return) {
                node5 = node5.return;
              }
            }
            if (node5.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get2(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent2) {
            var currentParent = findCurrentFiberUsingSlowPath(parent2);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node5) {
            if (node5.tag === HostComponent || node5.tag === HostText) {
              return node5;
            }
            var child = node5.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent2) {
            var currentParent = findCurrentFiberUsingSlowPath(parent2);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node5) {
            if (node5.tag === HostComponent || node5.tag === HostText) {
              return node5;
            }
            var child = node5.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign2({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err2) {
              {
                error("React instrumentation encountered an error: %s.", err2);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root4, children2) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root4, children2);
                } catch (err2) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err2);
                  }
                }
              }
            }
          }
          function onCommitRoot(root4, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root4.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root4, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root4, void 0, didError);
                }
              } catch (err2) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err2);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root4) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root4);
              } catch (err2) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err2);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err2) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err2);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err2) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err2);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index3 = 0; index3 < TotalLanes; index3++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = 0;
          var ConcurrentMode = 1;
          var ProfileMode = 2;
          var StrictLegacyMode = 8;
          var StrictEffectsMode = 16;
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var InputContinuousHydrationLane = 2;
          var InputContinuousLane = 4;
          var DefaultHydrationLane = 8;
          var DefaultLane = 16;
          var TransitionHydrationLane = 32;
          var TransitionLanes = 4194240;
          var TransitionLane1 = 64;
          var TransitionLane2 = 128;
          var TransitionLane3 = 256;
          var TransitionLane4 = 512;
          var TransitionLane5 = 1024;
          var TransitionLane6 = 2048;
          var TransitionLane7 = 4096;
          var TransitionLane8 = 8192;
          var TransitionLane9 = 16384;
          var TransitionLane10 = 32768;
          var TransitionLane11 = 65536;
          var TransitionLane12 = 131072;
          var TransitionLane13 = 262144;
          var TransitionLane14 = 524288;
          var TransitionLane15 = 1048576;
          var TransitionLane16 = 2097152;
          var RetryLanes = 130023424;
          var RetryLane1 = 4194304;
          var RetryLane2 = 8388608;
          var RetryLane3 = 16777216;
          var RetryLane4 = 33554432;
          var RetryLane5 = 67108864;
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = 134217728;
          var NonIdleLanes = 268435455;
          var IdleHydrationLane = 268435456;
          var IdleLane = 536870912;
          var OffscreenLane = 1073741824;
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root4, wipLanes) {
            var pendingLanes = root4.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root4.suspendedLanes;
            var pingedLanes = root4.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root4.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root4.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index3 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index3;
                nextLanes |= entanglements[index3];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root4, lanes) {
            var eventTimes = root4.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var eventTime = eventTimes[index3];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root4, currentTime) {
            var pendingLanes = root4.pendingLanes;
            var suspendedLanes = root4.suspendedLanes;
            var pingedLanes = root4.pingedLanes;
            var expirationTimes = root4.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var expirationTime = expirationTimes[index3];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index3] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root4.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root4) {
            return getHighestPriorityLanes(root4.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root4) {
            var everythingButOffscreen = root4.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root4, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root4, lanes) {
            return (lanes & root4.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set3, subset) {
            return (set3 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set3, subset) {
            return set3 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root4, updateLane, eventTime) {
            root4.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root4.suspendedLanes = NoLanes;
              root4.pingedLanes = NoLanes;
            }
            var eventTimes = root4.eventTimes;
            var index3 = laneToIndex(updateLane);
            eventTimes[index3] = eventTime;
          }
          function markRootSuspended(root4, suspendedLanes) {
            root4.suspendedLanes |= suspendedLanes;
            root4.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root4.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root4, pingedLanes, eventTime) {
            root4.pingedLanes |= root4.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root4, remainingLanes) {
            var noLongerPendingLanes = root4.pendingLanes & ~remainingLanes;
            root4.pendingLanes = remainingLanes;
            root4.suspendedLanes = NoLanes;
            root4.pingedLanes = NoLanes;
            root4.expiredLanes &= remainingLanes;
            root4.mutableReadLanes &= remainingLanes;
            root4.entangledLanes &= remainingLanes;
            var entanglements = root4.entanglements;
            var eventTimes = root4.eventTimes;
            var expirationTimes = root4.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] = NoLanes;
              eventTimes[index3] = NoTimestamp;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root4, entangledLanes) {
            var rootEntangledLanes = root4.entangledLanes |= entangledLanes;
            var entanglements = root4.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              if (lane & entangledLanes | entanglements[index3] & entangledLanes) {
                entanglements[index3] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root4, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root4.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root4, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root4.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root4, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root4.pendingUpdatersLaneMap;
            var memoizedUpdaters = root4.memoizedUpdaters;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root4, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root4) {
            var currentState = root4.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root4 = nearestMounted.stateNode;
                  if (isRootDehydrated(root4)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root4 = nearestMounted.stateNode;
                  if (isRootDehydrated(root4)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root3 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root3 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root3 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root3) {
              return root3.value;
            }
            return root3.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign2(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign2({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign2({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign2({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign2({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign2({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign2({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign2({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign2({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign2({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign2({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign2({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign2({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM2 && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM2 && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM2 && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM2 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM2) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM2) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node5) {
            var state = node5._wrapperState;
            if (!state || !state.controlled || node5.type !== "number") {
              return;
            }
            {
              setDefaultValue(node5, "number", node5.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is2(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty16.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node5) {
            while (node5 && node5.firstChild) {
              node5 = node5.firstChild;
            }
            return node5;
          }
          function getSiblingNode(node5) {
            while (node5) {
              if (node5.nextSibling) {
                return node5.nextSibling;
              }
              node5 = node5.parentNode;
            }
          }
          function getNodeForCharacterOffset(root4, offset2) {
            var node5 = getLeafNode(root4);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node5) {
              if (node5.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node5.textContent.length;
                if (nodeStart <= offset2 && nodeEnd >= offset2) {
                  return {
                    node: node5,
                    offset: offset2 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node5 = getLeafNode(getSiblingNode(node5));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node5 = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node5 === anchorNode && (anchorOffset === 0 || node5.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node5 === focusNode && (focusOffset === 0 || node5.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node5.nodeType === TEXT_NODE) {
                    length += node5.nodeValue.length;
                  }
                  if ((next = node5.firstChild) === null) {
                    break;
                  }
                  parentNode = node5;
                  node5 = next;
                }
                while (true) {
                  if (node5 === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node5.nextSibling) !== null) {
                    break;
                  }
                  node5 = parentNode;
                  parentNode = node5.parentNode;
                }
                node5 = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node5, offsets) {
            var doc = node5.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node5.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node5, start);
            var endMarker = getNodeForCharacterOffset(node5, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node5) {
            return node5 && node5.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node5) {
            return node5 && node5.ownerDocument && containsNode(node5.ownerDocument.documentElement, node5);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err2) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement2();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement2(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM2 && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node5) {
            if ("selectionStart" in node5 && hasSelectionCapabilities(node5)) {
              return {
                start: node5.selectionStart,
                end: node5.selectionEnd
              };
            } else {
              var win = node5.ownerDocument && node5.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement2(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes8 = {};
            prefixes8[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes8["Webkit" + styleProp] = "webkit" + eventName;
            prefixes8["Moz" + styleProp] = "moz" + eventName;
            return prefixes8;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM2) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node5 = targetInst;
                mainLoop:
                  while (true) {
                    if (node5 === null) {
                      return;
                    }
                    var nodeTag = node5.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container2 = node5.stateNode.containerInfo;
                      if (isMatchingRootContainer(container2, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node5.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container2 !== null) {
                        var parentNode = getClosestInstanceFromNode(container2);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node5 = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container2 = container2.parentNode;
                      }
                    }
                    node5 = node5.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE2 = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM2 && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent2, html) {
              var testElement = parent2.namespaceURI === HTML_NAMESPACE ? parent2.ownerDocument.createElement(parent2.tagName) : parent2.ownerDocument.createElementNS(parent2.namespaceURI, parent2.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop3() {
          }
          function trapClickOnNonInteractiveElement(node5) {
            node5.onclick = noop3;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE2) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE2) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement55(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node5 = domElement;
                  if (props.multiple) {
                    node5.multiple = true;
                  } else if (props.size) {
                    node5.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty16.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE2) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE2) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE2]);
              }
              (updatePayload = updatePayload || []).push(STYLE2, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE2) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root4 = rootContainerInstance.documentElement;
                namespace = root4 ? root4.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container2 = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container2.namespaceURI || null;
                type = container2.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string2 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement55(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string2 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container2, child) {
            var parentNode;
            if (container2.nodeType === COMMENT_NODE) {
              parentNode = container2.parentNode;
              parentNode.insertBefore(child, container2);
            } else {
              parentNode = container2;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container2._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container2, child, beforeChild) {
            if (container2.nodeType === COMMENT_NODE) {
              container2.parentNode.insertBefore(child, beforeChild);
            } else {
              container2.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container2, child) {
            if (container2.nodeType === COMMENT_NODE) {
              container2.parentNode.removeChild(child);
            } else {
              container2.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node5 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node5.nextSibling;
              parentInstance.removeChild(node5);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node5 = nextNode;
            } while (node5);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container2, suspenseInstance) {
            if (container2.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container2.parentNode, suspenseInstance);
            } else if (container2.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container2, suspenseInstance);
            }
            retryIfBlockedOn(container2);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container2) {
            if (container2.nodeType === ELEMENT_NODE) {
              container2.textContent = "";
            } else if (container2.nodeType === DOCUMENT_NODE) {
              if (container2.documentElement) {
                container2.removeChild(container2.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node5) {
            for (; node5 != null; node5 = node5.nextSibling) {
              var nodeType = node5.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node5.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node5;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node5 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node5) {
              if (node5.nodeType === COMMENT_NODE) {
                var data = node5.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node5);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node5 = node5.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node5 = targetInstance.previousSibling;
            var depth = 0;
            while (node5) {
              if (node5.nodeType === COMMENT_NODE) {
                var data = node5.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node5;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node5 = node5.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container2) {
            retryIfBlockedOn(container2);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node5) {
            delete node5[internalInstanceKey];
            delete node5[internalPropsKey];
            delete node5[internalEventHandlersKey];
            delete node5[internalEventHandlerListenersKey];
            delete node5[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node5) {
            node5[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node5) {
            node5[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node5) {
            node5[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node5) {
            return !!node5[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node5) {
            var inst = node5[internalInstanceKey] || node5[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node5) {
            return node5[internalPropsKey] || null;
          }
          function updateFiberProps(node5, props) {
            node5[internalPropsKey] = props;
          }
          function getEventListenerSet(node5) {
            var elementListenerSet = node5[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node5[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values5, location, componentName2, element) {
            {
              var has3 = Function.call.bind(hasOwnProperty16);
              for (var typeSpecName in typeSpecs) {
                if (has3(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err2 = Error((componentName2 || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err2.name = "Invariant Violation";
                      throw err2;
                    }
                    error$1 = typeSpecs[typeSpecName](values5, typeSpecName, componentName2, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName2 || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index2 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor2, fiber) {
            if (index2 < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index2]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor2.current = valueStack[index2];
            valueStack[index2] = null;
            {
              fiberStack[index2] = null;
            }
            index2--;
          }
          function push(cursor2, value, fiber) {
            index2++;
            valueStack[index2] = cursor2.current;
            {
              fiberStack[index2] = fiber;
            }
            cursor2.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component15, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component15)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context3 = {};
              for (var key in contextTypes) {
                context3[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context3, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context3);
              }
              return context3;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context3, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context3, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName2 = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName2]) {
                    warnedAboutMissingGetChildContext[componentName2] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName2, componentName2);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign2({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node5 = fiber;
              do {
                switch (node5.tag) {
                  case HostRoot:
                    return node5.stateNode.context;
                  case ClassComponent: {
                    var Component15 = node5.type;
                    if (isContextProvider(Component15)) {
                      return node5.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node5 = node5.return;
              } while (node5 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index3) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index3 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent2 = fiber.return;
            while (parent2 !== null && parent2.tag !== HostComponent && parent2.tag !== HostRoot && parent2.tag !== SuspenseComponent) {
              parent2 = parent2.return;
            }
            hydrationParentFiber = parent2;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node5 = fiber;
              while (node5 !== null) {
                if (node5.mode & StrictLegacyMode) {
                  maybeStrictRoot = node5;
                }
                node5 = node5.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set3) {
              var array = [];
              set3.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component15, baseProps) {
            if (Component15 && Component15.defaultProps) {
              var props = assign2({}, baseProps);
              var defaultProps6 = Component15.defaultProps;
              for (var propName in defaultProps6) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps6[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context3, nextValue) {
            {
              push(valueCursor, context3._currentValue, providerFiber);
              context3._currentValue = nextValue;
              {
                if (context3._currentRenderer !== void 0 && context3._currentRenderer !== null && context3._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context3._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context3, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context3._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent2, renderLanes2, propagationRoot) {
            var node5 = parent2;
            while (node5 !== null) {
              var alternate = node5.alternate;
              if (!isSubsetOfLanes(node5.childLanes, renderLanes2)) {
                node5.childLanes = mergeLanes(node5.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node5 === propagationRoot) {
                break;
              }
              node5 = node5.return;
            }
            {
              if (node5 !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context3, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context3, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context3, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context3) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update2 = createUpdate(NoTimestamp, lane);
                      update2.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update2.next = update2;
                        } else {
                          update2.next = pending.next;
                          pending.next = update2;
                        }
                        sharedQueue.pending = update2;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context3) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context3._currentValue;
            if (lastFullyObservedContext === context3)
              ;
            else {
              var contextItem = {
                context: context3,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update2, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update2.next = update2;
              pushConcurrentUpdateQueue(queue);
            } else {
              update2.next = interleaved.next;
              interleaved.next = update2;
            }
            queue.interleaved = update2;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update2, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update2.next = update2;
              pushConcurrentUpdateQueue(queue);
            } else {
              update2.next = interleaved.next;
              interleaved.next = update2;
            }
            queue.interleaved = update2;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update2, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update2.next = update2;
              pushConcurrentUpdateQueue(queue);
            } else {
              update2.next = interleaved.next;
              interleaved.next = update2;
            }
            queue.interleaved = update2;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node5 = sourceFiber;
            var parent2 = sourceFiber.return;
            while (parent2 !== null) {
              parent2.childLanes = mergeLanes(parent2.childLanes, lane);
              alternate = parent2.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent2.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node5 = parent2;
              parent2 = parent2.return;
            }
            if (node5.tag === HostRoot) {
              var root4 = node5.stateNode;
              return root4;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update2 = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update2;
          }
          function enqueueUpdate(fiber, update2, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update2.next = update2;
              } else {
                update2.next = pending.next;
                pending.next = update2;
              }
              sharedQueue.pending = update2;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update2, lane);
            }
          }
          function entangleTransitions(root4, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root4.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root4, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update2 = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update2.eventTime,
                      lane: update2.lane,
                      tag: update2.tag,
                      payload: update2.payload,
                      callback: update2.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update2 = update2.next;
                  } while (update2 !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update2, prevState, nextProps, instance) {
            switch (update2.tag) {
              case ReplaceState: {
                var payload = update2.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update2.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign2({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update2 = firstBaseUpdate;
              do {
                var updateLane = update2.lane;
                var updateEventTime = update2.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update2.tag,
                    payload: update2.payload,
                    callback: update2.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update2.tag,
                      payload: update2.payload,
                      callback: update2.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update2, newState, props, instance);
                  var callback = update2.callback;
                  if (callback !== null && update2.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update2];
                    } else {
                      effects.push(update2);
                    }
                  }
                }
                update2 = update2.next;
                if (update2 === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update2 = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context3) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context3);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React112.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName2 = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName2)) {
                  didWarnAboutUndefinedDerivedState.add(componentName2);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName2);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update2.callback = callback;
              }
              var root4 = enqueueUpdate(fiber, update2, lane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitions(root4, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.tag = ReplaceState;
              update2.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update2.callback = callback;
              }
              var root4 = enqueueUpdate(fiber, update2, lane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitions(root4, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update2.callback = callback;
              }
              var root4 = enqueueUpdate(fiber, update2, lane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitions(root4, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set2(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context3 = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context3 = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context3 = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context3);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context3);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName2 = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName2)) {
                  didWarnAboutUninitializedState.add(componentName2);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName2, instance.state === null ? "null" : "undefined", componentName2);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context3);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName2 = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName2)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName2);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName2);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName2 = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName2)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName2);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName2);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot2;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot2;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot2;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName2 = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName2]) {
                return;
              }
              ownerHasKeyUseWarning[componentName2] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName2 = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName2]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName2] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName2 = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName2]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName2] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment9) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment9) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray2(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context3 = requiredContext(contextStackCursor$1.current);
            return context3;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context3 = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context3, fiber.type);
            if (context3 === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node5 = row;
            while (node5 !== null) {
              if (node5.tag === SuspenseComponent) {
                var state = node5.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node5;
                  }
                }
              } else if (node5.tag === SuspenseListComponent && node5.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node5.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node5;
                }
              } else if (node5.child !== null) {
                node5.child.return = node5;
                node5 = node5.child;
                continue;
              }
              if (node5 === row) {
                return null;
              }
              while (node5.sibling === null) {
                if (node5.return === null || node5.return === row) {
                  return null;
                }
                node5 = node5.return;
              }
              node5.sibling.return = node5.return;
              node5 = node5.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Insertion = 2;
          var Layout = 4;
          var Passive$1 = 8;
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root4, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root4.mutableSourceEagerHydrationData == null) {
              root4.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root4.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot2;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray2(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName2 = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName2)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName2);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName2, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component15, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children2 = Component15(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children2 = Component15(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children2;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update2 = first;
              do {
                var updateLane = update2.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update2.action,
                    hasEagerState: update2.hasEagerState,
                    eagerState: update2.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update2.action,
                      hasEagerState: update2.hasEagerState,
                      eagerState: update2.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update2.hasEagerState) {
                    newState = update2.eagerState;
                  } else {
                    var action = update2.action;
                    newState = reducer(newState, action);
                  }
                }
                update2 = update2.next;
              } while (update2 !== null && update2 !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update2 = firstRenderPhaseUpdate;
              do {
                var action = update2.action;
                newState = reducer(newState, action);
                update2 = update2.next;
              } while (update2 !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source2, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source2, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot2) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot2 = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot2) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot2 = true;
                  }
                }
              }
              var root4 = getWorkInProgressRoot();
              if (root4 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root4, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot2) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot2 = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root4 = getWorkInProgressRoot();
              if (root4 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root4, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged2(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged2(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged2(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy2, deps) {
            var effect = {
              tag,
              create,
              destroy: destroy2,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy2 = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy2 = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy2, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy2, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root4 = getWorkInProgressRoot();
            var identifierPrefix = root4.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update2 = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update2);
            } else {
              var root4 = enqueueConcurrentHookUpdate(fiber, queue, update2, lane);
              if (root4 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitionUpdate(root4, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update2 = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update2);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update2.hasEagerState = true;
                    update2.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update2, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root4 = enqueueConcurrentHookUpdate(fiber, queue, update2, lane);
              if (root4 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitionUpdate(root4, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update2) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update2.next = update2;
            } else {
              update2.next = pending.next;
              pending.next = update2;
            }
            queue.pending = update2;
          }
          function entangleTransitionUpdate(root4, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root4.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root4, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context3) {
                return readContext(context3);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context3) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context3);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source2, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context3) {
                return readContext(context3);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context3) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context3);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source2, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context3) {
                return readContext(context3);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context3) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context3);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source2, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context3) {
                return readContext(context3);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context3) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context3);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source2, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context3) {
                warnInvalidContextAccess();
                return readContext(context3);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context3) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context3);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source2, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context3) {
                warnInvalidContextAccess();
                return readContext(context3);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context3) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context3);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source2, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context3) {
                warnInvalidContextAccess();
                return readContext(context3);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context3) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context3);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source2, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root4 = parentFiber.stateNode;
                    root4.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root4 = parentFiber.stateNode;
                    if (root4 !== null) {
                      root4.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source2) {
            return {
              value,
              source: source2,
              stack: getStackByFiberInDevAndProd(source2),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source2 = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName2 = source2 ? getComponentNameFromFiber(source2) : null;
                var componentNameMessage = componentName2 ? "The above error occurred in the <" + componentName2 + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update2 = createUpdate(NoTimestamp, lane);
            update2.tag = CaptureUpdate;
            update2.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update2.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update2;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update2 = createUpdate(NoTimestamp, lane);
            update2.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update2.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update2.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update2.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update2;
          }
          function attachPingListener(root4, wakeable, lanes) {
            var pingCache = root4.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root4.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root4, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root4, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root4, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node5 = returnFiber;
            do {
              if (node5.tag === SuspenseComponent && shouldCaptureSuspense(node5)) {
                return node5;
              }
              node5 = node5.return;
            } while (node5 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update2 = createUpdate(NoTimestamp, SyncLane);
                    update2.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update2, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root4, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root4, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root4, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root4, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root4, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update2 = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update2);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component15, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component15.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component15)
                  );
                }
              }
            }
            var render2 = Component15.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component15, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component15.type;
              if (isSimpleFunctionComponent(type) && Component15.compare === null && Component15.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component15.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component15.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare2 = Component15.compare;
              compare2 = compare2 !== null ? compare2 : shallowEqual;
              if (compare2(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component15, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component15, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component15, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component15.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component15)
                  );
                }
              }
            }
            var context3;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component15, true);
              context3 = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component15, nextProps, context3, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component15, nextProps, context3, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component15, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update2 = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update2);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component15.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component15)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component15)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component15, nextProps);
              mountClassInstance(workInProgress2, Component15, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component15, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component15, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component15, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component15, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component15, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component15.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component15, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root4 = workInProgress2.stateNode;
            if (root4.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root4.pendingContext, root4.pendingContext !== root4.context);
            } else if (root4.context) {
              pushTopLevelContextObject(workInProgress2, root4.context, false);
            }
            pushHostContainer(workInProgress2, root4.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root4 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node5 = child;
                while (node5) {
                  node5.flags = node5.flags & ~Placement | Hydrating;
                  node5 = node5.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component15 = init(payload);
            workInProgress2.type = Component15;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component15);
            var resolvedProps = resolveDefaultProps(Component15, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component15);
                  workInProgress2.type = Component15 = resolveFunctionForHotReloading(Component15);
                }
                child = updateFunctionComponent(null, workInProgress2, Component15, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component15 = resolveClassForHotReloading(Component15);
                }
                child = updateClassComponent(null, workInProgress2, Component15, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component15 = resolveForwardRefForHotReloading(Component15);
                }
                child = updateForwardRef(null, workInProgress2, Component15, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component15.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        "prop",
                        getComponentNameFromType(Component15)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component15,
                  resolveDefaultProps(Component15.type, resolvedProps),
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component15 !== null && typeof Component15 === "object" && Component15.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component15 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component15, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component15)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component15, nextProps);
            mountClassInstance(workInProgress2, Component15, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component15, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component15, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context3;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component15, false);
              context3 = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component15.prototype && typeof Component15.prototype.render === "function") {
                var componentName2 = getComponentNameFromType(Component15) || "Unknown";
                if (!didWarnAboutBadClass[componentName2]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName2, componentName2);
                  didWarnAboutBadClass[componentName2] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component15, props, context3, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component15) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentNameFromType(Component15) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component15)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component15, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component15, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component15, props, context3, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component15);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component15) {
            {
              if (Component15) {
                if (Component15.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component15.displayName || Component15.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component15.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component15) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component15.contextType === "object" && Component15.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component15) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root4 = getWorkInProgressRoot();
                if (root4 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root4, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root4, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node5 = firstChild;
            while (node5 !== null) {
              if (node5.tag === SuspenseComponent) {
                var state = node5.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node5, renderLanes2, workInProgress2);
                }
              } else if (node5.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node5, renderLanes2, workInProgress2);
              } else if (node5.child !== null) {
                node5.child.return = node5;
                node5 = node5.child;
                continue;
              }
              if (node5 === workInProgress2) {
                return;
              }
              while (node5.sibling === null) {
                if (node5.return === null || node5.return === workInProgress2) {
                  return;
                }
                node5 = node5.return;
              }
              node5.sibling.return = node5.return;
              node5 = node5.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index3) {
            {
              var isAnArray = isArray2(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children2, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children2 !== void 0 && children2 !== null && children2 !== false) {
                if (isArray2(children2)) {
                  for (var i = 0; i < children2.length; i++) {
                    if (!validateSuspenseListNestedChild(children2[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children2);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children2);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    _tail,
                    null,
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    null,
                    null,
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context3 = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context3, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context3, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context3 = workInProgress2.type;
            {
              if (context3._context === void 0) {
                if (context3 !== context3.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context3 = context3._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context3);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root4 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component15 = workInProgress2.type;
                if (isContextProvider(Component15)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context3 = workInProgress2.type._context;
                pushProvider(workInProgress2, context3, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component15 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component15 ? unresolvedProps : resolveDefaultProps(Component15, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component15, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment9:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent2, workInProgress2, needsVisibilityToggle, isHidden) {
              var node5 = workInProgress2.child;
              while (node5 !== null) {
                if (node5.tag === HostComponent || node5.tag === HostText) {
                  appendInitialChild(parent2, node5.stateNode);
                } else if (node5.tag === HostPortal)
                  ;
                else if (node5.child !== null) {
                  node5.child.return = node5;
                  node5 = node5.child;
                  continue;
                }
                if (node5 === workInProgress2) {
                  return;
                }
                while (node5.sibling === null) {
                  if (node5.return === null || node5.return === workInProgress2) {
                    return;
                  }
                  node5 = node5.return;
                }
                node5.sibling.return = node5.return;
                node5 = node5.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment9:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component15 = workInProgress2.type;
                if (isContextProvider(Component15)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                        workInProgress2.flags |= Snapshot2;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context3 = workInProgress2.type._context;
                popProvider(context3, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component15 = workInProgress2.type;
                if (isContextProvider(Component15)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root4 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context3 = workInProgress2.type._context;
                popProvider(context3, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root4 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context3 = interruptedWork.type._context;
                popProvider(context3, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy2) {
            try {
              destroy2();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root4, firstChild) {
            focusedInstanceHandle = prepareForCommit(root4.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot2) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root4 = finishedWork.stateNode;
                    clearContainer(root4.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy2 = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy2 !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy2);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy2 = effect.destroy;
                    if (destroy2 !== void 0 && typeof destroy2 !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy2 === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy2.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy2;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root4 = parentFiber.stateNode;
                            root4.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root4 = parentFiber.stateNode;
                              root4.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node5) {
            switch (node5.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node5.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node5, node5.return);
                  } finally {
                    recordLayoutEffectDuration(node5);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node5, node5.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node5.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node5, node5.return, instance);
                }
                safelyAttachRef(node5, node5.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node5, node5.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node5 = finishedWork;
              while (true) {
                if (node5.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node5;
                    try {
                      var instance = node5.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node5.stateNode, node5.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node5.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node5.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node5.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node5.tag === OffscreenComponent || node5.tag === LegacyHiddenComponent) && node5.memoizedState !== null && node5 !== finishedWork)
                  ;
                else if (node5.child !== null) {
                  node5.child.return = node5;
                  node5 = node5.child;
                  continue;
                }
                if (node5 === finishedWork) {
                  return;
                }
                while (node5.sibling === null) {
                  if (node5.return === null || node5.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node5) {
                    hostSubtreeRoot = null;
                  }
                  node5 = node5.return;
                }
                if (hostSubtreeRoot === node5) {
                  hostSubtreeRoot = null;
                }
                node5.sibling.return = node5.return;
                node5 = node5.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent2 = fiber.return;
            while (parent2 !== null) {
              if (isHostParent(parent2)) {
                return parent2;
              }
              parent2 = parent2.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node5 = fiber;
            siblings:
              while (true) {
                while (node5.sibling === null) {
                  if (node5.return === null || isHostParent(node5.return)) {
                    return null;
                  }
                  node5 = node5.return;
                }
                node5.sibling.return = node5.return;
                node5 = node5.sibling;
                while (node5.tag !== HostComponent && node5.tag !== HostText && node5.tag !== DehydratedFragment) {
                  if (node5.flags & Placement) {
                    continue siblings;
                  }
                  if (node5.child === null || node5.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node5.child.return = node5;
                    node5 = node5.child;
                  }
                }
                if (!(node5.flags & Placement)) {
                  return node5.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent2 = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent2);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent2);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node5, before, parent2) {
            var tag = node5.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node5.stateNode;
              if (before) {
                insertInContainerBefore(parent2, stateNode, before);
              } else {
                appendChildToContainer(parent2, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node5.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent2);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent2);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node5, before, parent2) {
            var tag = node5.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node5.stateNode;
              if (before) {
                insertBefore(parent2, stateNode, before);
              } else {
                appendChild(parent2, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node5.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent2);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent2);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root4, returnFiber, deletedFiber) {
            {
              var parent2 = returnFiber;
              findParent:
                while (parent2 !== null) {
                  switch (parent2.tag) {
                    case HostComponent: {
                      hostParent = parent2.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent2.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent2.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent2 = parent2.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root4, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent2) {
            var child = parent2.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy2 = _effect.destroy, tag = _effect.tag;
                        if (destroy2 !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy2);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy2);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy2);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (deletedFiber.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root4, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root4;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root4);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root4, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root4, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root4);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root4, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root4.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (finishedWork.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root4, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root4, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root4, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root4;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root4, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root4, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      root4,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root4, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root4, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root4, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root4, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root4, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root4, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root4, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = 0;
          var BatchedContext = 1;
          var RenderContext = 2;
          var CommitContext = 4;
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition2 = ReactCurrentBatchConfig$3.transition;
                if (!transition2._updatedFibers) {
                  transition2._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition2._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root4, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root4, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root4 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root4, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root4 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root4, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root4, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root4, lane, eventTime) {
            var current2 = root4.current;
            current2.lanes = lane;
            markRootUpdated(root4, lane, eventTime);
            ensureRootIsScheduled(root4, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (executionContext & RenderContext) !== NoContext;
          }
          function ensureRootIsScheduled(root4, currentTime) {
            var existingCallbackNode = root4.callbackNode;
            markStarvedLanesAsExpired(root4, currentTime);
            var nextLanes = getNextLanes(root4, root4 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root4.callbackNode = null;
              root4.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root4.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root4.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root4));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root4));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root4));
            }
            root4.callbackPriority = newCallbackPriority;
            root4.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root4, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root4.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root4.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root4, root4 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root4, lanes) && !includesExpiredLane(root4, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root4, lanes) : renderRootSync(root4, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root4, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root4, NoLanes);
                markRootSuspended$1(root4, lanes);
                ensureRootIsScheduled(root4, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root4, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root4, lanes);
                var finishedWork = root4.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root4, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root4, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root4, NoLanes);
                    markRootSuspended$1(root4, lanes);
                    ensureRootIsScheduled(root4, now());
                    throw _fatalError;
                  }
                }
                root4.finishedWork = finishedWork;
                root4.finishedLanes = lanes;
                finishConcurrentRender(root4, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root4, now());
            if (root4.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root4);
            }
            return null;
          }
          function recoverFromConcurrentError(root4, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root4)) {
              var rootWorkInProgress = prepareFreshStack(root4, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root4.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root4, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root4, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root4, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root4, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root4.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root4, suspendedLanes);
                      break;
                    }
                    root4.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root4, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root4, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root4, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root4.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root4, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node5 = finishedWork;
            while (true) {
              if (node5.flags & StoreConsistency) {
                var updateQueue = node5.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node5.child;
              if (node5.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node5;
                node5 = child;
                continue;
              }
              if (node5 === finishedWork) {
                return true;
              }
              while (node5.sibling === null) {
                if (node5.return === null || node5.return === finishedWork) {
                  return true;
                }
                node5 = node5.return;
              }
              node5.sibling.return = node5.return;
              node5 = node5.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root4, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root4, suspendedLanes);
          }
          function performSyncWorkOnRoot(root4) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root4, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root4, now());
              return null;
            }
            var exitStatus = renderRootSync(root4, lanes);
            if (root4.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root4, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root4, NoLanes);
              markRootSuspended$1(root4, lanes);
              ensureRootIsScheduled(root4, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root4.current.alternate;
            root4.finishedWork = finishedWork;
            root4.finishedLanes = lanes;
            commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root4, now());
            return null;
          }
          function flushRoot(root4, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root4, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root4, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root4, lanes) {
            root4.finishedWork = null;
            root4.finishedLanes = NoLanes;
            var timeoutHandle = root4.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root4.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root4;
            var rootWorkInProgress = createWorkInProgress(root4.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root4, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root4, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root4, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root4 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root4.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root4, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root4, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root4, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root4, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root4, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root4 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root4.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root4, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root4, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root4, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root4, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root4, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root4, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root4, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root4.finishedWork;
            var lanes = root4.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root4.finishedWork = null;
            root4.finishedLanes = NoLanes;
            if (finishedWork === root4.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root4.callbackNode = null;
            root4.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root4, remainingLanes);
            if (root4 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root4, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root4, finishedWork, lanes);
              resetAfterCommit(root4.containerInfo);
              root4.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root4, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root4.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root4;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root4.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root4.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root4.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root4, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root4.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root4.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root4.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root4 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root4;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root4 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root4.current);
            commitPassiveMountEffects(root4, root4.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root4, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root4.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root4 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root4;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root4);
            {
              var stateNode = root4.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update2 = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root4 = enqueueUpdate(rootFiber, update2, SyncLane);
            var eventTime = requestEventTime();
            if (root4 !== null) {
              markRootUpdated(root4, SyncLane, eventTime);
              ensureRootIsScheduled(root4, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update2 = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root4 = enqueueUpdate(fiber, update2, SyncLane);
                  var eventTime = requestEventTime();
                  if (root4 !== null) {
                    markRootUpdated(root4, SyncLane, eventTime);
                    ensureRootIsScheduled(root4, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root4, wakeable, pingedLanes) {
            var pingCache = root4.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root4, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root4);
            if (workInProgressRoot === root4 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root4, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root4, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root4 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root4 !== null) {
              markRootUpdated(root4, retryLane, eventTime);
              ensureRootIsScheduled(root4, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName2 = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName2)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName2);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName2]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root4, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root4.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root4, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root4) {
            {
              if (root4.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root4, update2) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update2.staleFamilies, updatedFamilies = update2.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root4.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root4, element) {
            {
              if (root4.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root4, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root4, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root4.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node5 = fiber;
              while (true) {
                switch (node5.tag) {
                  case HostComponent:
                    hostInstances.add(node5.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node5.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node5.stateNode.containerInfo);
                    return;
                }
                if (node5.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node5 = node5.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node5 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node5.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node5.stateNode);
                } else if (node5.child !== null) {
                  node5.child.return = node5;
                  node5 = node5.child;
                  continue;
                }
                if (node5 === fiber) {
                  return foundHostInstances;
                }
                while (node5.sibling === null) {
                  if (node5.return === null || node5.return === fiber) {
                    return foundHostInstances;
                  }
                  node5 = node5.return;
                }
                node5.sibling.return = node5.return;
                node5 = node5.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component15) {
            var prototype = Component15.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component15) {
            if (typeof Component15 === "function") {
              return shouldConstruct$1(Component15) ? ClassComponent : FunctionComponent;
            } else if (Component15 !== void 0 && Component15 !== null) {
              var $$typeof = Component15.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment9, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source2) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source2.tag;
            target.key = source2.key;
            target.elementType = source2.elementType;
            target.type = source2.type;
            target.stateNode = source2.stateNode;
            target.return = source2.return;
            target.child = source2.child;
            target.sibling = source2.sibling;
            target.index = source2.index;
            target.ref = source2.ref;
            target.pendingProps = source2.pendingProps;
            target.memoizedProps = source2.memoizedProps;
            target.updateQueue = source2.updateQueue;
            target.memoizedState = source2.memoizedState;
            target.dependencies = source2.dependencies;
            target.mode = source2.mode;
            target.flags = source2.flags;
            target.subtreeFlags = source2.subtreeFlags;
            target.deletions = source2.deletions;
            target.lanes = source2.lanes;
            target.childLanes = source2.childLanes;
            target.alternate = source2.alternate;
            {
              target.actualDuration = source2.actualDuration;
              target.actualStartTime = source2.actualStartTime;
              target.selfBaseDuration = source2.selfBaseDuration;
              target.treeBaseDuration = source2.treeBaseDuration;
            }
            target._debugSource = source2._debugSource;
            target._debugOwner = source2._debugOwner;
            target._debugNeedsRemount = source2._debugNeedsRemount;
            target._debugHookTypes = source2._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate3, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate3 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate3 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate3, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root4 = new FiberRootNode(containerInfo, tag, hydrate3, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root4.current = uninitializedFiber;
            uninitializedFiber.stateNode = root4;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate3,
                cache: null,
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root4;
          }
          var ReactVersion = "18.2.0";
          function createPortal(children2, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children: children2,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get2(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component15 = fiber.type;
              if (isContextProvider(Component15)) {
                return processChildContext(fiber, Component15, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get2(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys2 = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys2);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName2 = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName2]) {
                  didWarnAboutFindNodeInStrictMode[componentName2] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName2);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName2);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate3 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate3, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate3 = true;
            var root4 = createFiberRoot(containerInfo, tag, hydrate3, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root4.context = getContextForSubtree(null);
            var current2 = root4.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update2 = createUpdate(eventTime, lane);
            update2.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update2, lane);
            scheduleInitialHydrationOnRoot(root4, lane, eventTime);
            return root4;
          }
          function updateContainer(element, container2, parentComponent, callback) {
            {
              onScheduleRoot(container2, element);
            }
            var current$1 = container2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context3 = getContextForSubtree(parentComponent);
            if (container2.context === null) {
              container2.context = context3;
            } else {
              container2.pendingContext = context3;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update2 = createUpdate(eventTime, lane);
            update2.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update2.callback = callback;
            }
            var root4 = enqueueUpdate(current$1, update2, lane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, current$1, lane, eventTime);
              entangleTransitions(root4, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container2) {
            var containerFiber = container2.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root4 = fiber.stateNode;
                if (isRootDehydrated(root4)) {
                  var lanes = getHighestPriorityPendingLanes(root4);
                  flushRoot(root4, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root5 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root5 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root5, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root4 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root4 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root4 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root4 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index3) {
              var key = path[index3];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              if (index3 + 1 === path.length) {
                if (isArray2(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index3 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
              var oldKey = oldPath[index3];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              if (index3 + 1 === oldPath.length) {
                var newKey = newPath[index3];
                updated[newKey] = updated[oldKey];
                if (isArray2(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index3 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index3, value) {
              if (index3 >= path.length) {
                return value;
              }
              var key = path[index3];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index3 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools,
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children2) {
            var root4 = this._internalRoot;
            if (root4 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container2 = root4.containerInfo;
              if (container2.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root4.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container2) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children2, root4, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root4 = this._internalRoot;
            if (root4 !== null) {
              this._internalRoot = null;
              var container2 = root4.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root4, null, null);
              });
              unmarkContainerAsRoot(container2);
            }
          };
          function createRoot2(container2, options2) {
            if (!isValidContainer(container2)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container2);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root4 = createContainer(container2, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root4.current, container2);
            var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root4);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container2, initialChildren, options2) {
            if (!isValidContainer(container2)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container2);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root4 = createHydrationContainer(initialChildren, null, container2, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root4.current, container2);
            listenToAllSupportedEvents(container2);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root4, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root4);
          }
          function isValidContainer(node5) {
            return !!(node5 && (node5.nodeType === ELEMENT_NODE || node5.nodeType === DOCUMENT_NODE || node5.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node5) {
            return !!(node5 && (node5.nodeType === ELEMENT_NODE || node5.nodeType === DOCUMENT_NODE || node5.nodeType === DOCUMENT_FRAGMENT_NODE || node5.nodeType === COMMENT_NODE && node5.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container2) {
            {
              if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container2)) {
                if (container2._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container2) {
              if (container2._reactRootContainer && container2.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container2._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container2) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container2._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container2);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container2) {
            if (!container2) {
              return null;
            }
            if (container2.nodeType === DOCUMENT_NODE) {
              return container2.documentElement;
            } else {
              return container2.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container2, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root4);
                  originalCallback.call(instance);
                };
              }
              var root4 = createHydrationContainer(
                initialChildren,
                callback,
                container2,
                LegacyRoot,
                null,
                false,
                false,
                "",
                noopOnRecoverableError
              );
              container2._reactRootContainer = root4;
              markContainerAsRoot(root4.current, container2);
              var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root4;
            } else {
              var rootSibling;
              while (rootSibling = container2.lastChild) {
                container2.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container2,
                LegacyRoot,
                null,
                false,
                false,
                "",
                noopOnRecoverableError
              );
              container2._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container2);
              var _rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children2, container2, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container2);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container2._reactRootContainer;
            var root4;
            if (!maybeRoot) {
              root4 = legacyCreateRootFromDOMContainer(container2, children2, parentComponent, callback, forceHydrate);
            } else {
              root4 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root4);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children2, root4, parentComponent, callback);
            }
            return getPublicRootInstance(root4);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate2(element, container2, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container2, true, callback);
          }
          function render(element, container2, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container2, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has2(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container2) {
            if (!isValidContainerLegacy(container2)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container2._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container2);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container2, false, function() {
                  container2._reactRootContainer = null;
                  unmarkContainerAsRoot(container2);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container2);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container2.nodeType === ELEMENT_NODE && isValidContainerLegacy(container2.parentNode) && !!container2.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children2, container2) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children2, container2, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container2, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container2, options2);
          }
          function hydrateRoot$1(container2, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container2, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM2 && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports2.createPortal = createPortal$1;
          exports2.createRoot = createRoot$1;
          exports2.findDOMNode = findDOMNode;
          exports2.flushSync = flushSync$1;
          exports2.hydrate = hydrate2;
          exports2.hydrateRoot = hydrateRoot$1;
          exports2.render = render;
          exports2.unmountComponentAtNode = unmountComponentAtNode;
          exports2.unstable_batchedUpdates = batchedUpdates$1;
          exports2.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        checkDCE();
        module2.exports = null;
      } else {
        module2.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports2) {
      "use strict";
      var m2 = require_react_dom();
      if (false) {
        exports2.createRoot = m2.createRoot;
        exports2.hydrateRoot = m2.hydrateRoot;
      } else {
        i = m2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports2.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m2.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports2.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m2.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/ProfilerContext.js
  var require_ProfilerContext = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/ProfilerContext.js"(exports2, module2) {
      "use strict";
      var React112 = require_react();
      var ProfilerContext = React112.createContext({
        wrapPrepareQueryResource: function wrapPrepareQueryResource(cb) {
          return cb();
        }
      });
      module2.exports = ProfilerContext;
    }
  });

  // node_modules/invariant/browser.js
  var require_browser = __commonJS({
    "node_modules/invariant/browser.js"(exports2, module2) {
      "use strict";
      var invariant5 = function(condition, format, a, b, c, d, e, f) {
        if (true) {
          if (format === void 0) {
            throw new Error("invariant requires an error message argument");
          }
        }
        if (!condition) {
          var error;
          if (format === void 0) {
            error = new Error(
              "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
            );
          } else {
            var args = [a, b, c, d, e, f];
            var argIndex = 0;
            error = new Error(
              format.replace(/%s/g, function() {
                return args[argIndex++];
              })
            );
            error.name = "Invariant Violation";
          }
          error.framesToPop = 1;
          throw error;
        }
      };
      module2.exports = invariant5;
    }
  });

  // node_modules/relay-runtime/lib/util/RelayFeatureFlags.js
  var require_RelayFeatureFlags = __commonJS({
    "node_modules/relay-runtime/lib/util/RelayFeatureFlags.js"(exports2, module2) {
      "use strict";
      var RelayFeatureFlags = {
        ENABLE_CLIENT_EDGES: false,
        ENABLE_VARIABLE_CONNECTION_KEY: false,
        ENABLE_PARTIAL_RENDERING_DEFAULT: true,
        ENABLE_REACT_FLIGHT_COMPONENT_FIELD: false,
        ENABLE_RELAY_RESOLVERS: false,
        ENABLE_GETFRAGMENTIDENTIFIER_OPTIMIZATION: false,
        ENABLE_FRIENDLY_QUERY_NAME_GQL_URL: false,
        ENABLE_LOAD_QUERY_REQUEST_DEDUPING: true,
        ENABLE_DO_NOT_WRAP_LIVE_QUERY: false,
        ENABLE_NOTIFY_SUBSCRIPTION: false,
        BATCH_ASYNC_MODULE_UPDATES_FN: null,
        ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT: false,
        MAX_DATA_ID_LENGTH: null,
        STRING_INTERN_LEVEL: 0,
        USE_REACT_CACHE: false,
        USE_REACT_CACHE_LEGACY_TIMEOUTS: true
      };
      module2.exports = RelayFeatureFlags;
    }
  });

  // node_modules/relay-runtime/lib/util/StringInterner.js
  var require_StringInterner = __commonJS({
    "node_modules/relay-runtime/lib/util/StringInterner.js"(exports2, module2) {
      "use strict";
      var internTable = /* @__PURE__ */ new Map();
      var nextIndex2 = 1;
      var digits = initDigitTable();
      var INTERN_PREFIX = "	";
      var ESCAPE_PREFIX = "\v";
      function initDigitTable() {
        var digits2 = /* @__PURE__ */ new Set();
        for (var i = 0; i < 10; ++i) {
          digits2.add(i.toString());
        }
        return digits2;
      }
      function escape(str) {
        if (str[0] === INTERN_PREFIX && digits.has(str[1]) || str[0] === ESCAPE_PREFIX) {
          return ESCAPE_PREFIX + str;
        }
        return str;
      }
      function intern(str, limit) {
        if (limit == null || str.length < limit) {
          return escape(str);
        }
        var internedString = internTable.get(str);
        if (internedString != null) {
          return internedString;
        }
        internedString = INTERN_PREFIX + nextIndex2++;
        internTable.set(str, internedString);
        return internedString;
      }
      module2.exports = {
        intern
      };
    }
  });

  // node_modules/relay-runtime/lib/store/ClientID.js
  var require_ClientID = __commonJS({
    "node_modules/relay-runtime/lib/store/ClientID.js"(exports2, module2) {
      "use strict";
      var RelayFeatureFlags = require_RelayFeatureFlags();
      var _require = require_StringInterner();
      var intern = _require.intern;
      var PREFIX = "client:";
      function generateClientID(id, storageKey, index2) {
        var internedId = RelayFeatureFlags.STRING_INTERN_LEVEL <= 0 ? id : intern(id, RelayFeatureFlags.MAX_DATA_ID_LENGTH);
        var key = internedId + ":" + storageKey;
        if (index2 != null) {
          key += ":" + index2;
        }
        if (key.indexOf(PREFIX) !== 0) {
          key = PREFIX + key;
        }
        return key;
      }
      function isClientID(id) {
        return id.indexOf(PREFIX) === 0;
      }
      var localID = 0;
      function generateUniqueClientID() {
        return "".concat(PREFIX, "local:").concat(localID++);
      }
      function generateClientObjectClientID(typename, localId) {
        return "".concat(PREFIX).concat(typename, ":").concat(localId);
      }
      module2.exports = {
        generateClientID,
        generateClientObjectClientID,
        generateUniqueClientID,
        isClientID
      };
    }
  });

  // node_modules/@babel/runtime/helpers/interopRequireDefault.js
  var require_interopRequireDefault = __commonJS({
    "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports2, module2) {
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      module2.exports = _interopRequireDefault, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/arrayLikeToArray.js
  var require_arrayLikeToArray = __commonJS({
    "node_modules/@babel/runtime/helpers/arrayLikeToArray.js"(exports2, module2) {
      function _arrayLikeToArray35(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      module2.exports = _arrayLikeToArray35, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/arrayWithoutHoles.js
  var require_arrayWithoutHoles = __commonJS({
    "node_modules/@babel/runtime/helpers/arrayWithoutHoles.js"(exports2, module2) {
      var arrayLikeToArray = require_arrayLikeToArray();
      function _arrayWithoutHoles5(arr) {
        if (Array.isArray(arr))
          return arrayLikeToArray(arr);
      }
      module2.exports = _arrayWithoutHoles5, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/iterableToArray.js
  var require_iterableToArray = __commonJS({
    "node_modules/@babel/runtime/helpers/iterableToArray.js"(exports2, module2) {
      function _iterableToArray5(iter) {
        if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
          return Array.from(iter);
      }
      module2.exports = _iterableToArray5, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js
  var require_unsupportedIterableToArray = __commonJS({
    "node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js"(exports2, module2) {
      var arrayLikeToArray = require_arrayLikeToArray();
      function _unsupportedIterableToArray35(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return arrayLikeToArray(o, minLen);
      }
      module2.exports = _unsupportedIterableToArray35, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/nonIterableSpread.js
  var require_nonIterableSpread = __commonJS({
    "node_modules/@babel/runtime/helpers/nonIterableSpread.js"(exports2, module2) {
      function _nonIterableSpread5() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      module2.exports = _nonIterableSpread5, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/toConsumableArray.js
  var require_toConsumableArray = __commonJS({
    "node_modules/@babel/runtime/helpers/toConsumableArray.js"(exports2, module2) {
      var arrayWithoutHoles = require_arrayWithoutHoles();
      var iterableToArray = require_iterableToArray();
      var unsupportedIterableToArray = require_unsupportedIterableToArray();
      var nonIterableSpread = require_nonIterableSpread();
      function _toConsumableArray5(arr) {
        return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
      }
      module2.exports = _toConsumableArray5, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/relay-runtime/lib/util/RelayDefaultHandleKey.js
  var require_RelayDefaultHandleKey = __commonJS({
    "node_modules/relay-runtime/lib/util/RelayDefaultHandleKey.js"(exports2, module2) {
      "use strict";
      module2.exports = {
        DEFAULT_HANDLE_KEY: ""
      };
    }
  });

  // node_modules/relay-runtime/lib/util/getRelayHandleKey.js
  var require_getRelayHandleKey = __commonJS({
    "node_modules/relay-runtime/lib/util/getRelayHandleKey.js"(exports2, module2) {
      "use strict";
      var _require = require_RelayDefaultHandleKey();
      var DEFAULT_HANDLE_KEY = _require.DEFAULT_HANDLE_KEY;
      var invariant5 = require_browser();
      function getRelayHandleKey(handleName, key, fieldName) {
        if (key && key !== DEFAULT_HANDLE_KEY) {
          return "__".concat(key, "_").concat(handleName);
        }
        !(fieldName != null) ? true ? invariant5(false, "getRelayHandleKey: Expected either `fieldName` or `key` in `handle` to be provided") : invariant5(false) : void 0;
        return "__".concat(fieldName, "_").concat(handleName);
      }
      module2.exports = getRelayHandleKey;
    }
  });

  // node_modules/relay-runtime/lib/util/RelayConcreteNode.js
  var require_RelayConcreteNode = __commonJS({
    "node_modules/relay-runtime/lib/util/RelayConcreteNode.js"(exports2, module2) {
      "use strict";
      var RelayConcreteNode = {
        ACTOR_CHANGE: "ActorChange",
        CONDITION: "Condition",
        CLIENT_COMPONENT: "ClientComponent",
        CLIENT_EDGE_TO_SERVER_OBJECT: "ClientEdgeToServerObject",
        CLIENT_EDGE_TO_CLIENT_OBJECT: "ClientEdgeToClientObject",
        CLIENT_EXTENSION: "ClientExtension",
        DEFER: "Defer",
        CONNECTION: "Connection",
        FLIGHT_FIELD: "FlightField",
        FRAGMENT: "Fragment",
        FRAGMENT_SPREAD: "FragmentSpread",
        INLINE_DATA_FRAGMENT_SPREAD: "InlineDataFragmentSpread",
        INLINE_DATA_FRAGMENT: "InlineDataFragment",
        INLINE_FRAGMENT: "InlineFragment",
        LINKED_FIELD: "LinkedField",
        LINKED_HANDLE: "LinkedHandle",
        LITERAL: "Literal",
        LIST_VALUE: "ListValue",
        LOCAL_ARGUMENT: "LocalArgument",
        MODULE_IMPORT: "ModuleImport",
        ALIASED_FRAGMENT_SPREAD: "AliasedFragmentSpread",
        ALIASED_INLINE_FRAGMENT_SPREAD: "AliasedInlineFragmentSpread",
        RELAY_RESOLVER: "RelayResolver",
        RELAY_LIVE_RESOLVER: "RelayLiveResolver",
        REQUIRED_FIELD: "RequiredField",
        OBJECT_VALUE: "ObjectValue",
        OPERATION: "Operation",
        REQUEST: "Request",
        ROOT_ARGUMENT: "RootArgument",
        SCALAR_FIELD: "ScalarField",
        SCALAR_HANDLE: "ScalarHandle",
        SPLIT_OPERATION: "SplitOperation",
        STREAM: "Stream",
        TYPE_DISCRIMINATOR: "TypeDiscriminator",
        UPDATABLE_QUERY: "UpdatableQuery",
        VARIABLE: "Variable"
      };
      module2.exports = RelayConcreteNode;
    }
  });

  // node_modules/relay-runtime/lib/util/stableCopy.js
  var require_stableCopy = __commonJS({
    "node_modules/relay-runtime/lib/util/stableCopy.js"(exports2, module2) {
      "use strict";
      function stableCopy(value) {
        if (!value || typeof value !== "object") {
          return value;
        }
        if (Array.isArray(value)) {
          return value.map(stableCopy);
        }
        var keys2 = Object.keys(value).sort();
        var stable = {};
        for (var i = 0; i < keys2.length; i++) {
          stable[keys2[i]] = stableCopy(value[keys2[i]]);
        }
        return stable;
      }
      module2.exports = stableCopy;
    }
  });

  // node_modules/relay-runtime/lib/store/RelayStoreUtils.js
  var require_RelayStoreUtils = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayStoreUtils.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _toConsumableArray22 = _interopRequireDefault(require_toConsumableArray());
      var getRelayHandleKey = require_getRelayHandleKey();
      var RelayConcreteNode = require_RelayConcreteNode();
      var stableCopy = require_stableCopy();
      var invariant5 = require_browser();
      var VARIABLE = RelayConcreteNode.VARIABLE;
      var LITERAL = RelayConcreteNode.LITERAL;
      var OBJECT_VALUE = RelayConcreteNode.OBJECT_VALUE;
      var LIST_VALUE = RelayConcreteNode.LIST_VALUE;
      var MODULE_COMPONENT_KEY_PREFIX = "__module_component_";
      var MODULE_OPERATION_KEY_PREFIX = "__module_operation_";
      function getArgumentValue(arg, variables) {
        if (arg.kind === VARIABLE) {
          return getStableVariableValue(arg.variableName, variables);
        } else if (arg.kind === LITERAL) {
          return arg.value;
        } else if (arg.kind === OBJECT_VALUE) {
          var value = {};
          arg.fields.forEach(function(field) {
            value[field.name] = getArgumentValue(field, variables);
          });
          return value;
        } else if (arg.kind === LIST_VALUE) {
          var _value = [];
          arg.items.forEach(function(item) {
            item != null ? _value.push(getArgumentValue(item, variables)) : null;
          });
          return _value;
        }
      }
      function getArgumentValues(args, variables) {
        var values5 = {};
        args.forEach(function(arg) {
          values5[arg.name] = getArgumentValue(arg, variables);
        });
        return values5;
      }
      function getHandleStorageKey(handleField, variables) {
        var dynamicKey = handleField.dynamicKey, handle = handleField.handle, key = handleField.key, name = handleField.name, args = handleField.args, filters = handleField.filters;
        var handleName = getRelayHandleKey(handle, key, name);
        var filterArgs = null;
        if (args && filters && args.length !== 0 && filters.length !== 0) {
          filterArgs = args.filter(function(arg) {
            return filters.indexOf(arg.name) > -1;
          });
        }
        if (dynamicKey) {
          filterArgs = filterArgs != null ? [dynamicKey].concat((0, _toConsumableArray22["default"])(filterArgs)) : [dynamicKey];
        }
        if (filterArgs === null) {
          return handleName;
        } else {
          return formatStorageKey(handleName, getArgumentValues(filterArgs, variables));
        }
      }
      function getStorageKey(field, variables) {
        if (field.storageKey) {
          return field.storageKey;
        }
        var args = getArguments(field);
        var name = field.name;
        return args && args.length !== 0 ? formatStorageKey(name, getArgumentValues(args, variables)) : name;
      }
      function getArguments(field) {
        if (field.kind === "RelayResolver" || field.kind === "RelayLiveResolver") {
          var _field$fragment2;
          if (field.args == null) {
            var _field$fragment;
            return (_field$fragment = field.fragment) === null || _field$fragment === void 0 ? void 0 : _field$fragment.args;
          }
          if (((_field$fragment2 = field.fragment) === null || _field$fragment2 === void 0 ? void 0 : _field$fragment2.args) == null) {
            return field.args;
          }
          return field.args.concat(field.fragment.args);
        }
        var args = typeof field.args === "undefined" ? void 0 : field.args;
        return args;
      }
      function getStableStorageKey(name, args) {
        return formatStorageKey(name, stableCopy(args));
      }
      function formatStorageKey(name, argValues) {
        if (!argValues) {
          return name;
        }
        var values5 = [];
        for (var argName in argValues) {
          if (argValues.hasOwnProperty(argName)) {
            var value = argValues[argName];
            if (value != null) {
              var _JSON$stringify;
              values5.push(argName + ":" + ((_JSON$stringify = JSON.stringify(value)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : "undefined"));
            }
          }
        }
        return values5.length === 0 ? name : name + "(".concat(values5.join(","), ")");
      }
      function getStableVariableValue(name, variables) {
        !variables.hasOwnProperty(name) ? true ? invariant5(false, "getVariableValue(): Undefined variable `%s`.", name) : invariant5(false) : void 0;
        return stableCopy(variables[name]);
      }
      function getModuleComponentKey(documentName) {
        return "".concat(MODULE_COMPONENT_KEY_PREFIX).concat(documentName);
      }
      function getModuleOperationKey(documentName) {
        return "".concat(MODULE_OPERATION_KEY_PREFIX).concat(documentName);
      }
      var RelayStoreUtils = {
        ACTOR_IDENTIFIER_KEY: "__actorIdentifier",
        CLIENT_EDGE_TRAVERSAL_PATH: "__clientEdgeTraversalPath",
        FRAGMENTS_KEY: "__fragments",
        FRAGMENT_OWNER_KEY: "__fragmentOwner",
        FRAGMENT_PROP_NAME_KEY: "__fragmentPropName",
        MODULE_COMPONENT_KEY: "__module_component",
        ID_KEY: "__id",
        REF_KEY: "__ref",
        REFS_KEY: "__refs",
        ROOT_ID: "client:root",
        ROOT_TYPE: "__Root",
        TYPENAME_KEY: "__typename",
        INVALIDATED_AT_KEY: "__invalidated_at",
        IS_WITHIN_UNMATCHED_TYPE_REFINEMENT: "__isWithinUnmatchedTypeRefinement",
        RELAY_RESOLVER_VALUE_KEY: "__resolverValue",
        RELAY_RESOLVER_INVALIDATION_KEY: "__resolverValueMayBeInvalid",
        RELAY_RESOLVER_SNAPSHOT_KEY: "__resolverSnapshot",
        RELAY_RESOLVER_ERROR_KEY: "__resolverError",
        formatStorageKey,
        getArgumentValue,
        getArgumentValues,
        getHandleStorageKey,
        getStorageKey,
        getStableStorageKey,
        getModuleComponentKey,
        getModuleOperationKey
      };
      module2.exports = RelayStoreUtils;
    }
  });

  // node_modules/relay-runtime/lib/handlers/connection/ConnectionInterface.js
  var require_ConnectionInterface = __commonJS({
    "node_modules/relay-runtime/lib/handlers/connection/ConnectionInterface.js"(exports2, module2) {
      "use strict";
      var CONNECTION_CALLS = {
        after: true,
        before: true,
        find: true,
        first: true,
        last: true,
        surrounds: true
      };
      var config = {
        CURSOR: "cursor",
        EDGES: "edges",
        END_CURSOR: "endCursor",
        HAS_NEXT_PAGE: "hasNextPage",
        HAS_PREV_PAGE: "hasPreviousPage",
        NODE: "node",
        PAGE_INFO_TYPE: "PageInfo",
        PAGE_INFO: "pageInfo",
        START_CURSOR: "startCursor"
      };
      var ConnectionInterface = {
        inject: function inject(newConfig) {
          config = newConfig;
        },
        get: function get2() {
          return config;
        },
        isConnectionCall: function isConnectionCall(call) {
          return CONNECTION_CALLS.hasOwnProperty(call.name);
        }
      };
      module2.exports = ConnectionInterface;
    }
  });

  // node_modules/fbjs/lib/emptyFunction.js
  var require_emptyFunction = __commonJS({
    "node_modules/fbjs/lib/emptyFunction.js"(exports2, module2) {
      "use strict";
      function makeEmptyFunction(arg) {
        return function() {
          return arg;
        };
      }
      var emptyFunction = function emptyFunction2() {
      };
      emptyFunction.thatReturns = makeEmptyFunction;
      emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
      emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
      emptyFunction.thatReturnsNull = makeEmptyFunction(null);
      emptyFunction.thatReturnsThis = function() {
        return this;
      };
      emptyFunction.thatReturnsArgument = function(arg) {
        return arg;
      };
      module2.exports = emptyFunction;
    }
  });

  // node_modules/fbjs/lib/warning.js
  var require_warning = __commonJS({
    "node_modules/fbjs/lib/warning.js"(exports2, module2) {
      "use strict";
      var emptyFunction = require_emptyFunction();
      function printWarning(format) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        var argIndex = 0;
        var message = "Warning: " + format.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      }
      var warning6 = true ? function(condition, format) {
        if (format === void 0) {
          throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
        }
        if (!condition) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }
          printWarning.apply(void 0, [format].concat(args));
        }
      } : emptyFunction;
      module2.exports = warning6;
    }
  });

  // node_modules/relay-runtime/lib/handlers/connection/ConnectionHandler.js
  var require_ConnectionHandler = __commonJS({
    "node_modules/relay-runtime/lib/handlers/connection/ConnectionHandler.js"(exports2, module2) {
      "use strict";
      var _require = require_ClientID();
      var generateClientID = _require.generateClientID;
      var _require2 = require_RelayStoreUtils();
      var getStableStorageKey = _require2.getStableStorageKey;
      var getRelayHandleKey = require_getRelayHandleKey();
      var ConnectionInterface = require_ConnectionInterface();
      var invariant5 = require_browser();
      var warning6 = require_warning();
      var CONNECTION = "connection";
      var NEXT_EDGE_INDEX = "__connection_next_edge_index";
      function update2(store, payload) {
        var record = store.get(payload.dataID);
        if (!record) {
          return;
        }
        var _ConnectionInterface$ = ConnectionInterface.get(), EDGES = _ConnectionInterface$.EDGES, END_CURSOR = _ConnectionInterface$.END_CURSOR, HAS_NEXT_PAGE = _ConnectionInterface$.HAS_NEXT_PAGE, HAS_PREV_PAGE = _ConnectionInterface$.HAS_PREV_PAGE, PAGE_INFO = _ConnectionInterface$.PAGE_INFO, PAGE_INFO_TYPE = _ConnectionInterface$.PAGE_INFO_TYPE, START_CURSOR = _ConnectionInterface$.START_CURSOR;
        var serverConnection = record.getLinkedRecord(payload.fieldKey);
        var serverPageInfo = serverConnection && serverConnection.getLinkedRecord(PAGE_INFO);
        if (!serverConnection) {
          record.setValue(null, payload.handleKey);
          return;
        }
        var clientConnectionID = generateClientID(record.getDataID(), payload.handleKey);
        var clientConnectionField = record.getLinkedRecord(payload.handleKey);
        var clientConnection = clientConnectionField !== null && clientConnectionField !== void 0 ? clientConnectionField : store.get(clientConnectionID);
        var clientPageInfo = clientConnection && clientConnection.getLinkedRecord(PAGE_INFO);
        if (!clientConnection) {
          var connection = store.create(clientConnectionID, serverConnection.getType());
          connection.setValue(0, NEXT_EDGE_INDEX);
          connection.copyFieldsFrom(serverConnection);
          var serverEdges = serverConnection.getLinkedRecords(EDGES);
          if (serverEdges) {
            serverEdges = serverEdges.map(function(edge) {
              return buildConnectionEdge(store, connection, edge);
            });
            connection.setLinkedRecords(serverEdges, EDGES);
          }
          record.setLinkedRecord(connection, payload.handleKey);
          clientPageInfo = store.create(generateClientID(connection.getDataID(), PAGE_INFO), PAGE_INFO_TYPE);
          clientPageInfo.setValue(false, HAS_NEXT_PAGE);
          clientPageInfo.setValue(false, HAS_PREV_PAGE);
          clientPageInfo.setValue(null, END_CURSOR);
          clientPageInfo.setValue(null, START_CURSOR);
          if (serverPageInfo) {
            clientPageInfo.copyFieldsFrom(serverPageInfo);
          }
          connection.setLinkedRecord(clientPageInfo, PAGE_INFO);
        } else {
          if (clientConnectionField == null) {
            record.setLinkedRecord(clientConnection, payload.handleKey);
          }
          var _connection = clientConnection;
          var _serverEdges = serverConnection.getLinkedRecords(EDGES);
          if (_serverEdges) {
            _serverEdges = _serverEdges.map(function(edge) {
              return buildConnectionEdge(store, _connection, edge);
            });
          }
          var prevEdges = _connection.getLinkedRecords(EDGES);
          var prevPageInfo = _connection.getLinkedRecord(PAGE_INFO);
          _connection.copyFieldsFrom(serverConnection);
          if (prevEdges) {
            _connection.setLinkedRecords(prevEdges, EDGES);
          }
          if (prevPageInfo) {
            _connection.setLinkedRecord(prevPageInfo, PAGE_INFO);
          }
          var nextEdges = [];
          var args = payload.args;
          if (prevEdges && _serverEdges) {
            if (args.after != null) {
              if (clientPageInfo && args.after === clientPageInfo.getValue(END_CURSOR)) {
                var nodeIDs = /* @__PURE__ */ new Set();
                mergeEdges(prevEdges, nextEdges, nodeIDs);
                mergeEdges(_serverEdges, nextEdges, nodeIDs);
              } else {
                true ? warning6(false, "Relay: Unexpected after cursor `%s`, edges must be fetched from the end of the list (`%s`).", args.after, clientPageInfo && clientPageInfo.getValue(END_CURSOR)) : void 0;
                return;
              }
            } else if (args.before != null) {
              if (clientPageInfo && args.before === clientPageInfo.getValue(START_CURSOR)) {
                var _nodeIDs = /* @__PURE__ */ new Set();
                mergeEdges(_serverEdges, nextEdges, _nodeIDs);
                mergeEdges(prevEdges, nextEdges, _nodeIDs);
              } else {
                true ? warning6(false, "Relay: Unexpected before cursor `%s`, edges must be fetched from the beginning of the list (`%s`).", args.before, clientPageInfo && clientPageInfo.getValue(START_CURSOR)) : void 0;
                return;
              }
            } else {
              nextEdges = _serverEdges;
            }
          } else if (_serverEdges) {
            nextEdges = _serverEdges;
          } else {
            nextEdges = prevEdges;
          }
          if (nextEdges != null && nextEdges !== prevEdges) {
            _connection.setLinkedRecords(nextEdges, EDGES);
          }
          if (clientPageInfo && serverPageInfo) {
            if (args.after == null && args.before == null) {
              clientPageInfo.copyFieldsFrom(serverPageInfo);
            } else if (args.before != null || args.after == null && args.last) {
              clientPageInfo.setValue(!!serverPageInfo.getValue(HAS_PREV_PAGE), HAS_PREV_PAGE);
              var startCursor = serverPageInfo.getValue(START_CURSOR);
              if (typeof startCursor === "string") {
                clientPageInfo.setValue(startCursor, START_CURSOR);
              }
            } else if (args.after != null || args.before == null && args.first) {
              clientPageInfo.setValue(!!serverPageInfo.getValue(HAS_NEXT_PAGE), HAS_NEXT_PAGE);
              var endCursor = serverPageInfo.getValue(END_CURSOR);
              if (typeof endCursor === "string") {
                clientPageInfo.setValue(endCursor, END_CURSOR);
              }
            }
          }
        }
      }
      function getConnection(record, key, filters) {
        var handleKey = getRelayHandleKey(CONNECTION, key, null);
        return record.getLinkedRecord(handleKey, filters);
      }
      function getConnectionID(recordID, key, filters) {
        var handleKey = getRelayHandleKey(CONNECTION, key, null);
        var storageKey = getStableStorageKey(handleKey, filters);
        return generateClientID(recordID, storageKey);
      }
      function insertEdgeAfter(record, newEdge, cursor2) {
        var _ConnectionInterface$2 = ConnectionInterface.get(), CURSOR = _ConnectionInterface$2.CURSOR, EDGES = _ConnectionInterface$2.EDGES;
        var edges = record.getLinkedRecords(EDGES);
        if (!edges) {
          record.setLinkedRecords([newEdge], EDGES);
          return;
        }
        var nextEdges;
        if (cursor2 == null) {
          nextEdges = edges.concat(newEdge);
        } else {
          nextEdges = [];
          var foundCursor = false;
          for (var ii = 0; ii < edges.length; ii++) {
            var edge = edges[ii];
            nextEdges.push(edge);
            if (edge == null) {
              continue;
            }
            var edgeCursor = edge.getValue(CURSOR);
            if (cursor2 === edgeCursor) {
              nextEdges.push(newEdge);
              foundCursor = true;
            }
          }
          if (!foundCursor) {
            nextEdges.push(newEdge);
          }
        }
        record.setLinkedRecords(nextEdges, EDGES);
      }
      function createEdge(store, record, node5, edgeType) {
        var _ConnectionInterface$3 = ConnectionInterface.get(), NODE = _ConnectionInterface$3.NODE;
        var edgeID = generateClientID(record.getDataID(), node5.getDataID());
        var edge = store.get(edgeID);
        if (!edge) {
          edge = store.create(edgeID, edgeType);
        }
        edge.setLinkedRecord(node5, NODE);
        if (edge.getValue("cursor") == null) {
          edge.setValue(null, "cursor");
        }
        return edge;
      }
      function insertEdgeBefore(record, newEdge, cursor2) {
        var _ConnectionInterface$4 = ConnectionInterface.get(), CURSOR = _ConnectionInterface$4.CURSOR, EDGES = _ConnectionInterface$4.EDGES;
        var edges = record.getLinkedRecords(EDGES);
        if (!edges) {
          record.setLinkedRecords([newEdge], EDGES);
          return;
        }
        var nextEdges;
        if (cursor2 == null) {
          nextEdges = [newEdge].concat(edges);
        } else {
          nextEdges = [];
          var foundCursor = false;
          for (var ii = 0; ii < edges.length; ii++) {
            var edge = edges[ii];
            if (edge != null) {
              var edgeCursor = edge.getValue(CURSOR);
              if (cursor2 === edgeCursor) {
                nextEdges.push(newEdge);
                foundCursor = true;
              }
            }
            nextEdges.push(edge);
          }
          if (!foundCursor) {
            nextEdges.unshift(newEdge);
          }
        }
        record.setLinkedRecords(nextEdges, EDGES);
      }
      function deleteNode(record, nodeID) {
        var _ConnectionInterface$5 = ConnectionInterface.get(), EDGES = _ConnectionInterface$5.EDGES, NODE = _ConnectionInterface$5.NODE;
        var edges = record.getLinkedRecords(EDGES);
        if (!edges) {
          return;
        }
        var nextEdges;
        for (var ii = 0; ii < edges.length; ii++) {
          var edge = edges[ii];
          var node5 = edge && edge.getLinkedRecord(NODE);
          if (node5 != null && node5.getDataID() === nodeID) {
            if (nextEdges === void 0) {
              nextEdges = edges.slice(0, ii);
            }
          } else if (nextEdges !== void 0) {
            nextEdges.push(edge);
          }
        }
        if (nextEdges !== void 0) {
          record.setLinkedRecords(nextEdges, EDGES);
        }
      }
      function buildConnectionEdge(store, connection, edge) {
        if (edge == null) {
          return edge;
        }
        var _ConnectionInterface$6 = ConnectionInterface.get(), EDGES = _ConnectionInterface$6.EDGES;
        var edgeIndex = connection.getValue(NEXT_EDGE_INDEX);
        !(typeof edgeIndex === "number") ? true ? invariant5(false, "ConnectionHandler: Expected %s to be a number, got `%s`.", NEXT_EDGE_INDEX, edgeIndex) : invariant5(false) : void 0;
        var edgeID = generateClientID(connection.getDataID(), EDGES, edgeIndex);
        var connectionEdge = store.create(edgeID, edge.getType());
        connectionEdge.copyFieldsFrom(edge);
        if (connectionEdge.getValue("cursor") == null) {
          connectionEdge.setValue(null, "cursor");
        }
        connection.setValue(edgeIndex + 1, NEXT_EDGE_INDEX);
        return connectionEdge;
      }
      function mergeEdges(sourceEdges, targetEdges, nodeIDs) {
        var _ConnectionInterface$7 = ConnectionInterface.get(), NODE = _ConnectionInterface$7.NODE;
        for (var ii = 0; ii < sourceEdges.length; ii++) {
          var edge = sourceEdges[ii];
          if (!edge) {
            continue;
          }
          var node5 = edge.getLinkedRecord(NODE);
          var nodeID = node5 && node5.getDataID();
          if (nodeID) {
            if (nodeIDs.has(nodeID)) {
              continue;
            }
            nodeIDs.add(nodeID);
          }
          targetEdges.push(edge);
        }
      }
      module2.exports = {
        buildConnectionEdge,
        createEdge,
        deleteNode,
        getConnection,
        getConnectionID,
        insertEdgeAfter,
        insertEdgeBefore,
        update: update2
      };
    }
  });

  // node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js
  var require_createForOfIteratorHelper = __commonJS({
    "node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"(exports2, module2) {
      var unsupportedIterableToArray = require_unsupportedIterableToArray();
      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
        if (!it) {
          if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it)
              o = it;
            var i = 0;
            var F = function F2() {
            };
            return {
              s: F,
              n: function n() {
                if (i >= o.length)
                  return {
                    done: true
                  };
                return {
                  done: false,
                  value: o[i++]
                };
              },
              e: function e(_e) {
                throw _e;
              },
              f: F
            };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err2;
        return {
          s: function s() {
            it = it.call(o);
          },
          n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
          },
          e: function e(_e2) {
            didErr = true;
            err2 = _e2;
          },
          f: function f() {
            try {
              if (!normalCompletion && it["return"] != null)
                it["return"]();
            } finally {
              if (didErr)
                throw err2;
            }
          }
        };
      }
      module2.exports = _createForOfIteratorHelper, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/relay-runtime/lib/handlers/connection/MutationHandlers.js
  var require_MutationHandlers = __commonJS({
    "node_modules/relay-runtime/lib/handlers/connection/MutationHandlers.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      var ConnectionHandler = require_ConnectionHandler();
      var ConnectionInterface = require_ConnectionInterface();
      var invariant5 = require_browser();
      var warning6 = require_warning();
      var DeleteRecordHandler = {
        update: function update2(store, payload) {
          var record = store.get(payload.dataID);
          if (record != null) {
            var idOrIds = record.getValue(payload.fieldKey);
            if (typeof idOrIds === "string") {
              store["delete"](idOrIds);
            } else if (Array.isArray(idOrIds)) {
              idOrIds.forEach(function(id) {
                if (typeof id === "string") {
                  store["delete"](id);
                }
              });
            }
          }
        }
      };
      var DeleteEdgeHandler = {
        update: function update2(store, payload) {
          var record = store.get(payload.dataID);
          if (record == null) {
            return;
          }
          var connections = payload.handleArgs.connections;
          !(connections != null) ? true ? invariant5(false, "MutationHandlers: Expected connection IDs to be specified.") : invariant5(false) : void 0;
          var idOrIds = record.getValue(payload.fieldKey);
          var idList = Array.isArray(idOrIds) ? idOrIds : [idOrIds];
          idList.forEach(function(id) {
            if (typeof id === "string") {
              var _iterator = (0, _createForOfIteratorHelper2["default"])(connections), _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                  var connectionID = _step.value;
                  var connection = store.get(connectionID);
                  if (connection == null) {
                    true ? warning6(false, "[Relay][Mutation] The connection with id '".concat(connectionID, "' doesn't exist.")) : void 0;
                    continue;
                  }
                  ConnectionHandler.deleteNode(connection, id);
                }
              } catch (err2) {
                _iterator.e(err2);
              } finally {
                _iterator.f();
              }
            }
          });
        }
      };
      var AppendEdgeHandler = {
        update: edgeUpdater(ConnectionHandler.insertEdgeAfter)
      };
      var PrependEdgeHandler = {
        update: edgeUpdater(ConnectionHandler.insertEdgeBefore)
      };
      var AppendNodeHandler = {
        update: nodeUpdater(ConnectionHandler.insertEdgeAfter)
      };
      var PrependNodeHandler = {
        update: nodeUpdater(ConnectionHandler.insertEdgeBefore)
      };
      function edgeUpdater(insertFn) {
        return function(store, payload) {
          var _serverEdges;
          var record = store.get(payload.dataID);
          if (record == null) {
            return;
          }
          var connections = payload.handleArgs.connections;
          !(connections != null) ? true ? invariant5(false, "MutationHandlers: Expected connection IDs to be specified.") : invariant5(false) : void 0;
          var singleServerEdge, serverEdges;
          try {
            singleServerEdge = record.getLinkedRecord(payload.fieldKey);
          } catch (_unused) {
          }
          if (!singleServerEdge) {
            try {
              serverEdges = record.getLinkedRecords(payload.fieldKey);
            } catch (_unused2) {
            }
          }
          if (singleServerEdge == null && serverEdges == null) {
            true ? warning6(false, "MutationHandlers: Expected the server edge to be non-null.") : void 0;
            return;
          }
          var _ConnectionInterface$ = ConnectionInterface.get(), NODE = _ConnectionInterface$.NODE, EDGES = _ConnectionInterface$.EDGES;
          var serverEdgeList = (_serverEdges = serverEdges) !== null && _serverEdges !== void 0 ? _serverEdges : [singleServerEdge];
          var _iterator2 = (0, _createForOfIteratorHelper2["default"])(serverEdgeList), _step2;
          try {
            var _loop = function _loop2() {
              var serverEdge = _step2.value;
              if (serverEdge == null) {
                return "continue";
              }
              var serverNode = serverEdge.getLinkedRecord("node");
              if (!serverNode) {
                return "continue";
              }
              var serverNodeId = serverNode.getDataID();
              var _iterator3 = (0, _createForOfIteratorHelper2["default"])(connections), _step3;
              try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                  var connectionID = _step3.value;
                  var connection = store.get(connectionID);
                  if (connection == null) {
                    true ? warning6(false, "[Relay][Mutation] The connection with id '".concat(connectionID, "' doesn't exist.")) : void 0;
                    continue;
                  }
                  var nodeAlreadyExistsInConnection = (_connection$getLinked = connection.getLinkedRecords(EDGES)) === null || _connection$getLinked === void 0 ? void 0 : _connection$getLinked.some(function(edge) {
                    var _edge$getLinkedRecord;
                    return (edge === null || edge === void 0 ? void 0 : (_edge$getLinkedRecord = edge.getLinkedRecord(NODE)) === null || _edge$getLinkedRecord === void 0 ? void 0 : _edge$getLinkedRecord.getDataID()) === serverNodeId;
                  });
                  if (nodeAlreadyExistsInConnection) {
                    continue;
                  }
                  var clientEdge = ConnectionHandler.buildConnectionEdge(store, connection, serverEdge);
                  !(clientEdge != null) ? true ? invariant5(false, "MutationHandlers: Failed to build the edge.") : invariant5(false) : void 0;
                  insertFn(connection, clientEdge);
                }
              } catch (err2) {
                _iterator3.e(err2);
              } finally {
                _iterator3.f();
              }
            };
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var _connection$getLinked;
              var _ret = _loop();
              if (_ret === "continue")
                continue;
            }
          } catch (err2) {
            _iterator2.e(err2);
          } finally {
            _iterator2.f();
          }
        };
      }
      function nodeUpdater(insertFn) {
        return function(store, payload) {
          var _serverNodes;
          var record = store.get(payload.dataID);
          if (record == null) {
            return;
          }
          var _payload$handleArgs = payload.handleArgs, connections = _payload$handleArgs.connections, edgeTypeName = _payload$handleArgs.edgeTypeName;
          !(connections != null) ? true ? invariant5(false, "MutationHandlers: Expected connection IDs to be specified.") : invariant5(false) : void 0;
          !(edgeTypeName != null) ? true ? invariant5(false, "MutationHandlers: Expected edge typename to be specified.") : invariant5(false) : void 0;
          var singleServerNode;
          var serverNodes;
          try {
            singleServerNode = record.getLinkedRecord(payload.fieldKey);
          } catch (_unused3) {
          }
          if (!singleServerNode) {
            try {
              serverNodes = record.getLinkedRecords(payload.fieldKey);
            } catch (_unused4) {
            }
          }
          if (singleServerNode == null && serverNodes == null) {
            true ? warning6(false, "MutationHandlers: Expected target node to exist.") : void 0;
            return;
          }
          var _ConnectionInterface$2 = ConnectionInterface.get(), NODE = _ConnectionInterface$2.NODE, EDGES = _ConnectionInterface$2.EDGES;
          var serverNodeList = (_serverNodes = serverNodes) !== null && _serverNodes !== void 0 ? _serverNodes : [singleServerNode];
          var _iterator4 = (0, _createForOfIteratorHelper2["default"])(serverNodeList), _step4;
          try {
            var _loop2 = function _loop22() {
              var serverNode = _step4.value;
              if (serverNode == null) {
                return "continue";
              }
              var serverNodeId = serverNode.getDataID();
              var _iterator5 = (0, _createForOfIteratorHelper2["default"])(connections), _step5;
              try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                  var connectionID = _step5.value;
                  var connection = store.get(connectionID);
                  if (connection == null) {
                    true ? warning6(false, "[Relay][Mutation] The connection with id '".concat(connectionID, "' doesn't exist.")) : void 0;
                    continue;
                  }
                  var nodeAlreadyExistsInConnection = (_connection$getLinked2 = connection.getLinkedRecords(EDGES)) === null || _connection$getLinked2 === void 0 ? void 0 : _connection$getLinked2.some(function(edge) {
                    var _edge$getLinkedRecord2;
                    return (edge === null || edge === void 0 ? void 0 : (_edge$getLinkedRecord2 = edge.getLinkedRecord(NODE)) === null || _edge$getLinkedRecord2 === void 0 ? void 0 : _edge$getLinkedRecord2.getDataID()) === serverNodeId;
                  });
                  if (nodeAlreadyExistsInConnection) {
                    continue;
                  }
                  var clientEdge = ConnectionHandler.createEdge(store, connection, serverNode, edgeTypeName);
                  !(clientEdge != null) ? true ? invariant5(false, "MutationHandlers: Failed to build the edge.") : invariant5(false) : void 0;
                  insertFn(connection, clientEdge);
                }
              } catch (err2) {
                _iterator5.e(err2);
              } finally {
                _iterator5.f();
              }
            };
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
              var _connection$getLinked2;
              var _ret2 = _loop2();
              if (_ret2 === "continue")
                continue;
            }
          } catch (err2) {
            _iterator4.e(err2);
          } finally {
            _iterator4.f();
          }
        };
      }
      module2.exports = {
        AppendEdgeHandler,
        DeleteRecordHandler,
        PrependEdgeHandler,
        AppendNodeHandler,
        PrependNodeHandler,
        DeleteEdgeHandler
      };
    }
  });

  // node_modules/relay-runtime/lib/handlers/RelayDefaultHandlerProvider.js
  var require_RelayDefaultHandlerProvider = __commonJS({
    "node_modules/relay-runtime/lib/handlers/RelayDefaultHandlerProvider.js"(exports2, module2) {
      "use strict";
      var ConnectionHandler = require_ConnectionHandler();
      var MutationHandlers = require_MutationHandlers();
      var invariant5 = require_browser();
      function RelayDefaultHandlerProvider(handle) {
        switch (handle) {
          case "connection":
            return ConnectionHandler;
          case "deleteRecord":
            return MutationHandlers.DeleteRecordHandler;
          case "deleteEdge":
            return MutationHandlers.DeleteEdgeHandler;
          case "appendEdge":
            return MutationHandlers.AppendEdgeHandler;
          case "prependEdge":
            return MutationHandlers.PrependEdgeHandler;
          case "appendNode":
            return MutationHandlers.AppendNodeHandler;
          case "prependNode":
            return MutationHandlers.PrependNodeHandler;
        }
        true ? true ? invariant5(false, "RelayDefaultHandlerProvider: No handler provided for `%s`.", handle) : invariant5(false) : void 0;
      }
      module2.exports = RelayDefaultHandlerProvider;
    }
  });

  // node_modules/relay-runtime/lib/query/GraphQLTag.js
  var require_GraphQLTag = __commonJS({
    "node_modules/relay-runtime/lib/query/GraphQLTag.js"(exports2, module2) {
      "use strict";
      var RelayConcreteNode = require_RelayConcreteNode();
      var invariant5 = require_browser();
      var warning6 = require_warning();
      function graphql(strings) {
        true ? true ? invariant5(false, "graphql: Unexpected invocation at runtime. Either the Babel transform was not set up, or it failed to identify this call site. Make sure it is being used verbatim as `graphql`. Note also that there cannot be a space between graphql and the backtick that follows.") : invariant5(false) : void 0;
      }
      function getNode2(taggedNode) {
        var node5 = taggedNode;
        if (typeof node5 === "function") {
          node5 = node5();
          true ? warning6(false, "RelayGraphQLTag: node `%s` unexpectedly wrapped in a function.", node5.kind === "Fragment" ? node5.name : node5.operation.name) : void 0;
        } else if (node5["default"]) {
          node5 = node5["default"];
        }
        return node5;
      }
      function isFragment2(node5) {
        var fragment = getNode2(node5);
        return typeof fragment === "object" && fragment !== null && fragment.kind === RelayConcreteNode.FRAGMENT;
      }
      function isRequest(node5) {
        var request = getNode2(node5);
        return typeof request === "object" && request !== null && request.kind === RelayConcreteNode.REQUEST;
      }
      function isUpdatableQuery(node5) {
        var updatableQuery = getNode2(node5);
        return typeof updatableQuery === "object" && updatableQuery !== null && updatableQuery.kind === RelayConcreteNode.UPDATABLE_QUERY;
      }
      function isInlineDataFragment(node5) {
        var fragment = getNode2(node5);
        return typeof fragment === "object" && fragment !== null && fragment.kind === RelayConcreteNode.INLINE_DATA_FRAGMENT;
      }
      function getFragment(taggedNode) {
        var fragment = getNode2(taggedNode);
        !isFragment2(fragment) ? true ? invariant5(false, "GraphQLTag: Expected a fragment, got `%s`.", JSON.stringify(fragment)) : invariant5(false) : void 0;
        return fragment;
      }
      function getPaginationFragment(taggedNode) {
        var _fragment$metadata;
        var fragment = getFragment(taggedNode);
        var refetch = (_fragment$metadata = fragment.metadata) === null || _fragment$metadata === void 0 ? void 0 : _fragment$metadata.refetch;
        var connection = refetch === null || refetch === void 0 ? void 0 : refetch.connection;
        if (refetch === null || typeof refetch !== "object" || connection === null || typeof connection !== "object") {
          return null;
        }
        return fragment;
      }
      function getRefetchableFragment(taggedNode) {
        var _fragment$metadata2;
        var fragment = getFragment(taggedNode);
        var refetch = (_fragment$metadata2 = fragment.metadata) === null || _fragment$metadata2 === void 0 ? void 0 : _fragment$metadata2.refetch;
        if (refetch === null || typeof refetch !== "object") {
          return null;
        }
        return fragment;
      }
      function getRequest(taggedNode) {
        var request = getNode2(taggedNode);
        !isRequest(request) ? true ? invariant5(false, "GraphQLTag: Expected a request, got `%s`.", JSON.stringify(request)) : invariant5(false) : void 0;
        return request;
      }
      function getUpdatableQuery(taggedNode) {
        var updatableQuery = getNode2(taggedNode);
        !isUpdatableQuery(updatableQuery) ? true ? invariant5(false, "GraphQLTag: Expected a request, got `%s`.", JSON.stringify(updatableQuery)) : invariant5(false) : void 0;
        return updatableQuery;
      }
      function getInlineDataFragment(taggedNode) {
        var fragment = getNode2(taggedNode);
        !isInlineDataFragment(fragment) ? true ? invariant5(false, "GraphQLTag: Expected an inline data fragment, got `%s`.", JSON.stringify(fragment)) : invariant5(false) : void 0;
        return fragment;
      }
      module2.exports = {
        getFragment,
        getNode: getNode2,
        getPaginationFragment,
        getRefetchableFragment,
        getRequest,
        getUpdatableQuery,
        getInlineDataFragment,
        graphql,
        isFragment: isFragment2,
        isRequest,
        isUpdatableQuery,
        isInlineDataFragment
      };
    }
  });

  // node_modules/relay-runtime/lib/store/isRelayModernEnvironment.js
  var require_isRelayModernEnvironment = __commonJS({
    "node_modules/relay-runtime/lib/store/isRelayModernEnvironment.js"(exports2, module2) {
      "use strict";
      function isRelayModernEnvironment(environment) {
        return Boolean(environment && environment["@@RelayModernEnvironment"]);
      }
      module2.exports = isRelayModernEnvironment;
    }
  });

  // node_modules/relay-runtime/lib/util/deepFreeze.js
  var require_deepFreeze = __commonJS({
    "node_modules/relay-runtime/lib/util/deepFreeze.js"(exports2, module2) {
      "use strict";
      function deepFreeze(object2) {
        Object.freeze(object2);
        Object.getOwnPropertyNames(object2).forEach(function(name) {
          var property = object2[name];
          if (property && typeof property === "object" && !Object.isFrozen(property)) {
            deepFreeze(property);
          }
        });
        return object2;
      }
      module2.exports = deepFreeze;
    }
  });

  // node_modules/relay-runtime/lib/util/getRequestIdentifier.js
  var require_getRequestIdentifier = __commonJS({
    "node_modules/relay-runtime/lib/util/getRequestIdentifier.js"(exports2, module2) {
      "use strict";
      var stableCopy = require_stableCopy();
      var invariant5 = require_browser();
      function getRequestIdentifier(parameters, variables) {
        var requestID = parameters.cacheID != null ? parameters.cacheID : parameters.id;
        !(requestID != null) ? true ? invariant5(false, "getRequestIdentifier: Expected request `%s` to have either a valid `id` or `cacheID` property", parameters.name) : invariant5(false) : void 0;
        return requestID + JSON.stringify(stableCopy(variables));
      }
      module2.exports = getRequestIdentifier;
    }
  });

  // node_modules/@babel/runtime/helpers/typeof.js
  var require_typeof = __commonJS({
    "node_modules/@babel/runtime/helpers/typeof.js"(exports2, module2) {
      function _typeof15(obj) {
        "@babel/helpers - typeof";
        return module2.exports = _typeof15 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _typeof15(obj);
      }
      module2.exports = _typeof15, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/toPrimitive.js
  var require_toPrimitive = __commonJS({
    "node_modules/@babel/runtime/helpers/toPrimitive.js"(exports2, module2) {
      var _typeof15 = require_typeof()["default"];
      function _toPrimitive3(input, hint) {
        if (_typeof15(input) !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (_typeof15(res) !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      module2.exports = _toPrimitive3, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/toPropertyKey.js
  var require_toPropertyKey = __commonJS({
    "node_modules/@babel/runtime/helpers/toPropertyKey.js"(exports2, module2) {
      var _typeof15 = require_typeof()["default"];
      var toPrimitive = require_toPrimitive();
      function _toPropertyKey3(arg) {
        var key = toPrimitive(arg, "string");
        return _typeof15(key) === "symbol" ? key : String(key);
      }
      module2.exports = _toPropertyKey3, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/defineProperty.js
  var require_defineProperty = __commonJS({
    "node_modules/@babel/runtime/helpers/defineProperty.js"(exports2, module2) {
      var toPropertyKey = require_toPropertyKey();
      function _defineProperty38(obj, key, value) {
        key = toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      module2.exports = _defineProperty38, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/objectSpread2.js
  var require_objectSpread2 = __commonJS({
    "node_modules/@babel/runtime/helpers/objectSpread2.js"(exports2, module2) {
      var defineProperty3 = require_defineProperty();
      function ownKeys28(object2, enumerableOnly) {
        var keys2 = Object.keys(object2);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object2);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread28(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source2 = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys28(Object(source2), true).forEach(function(key) {
            defineProperty3(target, key, source2[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys28(Object(source2)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
          });
        }
        return target;
      }
      module2.exports = _objectSpread28, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/relay-runtime/lib/store/RelayConcreteVariables.js
  var require_RelayConcreteVariables = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayConcreteVariables.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var _require = require_RelayStoreUtils();
      var getArgumentValues = _require.getArgumentValues;
      var invariant5 = require_browser();
      function getFragmentVariables(fragment, rootVariables, argumentVariables) {
        if (fragment.argumentDefinitions == null) {
          return argumentVariables;
        }
        var variables;
        fragment.argumentDefinitions.forEach(function(definition) {
          if (argumentVariables.hasOwnProperty(definition.name)) {
            return;
          }
          variables = variables || (0, _objectSpread28["default"])({}, argumentVariables);
          switch (definition.kind) {
            case "LocalArgument":
              variables[definition.name] = definition.defaultValue;
              break;
            case "RootArgument":
              if (!rootVariables.hasOwnProperty(definition.name)) {
                variables[definition.name] = void 0;
                break;
              }
              variables[definition.name] = rootVariables[definition.name];
              break;
            default:
              definition;
              true ? true ? invariant5(false, "RelayConcreteVariables: Unexpected node kind `%s` in fragment `%s`.", definition.kind, fragment.name) : invariant5(false) : void 0;
          }
        });
        return variables || argumentVariables;
      }
      function getOperationVariables(operation, providedVariables, variables) {
        var operationVariables = {};
        operation.argumentDefinitions.forEach(function(def) {
          var value = def.defaultValue;
          if (variables[def.name] != null) {
            value = variables[def.name];
          }
          operationVariables[def.name] = value;
        });
        if (providedVariables != null) {
          Object.keys(providedVariables).forEach(function(varName) {
            operationVariables[varName] = providedVariables[varName].get();
          });
        }
        return operationVariables;
      }
      function getLocalVariables(currentVariables, argumentDefinitions, args) {
        if (argumentDefinitions == null) {
          return currentVariables;
        }
        var nextVariables = (0, _objectSpread28["default"])({}, currentVariables);
        var nextArgs = args ? getArgumentValues(args, currentVariables) : {};
        argumentDefinitions.forEach(function(def) {
          var _nextArgs$def$name;
          var value = (_nextArgs$def$name = nextArgs[def.name]) !== null && _nextArgs$def$name !== void 0 ? _nextArgs$def$name : def.defaultValue;
          nextVariables[def.name] = value;
        });
        return nextVariables;
      }
      module2.exports = {
        getLocalVariables,
        getFragmentVariables,
        getOperationVariables
      };
    }
  });

  // node_modules/fbjs/lib/areEqual.js
  var require_areEqual = __commonJS({
    "node_modules/fbjs/lib/areEqual.js"(exports2, module2) {
      "use strict";
      var aStackPool = [];
      var bStackPool = [];
      function areEqual(a, b) {
        var aStack = aStackPool.length ? aStackPool.pop() : [];
        var bStack = bStackPool.length ? bStackPool.pop() : [];
        var result = eq2(a, b, aStack, bStack);
        aStack.length = 0;
        bStack.length = 0;
        aStackPool.push(aStack);
        bStackPool.push(bStack);
        return result;
      }
      function eq2(a, b, aStack, bStack) {
        if (a === b) {
          return a !== 0 || 1 / a == 1 / b;
        }
        if (a == null || b == null) {
          return false;
        }
        if (typeof a != "object" || typeof b != "object") {
          return false;
        }
        var objToStr = Object.prototype.toString;
        var className = objToStr.call(a);
        if (className != objToStr.call(b)) {
          return false;
        }
        switch (className) {
          case "[object String]":
            return a == String(b);
          case "[object Number]":
            return isNaN(a) || isNaN(b) ? false : a == Number(b);
          case "[object Date]":
          case "[object Boolean]":
            return +a == +b;
          case "[object RegExp]":
            return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
        }
        var length = aStack.length;
        while (length--) {
          if (aStack[length] == a) {
            return bStack[length] == b;
          }
        }
        aStack.push(a);
        bStack.push(b);
        var size = 0;
        if (className === "[object Array]") {
          size = a.length;
          if (size !== b.length) {
            return false;
          }
          while (size--) {
            if (!eq2(a[size], b[size], aStack, bStack)) {
              return false;
            }
          }
        } else {
          if (a.constructor !== b.constructor) {
            return false;
          }
          if (a.hasOwnProperty("valueOf") && b.hasOwnProperty("valueOf")) {
            return a.valueOf() == b.valueOf();
          }
          var keys2 = Object.keys(a);
          if (keys2.length != Object.keys(b).length) {
            return false;
          }
          for (var i = 0; i < keys2.length; i++) {
            if (!eq2(a[keys2[i]], b[keys2[i]], aStack, bStack)) {
              return false;
            }
          }
        }
        aStack.pop();
        bStack.pop();
        return true;
      }
      module2.exports = areEqual;
    }
  });

  // node_modules/relay-runtime/lib/store/RelayModernSelector.js
  var require_RelayModernSelector = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayModernSelector.js"(exports2, module2) {
      "use strict";
      var _require = require_RelayConcreteVariables();
      var getFragmentVariables = _require.getFragmentVariables;
      var _require2 = require_RelayStoreUtils();
      var CLIENT_EDGE_TRAVERSAL_PATH = _require2.CLIENT_EDGE_TRAVERSAL_PATH;
      var FRAGMENT_OWNER_KEY = _require2.FRAGMENT_OWNER_KEY;
      var FRAGMENTS_KEY = _require2.FRAGMENTS_KEY;
      var ID_KEY2 = _require2.ID_KEY;
      var IS_WITHIN_UNMATCHED_TYPE_REFINEMENT = _require2.IS_WITHIN_UNMATCHED_TYPE_REFINEMENT;
      var areEqual = require_areEqual();
      var invariant5 = require_browser();
      var warning6 = require_warning();
      function getSingularSelector(fragment, item) {
        !(typeof item === "object" && item !== null && !Array.isArray(item)) ? true ? invariant5(false, "RelayModernSelector: Expected value for fragment `%s` to be an object, got `%s`.", fragment.name, JSON.stringify(item)) : invariant5(false) : void 0;
        var dataID = item[ID_KEY2];
        var fragments = item[FRAGMENTS_KEY];
        var mixedOwner = item[FRAGMENT_OWNER_KEY];
        var isWithinUnmatchedTypeRefinement = item[IS_WITHIN_UNMATCHED_TYPE_REFINEMENT] === true;
        var mixedClientEdgeTraversalPath = item[CLIENT_EDGE_TRAVERSAL_PATH];
        if (typeof dataID === "string" && typeof fragments === "object" && fragments !== null && typeof fragments[fragment.name] === "object" && fragments[fragment.name] !== null && typeof mixedOwner === "object" && mixedOwner !== null && (mixedClientEdgeTraversalPath == null || Array.isArray(mixedClientEdgeTraversalPath))) {
          var owner = mixedOwner;
          var clientEdgeTraversalPath = mixedClientEdgeTraversalPath;
          var argumentVariables = fragments[fragment.name];
          var fragmentVariables = getFragmentVariables(fragment, owner.variables, argumentVariables);
          return createReaderSelector(fragment, dataID, fragmentVariables, owner, isWithinUnmatchedTypeRefinement, clientEdgeTraversalPath);
        }
        if (true) {
          var stringifiedItem = JSON.stringify(item);
          if (stringifiedItem.length > 499) {
            stringifiedItem = stringifiedItem.substr(0, 498) + "\u2026";
          }
          true ? warning6(false, "RelayModernSelector: Expected object to contain data for fragment `%s`, got `%s`. Make sure that the parent operation/fragment included fragment `...%s` without `@relay(mask: false)`.", fragment.name, stringifiedItem, fragment.name) : void 0;
        }
        return null;
      }
      function getPluralSelector(fragment, items) {
        var selectors = null;
        items.forEach(function(item, ii) {
          var selector2 = item != null ? getSingularSelector(fragment, item) : null;
          if (selector2 != null) {
            selectors = selectors || [];
            selectors.push(selector2);
          }
        });
        if (selectors == null) {
          return null;
        } else {
          return {
            kind: "PluralReaderSelector",
            selectors
          };
        }
      }
      function getSelector(fragment, item) {
        if (item == null) {
          return item;
        } else if (fragment.metadata && fragment.metadata.plural === true) {
          !Array.isArray(item) ? true ? invariant5(false, "RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.", fragment.name, JSON.stringify(item), fragment.name) : invariant5(false) : void 0;
          return getPluralSelector(fragment, item);
        } else {
          !!Array.isArray(item) ? true ? invariant5(false, "RelayModernSelector: Expected value for fragment `%s` to be an object, got `%s`. Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.", fragment.name, JSON.stringify(item), fragment.name) : invariant5(false) : void 0;
          return getSingularSelector(fragment, item);
        }
      }
      function getSelectorsFromObject(fragments, object2) {
        var selectors = {};
        for (var key in fragments) {
          if (fragments.hasOwnProperty(key)) {
            var fragment = fragments[key];
            var item = object2[key];
            selectors[key] = getSelector(fragment, item);
          }
        }
        return selectors;
      }
      function getDataIDsFromObject(fragments, object2) {
        var ids = {};
        for (var key in fragments) {
          if (fragments.hasOwnProperty(key)) {
            var fragment = fragments[key];
            var item = object2[key];
            ids[key] = getDataIDsFromFragment(fragment, item);
          }
        }
        return ids;
      }
      function getDataIDsFromFragment(fragment, item) {
        if (item == null) {
          return item;
        } else if (fragment.metadata && fragment.metadata.plural === true) {
          !Array.isArray(item) ? true ? invariant5(false, "RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.", fragment.name, JSON.stringify(item), fragment.name) : invariant5(false) : void 0;
          return getDataIDs(fragment, item);
        } else {
          !!Array.isArray(item) ? true ? invariant5(false, "RelayModernFragmentSpecResolver: Expected value for fragment `%s` to be an object, got `%s`. Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.", fragment.name, JSON.stringify(item), fragment.name) : invariant5(false) : void 0;
          return getDataID(fragment, item);
        }
      }
      function getDataIDs(fragment, items) {
        var ids = null;
        items.forEach(function(item) {
          var id = item != null ? getDataID(fragment, item) : null;
          if (id != null) {
            ids = ids || [];
            ids.push(id);
          }
        });
        return ids;
      }
      function getDataID(fragment, item) {
        !(typeof item === "object" && item !== null && !Array.isArray(item)) ? true ? invariant5(false, "RelayModernSelector: Expected value for fragment `%s` to be an object, got `%s`.", fragment.name, JSON.stringify(item)) : invariant5(false) : void 0;
        var dataID = item[ID_KEY2];
        if (typeof dataID === "string") {
          return dataID;
        }
        true ? warning6(false, "RelayModernSelector: Expected object to contain data for fragment `%s`, got `%s`. Make sure that the parent operation/fragment included fragment `...%s` without `@relay(mask: false)`, or `null` is passed as the fragment reference for `%s` if it's conditonally included and the condition isn't met.", fragment.name, JSON.stringify(item), fragment.name, fragment.name) : void 0;
        return null;
      }
      function getVariablesFromObject(fragments, object2) {
        var variables = {};
        for (var key in fragments) {
          if (fragments.hasOwnProperty(key)) {
            var fragment = fragments[key];
            var item = object2[key];
            var itemVariables = getVariablesFromFragment(fragment, item);
            Object.assign(variables, itemVariables);
          }
        }
        return variables;
      }
      function getVariablesFromFragment(fragment, item) {
        var _fragment$metadata;
        if (item == null) {
          return {};
        } else if (((_fragment$metadata = fragment.metadata) === null || _fragment$metadata === void 0 ? void 0 : _fragment$metadata.plural) === true) {
          !Array.isArray(item) ? true ? invariant5(false, "RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.", fragment.name, JSON.stringify(item), fragment.name) : invariant5(false) : void 0;
          return getVariablesFromPluralFragment(fragment, item);
        } else {
          !!Array.isArray(item) ? true ? invariant5(false, "RelayModernFragmentSpecResolver: Expected value for fragment `%s` to be an object, got `%s`. Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.", fragment.name, JSON.stringify(item), fragment.name) : invariant5(false) : void 0;
          return getVariablesFromSingularFragment(fragment, item) || {};
        }
      }
      function getVariablesFromSingularFragment(fragment, item) {
        var selector2 = getSingularSelector(fragment, item);
        if (!selector2) {
          return null;
        }
        return selector2.variables;
      }
      function getVariablesFromPluralFragment(fragment, items) {
        var variables = {};
        items.forEach(function(value, ii) {
          if (value != null) {
            var itemVariables = getVariablesFromSingularFragment(fragment, value);
            if (itemVariables != null) {
              Object.assign(variables, itemVariables);
            }
          }
        });
        return variables;
      }
      function areEqualSingularSelectors(thisSelector, thatSelector) {
        return thisSelector.owner === thatSelector.owner && thisSelector.dataID === thatSelector.dataID && thisSelector.node === thatSelector.node && areEqual(thisSelector.variables, thatSelector.variables);
      }
      function areEqualSelectors(a, b) {
        if (a === b) {
          return true;
        } else if (a == null) {
          return b == null;
        } else if (b == null) {
          return a == null;
        } else if (a.kind === "SingularReaderSelector" && b.kind === "SingularReaderSelector") {
          return areEqualSingularSelectors(a, b);
        } else if (a.kind === "PluralReaderSelector" && b.kind === "PluralReaderSelector") {
          return a.selectors.length === b.selectors.length && a.selectors.every(function(s, i) {
            return areEqualSingularSelectors(s, b.selectors[i]);
          });
        } else {
          return false;
        }
      }
      function createReaderSelector(fragment, dataID, variables, request) {
        var isWithinUnmatchedTypeRefinement = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
        var clientEdgeTraversalPath = arguments.length > 5 ? arguments[5] : void 0;
        return {
          kind: "SingularReaderSelector",
          dataID,
          isWithinUnmatchedTypeRefinement,
          clientEdgeTraversalPath: clientEdgeTraversalPath !== null && clientEdgeTraversalPath !== void 0 ? clientEdgeTraversalPath : null,
          node: fragment,
          variables,
          owner: request
        };
      }
      function createNormalizationSelector(node5, dataID, variables) {
        return {
          dataID,
          node: node5,
          variables
        };
      }
      module2.exports = {
        areEqualSelectors,
        createReaderSelector,
        createNormalizationSelector,
        getDataIDsFromFragment,
        getDataIDsFromObject,
        getSingularSelector,
        getPluralSelector,
        getSelector,
        getSelectorsFromObject,
        getVariablesFromSingularFragment,
        getVariablesFromPluralFragment,
        getVariablesFromFragment,
        getVariablesFromObject
      };
    }
  });

  // node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js
  var require_RelayModernOperationDescriptor = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js"(exports2, module2) {
      "use strict";
      var deepFreeze = require_deepFreeze();
      var getRequestIdentifier = require_getRequestIdentifier();
      var _require = require_RelayConcreteVariables();
      var getOperationVariables = _require.getOperationVariables;
      var _require2 = require_RelayModernSelector();
      var createNormalizationSelector = _require2.createNormalizationSelector;
      var createReaderSelector = _require2.createReaderSelector;
      var _require3 = require_RelayStoreUtils();
      var ROOT_ID = _require3.ROOT_ID;
      function createOperationDescriptor(request, variables, cacheConfig) {
        var dataID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ROOT_ID;
        var operation = request.operation;
        var operationVariables = getOperationVariables(operation, request.params.providedVariables, variables);
        var requestDescriptor = createRequestDescriptor(request, operationVariables, cacheConfig);
        var operationDescriptor = {
          fragment: createReaderSelector(request.fragment, dataID, operationVariables, requestDescriptor),
          request: requestDescriptor,
          root: createNormalizationSelector(operation, dataID, operationVariables)
        };
        if (true) {
          Object.freeze(operationDescriptor.fragment);
          Object.freeze(operationDescriptor.root);
          Object.freeze(operationDescriptor);
        }
        return operationDescriptor;
      }
      function createRequestDescriptor(request, variables, cacheConfig) {
        var requestDescriptor = {
          identifier: getRequestIdentifier(request.params, variables),
          node: request,
          variables,
          cacheConfig
        };
        if (true) {
          deepFreeze(variables);
          Object.freeze(request);
          Object.freeze(requestDescriptor);
        }
        return requestDescriptor;
      }
      module2.exports = {
        createOperationDescriptor,
        createRequestDescriptor
      };
    }
  });

  // node_modules/relay-runtime/lib/mutations/RelayDeclarativeMutationConfig.js
  var require_RelayDeclarativeMutationConfig = __commonJS({
    "node_modules/relay-runtime/lib/mutations/RelayDeclarativeMutationConfig.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      var ConnectionHandler = require_ConnectionHandler();
      var warning6 = require_warning();
      var MutationTypes = Object.freeze({
        RANGE_ADD: "RANGE_ADD",
        RANGE_DELETE: "RANGE_DELETE",
        NODE_DELETE: "NODE_DELETE"
      });
      var RangeOperations = Object.freeze({
        APPEND: "append",
        PREPEND: "prepend"
      });
      function convert(configs, request, optimisticUpdater, updater) {
        var configOptimisticUpdates = optimisticUpdater ? [optimisticUpdater] : [];
        var configUpdates = updater ? [updater] : [];
        configs.forEach(function(config) {
          switch (config.type) {
            case "NODE_DELETE":
              var nodeDeleteResult = nodeDelete(config, request);
              if (nodeDeleteResult) {
                configOptimisticUpdates.push(nodeDeleteResult);
                configUpdates.push(nodeDeleteResult);
              }
              break;
            case "RANGE_ADD":
              var rangeAddResult = rangeAdd(config, request);
              if (rangeAddResult) {
                configOptimisticUpdates.push(rangeAddResult);
                configUpdates.push(rangeAddResult);
              }
              break;
            case "RANGE_DELETE":
              var rangeDeleteResult = rangeDelete(config, request);
              if (rangeDeleteResult) {
                configOptimisticUpdates.push(rangeDeleteResult);
                configUpdates.push(rangeDeleteResult);
              }
              break;
          }
        });
        return {
          optimisticUpdater: function optimisticUpdater2(store, data) {
            configOptimisticUpdates.forEach(function(eachOptimisticUpdater) {
              eachOptimisticUpdater(store, data);
            });
          },
          updater: function updater2(store, data) {
            configUpdates.forEach(function(eachUpdater) {
              eachUpdater(store, data);
            });
          }
        };
      }
      function nodeDelete(config, request) {
        var deletedIDFieldName = config.deletedIDFieldName;
        var rootField = getRootField(request);
        if (!rootField) {
          return null;
        }
        return function(store, data) {
          var payload = store.getRootField(rootField);
          if (!payload) {
            return;
          }
          var deleteID = payload.getValue(deletedIDFieldName);
          var deleteIDs = Array.isArray(deleteID) ? deleteID : [deleteID];
          deleteIDs.forEach(function(id) {
            if (id && typeof id === "string") {
              store["delete"](id);
            }
          });
        };
      }
      function rangeAdd(config, request) {
        var parentID = config.parentID, connectionInfo = config.connectionInfo, edgeName = config.edgeName;
        if (!parentID) {
          true ? warning6(false, "RelayDeclarativeMutationConfig: For mutation config RANGE_ADD to work you must include a parentID") : void 0;
          return null;
        }
        var rootField = getRootField(request);
        if (!connectionInfo || !rootField) {
          return null;
        }
        return function(store, data) {
          var parent2 = store.get(parentID);
          if (!parent2) {
            return;
          }
          var payload = store.getRootField(rootField);
          if (!payload) {
            return;
          }
          var serverEdge = payload.getLinkedRecord(edgeName);
          var _iterator = (0, _createForOfIteratorHelper2["default"])(connectionInfo), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var info = _step.value;
              if (!serverEdge) {
                continue;
              }
              var connection = ConnectionHandler.getConnection(parent2, info.key, info.filters);
              if (!connection) {
                continue;
              }
              var clientEdge = ConnectionHandler.buildConnectionEdge(store, connection, serverEdge);
              if (!clientEdge) {
                continue;
              }
              switch (info.rangeBehavior) {
                case "append":
                  ConnectionHandler.insertEdgeAfter(connection, clientEdge);
                  break;
                case "prepend":
                  ConnectionHandler.insertEdgeBefore(connection, clientEdge);
                  break;
                default:
                  true ? warning6(false, "RelayDeclarativeMutationConfig: RANGE_ADD range behavior `%s` will not work as expected in RelayModern, supported range behaviors are 'append', 'prepend'.", info.rangeBehavior) : void 0;
                  break;
              }
            }
          } catch (err2) {
            _iterator.e(err2);
          } finally {
            _iterator.f();
          }
        };
      }
      function rangeDelete(config, request) {
        var parentID = config.parentID, connectionKeys = config.connectionKeys, pathToConnection = config.pathToConnection, deletedIDFieldName = config.deletedIDFieldName;
        if (!parentID) {
          true ? warning6(false, "RelayDeclarativeMutationConfig: For mutation config RANGE_DELETE to work you must include a parentID") : void 0;
          return null;
        }
        var rootField = getRootField(request);
        if (!rootField) {
          return null;
        }
        return function(store, data) {
          if (!data) {
            return;
          }
          var deleteIDs = [];
          var deletedIDField = data[rootField];
          if (deletedIDField && Array.isArray(deletedIDFieldName)) {
            var _iterator2 = (0, _createForOfIteratorHelper2["default"])(deletedIDFieldName), _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                var eachField = _step2.value;
                if (deletedIDField && typeof deletedIDField === "object") {
                  deletedIDField = deletedIDField[eachField];
                }
              }
            } catch (err2) {
              _iterator2.e(err2);
            } finally {
              _iterator2.f();
            }
            if (Array.isArray(deletedIDField)) {
              deletedIDField.forEach(function(idObject) {
                if (idObject && idObject.id && typeof idObject === "object" && typeof idObject.id === "string") {
                  deleteIDs.push(idObject.id);
                }
              });
            } else if (deletedIDField && deletedIDField.id && typeof deletedIDField.id === "string") {
              deleteIDs.push(deletedIDField.id);
            }
          } else if (deletedIDField && typeof deletedIDFieldName === "string" && typeof deletedIDField === "object") {
            deletedIDField = deletedIDField[deletedIDFieldName];
            if (typeof deletedIDField === "string") {
              deleteIDs.push(deletedIDField);
            } else if (Array.isArray(deletedIDField)) {
              deletedIDField.forEach(function(id) {
                if (typeof id === "string") {
                  deleteIDs.push(id);
                }
              });
            }
          }
          deleteNode(parentID, connectionKeys, pathToConnection, store, deleteIDs);
        };
      }
      function deleteNode(parentID, connectionKeys, pathToConnection, store, deleteIDs) {
        true ? warning6(connectionKeys != null, "RelayDeclarativeMutationConfig: RANGE_DELETE must provide a connectionKeys") : void 0;
        var parent2 = store.get(parentID);
        if (!parent2) {
          return;
        }
        if (pathToConnection.length < 2) {
          true ? warning6(false, "RelayDeclarativeMutationConfig: RANGE_DELETE pathToConnection must include at least parent and connection") : void 0;
          return;
        }
        var recordProxy = parent2;
        for (var i = 1; i < pathToConnection.length - 1; i++) {
          if (recordProxy) {
            recordProxy = recordProxy.getLinkedRecord(pathToConnection[i]);
          }
        }
        if (!connectionKeys || !recordProxy) {
          true ? warning6(false, "RelayDeclarativeMutationConfig: RANGE_DELETE pathToConnection is incorrect. Unable to find connection with parentID: %s and path: %s", parentID, pathToConnection.toString()) : void 0;
          return;
        }
        var _iterator3 = (0, _createForOfIteratorHelper2["default"])(connectionKeys), _step3;
        try {
          var _loop = function _loop2() {
            var key = _step3.value;
            var connection = ConnectionHandler.getConnection(recordProxy, key.key, key.filters);
            if (connection) {
              deleteIDs.forEach(function(deleteID) {
                ConnectionHandler.deleteNode(connection, deleteID);
              });
            }
          };
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
            _loop();
          }
        } catch (err2) {
          _iterator3.e(err2);
        } finally {
          _iterator3.f();
        }
      }
      function getRootField(request) {
        if (request.fragment.selections && request.fragment.selections.length > 0 && request.fragment.selections[0].kind === "LinkedField") {
          return request.fragment.selections[0].name;
        }
        return null;
      }
      module2.exports = {
        MutationTypes,
        RangeOperations,
        convert
      };
    }
  });

  // node_modules/relay-runtime/lib/mutations/applyOptimisticMutation.js
  var require_applyOptimisticMutation = __commonJS({
    "node_modules/relay-runtime/lib/mutations/applyOptimisticMutation.js"(exports2, module2) {
      "use strict";
      var _require = require_GraphQLTag();
      var getRequest = _require.getRequest;
      var isRelayModernEnvironment = require_isRelayModernEnvironment();
      var _require2 = require_RelayModernOperationDescriptor();
      var createOperationDescriptor = _require2.createOperationDescriptor;
      var RelayDeclarativeMutationConfig = require_RelayDeclarativeMutationConfig();
      var invariant5 = require_browser();
      function applyOptimisticMutation(environment, config) {
        !isRelayModernEnvironment(environment) ? true ? invariant5(false, "commitMutation: expected `environment` to be an instance of `RelayModernEnvironment`.") : invariant5(false) : void 0;
        var mutation = getRequest(config.mutation);
        if (mutation.params.operationKind !== "mutation") {
          throw new Error("commitMutation: Expected mutation operation");
        }
        var optimisticUpdater = config.optimisticUpdater;
        var configs = config.configs, optimisticResponse = config.optimisticResponse, variables = config.variables;
        var operation = createOperationDescriptor(mutation, variables);
        if (configs) {
          var _RelayDeclarativeMuta = RelayDeclarativeMutationConfig.convert(configs, mutation, optimisticUpdater);
          optimisticUpdater = _RelayDeclarativeMuta.optimisticUpdater;
        }
        return environment.applyMutation({
          operation,
          response: optimisticResponse,
          updater: optimisticUpdater
        });
      }
      module2.exports = applyOptimisticMutation;
    }
  });

  // node_modules/relay-runtime/lib/mutations/commitLocalUpdate.js
  var require_commitLocalUpdate = __commonJS({
    "node_modules/relay-runtime/lib/mutations/commitLocalUpdate.js"(exports2, module2) {
      "use strict";
      function commitLocalUpdate(environment, updater) {
        environment.commitUpdate(updater);
      }
      module2.exports = commitLocalUpdate;
    }
  });

  // node_modules/relay-runtime/lib/mutations/validateMutation.js
  var require_validateMutation = __commonJS({
    "node_modules/relay-runtime/lib/mutations/validateMutation.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var _require = require_RelayConcreteNode();
      var ACTOR_CHANGE = _require.ACTOR_CHANGE;
      var CLIENT_COMPONENT = _require.CLIENT_COMPONENT;
      var CLIENT_EXTENSION = _require.CLIENT_EXTENSION;
      var CONDITION = _require.CONDITION;
      var DEFER = _require.DEFER;
      var FLIGHT_FIELD = _require.FLIGHT_FIELD;
      var FRAGMENT_SPREAD = _require.FRAGMENT_SPREAD;
      var INLINE_FRAGMENT = _require.INLINE_FRAGMENT;
      var LINKED_FIELD = _require.LINKED_FIELD;
      var LINKED_HANDLE = _require.LINKED_HANDLE;
      var MODULE_IMPORT = _require.MODULE_IMPORT;
      var SCALAR_FIELD = _require.SCALAR_FIELD;
      var SCALAR_HANDLE = _require.SCALAR_HANDLE;
      var STREAM = _require.STREAM;
      var TYPE_DISCRIMINATOR = _require.TYPE_DISCRIMINATOR;
      var warning6 = require_warning();
      var hasOwnProperty16 = Object.prototype.hasOwnProperty;
      var validateMutation = function validateMutation2() {
      };
      if (true) {
        addFieldToDiff = function addFieldToDiff2(path, diff, isScalar) {
          var deepLoc = diff;
          path.split(".").forEach(function(key, index2, arr) {
            if (deepLoc[key] == null) {
              deepLoc[key] = {};
            }
            if (isScalar && index2 === arr.length - 1) {
              deepLoc[key] = "<scalar>";
            }
            deepLoc = deepLoc[key];
          });
        };
        validateMutation = function validateMutation2(optimisticResponse, mutation, variables) {
          var operationName = mutation.operation.name;
          var context3 = {
            path: "ROOT",
            visitedPaths: /* @__PURE__ */ new Set(),
            variables: variables || {},
            missingDiff: {},
            extraDiff: {},
            moduleImportPaths: /* @__PURE__ */ new Set()
          };
          validateSelections(optimisticResponse, mutation.operation.selections, context3);
          validateOptimisticResponse(optimisticResponse, context3);
          true ? warning6(context3.missingDiff.ROOT == null, "Expected `optimisticResponse` to match structure of server response for mutation `%s`, please define fields for all of\n%s", operationName, JSON.stringify(context3.missingDiff.ROOT, null, 2)) : void 0;
          true ? warning6(context3.extraDiff.ROOT == null, "Expected `optimisticResponse` to match structure of server response for mutation `%s`, please remove all fields of\n%s", operationName, JSON.stringify(context3.extraDiff.ROOT, null, 2)) : void 0;
        };
        validateSelections = function validateSelections2(optimisticResponse, selections, context3) {
          selections.forEach(function(selection) {
            return validateSelection(optimisticResponse, selection, context3);
          });
        };
        validateSelection = function validateSelection2(optimisticResponse, selection, context3) {
          switch (selection.kind) {
            case CONDITION:
              validateSelections(optimisticResponse, selection.selections, context3);
              return;
            case CLIENT_COMPONENT:
            case FRAGMENT_SPREAD:
              validateSelections(optimisticResponse, selection.fragment.selections, context3);
              return;
            case SCALAR_FIELD:
            case LINKED_FIELD:
            case FLIGHT_FIELD:
              return validateField(optimisticResponse, selection, context3);
            case ACTOR_CHANGE:
              return validateField(optimisticResponse, selection.linkedField, context3);
            case INLINE_FRAGMENT:
              var type = selection.type;
              var isConcreteType = selection.abstractKey == null;
              validateAbstractKey(context3, selection.abstractKey);
              selection.selections.forEach(function(subselection) {
                if (isConcreteType && optimisticResponse.__typename !== type) {
                  return;
                }
                validateSelection2(optimisticResponse, subselection, context3);
              });
              return;
            case CLIENT_EXTENSION:
              selection.selections.forEach(function(subselection) {
                validateSelection2(optimisticResponse, subselection, context3);
              });
              return;
            case MODULE_IMPORT:
              return validateModuleImport(context3);
            case TYPE_DISCRIMINATOR:
              return validateAbstractKey(context3, selection.abstractKey);
            case LINKED_HANDLE:
            case SCALAR_HANDLE:
            case DEFER:
            case STREAM: {
              return;
            }
            default:
              selection;
              return;
          }
        };
        validateModuleImport = function validateModuleImport2(context3) {
          context3.moduleImportPaths.add(context3.path);
        };
        validateAbstractKey = function validateAbstractKey2(context3, abstractKey) {
          if (abstractKey != null) {
            var path = "".concat(context3.path, ".").concat(abstractKey);
            context3.visitedPaths.add(path);
          }
        };
        validateField = function validateField2(optimisticResponse, field, context3) {
          var fieldName = field.alias || field.name;
          var path = "".concat(context3.path, ".").concat(fieldName);
          context3.visitedPaths.add(path);
          switch (field.kind) {
            case SCALAR_FIELD:
              if (hasOwnProperty16.call(optimisticResponse, fieldName) === false) {
                addFieldToDiff(path, context3.missingDiff, true);
              }
              return;
            case LINKED_FIELD:
              var selections = field.selections;
              if (optimisticResponse[fieldName] === null || hasOwnProperty16.call(optimisticResponse, fieldName) && optimisticResponse[fieldName] === void 0) {
                return;
              }
              if (field.plural) {
                if (Array.isArray(optimisticResponse[fieldName])) {
                  optimisticResponse[fieldName].forEach(function(r) {
                    if (r !== null) {
                      validateSelections(r, selections, (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, context3), {}, {
                        path
                      }));
                    }
                  });
                  return;
                } else {
                  addFieldToDiff(path, context3.missingDiff);
                  return;
                }
              } else {
                if (optimisticResponse[fieldName] instanceof Object) {
                  validateSelections(optimisticResponse[fieldName], selections, (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, context3), {}, {
                    path
                  }));
                  return;
                } else {
                  addFieldToDiff(path, context3.missingDiff);
                  return;
                }
              }
            case FLIGHT_FIELD:
              if (optimisticResponse[fieldName] === null || hasOwnProperty16.call(optimisticResponse, fieldName) && optimisticResponse[fieldName] === void 0) {
                return;
              }
              throw new Error("validateMutation: Flight fields are not compatible with optimistic updates, as React does not have the component code necessary to process new data on the client. Instead, you should update your code to require a full refetch of the Flight field so your UI can be updated.");
          }
        };
        validateOptimisticResponse = function validateOptimisticResponse2(optimisticResponse, context3) {
          if (Array.isArray(optimisticResponse)) {
            optimisticResponse.forEach(function(r) {
              if (r instanceof Object) {
                validateOptimisticResponse2(r, context3);
              }
            });
            return;
          }
          Object.keys(optimisticResponse).forEach(function(key) {
            var value = optimisticResponse[key];
            var path = "".concat(context3.path, ".").concat(key);
            if (context3.moduleImportPaths.has(path)) {
              return;
            }
            if (!context3.visitedPaths.has(path)) {
              addFieldToDiff(path, context3.extraDiff);
              return;
            }
            if (value instanceof Object) {
              validateOptimisticResponse2(value, (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, context3), {}, {
                path
              }));
            }
          });
        };
      }
      var addFieldToDiff;
      var validateSelections;
      var validateSelection;
      var validateModuleImport;
      var validateAbstractKey;
      var validateField;
      var validateOptimisticResponse;
      module2.exports = validateMutation;
    }
  });

  // node_modules/relay-runtime/lib/mutations/commitMutation.js
  var require_commitMutation = __commonJS({
    "node_modules/relay-runtime/lib/mutations/commitMutation.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _toConsumableArray22 = _interopRequireDefault(require_toConsumableArray());
      var _require = require_GraphQLTag();
      var getRequest = _require.getRequest;
      var _require2 = require_ClientID();
      var generateUniqueClientID = _require2.generateUniqueClientID;
      var isRelayModernEnvironment = require_isRelayModernEnvironment();
      var _require3 = require_RelayModernOperationDescriptor();
      var createOperationDescriptor = _require3.createOperationDescriptor;
      var RelayDeclarativeMutationConfig = require_RelayDeclarativeMutationConfig();
      var validateMutation = require_validateMutation();
      var invariant5 = require_browser();
      var warning6 = require_warning();
      function commitMutation(environment, config) {
        !isRelayModernEnvironment(environment) ? true ? invariant5(false, "commitMutation: expected `environment` to be an instance of `RelayModernEnvironment`.") : invariant5(false) : void 0;
        var mutation = getRequest(config.mutation);
        if (mutation.params.operationKind !== "mutation") {
          throw new Error("commitMutation: Expected mutation operation");
        }
        if (mutation.kind !== "Request") {
          throw new Error("commitMutation: Expected mutation to be of type request");
        }
        var optimisticResponse = config.optimisticResponse, optimisticUpdater = config.optimisticUpdater, updater = config.updater;
        var configs = config.configs, cacheConfig = config.cacheConfig, onError = config.onError, onUnsubscribe = config.onUnsubscribe, variables = config.variables, uploadables = config.uploadables;
        var operation = createOperationDescriptor(mutation, variables, cacheConfig, generateUniqueClientID());
        if (typeof optimisticResponse === "function") {
          optimisticResponse = optimisticResponse();
          true ? warning6(false, "commitMutation: Expected `optimisticResponse` to be an object, received a function.") : void 0;
        }
        if (true) {
          if (optimisticResponse instanceof Object) {
            validateMutation(optimisticResponse, mutation, variables);
          }
        }
        if (configs) {
          var _RelayDeclarativeMuta = RelayDeclarativeMutationConfig.convert(configs, mutation, optimisticUpdater, updater);
          optimisticUpdater = _RelayDeclarativeMuta.optimisticUpdater;
          updater = _RelayDeclarativeMuta.updater;
        }
        var errors = [];
        var subscription = environment.executeMutation({
          operation,
          optimisticResponse,
          optimisticUpdater,
          updater,
          uploadables
        }).subscribe({
          next: function next(payload) {
            var _config$onNext;
            if (Array.isArray(payload)) {
              payload.forEach(function(item) {
                if (item.errors) {
                  errors.push.apply(errors, (0, _toConsumableArray22["default"])(item.errors));
                }
              });
            } else {
              if (payload.errors) {
                errors.push.apply(errors, (0, _toConsumableArray22["default"])(payload.errors));
              }
            }
            (_config$onNext = config.onNext) === null || _config$onNext === void 0 ? void 0 : _config$onNext.call(config);
          },
          complete: function complete() {
            var onCompleted = config.onCompleted;
            if (onCompleted) {
              var snapshot = environment.lookup(operation.fragment);
              onCompleted(snapshot.data, errors.length !== 0 ? errors : null);
            }
          },
          error: onError,
          unsubscribe: onUnsubscribe
        });
        return {
          dispose: subscription.unsubscribe
        };
      }
      module2.exports = commitMutation;
    }
  });

  // node_modules/relay-runtime/lib/util/withProvidedVariables.js
  var require_withProvidedVariables = __commonJS({
    "node_modules/relay-runtime/lib/util/withProvidedVariables.js"(exports2, module2) {
      "use strict";
      var areEqual = require_areEqual();
      var warning6 = require_warning();
      var WEAKMAP_SUPPORTED = typeof WeakMap === "function";
      var debugCache = WEAKMAP_SUPPORTED ? /* @__PURE__ */ new WeakMap() : /* @__PURE__ */ new Map();
      function withProvidedVariables(userSuppliedVariables, providedVariables) {
        if (providedVariables != null) {
          var operationVariables = {};
          Object.assign(operationVariables, userSuppliedVariables);
          Object.keys(providedVariables).forEach(function(varName) {
            var providerFunction = providedVariables[varName].get;
            var providerResult = providerFunction();
            if (!debugCache.has(providerFunction)) {
              debugCache.set(providerFunction, providerResult);
              operationVariables[varName] = providerResult;
            } else {
              var cachedResult = debugCache.get(providerFunction);
              if (true) {
                true ? warning6(areEqual(providerResult, cachedResult), "Relay: Expected function `%s` for provider `%s` to be a pure function, but got conflicting return values `%s` and `%s`", providerFunction.name, varName, providerResult, cachedResult) : void 0;
              }
              operationVariables[varName] = cachedResult;
            }
          });
          return operationVariables;
        } else {
          return userSuppliedVariables;
        }
      }
      if (true) {
        withProvidedVariables.tests_only_resetDebugCache = function() {
          debugCache = WEAKMAP_SUPPORTED ? /* @__PURE__ */ new WeakMap() : /* @__PURE__ */ new Map();
        };
      }
      module2.exports = withProvidedVariables;
    }
  });

  // node_modules/relay-runtime/lib/util/isPromise.js
  var require_isPromise = __commonJS({
    "node_modules/relay-runtime/lib/util/isPromise.js"(exports2, module2) {
      "use strict";
      function isPromise2(p) {
        return !!p && typeof p.then === "function";
      }
      module2.exports = isPromise2;
    }
  });

  // node_modules/relay-runtime/lib/network/RelayObservable.js
  var require_RelayObservable = __commonJS({
    "node_modules/relay-runtime/lib/network/RelayObservable.js"(exports2, module2) {
      "use strict";
      var isPromise2 = require_isPromise();
      var hostReportError = swallowError;
      var RelayObservable = /* @__PURE__ */ function() {
        RelayObservable2.create = function create(source2) {
          return new RelayObservable2(source2);
        };
        function RelayObservable2(source2) {
          if (true) {
            if (!source2 || typeof source2 !== "function") {
              throw new Error("Source must be a Function: " + String(source2));
            }
          }
          this._source = source2;
        }
        RelayObservable2.onUnhandledError = function onUnhandledError(callback) {
          hostReportError = callback;
        };
        RelayObservable2.from = function from(obj) {
          return isObservable(obj) ? fromObservable(obj) : isPromise2(obj) ? fromPromise(obj) : fromValue(obj);
        };
        var _proto = RelayObservable2.prototype;
        _proto["catch"] = function _catch(fn) {
          var _this = this;
          return RelayObservable2.create(function(sink) {
            var subscription;
            _this.subscribe({
              start: function start(sub) {
                subscription = sub;
              },
              next: sink.next,
              complete: sink.complete,
              error: function error(_error2) {
                try {
                  fn(_error2).subscribe({
                    start: function start(sub) {
                      subscription = sub;
                    },
                    next: sink.next,
                    complete: sink.complete,
                    error: sink.error
                  });
                } catch (error2) {
                  sink.error(
                    error2,
                    true
                  );
                }
              }
            });
            return function() {
              return subscription.unsubscribe();
            };
          });
        };
        _proto.concat = function concat(next) {
          var _this2 = this;
          return RelayObservable2.create(function(sink) {
            var current;
            _this2.subscribe({
              start: function start(subscription) {
                current = subscription;
              },
              next: sink.next,
              error: sink.error,
              complete: function complete() {
                current = next.subscribe(sink);
              }
            });
            return function() {
              current && current.unsubscribe();
            };
          });
        };
        _proto["do"] = function _do(observer) {
          var _this3 = this;
          return RelayObservable2.create(function(sink) {
            var both = function both2(action) {
              return function() {
                try {
                  observer[action] && observer[action].apply(observer, arguments);
                } catch (error) {
                  hostReportError(
                    error,
                    true
                  );
                }
                sink[action] && sink[action].apply(sink, arguments);
              };
            };
            return _this3.subscribe({
              start: both("start"),
              next: both("next"),
              error: both("error"),
              complete: both("complete"),
              unsubscribe: both("unsubscribe")
            });
          });
        };
        _proto["finally"] = function _finally(fn) {
          var _this4 = this;
          return RelayObservable2.create(function(sink) {
            var subscription = _this4.subscribe(sink);
            return function() {
              subscription.unsubscribe();
              fn();
            };
          });
        };
        _proto.ifEmpty = function ifEmpty(alternate) {
          var _this5 = this;
          return RelayObservable2.create(function(sink) {
            var hasValue = false;
            var current = _this5.subscribe({
              next: function next(value) {
                hasValue = true;
                sink.next(value);
              },
              error: sink.error,
              complete: function complete() {
                if (hasValue) {
                  sink.complete();
                } else {
                  current = alternate.subscribe(sink);
                }
              }
            });
            return function() {
              current.unsubscribe();
            };
          });
        };
        _proto.subscribe = function subscribe(observer) {
          if (true) {
            if (!observer || typeof observer !== "object") {
              throw new Error("Observer must be an Object with callbacks: " + String(observer));
            }
          }
          return _subscribe(this._source, observer);
        };
        _proto.map = function map(fn) {
          var _this6 = this;
          return RelayObservable2.create(function(sink) {
            var subscription = _this6.subscribe({
              complete: sink.complete,
              error: sink.error,
              next: function next(value) {
                try {
                  var mapValue = fn(value);
                  sink.next(mapValue);
                } catch (error) {
                  sink.error(
                    error,
                    true
                  );
                }
              }
            });
            return function() {
              subscription.unsubscribe();
            };
          });
        };
        _proto.mergeMap = function mergeMap(fn) {
          var _this7 = this;
          return RelayObservable2.create(function(sink) {
            var subscriptions = [];
            function start(subscription) {
              this._sub = subscription;
              subscriptions.push(subscription);
            }
            function complete() {
              subscriptions.splice(subscriptions.indexOf(this._sub), 1);
              if (subscriptions.length === 0) {
                sink.complete();
              }
            }
            _this7.subscribe({
              start,
              next: function next(value) {
                try {
                  if (!sink.closed) {
                    RelayObservable2.from(fn(value)).subscribe({
                      start,
                      next: sink.next,
                      error: sink.error,
                      complete
                    });
                  }
                } catch (error) {
                  sink.error(
                    error,
                    true
                  );
                }
              },
              error: sink.error,
              complete
            });
            return function() {
              subscriptions.forEach(function(sub) {
                return sub.unsubscribe();
              });
              subscriptions.length = 0;
            };
          });
        };
        _proto.poll = function poll(pollInterval) {
          var _this8 = this;
          if (true) {
            if (typeof pollInterval !== "number" || pollInterval <= 0) {
              throw new Error("RelayObservable: Expected pollInterval to be positive, got: " + pollInterval);
            }
          }
          return RelayObservable2.create(function(sink) {
            var subscription;
            var timeout;
            var poll2 = function poll3() {
              subscription = _this8.subscribe({
                next: sink.next,
                error: sink.error,
                complete: function complete() {
                  timeout = setTimeout(poll3, pollInterval);
                }
              });
            };
            poll2();
            return function() {
              clearTimeout(timeout);
              subscription.unsubscribe();
            };
          });
        };
        _proto.toPromise = function toPromise() {
          var _this9 = this;
          return new Promise(function(resolve, reject) {
            var resolved = false;
            _this9.subscribe({
              next: function next(val) {
                if (!resolved) {
                  resolved = true;
                  resolve(val);
                }
              },
              error: reject,
              complete: resolve
            });
          });
        };
        return RelayObservable2;
      }();
      function isObservable(obj) {
        return typeof obj === "object" && obj !== null && typeof obj.subscribe === "function";
      }
      function fromObservable(obj) {
        return obj instanceof RelayObservable ? obj : RelayObservable.create(function(sink) {
          return obj.subscribe(sink);
        });
      }
      function fromPromise(promise) {
        return RelayObservable.create(function(sink) {
          promise.then(function(value) {
            sink.next(value);
            sink.complete();
          }, sink.error);
        });
      }
      function fromValue(value) {
        return RelayObservable.create(function(sink) {
          sink.next(value);
          sink.complete();
        });
      }
      function _subscribe(source2, observer) {
        var closed = false;
        var cleanup;
        var withClosed = function withClosed2(obj) {
          return Object.defineProperty(obj, "closed", {
            get: function get2() {
              return closed;
            }
          });
        };
        function doCleanup() {
          if (cleanup) {
            if (cleanup.unsubscribe) {
              cleanup.unsubscribe();
            } else {
              try {
                cleanup();
              } catch (error) {
                hostReportError(
                  error,
                  true
                );
              }
            }
            cleanup = void 0;
          }
        }
        var subscription = withClosed({
          unsubscribe: function unsubscribe() {
            if (!closed) {
              closed = true;
              try {
                observer.unsubscribe && observer.unsubscribe(subscription);
              } catch (error) {
                hostReportError(
                  error,
                  true
                );
              } finally {
                doCleanup();
              }
            }
          }
        });
        try {
          observer.start && observer.start(subscription);
        } catch (error) {
          hostReportError(
            error,
            true
          );
        }
        if (closed) {
          return subscription;
        }
        var sink = withClosed({
          next: function next(value) {
            if (!closed && observer.next) {
              try {
                observer.next(value);
              } catch (error) {
                hostReportError(
                  error,
                  true
                );
              }
            }
          },
          error: function error(_error3, isUncaughtThrownError) {
            if (closed || !observer.error) {
              closed = true;
              hostReportError(_error3, isUncaughtThrownError || false);
              doCleanup();
            } else {
              closed = true;
              try {
                observer.error(_error3);
              } catch (error2) {
                hostReportError(
                  error2,
                  true
                );
              } finally {
                doCleanup();
              }
            }
          },
          complete: function complete() {
            if (!closed) {
              closed = true;
              try {
                observer.complete && observer.complete();
              } catch (error) {
                hostReportError(
                  error,
                  true
                );
              } finally {
                doCleanup();
              }
            }
          }
        });
        try {
          cleanup = source2(sink);
        } catch (error) {
          sink.error(
            error,
            true
          );
        }
        if (true) {
          if (cleanup !== void 0 && typeof cleanup !== "function" && (!cleanup || typeof cleanup.unsubscribe !== "function")) {
            throw new Error("Returned cleanup function which cannot be called: " + String(cleanup));
          }
        }
        if (closed) {
          doCleanup();
        }
        return subscription;
      }
      function swallowError(_error, _isUncaughtThrownError) {
      }
      if (true) {
        RelayObservable.onUnhandledError(function(error, isUncaughtThrownError) {
          if (typeof fail === "function") {
            fail(String(error));
          } else if (isUncaughtThrownError) {
            setTimeout(function() {
              throw error;
            });
          } else if (typeof console !== "undefined") {
            console.error("RelayObservable: Unhandled Error", error);
          }
        });
      }
      module2.exports = RelayObservable;
    }
  });

  // node_modules/relay-runtime/lib/network/ConvertToExecuteFunction.js
  var require_ConvertToExecuteFunction = __commonJS({
    "node_modules/relay-runtime/lib/network/ConvertToExecuteFunction.js"(exports2, module2) {
      "use strict";
      var RelayObservable = require_RelayObservable();
      function convertFetch(fn) {
        return function fetch2(request, variables, cacheConfig, uploadables, logRequestInfo) {
          var result = fn(request, variables, cacheConfig, uploadables, logRequestInfo);
          if (result instanceof Error) {
            return RelayObservable.create(function(sink) {
              return sink.error(result);
            });
          }
          return RelayObservable.from(result);
        };
      }
      module2.exports = {
        convertFetch
      };
    }
  });

  // node_modules/relay-runtime/lib/network/RelayNetwork.js
  var require_RelayNetwork = __commonJS({
    "node_modules/relay-runtime/lib/network/RelayNetwork.js"(exports2, module2) {
      "use strict";
      var withProvidedVariables = require_withProvidedVariables();
      var _require = require_ConvertToExecuteFunction();
      var convertFetch = _require.convertFetch;
      var invariant5 = require_browser();
      function create(fetchFn, subscribe) {
        var observeFetch = convertFetch(fetchFn);
        function execute(request, variables, cacheConfig, uploadables, logRequestInfo) {
          var operationVariables = withProvidedVariables(variables, request.providedVariables);
          if (request.operationKind === "subscription") {
            !subscribe ? true ? invariant5(false, "RelayNetwork: This network layer does not support Subscriptions. To use Subscriptions, provide a custom network layer.") : invariant5(false) : void 0;
            !!uploadables ? true ? invariant5(false, "RelayNetwork: Cannot provide uploadables while subscribing.") : invariant5(false) : void 0;
            return subscribe(request, operationVariables, cacheConfig);
          }
          var pollInterval = cacheConfig.poll;
          if (pollInterval != null) {
            !!uploadables ? true ? invariant5(false, "RelayNetwork: Cannot provide uploadables while polling.") : invariant5(false) : void 0;
            return observeFetch(request, operationVariables, {
              force: true
            }).poll(pollInterval);
          }
          return observeFetch(request, operationVariables, cacheConfig, uploadables, logRequestInfo);
        }
        return {
          execute
        };
      }
      module2.exports = {
        create
      };
    }
  });

  // node_modules/relay-runtime/lib/network/RelayQueryResponseCache.js
  var require_RelayQueryResponseCache = __commonJS({
    "node_modules/relay-runtime/lib/network/RelayQueryResponseCache.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var stableCopy = require_stableCopy();
      var invariant5 = require_browser();
      var RelayQueryResponseCache = /* @__PURE__ */ function() {
        function RelayQueryResponseCache2(_ref2) {
          var size = _ref2.size, ttl = _ref2.ttl;
          !(size > 0) ? true ? invariant5(false, "RelayQueryResponseCache: Expected the max cache size to be > 0, got `%s`.", size) : invariant5(false) : void 0;
          !(ttl > 0) ? true ? invariant5(false, "RelayQueryResponseCache: Expected the max ttl to be > 0, got `%s`.", ttl) : invariant5(false) : void 0;
          this._responses = /* @__PURE__ */ new Map();
          this._size = size;
          this._ttl = ttl;
        }
        var _proto = RelayQueryResponseCache2.prototype;
        _proto.clear = function clear() {
          this._responses.clear();
        };
        _proto.get = function get2(queryID, variables) {
          var _this = this;
          var cacheKey = getCacheKey(queryID, variables);
          this._responses.forEach(function(response2, key) {
            if (!isCurrent(response2.fetchTime, _this._ttl)) {
              _this._responses["delete"](key);
            }
          });
          var response = this._responses.get(cacheKey);
          if (response == null) {
            return null;
          }
          if (Array.isArray(response.payload)) {
            return response.payload.map(function(payload) {
              return (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, payload), {}, {
                extensions: (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, payload.extensions), {}, {
                  cacheTimestamp: response.fetchTime
                })
              });
            });
          }
          return (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, response.payload), {}, {
            extensions: (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, response.payload.extensions), {}, {
              cacheTimestamp: response.fetchTime
            })
          });
        };
        _proto.set = function set2(queryID, variables, payload) {
          var fetchTime = Date.now();
          var cacheKey = getCacheKey(queryID, variables);
          this._responses["delete"](cacheKey);
          this._responses.set(cacheKey, {
            fetchTime,
            payload
          });
          if (this._responses.size > this._size) {
            var firstKey = this._responses.keys().next();
            if (!firstKey.done) {
              this._responses["delete"](firstKey.value);
            }
          }
        };
        return RelayQueryResponseCache2;
      }();
      function getCacheKey(queryID, variables) {
        return JSON.stringify(stableCopy({
          queryID,
          variables
        }));
      }
      function isCurrent(fetchTime, ttl) {
        return fetchTime + ttl >= Date.now();
      }
      module2.exports = RelayQueryResponseCache;
    }
  });

  // node_modules/relay-runtime/lib/util/handlePotentialSnapshotErrors.js
  var require_handlePotentialSnapshotErrors = __commonJS({
    "node_modules/relay-runtime/lib/util/handlePotentialSnapshotErrors.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      function handlePotentialSnapshotErrors(environment, missingRequiredFields, relayResolverErrors) {
        var _iterator = (0, _createForOfIteratorHelper2["default"])(relayResolverErrors), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var resolverError = _step.value;
            environment.requiredFieldLogger({
              kind: "relay_resolver.error",
              owner: resolverError.field.owner,
              fieldPath: resolverError.field.path,
              error: resolverError.error
            });
          }
        } catch (err2) {
          _iterator.e(err2);
        } finally {
          _iterator.f();
        }
        if (missingRequiredFields != null) {
          switch (missingRequiredFields.action) {
            case "THROW": {
              var _missingRequiredField = missingRequiredFields.field, path = _missingRequiredField.path, owner = _missingRequiredField.owner;
              environment.requiredFieldLogger({
                kind: "missing_field.throw",
                owner,
                fieldPath: path
              });
              throw new Error("Relay: Missing @required value at path '".concat(path, "' in '").concat(owner, "'."));
            }
            case "LOG":
              missingRequiredFields.fields.forEach(function(_ref2) {
                var path2 = _ref2.path, owner2 = _ref2.owner;
                environment.requiredFieldLogger({
                  kind: "missing_field.log",
                  owner: owner2,
                  fieldPath: path2
                });
              });
              break;
            default: {
              missingRequiredFields.action;
            }
          }
        }
      }
      module2.exports = handlePotentialSnapshotErrors;
    }
  });

  // node_modules/relay-runtime/lib/util/RelayReplaySubject.js
  var require_RelayReplaySubject = __commonJS({
    "node_modules/relay-runtime/lib/util/RelayReplaySubject.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      var _defineProperty210 = _interopRequireDefault(require_defineProperty());
      var RelayObservable = require_RelayObservable();
      var invariant5 = require_browser();
      var RelayReplaySubject = /* @__PURE__ */ function() {
        function RelayReplaySubject2() {
          var _this = this;
          (0, _defineProperty210["default"])(this, "_complete", false);
          (0, _defineProperty210["default"])(this, "_events", []);
          (0, _defineProperty210["default"])(this, "_sinks", /* @__PURE__ */ new Set());
          (0, _defineProperty210["default"])(this, "_subscription", []);
          this._observable = RelayObservable.create(function(sink) {
            _this._sinks.add(sink);
            var events = _this._events;
            for (var i = 0; i < events.length; i++) {
              if (sink.closed) {
                break;
              }
              var event = events[i];
              switch (event.kind) {
                case "complete":
                  sink.complete();
                  break;
                case "error":
                  sink.error(event.error);
                  break;
                case "next":
                  sink.next(event.data);
                  break;
                default:
                  event.kind;
                  true ? true ? invariant5(false, "RelayReplaySubject: Unknown event kind `%s`.", event.kind) : invariant5(false) : void 0;
              }
            }
            return function() {
              _this._sinks["delete"](sink);
            };
          });
        }
        var _proto = RelayReplaySubject2.prototype;
        _proto.complete = function complete() {
          if (this._complete === true) {
            return;
          }
          this._complete = true;
          this._events.push({
            kind: "complete"
          });
          this._sinks.forEach(function(sink) {
            return sink.complete();
          });
        };
        _proto.error = function error(_error) {
          if (this._complete === true) {
            return;
          }
          this._complete = true;
          this._events.push({
            kind: "error",
            error: _error
          });
          this._sinks.forEach(function(sink) {
            return sink.error(_error);
          });
        };
        _proto.next = function next(data) {
          if (this._complete === true) {
            return;
          }
          this._events.push({
            kind: "next",
            data
          });
          this._sinks.forEach(function(sink) {
            return sink.next(data);
          });
        };
        _proto.subscribe = function subscribe(observer) {
          var subscription = this._observable.subscribe(observer);
          this._subscription.push(subscription);
          return subscription;
        };
        _proto.unsubscribe = function unsubscribe() {
          var _iterator = (0, _createForOfIteratorHelper2["default"])(this._subscription), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var subscription = _step.value;
              subscription.unsubscribe();
            }
          } catch (err2) {
            _iterator.e(err2);
          } finally {
            _iterator.f();
          }
          this._subscription = [];
        };
        _proto.getObserverCount = function getObserverCount() {
          return this._sinks.size;
        };
        return RelayReplaySubject2;
      }();
      module2.exports = RelayReplaySubject;
    }
  });

  // node_modules/relay-runtime/lib/query/fetchQueryInternal.js
  var require_fetchQueryInternal = __commonJS({
    "node_modules/relay-runtime/lib/query/fetchQueryInternal.js"(exports2, module2) {
      "use strict";
      var Observable = require_RelayObservable();
      var RelayFeatureFlags = require_RelayFeatureFlags();
      var RelayReplaySubject = require_RelayReplaySubject();
      var invariant5 = require_browser();
      var WEAKMAP_SUPPORTED = typeof WeakMap === "function";
      var requestCachesByEnvironment = WEAKMAP_SUPPORTED ? /* @__PURE__ */ new WeakMap() : /* @__PURE__ */ new Map();
      function fetchQuery(environment, operation) {
        return fetchQueryDeduped(environment, operation.request.identifier, function() {
          return environment.execute({
            operation
          });
        });
      }
      function fetchQueryDeduped(environment, identifier, fetchFn) {
        return Observable.create(function(sink) {
          var requestCache = getRequestCache(environment);
          var cachedRequest = requestCache.get(identifier);
          if (!cachedRequest) {
            fetchFn()["finally"](function() {
              return requestCache["delete"](identifier);
            }).subscribe({
              start: function start(subscription) {
                cachedRequest = {
                  identifier,
                  subject: new RelayReplaySubject(),
                  subjectForInFlightStatus: new RelayReplaySubject(),
                  subscription,
                  promise: null
                };
                requestCache.set(identifier, cachedRequest);
              },
              next: function next(response) {
                var cachedReq = getCachedRequest(requestCache, identifier);
                cachedReq.subject.next(response);
                cachedReq.subjectForInFlightStatus.next(response);
              },
              error: function error(_error) {
                var cachedReq = getCachedRequest(requestCache, identifier);
                cachedReq.subject.error(_error);
                cachedReq.subjectForInFlightStatus.error(_error);
              },
              complete: function complete() {
                var cachedReq = getCachedRequest(requestCache, identifier);
                cachedReq.subject.complete();
                cachedReq.subjectForInFlightStatus.complete();
              },
              unsubscribe: function unsubscribe(subscription) {
                var cachedReq = getCachedRequest(requestCache, identifier);
                cachedReq.subject.unsubscribe();
                cachedReq.subjectForInFlightStatus.unsubscribe();
              }
            });
          }
          !(cachedRequest != null) ? true ? invariant5(false, "[fetchQueryInternal] fetchQueryDeduped: Expected `start` to be called synchronously") : invariant5(false) : void 0;
          return getObservableForCachedRequest(requestCache, cachedRequest).subscribe(sink);
        });
      }
      function getObservableForCachedRequest(requestCache, cachedRequest) {
        return Observable.create(function(sink) {
          var subscription = cachedRequest.subject.subscribe(sink);
          return function() {
            subscription.unsubscribe();
            var cachedRequestInstance = requestCache.get(cachedRequest.identifier);
            if (cachedRequestInstance) {
              var requestSubscription = cachedRequestInstance.subscription;
              if (requestSubscription != null && cachedRequestInstance.subject.getObserverCount() === 0) {
                requestSubscription.unsubscribe();
                requestCache["delete"](cachedRequest.identifier);
              }
            }
          };
        });
      }
      function getActiveStatusObservableForCachedRequest(environment, requestCache, cachedRequest) {
        return Observable.create(function(sink) {
          var subscription = cachedRequest.subjectForInFlightStatus.subscribe({
            error: sink.error,
            next: function next(response) {
              if (!environment.isRequestActive(cachedRequest.identifier)) {
                sink.complete();
                return;
              }
              sink.next();
            },
            complete: sink.complete,
            unsubscribe: sink.complete
          });
          return function() {
            subscription.unsubscribe();
          };
        });
      }
      function getPromiseForActiveRequest(environment, request) {
        var requestCache = getRequestCache(environment);
        var cachedRequest = requestCache.get(request.identifier);
        if (!cachedRequest) {
          return null;
        }
        if (!environment.isRequestActive(cachedRequest.identifier)) {
          return null;
        }
        if (RelayFeatureFlags.USE_REACT_CACHE) {
          var existing = cachedRequest.promise;
          if (existing) {
            return existing;
          }
        }
        var promise = new Promise(function(resolve, reject) {
          var resolveOnNext = false;
          getActiveStatusObservableForCachedRequest(environment, requestCache, cachedRequest).subscribe({
            complete: resolve,
            error: reject,
            next: function next(response) {
              if (resolveOnNext) {
                resolve(response);
              }
            }
          });
          resolveOnNext = true;
        });
        if (RelayFeatureFlags.USE_REACT_CACHE) {
          cachedRequest.promise = promise;
        }
        return promise;
      }
      function getObservableForActiveRequest(environment, request) {
        var requestCache = getRequestCache(environment);
        var cachedRequest = requestCache.get(request.identifier);
        if (!cachedRequest) {
          return null;
        }
        if (!environment.isRequestActive(cachedRequest.identifier)) {
          return null;
        }
        return getActiveStatusObservableForCachedRequest(environment, requestCache, cachedRequest);
      }
      function getRequestCache(environment) {
        var cached = requestCachesByEnvironment.get(environment);
        if (cached != null) {
          return cached;
        }
        var requestCache = /* @__PURE__ */ new Map();
        requestCachesByEnvironment.set(environment, requestCache);
        return requestCache;
      }
      function getCachedRequest(requestCache, identifier) {
        var cached = requestCache.get(identifier);
        !(cached != null) ? true ? invariant5(false, "[fetchQueryInternal] getCachedRequest: Expected request to be cached") : invariant5(false) : void 0;
        return cached;
      }
      module2.exports = {
        fetchQuery,
        fetchQueryDeduped,
        getPromiseForActiveRequest,
        getObservableForActiveRequest
      };
    }
  });

  // node_modules/relay-runtime/lib/query/fetchQuery.js
  var require_fetchQuery = __commonJS({
    "node_modules/relay-runtime/lib/query/fetchQuery.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var RelayObservable = require_RelayObservable();
      var _require = require_RelayModernOperationDescriptor();
      var createOperationDescriptor = _require.createOperationDescriptor;
      var handlePotentialSnapshotErrors = require_handlePotentialSnapshotErrors();
      var fetchQueryInternal = require_fetchQueryInternal();
      var _require2 = require_GraphQLTag();
      var getRequest = _require2.getRequest;
      var invariant5 = require_browser();
      function fetchQuery(environment, query, variables, options) {
        var _options$fetchPolicy;
        var queryNode = getRequest(query);
        !(queryNode.params.operationKind === "query") ? true ? invariant5(false, "fetchQuery: Expected query operation") : invariant5(false) : void 0;
        var networkCacheConfig = (0, _objectSpread28["default"])({
          force: true
        }, options === null || options === void 0 ? void 0 : options.networkCacheConfig);
        var operation = createOperationDescriptor(queryNode, variables, networkCacheConfig);
        var fetchPolicy = (_options$fetchPolicy = options === null || options === void 0 ? void 0 : options.fetchPolicy) !== null && _options$fetchPolicy !== void 0 ? _options$fetchPolicy : "network-only";
        function readData(snapshot) {
          handlePotentialSnapshotErrors(environment, snapshot.missingRequiredFields, snapshot.relayResolverErrors);
          return snapshot.data;
        }
        switch (fetchPolicy) {
          case "network-only": {
            return getNetworkObservable(environment, operation).map(readData);
          }
          case "store-or-network": {
            if (environment.check(operation).status === "available") {
              return RelayObservable.from(environment.lookup(operation.fragment)).map(readData);
            }
            return getNetworkObservable(environment, operation).map(readData);
          }
          default:
            fetchPolicy;
            throw new Error("fetchQuery: Invalid fetchPolicy " + fetchPolicy);
        }
      }
      function getNetworkObservable(environment, operation) {
        return fetchQueryInternal.fetchQuery(environment, operation).map(function() {
          return environment.lookup(operation.fragment);
        });
      }
      module2.exports = fetchQuery;
    }
  });

  // node_modules/relay-runtime/lib/query/fetchQuery_DEPRECATED.js
  var require_fetchQuery_DEPRECATED = __commonJS({
    "node_modules/relay-runtime/lib/query/fetchQuery_DEPRECATED.js"(exports2, module2) {
      "use strict";
      var _require = require_RelayModernOperationDescriptor();
      var createOperationDescriptor = _require.createOperationDescriptor;
      var _require2 = require_GraphQLTag();
      var getRequest = _require2.getRequest;
      function fetchQuery_DEPRECATED(environment, taggedNode, variables, cacheConfig) {
        var query = getRequest(taggedNode);
        if (query.params.operationKind !== "query") {
          throw new Error("fetchQuery: Expected query operation");
        }
        var operation = createOperationDescriptor(query, variables, cacheConfig);
        return environment.execute({
          operation
        }).map(function() {
          return environment.lookup(operation.fragment).data;
        }).toPromise();
      }
      module2.exports = fetchQuery_DEPRECATED;
    }
  });

  // node_modules/relay-runtime/lib/query/PreloadableQueryRegistry.js
  var require_PreloadableQueryRegistry = __commonJS({
    "node_modules/relay-runtime/lib/query/PreloadableQueryRegistry.js"(exports2, module2) {
      "use strict";
      var PreloadableQueryRegistry = /* @__PURE__ */ function() {
        function PreloadableQueryRegistry2() {
          this._preloadableQueries = /* @__PURE__ */ new Map();
          this._callbacks = /* @__PURE__ */ new Map();
        }
        var _proto = PreloadableQueryRegistry2.prototype;
        _proto.set = function set2(key, value) {
          this._preloadableQueries.set(key, value);
          var callbacks = this._callbacks.get(key);
          if (callbacks != null) {
            callbacks.forEach(function(cb) {
              try {
                cb(value);
              } catch (e) {
                setTimeout(function() {
                  throw e;
                }, 0);
              }
            });
          }
        };
        _proto.get = function get2(key) {
          return this._preloadableQueries.get(key);
        };
        _proto.onLoad = function onLoad(key, callback) {
          var _this$_callbacks$get;
          var callbacks = (_this$_callbacks$get = this._callbacks.get(key)) !== null && _this$_callbacks$get !== void 0 ? _this$_callbacks$get : /* @__PURE__ */ new Set();
          callbacks.add(callback);
          var dispose = function dispose2() {
            callbacks["delete"](callback);
          };
          this._callbacks.set(key, callbacks);
          return {
            dispose
          };
        };
        _proto.clear = function clear() {
          this._preloadableQueries.clear();
        };
        return PreloadableQueryRegistry2;
      }();
      var preloadableQueryRegistry = new PreloadableQueryRegistry();
      module2.exports = preloadableQueryRegistry;
    }
  });

  // node_modules/relay-runtime/lib/util/getPendingOperationsForFragment.js
  var require_getPendingOperationsForFragment = __commonJS({
    "node_modules/relay-runtime/lib/util/getPendingOperationsForFragment.js"(exports2, module2) {
      "use strict";
      var _require = require_fetchQueryInternal();
      var getPromiseForActiveRequest = _require.getPromiseForActiveRequest;
      function getPendingOperationsForFragment(environment, fragmentNode, fragmentOwner) {
        var _pendingOperations$ma, _pendingOperations;
        var pendingOperations = [];
        var promise = getPromiseForActiveRequest(environment, fragmentOwner);
        if (promise != null) {
          pendingOperations = [fragmentOwner];
        } else {
          var _result$pendingOperat, _result$promise;
          var result = environment.getOperationTracker().getPendingOperationsAffectingOwner(fragmentOwner);
          pendingOperations = (_result$pendingOperat = result === null || result === void 0 ? void 0 : result.pendingOperations) !== null && _result$pendingOperat !== void 0 ? _result$pendingOperat : [];
          promise = (_result$promise = result === null || result === void 0 ? void 0 : result.promise) !== null && _result$promise !== void 0 ? _result$promise : null;
        }
        if (!promise) {
          return null;
        }
        var pendingOperationName = (_pendingOperations$ma = (_pendingOperations = pendingOperations) === null || _pendingOperations === void 0 ? void 0 : _pendingOperations.map(function(op) {
          return op.node.params.name;
        }).join(",")) !== null && _pendingOperations$ma !== void 0 ? _pendingOperations$ma : null;
        if (pendingOperationName == null || pendingOperationName.length === 0) {
          pendingOperationName = "Unknown pending operation";
        }
        var fragmentName = fragmentNode.name;
        var promiseDisplayName = pendingOperationName === fragmentName ? "Relay(".concat(pendingOperationName, ")") : "Relay(".concat(pendingOperationName, ":").concat(fragmentName, ")");
        promise.displayName = promiseDisplayName;
        return {
          promise,
          pendingOperations
        };
      }
      module2.exports = getPendingOperationsForFragment;
    }
  });

  // node_modules/relay-runtime/lib/util/isScalarAndEqual.js
  var require_isScalarAndEqual = __commonJS({
    "node_modules/relay-runtime/lib/util/isScalarAndEqual.js"(exports2, module2) {
      "use strict";
      function isScalarAndEqual(valueA, valueB) {
        return valueA === valueB && (valueA === null || typeof valueA !== "object");
      }
      module2.exports = isScalarAndEqual;
    }
  });

  // node_modules/relay-runtime/lib/util/recycleNodesInto.js
  var require_recycleNodesInto = __commonJS({
    "node_modules/relay-runtime/lib/util/recycleNodesInto.js"(exports2, module2) {
      "use strict";
      var hasWeakSetDefined = typeof WeakSet !== "undefined";
      var hasWeakMapDefined = typeof WeakMap !== "undefined";
      function recycleNodesInto(prevData, nextData) {
        if (prevData === nextData || typeof prevData !== "object" || prevData instanceof Set || prevData instanceof Map || hasWeakSetDefined && prevData instanceof WeakSet || hasWeakMapDefined && prevData instanceof WeakMap || !prevData || typeof nextData !== "object" || nextData instanceof Set || nextData instanceof Map || hasWeakSetDefined && nextData instanceof WeakSet || hasWeakMapDefined && nextData instanceof WeakMap || !nextData) {
          return nextData;
        }
        var canRecycle = false;
        var prevArray = Array.isArray(prevData) ? prevData : null;
        var nextArray = Array.isArray(nextData) ? nextData : null;
        if (prevArray && nextArray) {
          canRecycle = nextArray.reduce(function(wasEqual, nextItem, ii) {
            var prevValue = prevArray[ii];
            var nextValue = recycleNodesInto(prevValue, nextItem);
            if (nextValue !== nextArray[ii]) {
              if (true) {
                if (!Object.isFrozen(nextArray)) {
                  nextArray[ii] = nextValue;
                }
              } else {
                nextArray[ii] = nextValue;
              }
            }
            return wasEqual && nextValue === prevArray[ii];
          }, true) && prevArray.length === nextArray.length;
        } else if (!prevArray && !nextArray) {
          var prevObject = prevData;
          var nextObject = nextData;
          var prevKeys = Object.keys(prevObject);
          var nextKeys = Object.keys(nextObject);
          canRecycle = nextKeys.reduce(function(wasEqual, key) {
            var prevValue = prevObject[key];
            var nextValue = recycleNodesInto(prevValue, nextObject[key]);
            if (nextValue !== nextObject[key]) {
              if (true) {
                if (!Object.isFrozen(nextObject)) {
                  nextObject[key] = nextValue;
                }
              } else {
                nextObject[key] = nextValue;
              }
            }
            return wasEqual && nextValue === prevObject[key];
          }, true) && prevKeys.length === nextKeys.length;
        }
        return canRecycle ? prevData : nextData;
      }
      module2.exports = recycleNodesInto;
    }
  });

  // node_modules/relay-runtime/lib/store/RelayModernFragmentSpecResolver.js
  var require_RelayModernFragmentSpecResolver = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayModernFragmentSpecResolver.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var _defineProperty210 = _interopRequireDefault(require_defineProperty());
      var getPendingOperationsForFragment = require_getPendingOperationsForFragment();
      var handlePotentialSnapshotErrors = require_handlePotentialSnapshotErrors();
      var isScalarAndEqual = require_isScalarAndEqual();
      var recycleNodesInto = require_recycleNodesInto();
      var RelayFeatureFlags = require_RelayFeatureFlags();
      var _require = require_RelayModernOperationDescriptor();
      var createRequestDescriptor = _require.createRequestDescriptor;
      var _require2 = require_RelayModernSelector();
      var areEqualSelectors = _require2.areEqualSelectors;
      var createReaderSelector = _require2.createReaderSelector;
      var getSelectorsFromObject = _require2.getSelectorsFromObject;
      var areEqual = require_areEqual();
      var invariant5 = require_browser();
      var warning6 = require_warning();
      var RelayModernFragmentSpecResolver = /* @__PURE__ */ function() {
        function RelayModernFragmentSpecResolver2(context3, fragments, props, callback, rootIsQueryRenderer) {
          var _this = this;
          (0, _defineProperty210["default"])(this, "_onChange", function() {
            _this._stale = true;
            if (typeof _this._callback === "function") {
              _this._callback();
            }
          });
          this._callback = callback;
          this._context = context3;
          this._data = {};
          this._fragments = fragments;
          this._props = {};
          this._resolvers = {};
          this._stale = false;
          this._rootIsQueryRenderer = rootIsQueryRenderer;
          this.setProps(props);
        }
        var _proto = RelayModernFragmentSpecResolver2.prototype;
        _proto.dispose = function dispose() {
          for (var key in this._resolvers) {
            if (this._resolvers.hasOwnProperty(key)) {
              disposeCallback(this._resolvers[key]);
            }
          }
        };
        _proto.resolve = function resolve() {
          if (this._stale) {
            var prevData = this._data;
            var nextData;
            for (var key in this._resolvers) {
              if (this._resolvers.hasOwnProperty(key)) {
                var resolver = this._resolvers[key];
                var prevItem = prevData[key];
                if (resolver) {
                  var nextItem = resolver.resolve();
                  if (nextData || nextItem !== prevItem) {
                    nextData = nextData || (0, _objectSpread28["default"])({}, prevData);
                    nextData[key] = nextItem;
                  }
                } else {
                  var prop = this._props[key];
                  var _nextItem = prop !== void 0 ? prop : null;
                  if (nextData || !isScalarAndEqual(_nextItem, prevItem)) {
                    nextData = nextData || (0, _objectSpread28["default"])({}, prevData);
                    nextData[key] = _nextItem;
                  }
                }
              }
            }
            this._data = nextData || prevData;
            this._stale = false;
          }
          return this._data;
        };
        _proto.setCallback = function setCallback(props, callback) {
          this._callback = callback;
          if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
            this.setProps(props);
          }
        };
        _proto.setProps = function setProps(props) {
          this._props = {};
          var ownedSelectors = getSelectorsFromObject(this._fragments, props);
          for (var key in ownedSelectors) {
            if (ownedSelectors.hasOwnProperty(key)) {
              var ownedSelector = ownedSelectors[key];
              var resolver = this._resolvers[key];
              if (ownedSelector == null) {
                if (resolver != null) {
                  resolver.dispose();
                }
                resolver = null;
              } else if (ownedSelector.kind === "PluralReaderSelector") {
                if (resolver == null) {
                  resolver = new SelectorListResolver(this._context.environment, this._rootIsQueryRenderer, ownedSelector, this._callback != null, this._onChange);
                } else {
                  !(resolver instanceof SelectorListResolver) ? true ? invariant5(false, "RelayModernFragmentSpecResolver: Expected prop `%s` to always be an array.", key) : invariant5(false) : void 0;
                  resolver.setSelector(ownedSelector);
                }
              } else {
                if (resolver == null) {
                  resolver = new SelectorResolver(this._context.environment, this._rootIsQueryRenderer, ownedSelector, this._callback != null, this._onChange);
                } else {
                  !(resolver instanceof SelectorResolver) ? true ? invariant5(false, "RelayModernFragmentSpecResolver: Expected prop `%s` to always be an object.", key) : invariant5(false) : void 0;
                  resolver.setSelector(ownedSelector);
                }
              }
              this._props[key] = props[key];
              this._resolvers[key] = resolver;
            }
          }
          this._stale = true;
        };
        _proto.setVariables = function setVariables(variables, request) {
          for (var key in this._resolvers) {
            if (this._resolvers.hasOwnProperty(key)) {
              var resolver = this._resolvers[key];
              if (resolver) {
                resolver.setVariables(variables, request);
              }
            }
          }
          this._stale = true;
        };
        return RelayModernFragmentSpecResolver2;
      }();
      var SelectorResolver = /* @__PURE__ */ function() {
        function SelectorResolver2(environment, rootIsQueryRenderer, selector2, subscribeOnConstruction, callback) {
          var _this2 = this;
          (0, _defineProperty210["default"])(this, "_onChange", function(snapshot) {
            _this2._data = snapshot.data;
            _this2._isMissingData = snapshot.isMissingData;
            _this2._missingRequiredFields = snapshot.missingRequiredFields;
            _this2._relayResolverErrors = snapshot.relayResolverErrors;
            _this2._callback();
          });
          var _snapshot = environment.lookup(selector2);
          this._callback = callback;
          this._data = _snapshot.data;
          this._isMissingData = _snapshot.isMissingData;
          this._missingRequiredFields = _snapshot.missingRequiredFields;
          this._relayResolverErrors = _snapshot.relayResolverErrors;
          this._environment = environment;
          this._rootIsQueryRenderer = rootIsQueryRenderer;
          this._selector = selector2;
          if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
            if (subscribeOnConstruction) {
              this._subscription = environment.subscribe(_snapshot, this._onChange);
            }
          } else {
            this._subscription = environment.subscribe(_snapshot, this._onChange);
          }
        }
        var _proto2 = SelectorResolver2.prototype;
        _proto2.dispose = function dispose() {
          if (this._subscription) {
            this._subscription.dispose();
            this._subscription = null;
          }
        };
        _proto2.resolve = function resolve() {
          if (this._isMissingData === true) {
            var pendingOperationsResult = getPendingOperationsForFragment(this._environment, this._selector.node, this._selector.owner);
            var promise = pendingOperationsResult === null || pendingOperationsResult === void 0 ? void 0 : pendingOperationsResult.promise;
            if (promise != null) {
              if (this._rootIsQueryRenderer) {
                true ? warning6(false, "Relay: Relay Container for fragment `%s` has missing data and would suspend. When using features such as @defer or @module, use `useFragment` instead of a Relay Container.", this._selector.node.name) : void 0;
              } else {
                var _pendingOperationsRes;
                var pendingOperations = (_pendingOperationsRes = pendingOperationsResult === null || pendingOperationsResult === void 0 ? void 0 : pendingOperationsResult.pendingOperations) !== null && _pendingOperationsRes !== void 0 ? _pendingOperationsRes : [];
                true ? warning6(false, "Relay: Relay Container for fragment `%s` suspended. When using features such as @defer or @module, use `useFragment` instead of a Relay Container.", this._selector.node.name) : void 0;
                this._environment.__log({
                  name: "suspense.fragment",
                  data: this._data,
                  fragment: this._selector.node,
                  isRelayHooks: false,
                  isMissingData: this._isMissingData,
                  isPromiseCached: false,
                  pendingOperations
                });
                throw promise;
              }
            }
          }
          handlePotentialSnapshotErrors(this._environment, this._missingRequiredFields, this._relayResolverErrors);
          return this._data;
        };
        _proto2.setSelector = function setSelector(selector2) {
          if (this._subscription != null && areEqualSelectors(selector2, this._selector)) {
            return;
          }
          this.dispose();
          var snapshot = this._environment.lookup(selector2);
          this._data = recycleNodesInto(this._data, snapshot.data);
          this._isMissingData = snapshot.isMissingData;
          this._missingRequiredFields = snapshot.missingRequiredFields;
          this._relayResolverErrors = snapshot.relayResolverErrors;
          this._selector = selector2;
          this._subscription = this._environment.subscribe(snapshot, this._onChange);
        };
        _proto2.setVariables = function setVariables(variables, request) {
          if (areEqual(variables, this._selector.variables)) {
            return;
          }
          var requestDescriptor = createRequestDescriptor(request, variables);
          var selector2 = createReaderSelector(this._selector.node, this._selector.dataID, variables, requestDescriptor);
          this.setSelector(selector2);
        };
        return SelectorResolver2;
      }();
      var SelectorListResolver = /* @__PURE__ */ function() {
        function SelectorListResolver2(environment, rootIsQueryRenderer, selector2, subscribeOnConstruction, callback) {
          var _this3 = this;
          (0, _defineProperty210["default"])(this, "_onChange", function(data) {
            _this3._stale = true;
            _this3._callback();
          });
          this._callback = callback;
          this._data = [];
          this._environment = environment;
          this._resolvers = [];
          this._stale = true;
          this._rootIsQueryRenderer = rootIsQueryRenderer;
          this._subscribeOnConstruction = subscribeOnConstruction;
          this.setSelector(selector2);
        }
        var _proto3 = SelectorListResolver2.prototype;
        _proto3.dispose = function dispose() {
          this._resolvers.forEach(disposeCallback);
        };
        _proto3.resolve = function resolve() {
          if (this._stale) {
            var prevData = this._data;
            var nextData;
            for (var ii = 0; ii < this._resolvers.length; ii++) {
              var prevItem = prevData[ii];
              var nextItem = this._resolvers[ii].resolve();
              if (nextData || nextItem !== prevItem) {
                nextData = nextData || prevData.slice(0, ii);
                nextData.push(nextItem);
              }
            }
            if (!nextData && this._resolvers.length !== prevData.length) {
              nextData = prevData.slice(0, this._resolvers.length);
            }
            this._data = nextData || prevData;
            this._stale = false;
          }
          return this._data;
        };
        _proto3.setSelector = function setSelector(selector2) {
          var selectors = selector2.selectors;
          while (this._resolvers.length > selectors.length) {
            var resolver = this._resolvers.pop();
            resolver.dispose();
          }
          for (var ii = 0; ii < selectors.length; ii++) {
            if (ii < this._resolvers.length) {
              this._resolvers[ii].setSelector(selectors[ii]);
            } else {
              this._resolvers[ii] = new SelectorResolver(this._environment, this._rootIsQueryRenderer, selectors[ii], this._subscribeOnConstruction, this._onChange);
            }
          }
          this._stale = true;
        };
        _proto3.setVariables = function setVariables(variables, request) {
          this._resolvers.forEach(function(resolver) {
            return resolver.setVariables(variables, request);
          });
          this._stale = true;
        };
        return SelectorListResolver2;
      }();
      function disposeCallback(disposable) {
        disposable && disposable.dispose();
      }
      module2.exports = RelayModernFragmentSpecResolver;
    }
  });

  // node_modules/relay-runtime/lib/store/createFragmentSpecResolver.js
  var require_createFragmentSpecResolver = __commonJS({
    "node_modules/relay-runtime/lib/store/createFragmentSpecResolver.js"(exports2, module2) {
      "use strict";
      var RelayModernFragmentSpecResolver = require_RelayModernFragmentSpecResolver();
      var warning6 = require_warning();
      function createFragmentSpecResolver(context3, containerName, fragments, props, rootIsQueryRenderer, callback) {
        if (true) {
          var fragmentNames = Object.keys(fragments);
          fragmentNames.forEach(function(fragmentName) {
            var propValue = props[fragmentName];
            true ? warning6(propValue !== void 0, "createFragmentSpecResolver: Expected prop `%s` to be supplied to `%s`, but got `undefined`. Pass an explicit `null` if this is intentional.", fragmentName, containerName) : void 0;
          });
        }
        return new RelayModernFragmentSpecResolver(context3, fragments, props, callback, rootIsQueryRenderer);
      }
      module2.exports = createFragmentSpecResolver;
    }
  });

  // node_modules/relay-runtime/lib/store/createRelayContext.js
  var require_createRelayContext = __commonJS({
    "node_modules/relay-runtime/lib/store/createRelayContext.js"(exports2, module2) {
      "use strict";
      var invariant5 = require_browser();
      var relayContext;
      var firstReact;
      function createRelayContext(react2) {
        if (!relayContext) {
          relayContext = react2.createContext(null);
          if (true) {
            relayContext.displayName = "RelayContext";
          }
          firstReact = react2;
        }
        !(react2 === firstReact) ? true ? invariant5(false, "[createRelayContext]: You are passing a different instance of React", react2.version) : invariant5(false) : void 0;
        return relayContext;
      }
      module2.exports = createRelayContext;
    }
  });

  // node_modules/relay-runtime/lib/store/readInlineData.js
  var require_readInlineData = __commonJS({
    "node_modules/relay-runtime/lib/store/readInlineData.js"(exports2, module2) {
      "use strict";
      var _require = require_GraphQLTag();
      var getInlineDataFragment = _require.getInlineDataFragment;
      var _require2 = require_RelayStoreUtils();
      var FRAGMENTS_KEY = _require2.FRAGMENTS_KEY;
      var invariant5 = require_browser();
      function readInlineData(fragment, fragmentRef) {
        var _fragmentRef$FRAGMENT;
        var inlineDataFragment = getInlineDataFragment(fragment);
        if (fragmentRef == null) {
          return fragmentRef;
        }
        !(typeof fragmentRef === "object") ? true ? invariant5(false, "readInlineData(): Expected an object, got `%s`.", typeof fragmentRef) : invariant5(false) : void 0;
        var inlineData = (_fragmentRef$FRAGMENT = fragmentRef[FRAGMENTS_KEY]) === null || _fragmentRef$FRAGMENT === void 0 ? void 0 : _fragmentRef$FRAGMENT[inlineDataFragment.name];
        !(inlineData != null) ? true ? invariant5(false, "readInlineData(): Expected fragment `%s` to be spread in the parent fragment.", inlineDataFragment.name) : invariant5(false) : void 0;
        return inlineData;
      }
      module2.exports = readInlineData;
    }
  });

  // node_modules/relay-runtime/lib/multi-actor-environment/ActorIdentifier.js
  var require_ActorIdentifier = __commonJS({
    "node_modules/relay-runtime/lib/multi-actor-environment/ActorIdentifier.js"(exports2, module2) {
      "use strict";
      var invariant5 = require_browser();
      var INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE = "INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE";
      function assertInternalActorIndentifier(actorIdentifier) {
        !(actorIdentifier === INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE) ? true ? invariant5(false, 'Expected to use only internal version of the `actorIdentifier`. "%s" was provided.', actorIdentifier) : invariant5(false) : void 0;
      }
      module2.exports = {
        assertInternalActorIndentifier,
        getActorIdentifier: function getActorIdentifier(actorID) {
          return actorID;
        },
        getDefaultActorIdentifier: function getDefaultActorIdentifier() {
          throw new Error("Not Implemented");
        },
        INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE
      };
    }
  });

  // node_modules/relay-runtime/lib/util/generateID.js
  var require_generateID = __commonJS({
    "node_modules/relay-runtime/lib/util/generateID.js"(exports2, module2) {
      "use strict";
      var id = 1e5;
      function generateID() {
        return id++;
      }
      module2.exports = generateID;
    }
  });

  // node_modules/relay-runtime/lib/network/wrapNetworkWithLogObserver.js
  var require_wrapNetworkWithLogObserver = __commonJS({
    "node_modules/relay-runtime/lib/network/wrapNetworkWithLogObserver.js"(exports2, module2) {
      "use strict";
      var generateID = require_generateID();
      function wrapNetworkWithLogObserver(env3, network) {
        return {
          execute: function execute(params, variables, cacheConfig, uploadables) {
            var networkRequestId = generateID();
            var logObserver = {
              start: function start(subscription) {
                env3.__log({
                  name: "network.start",
                  networkRequestId,
                  params,
                  variables,
                  cacheConfig
                });
              },
              next: function next(response) {
                env3.__log({
                  name: "network.next",
                  networkRequestId,
                  response
                });
              },
              error: function error(_error) {
                env3.__log({
                  name: "network.error",
                  networkRequestId,
                  error: _error
                });
              },
              complete: function complete() {
                env3.__log({
                  name: "network.complete",
                  networkRequestId
                });
              },
              unsubscribe: function unsubscribe() {
                env3.__log({
                  name: "network.unsubscribe",
                  networkRequestId
                });
              }
            };
            var logRequestInfo = function logRequestInfo2(info) {
              env3.__log({
                name: "network.info",
                networkRequestId,
                info
              });
            };
            return network.execute(params, variables, cacheConfig, uploadables, logRequestInfo)["do"](logObserver);
          }
        };
      }
      module2.exports = wrapNetworkWithLogObserver;
    }
  });

  // node_modules/relay-runtime/lib/store/RelayOperationTracker.js
  var require_RelayOperationTracker = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayOperationTracker.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      var invariant5 = require_browser();
      var RelayOperationTracker = /* @__PURE__ */ function() {
        function RelayOperationTracker2() {
          this._ownersToPendingOperations = /* @__PURE__ */ new Map();
          this._pendingOperationsToOwners = /* @__PURE__ */ new Map();
          this._ownersToPendingPromise = /* @__PURE__ */ new Map();
        }
        var _proto = RelayOperationTracker2.prototype;
        _proto.update = function update2(pendingOperation, affectedOwners) {
          if (affectedOwners.size === 0) {
            return;
          }
          var pendingOperationIdentifier = pendingOperation.identifier;
          var newlyAffectedOwnersIdentifier = /* @__PURE__ */ new Set();
          var _iterator = (0, _createForOfIteratorHelper2["default"])(affectedOwners), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var owner = _step.value;
              var ownerIdentifier = owner.identifier;
              var pendingOperationsAffectingOwner = this._ownersToPendingOperations.get(ownerIdentifier);
              if (pendingOperationsAffectingOwner != null) {
                if (!pendingOperationsAffectingOwner.has(pendingOperationIdentifier)) {
                  pendingOperationsAffectingOwner.set(pendingOperationIdentifier, pendingOperation);
                  newlyAffectedOwnersIdentifier.add(ownerIdentifier);
                }
              } else {
                this._ownersToPendingOperations.set(ownerIdentifier, /* @__PURE__ */ new Map([[pendingOperationIdentifier, pendingOperation]]));
                newlyAffectedOwnersIdentifier.add(ownerIdentifier);
              }
            }
          } catch (err2) {
            _iterator.e(err2);
          } finally {
            _iterator.f();
          }
          if (newlyAffectedOwnersIdentifier.size === 0) {
            return;
          }
          var ownersAffectedByPendingOperation = this._pendingOperationsToOwners.get(pendingOperationIdentifier) || /* @__PURE__ */ new Set();
          var _iterator2 = (0, _createForOfIteratorHelper2["default"])(newlyAffectedOwnersIdentifier), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var _ownerIdentifier = _step2.value;
              this._resolveOwnerResolvers(_ownerIdentifier);
              ownersAffectedByPendingOperation.add(_ownerIdentifier);
            }
          } catch (err2) {
            _iterator2.e(err2);
          } finally {
            _iterator2.f();
          }
          this._pendingOperationsToOwners.set(pendingOperationIdentifier, ownersAffectedByPendingOperation);
        };
        _proto.complete = function complete(pendingOperation) {
          var pendingOperationIdentifier = pendingOperation.identifier;
          var affectedOwnersIdentifier = this._pendingOperationsToOwners.get(pendingOperationIdentifier);
          if (affectedOwnersIdentifier == null) {
            return;
          }
          var completedOwnersIdentifier = /* @__PURE__ */ new Set();
          var updatedOwnersIdentifier = /* @__PURE__ */ new Set();
          var _iterator3 = (0, _createForOfIteratorHelper2["default"])(affectedOwnersIdentifier), _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
              var ownerIdentifier = _step3.value;
              var pendingOperationsAffectingOwner = this._ownersToPendingOperations.get(ownerIdentifier);
              if (!pendingOperationsAffectingOwner) {
                continue;
              }
              pendingOperationsAffectingOwner["delete"](pendingOperationIdentifier);
              if (pendingOperationsAffectingOwner.size > 0) {
                updatedOwnersIdentifier.add(ownerIdentifier);
              } else {
                completedOwnersIdentifier.add(ownerIdentifier);
              }
            }
          } catch (err2) {
            _iterator3.e(err2);
          } finally {
            _iterator3.f();
          }
          var _iterator4 = (0, _createForOfIteratorHelper2["default"])(completedOwnersIdentifier), _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
              var _ownerIdentifier2 = _step4.value;
              this._resolveOwnerResolvers(_ownerIdentifier2);
              this._ownersToPendingOperations["delete"](_ownerIdentifier2);
            }
          } catch (err2) {
            _iterator4.e(err2);
          } finally {
            _iterator4.f();
          }
          var _iterator5 = (0, _createForOfIteratorHelper2["default"])(updatedOwnersIdentifier), _step5;
          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
              var _ownerIdentifier3 = _step5.value;
              this._resolveOwnerResolvers(_ownerIdentifier3);
            }
          } catch (err2) {
            _iterator5.e(err2);
          } finally {
            _iterator5.f();
          }
          this._pendingOperationsToOwners["delete"](pendingOperationIdentifier);
        };
        _proto._resolveOwnerResolvers = function _resolveOwnerResolvers(ownerIdentifier) {
          var promiseEntry = this._ownersToPendingPromise.get(ownerIdentifier);
          if (promiseEntry != null) {
            promiseEntry.resolve();
          }
          this._ownersToPendingPromise["delete"](ownerIdentifier);
        };
        _proto.getPendingOperationsAffectingOwner = function getPendingOperationsAffectingOwner(owner) {
          var ownerIdentifier = owner.identifier;
          var pendingOperationsForOwner = this._ownersToPendingOperations.get(ownerIdentifier);
          if (pendingOperationsForOwner == null || pendingOperationsForOwner.size === 0) {
            return null;
          }
          var cachedPromiseEntry = this._ownersToPendingPromise.get(ownerIdentifier);
          if (cachedPromiseEntry != null) {
            return {
              promise: cachedPromiseEntry.promise,
              pendingOperations: cachedPromiseEntry.pendingOperations
            };
          }
          var resolve;
          var promise = new Promise(function(r) {
            resolve = r;
          });
          !(resolve != null) ? true ? invariant5(false, "RelayOperationTracker: Expected resolver to be defined. If youare seeing this, it is likely a bug in Relay.") : invariant5(false) : void 0;
          var pendingOperations = Array.from(pendingOperationsForOwner.values());
          this._ownersToPendingPromise.set(ownerIdentifier, {
            promise,
            resolve,
            pendingOperations
          });
          return {
            promise,
            pendingOperations
          };
        };
        return RelayOperationTracker2;
      }();
      module2.exports = RelayOperationTracker;
    }
  });

  // node_modules/relay-runtime/lib/util/registerEnvironmentWithDevTools.js
  var require_registerEnvironmentWithDevTools = __commonJS({
    "node_modules/relay-runtime/lib/util/registerEnvironmentWithDevTools.js"(exports2, module2) {
      "use strict";
      function registerEnvironmentWithDevTools(environment) {
        var _global = typeof window !== "undefined" ? window : typeof window !== "undefined" ? window : void 0;
        var devToolsHook = _global && _global.__RELAY_DEVTOOLS_HOOK__;
        if (devToolsHook) {
          devToolsHook.registerEnvironment(environment);
        }
      }
      module2.exports = registerEnvironmentWithDevTools;
    }
  });

  // node_modules/relay-runtime/lib/store/ViewerPattern.js
  var require_ViewerPattern = __commonJS({
    "node_modules/relay-runtime/lib/store/ViewerPattern.js"(exports2, module2) {
      "use strict";
      var _require = require_ClientID();
      var generateClientID = _require.generateClientID;
      var _require2 = require_RelayStoreUtils();
      var ROOT_ID = _require2.ROOT_ID;
      var VIEWER_ID = generateClientID(ROOT_ID, "viewer");
      var VIEWER_TYPE = "Viewer";
      module2.exports = {
        VIEWER_ID,
        VIEWER_TYPE
      };
    }
  });

  // node_modules/relay-runtime/lib/store/defaultGetDataID.js
  var require_defaultGetDataID = __commonJS({
    "node_modules/relay-runtime/lib/store/defaultGetDataID.js"(exports2, module2) {
      "use strict";
      var _require = require_ViewerPattern();
      var VIEWER_ID = _require.VIEWER_ID;
      var VIEWER_TYPE = _require.VIEWER_TYPE;
      function defaultGetDataID(fieldValue, typeName) {
        if (typeName === VIEWER_TYPE) {
          return fieldValue.id == null ? VIEWER_ID : fieldValue.id;
        }
        return fieldValue.id;
      }
      module2.exports = defaultGetDataID;
    }
  });

  // node_modules/relay-runtime/lib/store/defaultRequiredFieldLogger.js
  var require_defaultRequiredFieldLogger = __commonJS({
    "node_modules/relay-runtime/lib/store/defaultRequiredFieldLogger.js"(exports2, module2) {
      "use strict";
      var defaultRequiredFieldLogger = function defaultRequiredFieldLogger2(event) {
        if (event.kind === "missing_field.log") {
          throw new Error("Relay Environment Configuration Error (dev only): `@required(action: LOG)` requires that the Relay Environment be configured with a `requiredFieldLogger`.");
        }
      };
      module2.exports = defaultRequiredFieldLogger;
    }
  });

  // node_modules/relay-runtime/lib/util/getOperation.js
  var require_getOperation = __commonJS({
    "node_modules/relay-runtime/lib/util/getOperation.js"(exports2, module2) {
      "use strict";
      var _require = require_RelayConcreteNode();
      var REQUEST = _require.REQUEST;
      var SPLIT_OPERATION = _require.SPLIT_OPERATION;
      function getOperation(node5) {
        switch (node5.kind) {
          case REQUEST:
            return node5.operation;
          case SPLIT_OPERATION:
          default:
            return node5;
        }
      }
      module2.exports = getOperation;
    }
  });

  // node_modules/relay-runtime/lib/util/RelayError.js
  var require_RelayError = __commonJS({
    "node_modules/relay-runtime/lib/util/RelayError.js"(exports2, module2) {
      "use strict";
      function createError(type, name, messageFormat) {
        for (var _len = arguments.length, messageParams = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
          messageParams[_key - 3] = arguments[_key];
        }
        var index2 = 0;
        var message = messageFormat.replace(/%s/g, function() {
          return String(messageParams[index2++]);
        });
        var err2 = new Error(message);
        var error = Object.assign(err2, {
          name,
          messageFormat,
          messageParams,
          type,
          taalOpcodes: [2, 2]
        });
        if (error.stack === void 0) {
          try {
            throw error;
          } catch (_unused) {
          }
        }
        return error;
      }
      module2.exports = {
        create: function create(name, messageFormat) {
          for (var _len2 = arguments.length, messageParams = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            messageParams[_key2 - 2] = arguments[_key2];
          }
          return createError.apply(void 0, ["error", name, messageFormat].concat(messageParams));
        },
        createWarning: function createWarning(name, messageFormat) {
          for (var _len3 = arguments.length, messageParams = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
            messageParams[_key3 - 2] = arguments[_key3];
          }
          return createError.apply(void 0, ["warn", name, messageFormat].concat(messageParams));
        }
      };
    }
  });

  // node_modules/relay-runtime/lib/util/withDuration.js
  var require_withDuration = __commonJS({
    "node_modules/relay-runtime/lib/util/withDuration.js"(exports2, module2) {
      "use strict";
      var _window;
      var _window$performance;
      var isPerformanceNowAvailable = typeof window !== "undefined" && typeof ((_window = window) === null || _window === void 0 ? void 0 : (_window$performance = _window.performance) === null || _window$performance === void 0 ? void 0 : _window$performance.now) === "function";
      function currentTimestamp() {
        if (isPerformanceNowAvailable) {
          return window.performance.now();
        }
        return Date.now();
      }
      function withDuration(cb) {
        var startTime = currentTimestamp();
        var result = cb();
        return [currentTimestamp() - startTime, result];
      }
      module2.exports = withDuration;
    }
  });

  // node_modules/relay-runtime/lib/store/RelayModernRecord.js
  var require_RelayModernRecord = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayModernRecord.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var deepFreeze = require_deepFreeze();
      var _require = require_ClientID();
      var isClientID = _require.isClientID;
      var _require2 = require_RelayStoreUtils();
      var ACTOR_IDENTIFIER_KEY = _require2.ACTOR_IDENTIFIER_KEY;
      var ID_KEY2 = _require2.ID_KEY;
      var INVALIDATED_AT_KEY = _require2.INVALIDATED_AT_KEY;
      var REF_KEY2 = _require2.REF_KEY;
      var REFS_KEY = _require2.REFS_KEY;
      var ROOT_ID = _require2.ROOT_ID;
      var TYPENAME_KEY = _require2.TYPENAME_KEY;
      var areEqual = require_areEqual();
      var invariant5 = require_browser();
      var warning6 = require_warning();
      function clone(record) {
        return (0, _objectSpread28["default"])({}, record);
      }
      function copyFields(source2, sink) {
        for (var key in source2) {
          if (source2.hasOwnProperty(key)) {
            if (key !== ID_KEY2 && key !== TYPENAME_KEY) {
              sink[key] = source2[key];
            }
          }
        }
      }
      function create(dataID, typeName) {
        var record = {};
        record[ID_KEY2] = dataID;
        record[TYPENAME_KEY] = typeName;
        return record;
      }
      function getDataID(record) {
        return record[ID_KEY2];
      }
      function getType(record) {
        return record[TYPENAME_KEY];
      }
      function getValue3(record, storageKey) {
        var value = record[storageKey];
        if (value && typeof value === "object") {
          !(!value.hasOwnProperty(REF_KEY2) && !value.hasOwnProperty(REFS_KEY)) ? true ? invariant5(false, "RelayModernRecord.getValue(): Expected a scalar (non-link) value for `%s.%s` but found %s.", record[ID_KEY2], storageKey, value.hasOwnProperty(REF_KEY2) ? "a linked record" : "plural linked records") : invariant5(false) : void 0;
        }
        return value;
      }
      function getLinkedRecordID(record, storageKey) {
        var maybeLink = record[storageKey];
        if (maybeLink == null) {
          return maybeLink;
        }
        var link = maybeLink;
        !(typeof link === "object" && link && typeof link[REF_KEY2] === "string") ? true ? invariant5(false, "RelayModernRecord.getLinkedRecordID(): Expected `%s.%s` to be a linked ID, was `%s`.%s", record[ID_KEY2], storageKey, JSON.stringify(link), typeof link === "object" && link[REFS_KEY] !== void 0 ? " It appears to be a plural linked record: did you mean to call getLinkedRecords() instead of getLinkedRecord()?" : "") : invariant5(false) : void 0;
        return link[REF_KEY2];
      }
      function getLinkedRecordIDs(record, storageKey) {
        var links = record[storageKey];
        if (links == null) {
          return links;
        }
        !(typeof links === "object" && Array.isArray(links[REFS_KEY])) ? true ? invariant5(false, "RelayModernRecord.getLinkedRecordIDs(): Expected `%s.%s` to contain an array of linked IDs, got `%s`.%s", record[ID_KEY2], storageKey, JSON.stringify(links), typeof links === "object" && links[REF_KEY2] !== void 0 ? " It appears to be a singular linked record: did you mean to call getLinkedRecord() instead of getLinkedRecords()?" : "") : invariant5(false) : void 0;
        return links[REFS_KEY];
      }
      function getInvalidationEpoch(record) {
        if (record == null) {
          return null;
        }
        var invalidatedAt = record[INVALIDATED_AT_KEY];
        if (typeof invalidatedAt !== "number") {
          return null;
        }
        return invalidatedAt;
      }
      function update2(prevRecord, nextRecord) {
        if (true) {
          var _getType, _getType2;
          var prevID = getDataID(prevRecord);
          var nextID2 = getDataID(nextRecord);
          true ? warning6(prevID === nextID2, "RelayModernRecord: Invalid record update, expected both versions of the record to have the same id, got `%s` and `%s`.", prevID, nextID2) : void 0;
          var prevType = (_getType = getType(prevRecord)) !== null && _getType !== void 0 ? _getType : null;
          var nextType = (_getType2 = getType(nextRecord)) !== null && _getType2 !== void 0 ? _getType2 : null;
          true ? warning6(isClientID(nextID2) && nextID2 !== ROOT_ID || prevType === nextType, "RelayModernRecord: Invalid record update, expected both versions of record `%s` to have the same `%s` but got conflicting types `%s` and `%s`. The GraphQL server likely violated the globally unique id requirement by returning the same id for different objects.", prevID, TYPENAME_KEY, prevType, nextType) : void 0;
        }
        var updated = null;
        var keys2 = Object.keys(nextRecord);
        for (var ii = 0; ii < keys2.length; ii++) {
          var key = keys2[ii];
          if (updated || !areEqual(prevRecord[key], nextRecord[key])) {
            updated = updated !== null ? updated : (0, _objectSpread28["default"])({}, prevRecord);
            updated[key] = nextRecord[key];
          }
        }
        return updated !== null ? updated : prevRecord;
      }
      function merge(record1, record2) {
        if (true) {
          var _getType3, _getType4;
          var prevID = getDataID(record1);
          var nextID2 = getDataID(record2);
          true ? warning6(prevID === nextID2, "RelayModernRecord: Invalid record merge, expected both versions of the record to have the same id, got `%s` and `%s`.", prevID, nextID2) : void 0;
          var prevType = (_getType3 = getType(record1)) !== null && _getType3 !== void 0 ? _getType3 : null;
          var nextType = (_getType4 = getType(record2)) !== null && _getType4 !== void 0 ? _getType4 : null;
          true ? warning6(isClientID(nextID2) && nextID2 !== ROOT_ID || prevType === nextType, "RelayModernRecord: Invalid record merge, expected both versions of record `%s` to have the same `%s` but got conflicting types `%s` and `%s`. The GraphQL server likely violated the globally unique id requirement by returning the same id for different objects.", prevID, TYPENAME_KEY, prevType, nextType) : void 0;
        }
        return (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, record1), record2);
      }
      function freeze(record) {
        deepFreeze(record);
      }
      function setValue(record, storageKey, value) {
        if (true) {
          var prevID = getDataID(record);
          if (storageKey === ID_KEY2) {
            true ? warning6(prevID === value, "RelayModernRecord: Invalid field update, expected both versions of the record to have the same id, got `%s` and `%s`.", prevID, value) : void 0;
          } else if (storageKey === TYPENAME_KEY) {
            var _getType5;
            var prevType = (_getType5 = getType(record)) !== null && _getType5 !== void 0 ? _getType5 : null;
            var nextType = value !== null && value !== void 0 ? value : null;
            true ? warning6(isClientID(getDataID(record)) && getDataID(record) !== ROOT_ID || prevType === nextType, "RelayModernRecord: Invalid field update, expected both versions of record `%s` to have the same `%s` but got conflicting types `%s` and `%s`. The GraphQL server likely violated the globally unique id requirement by returning the same id for different objects.", prevID, TYPENAME_KEY, prevType, nextType) : void 0;
          }
        }
        record[storageKey] = value;
      }
      function setLinkedRecordID(record, storageKey, linkedID) {
        var link = {};
        link[REF_KEY2] = linkedID;
        record[storageKey] = link;
      }
      function setLinkedRecordIDs(record, storageKey, linkedIDs) {
        var links = {};
        links[REFS_KEY] = linkedIDs;
        record[storageKey] = links;
      }
      function setActorLinkedRecordID(record, storageKey, actorIdentifier, linkedID) {
        var link = {};
        link[REF_KEY2] = linkedID;
        link[ACTOR_IDENTIFIER_KEY] = actorIdentifier;
        record[storageKey] = link;
      }
      function getActorLinkedRecordID(record, storageKey) {
        var link = record[storageKey];
        if (link == null) {
          return link;
        }
        !(typeof link === "object" && typeof link[REF_KEY2] === "string" && link[ACTOR_IDENTIFIER_KEY] != null) ? true ? invariant5(false, "RelayModernRecord.getActorLinkedRecordID(): Expected `%s.%s` to be an actor specific linked ID, was `%s`.", record[ID_KEY2], storageKey, JSON.stringify(link)) : invariant5(false) : void 0;
        return [link[ACTOR_IDENTIFIER_KEY], link[REF_KEY2]];
      }
      module2.exports = {
        clone,
        copyFields,
        create,
        freeze,
        getDataID,
        getInvalidationEpoch,
        getLinkedRecordID,
        getLinkedRecordIDs,
        getType,
        getValue: getValue3,
        merge,
        setValue,
        setLinkedRecordID,
        setLinkedRecordIDs,
        update: update2,
        getActorLinkedRecordID,
        setActorLinkedRecordID
      };
    }
  });

  // node_modules/relay-runtime/lib/store/RelayRecordState.js
  var require_RelayRecordState = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayRecordState.js"(exports2, module2) {
      "use strict";
      var RelayRecordState = {
        EXISTENT: "EXISTENT",
        NONEXISTENT: "NONEXISTENT",
        UNKNOWN: "UNKNOWN"
      };
      module2.exports = RelayRecordState;
    }
  });

  // node_modules/relay-runtime/lib/store/RelayRecordSource.js
  var require_RelayRecordSource = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayRecordSource.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      var RelayRecordState = require_RelayRecordState();
      var EXISTENT = RelayRecordState.EXISTENT;
      var NONEXISTENT = RelayRecordState.NONEXISTENT;
      var UNKNOWN = RelayRecordState.UNKNOWN;
      var RelayRecordSource = /* @__PURE__ */ function() {
        function RelayRecordSource2(records) {
          var _this = this;
          this._records = /* @__PURE__ */ new Map();
          if (records != null) {
            Object.keys(records).forEach(function(key) {
              _this._records.set(key, records[key]);
            });
          }
        }
        RelayRecordSource2.create = function create(records) {
          return new RelayRecordSource2(records);
        };
        var _proto = RelayRecordSource2.prototype;
        _proto.clear = function clear() {
          this._records = /* @__PURE__ */ new Map();
        };
        _proto["delete"] = function _delete(dataID) {
          this._records.set(dataID, null);
        };
        _proto.get = function get2(dataID) {
          return this._records.get(dataID);
        };
        _proto.getRecordIDs = function getRecordIDs() {
          return Array.from(this._records.keys());
        };
        _proto.getStatus = function getStatus(dataID) {
          if (!this._records.has(dataID)) {
            return UNKNOWN;
          }
          return this._records.get(dataID) == null ? NONEXISTENT : EXISTENT;
        };
        _proto.has = function has2(dataID) {
          return this._records.has(dataID);
        };
        _proto.remove = function remove(dataID) {
          this._records["delete"](dataID);
        };
        _proto.set = function set2(dataID, record) {
          this._records.set(dataID, record);
        };
        _proto.size = function size() {
          return this._records.size;
        };
        _proto.toJSON = function toJSON() {
          var obj = {};
          var _iterator = (0, _createForOfIteratorHelper2["default"])(this._records), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var _step$value = _step.value, key = _step$value[0], value = _step$value[1];
              obj[key] = value;
            }
          } catch (err2) {
            _iterator.e(err2);
          } finally {
            _iterator.f();
          }
          return obj;
        };
        return RelayRecordSource2;
      }();
      module2.exports = RelayRecordSource;
    }
  });

  // node_modules/relay-runtime/lib/multi-actor-environment/ActorUtils.js
  var require_ActorUtils = __commonJS({
    "node_modules/relay-runtime/lib/multi-actor-environment/ActorUtils.js"(exports2, module2) {
      "use strict";
      var ACTOR_IDENTIFIER_FIELD_NAME = "actor_key";
      var _require = require_ActorIdentifier();
      var getActorIdentifier = _require.getActorIdentifier;
      function getActorIdentifierFromPayload(payload) {
        if (payload != null && typeof payload === "object" && typeof payload[ACTOR_IDENTIFIER_FIELD_NAME] === "string") {
          return getActorIdentifier(payload[ACTOR_IDENTIFIER_FIELD_NAME]);
        }
      }
      module2.exports = {
        ACTOR_IDENTIFIER_FIELD_NAME,
        getActorIdentifierFromPayload
      };
    }
  });

  // node_modules/relay-runtime/lib/store/RelayStoreReactFlightUtils.js
  var require_RelayStoreReactFlightUtils = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayStoreReactFlightUtils.js"(exports2, module2) {
      "use strict";
      var _require = require_RelayModernRecord();
      var getType = _require.getType;
      var invariant5 = require_browser();
      var REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY = "executableDefinitions";
      var REACT_FLIGHT_TREE_STORAGE_KEY = "tree";
      var REACT_FLIGHT_TYPE_NAME = "ReactFlightComponent";
      function refineToReactFlightPayloadData(payload) {
        if (payload == null || typeof payload !== "object" || typeof payload.status !== "string" || !Array.isArray(payload.tree) && payload.tree !== null || !Array.isArray(payload.queries) || !Array.isArray(payload.fragments) || !Array.isArray(payload.errors)) {
          return null;
        }
        return payload;
      }
      function getReactFlightClientResponse(record) {
        !(getType(record) === REACT_FLIGHT_TYPE_NAME) ? true ? invariant5(false, "getReactFlightClientResponse(): Expected a ReactFlightComponentRecord, got %s.", record) : invariant5(false) : void 0;
        return record[REACT_FLIGHT_TREE_STORAGE_KEY];
      }
      module2.exports = {
        REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY,
        REACT_FLIGHT_TREE_STORAGE_KEY,
        REACT_FLIGHT_TYPE_NAME,
        getReactFlightClientResponse,
        refineToReactFlightPayloadData
      };
    }
  });

  // node_modules/relay-runtime/lib/store/TypeID.js
  var require_TypeID = __commonJS({
    "node_modules/relay-runtime/lib/store/TypeID.js"(exports2, module2) {
      "use strict";
      var PREFIX = "client:__type:";
      var TYPE_SCHEMA_TYPE = "__TypeSchema";
      function generateTypeID(typeName) {
        return PREFIX + typeName;
      }
      function isTypeID(id) {
        return id.indexOf(PREFIX) === 0;
      }
      module2.exports = {
        generateTypeID,
        isTypeID,
        TYPE_SCHEMA_TYPE
      };
    }
  });

  // node_modules/relay-runtime/lib/store/RelayResponseNormalizer.js
  var require_RelayResponseNormalizer = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayResponseNormalizer.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      var _toConsumableArray22 = _interopRequireDefault(require_toConsumableArray());
      var _require = require_ActorUtils();
      var ACTOR_IDENTIFIER_FIELD_NAME = _require.ACTOR_IDENTIFIER_FIELD_NAME;
      var getActorIdentifierFromPayload = _require.getActorIdentifierFromPayload;
      var _require2 = require_RelayConcreteNode();
      var ACTOR_CHANGE = _require2.ACTOR_CHANGE;
      var CLIENT_COMPONENT = _require2.CLIENT_COMPONENT;
      var CLIENT_EXTENSION = _require2.CLIENT_EXTENSION;
      var CONDITION = _require2.CONDITION;
      var DEFER = _require2.DEFER;
      var FLIGHT_FIELD = _require2.FLIGHT_FIELD;
      var FRAGMENT_SPREAD = _require2.FRAGMENT_SPREAD;
      var INLINE_FRAGMENT = _require2.INLINE_FRAGMENT;
      var LINKED_FIELD = _require2.LINKED_FIELD;
      var LINKED_HANDLE = _require2.LINKED_HANDLE;
      var MODULE_IMPORT = _require2.MODULE_IMPORT;
      var SCALAR_FIELD = _require2.SCALAR_FIELD;
      var SCALAR_HANDLE = _require2.SCALAR_HANDLE;
      var STREAM = _require2.STREAM;
      var TYPE_DISCRIMINATOR = _require2.TYPE_DISCRIMINATOR;
      var RelayFeatureFlags = require_RelayFeatureFlags();
      var _require3 = require_ClientID();
      var generateClientID = _require3.generateClientID;
      var isClientID = _require3.isClientID;
      var _require4 = require_RelayConcreteVariables();
      var getLocalVariables = _require4.getLocalVariables;
      var RelayModernRecord = require_RelayModernRecord();
      var _require5 = require_RelayModernSelector();
      var createNormalizationSelector = _require5.createNormalizationSelector;
      var _require6 = require_RelayStoreReactFlightUtils();
      var REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY = _require6.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY;
      var REACT_FLIGHT_TREE_STORAGE_KEY = _require6.REACT_FLIGHT_TREE_STORAGE_KEY;
      var REACT_FLIGHT_TYPE_NAME = _require6.REACT_FLIGHT_TYPE_NAME;
      var refineToReactFlightPayloadData = _require6.refineToReactFlightPayloadData;
      var _require7 = require_RelayStoreUtils();
      var ROOT_ID = _require7.ROOT_ID;
      var ROOT_TYPE = _require7.ROOT_TYPE;
      var TYPENAME_KEY = _require7.TYPENAME_KEY;
      var getArgumentValues = _require7.getArgumentValues;
      var getHandleStorageKey = _require7.getHandleStorageKey;
      var getModuleComponentKey = _require7.getModuleComponentKey;
      var getModuleOperationKey = _require7.getModuleOperationKey;
      var getStorageKey = _require7.getStorageKey;
      var _require8 = require_TypeID();
      var TYPE_SCHEMA_TYPE = _require8.TYPE_SCHEMA_TYPE;
      var generateTypeID = _require8.generateTypeID;
      var areEqual = require_areEqual();
      var invariant5 = require_browser();
      var warning6 = require_warning();
      function normalize(recordSource, selector2, response, options) {
        var dataID = selector2.dataID, node5 = selector2.node, variables = selector2.variables;
        var normalizer = new RelayResponseNormalizer(recordSource, variables, options);
        return normalizer.normalizeResponse(node5, dataID, response);
      }
      var RelayResponseNormalizer = /* @__PURE__ */ function() {
        function RelayResponseNormalizer2(recordSource, variables, options) {
          this._actorIdentifier = options.actorIdentifier;
          this._getDataId = options.getDataID;
          this._handleFieldPayloads = [];
          this._treatMissingFieldsAsNull = options.treatMissingFieldsAsNull;
          this._incrementalPlaceholders = [];
          this._isClientExtension = false;
          this._isUnmatchedAbstractType = false;
          this._followupPayloads = [];
          this._path = options.path ? (0, _toConsumableArray22["default"])(options.path) : [];
          this._recordSource = recordSource;
          this._variables = variables;
          this._reactFlightPayloadDeserializer = options.reactFlightPayloadDeserializer;
          this._reactFlightServerErrorHandler = options.reactFlightServerErrorHandler;
          this._shouldProcessClientComponents = options.shouldProcessClientComponents;
        }
        var _proto = RelayResponseNormalizer2.prototype;
        _proto.normalizeResponse = function normalizeResponse(node5, dataID, data) {
          var record = this._recordSource.get(dataID);
          !record ? true ? invariant5(false, "RelayResponseNormalizer(): Expected root record `%s` to exist.", dataID) : invariant5(false) : void 0;
          this._assignClientAbstractTypes(node5);
          this._traverseSelections(node5, record, data);
          return {
            errors: null,
            fieldPayloads: this._handleFieldPayloads,
            incrementalPlaceholders: this._incrementalPlaceholders,
            followupPayloads: this._followupPayloads,
            source: this._recordSource,
            isFinal: false
          };
        };
        _proto._assignClientAbstractTypes = function _assignClientAbstractTypes(node5) {
          var clientAbstractTypes = node5.clientAbstractTypes;
          if (clientAbstractTypes != null) {
            for (var _i = 0, _Object$keys = Object.keys(clientAbstractTypes); _i < _Object$keys.length; _i++) {
              var abstractType = _Object$keys[_i];
              var _iterator = (0, _createForOfIteratorHelper2["default"])(clientAbstractTypes[abstractType]), _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                  var concreteType = _step.value;
                  var typeID = generateTypeID(concreteType);
                  var typeRecord = this._recordSource.get(typeID);
                  if (typeRecord == null) {
                    typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);
                    this._recordSource.set(typeID, typeRecord);
                  }
                  RelayModernRecord.setValue(typeRecord, abstractType, true);
                }
              } catch (err2) {
                _iterator.e(err2);
              } finally {
                _iterator.f();
              }
            }
          }
        };
        _proto._getVariableValue = function _getVariableValue(name) {
          !this._variables.hasOwnProperty(name) ? true ? invariant5(false, "RelayResponseNormalizer(): Undefined variable `%s`.", name) : invariant5(false) : void 0;
          return this._variables[name];
        };
        _proto._getRecordType = function _getRecordType(data) {
          var typeName = data[TYPENAME_KEY];
          !(typeName != null) ? true ? invariant5(false, "RelayResponseNormalizer(): Expected a typename for record `%s`.", JSON.stringify(data, null, 2)) : invariant5(false) : void 0;
          return typeName;
        };
        _proto._traverseSelections = function _traverseSelections(node5, record, data) {
          for (var i = 0; i < node5.selections.length; i++) {
            var selection = node5.selections[i];
            switch (selection.kind) {
              case SCALAR_FIELD:
              case LINKED_FIELD:
                this._normalizeField(node5, selection, record, data);
                break;
              case CONDITION:
                var conditionValue = Boolean(this._getVariableValue(selection.condition));
                if (conditionValue === selection.passingValue) {
                  this._traverseSelections(selection, record, data);
                }
                break;
              case FRAGMENT_SPREAD: {
                var prevVariables = this._variables;
                this._variables = getLocalVariables(this._variables, selection.fragment.argumentDefinitions, selection.args);
                this._traverseSelections(selection.fragment, record, data);
                this._variables = prevVariables;
                break;
              }
              case INLINE_FRAGMENT: {
                var abstractKey = selection.abstractKey;
                if (abstractKey == null) {
                  var typeName = RelayModernRecord.getType(record);
                  if (typeName === selection.type) {
                    this._traverseSelections(selection, record, data);
                  }
                } else {
                  var implementsInterface = data.hasOwnProperty(abstractKey);
                  var _typeName = RelayModernRecord.getType(record);
                  var typeID = generateTypeID(_typeName);
                  var typeRecord = this._recordSource.get(typeID);
                  if (typeRecord == null) {
                    typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);
                    this._recordSource.set(typeID, typeRecord);
                  }
                  RelayModernRecord.setValue(typeRecord, abstractKey, implementsInterface);
                  if (implementsInterface) {
                    this._traverseSelections(selection, record, data);
                  }
                }
                break;
              }
              case TYPE_DISCRIMINATOR: {
                var _abstractKey = selection.abstractKey;
                var _implementsInterface = data.hasOwnProperty(_abstractKey);
                var _typeName2 = RelayModernRecord.getType(record);
                var _typeID = generateTypeID(_typeName2);
                var _typeRecord = this._recordSource.get(_typeID);
                if (_typeRecord == null) {
                  _typeRecord = RelayModernRecord.create(_typeID, TYPE_SCHEMA_TYPE);
                  this._recordSource.set(_typeID, _typeRecord);
                }
                RelayModernRecord.setValue(_typeRecord, _abstractKey, _implementsInterface);
                break;
              }
              case LINKED_HANDLE:
              case SCALAR_HANDLE:
                var args = selection.args ? getArgumentValues(selection.args, this._variables) : {};
                var fieldKey = getStorageKey(selection, this._variables);
                var handleKey = getHandleStorageKey(selection, this._variables);
                this._handleFieldPayloads.push({
                  args,
                  dataID: RelayModernRecord.getDataID(record),
                  fieldKey,
                  handle: selection.handle,
                  handleKey,
                  handleArgs: selection.handleArgs ? getArgumentValues(selection.handleArgs, this._variables) : {}
                });
                break;
              case MODULE_IMPORT:
                this._normalizeModuleImport(node5, selection, record, data);
                break;
              case DEFER:
                this._normalizeDefer(selection, record, data);
                break;
              case STREAM:
                this._normalizeStream(selection, record, data);
                break;
              case CLIENT_EXTENSION:
                var isClientExtension = this._isClientExtension;
                this._isClientExtension = true;
                this._traverseSelections(selection, record, data);
                this._isClientExtension = isClientExtension;
                break;
              case CLIENT_COMPONENT:
                if (this._shouldProcessClientComponents === false) {
                  break;
                }
                this._traverseSelections(selection.fragment, record, data);
                break;
              case FLIGHT_FIELD:
                if (RelayFeatureFlags.ENABLE_REACT_FLIGHT_COMPONENT_FIELD) {
                  this._normalizeFlightField(node5, selection, record, data);
                } else {
                  throw new Error("Flight fields are not yet supported.");
                }
                break;
              case ACTOR_CHANGE:
                this._normalizeActorChange(node5, selection, record, data);
                break;
              default:
                selection;
                true ? true ? invariant5(false, "RelayResponseNormalizer(): Unexpected ast kind `%s`.", selection.kind) : invariant5(false) : void 0;
            }
          }
        };
        _proto._normalizeDefer = function _normalizeDefer(defer2, record, data) {
          var isDeferred = defer2["if"] === null || this._getVariableValue(defer2["if"]);
          if (true) {
            true ? warning6(typeof isDeferred === "boolean", "RelayResponseNormalizer: Expected value for @defer `if` argument to be a boolean, got `%s`.", isDeferred) : void 0;
          }
          if (isDeferred === false) {
            this._traverseSelections(defer2, record, data);
          } else {
            this._incrementalPlaceholders.push({
              kind: "defer",
              data,
              label: defer2.label,
              path: (0, _toConsumableArray22["default"])(this._path),
              selector: createNormalizationSelector(defer2, RelayModernRecord.getDataID(record), this._variables),
              typeName: RelayModernRecord.getType(record),
              actorIdentifier: this._actorIdentifier
            });
          }
        };
        _proto._normalizeStream = function _normalizeStream(stream, record, data) {
          this._traverseSelections(stream, record, data);
          var isStreamed = stream["if"] === null || this._getVariableValue(stream["if"]);
          if (true) {
            true ? warning6(typeof isStreamed === "boolean", "RelayResponseNormalizer: Expected value for @stream `if` argument to be a boolean, got `%s`.", isStreamed) : void 0;
          }
          if (isStreamed === true) {
            this._incrementalPlaceholders.push({
              kind: "stream",
              label: stream.label,
              path: (0, _toConsumableArray22["default"])(this._path),
              parentID: RelayModernRecord.getDataID(record),
              node: stream,
              variables: this._variables,
              actorIdentifier: this._actorIdentifier
            });
          }
        };
        _proto._normalizeModuleImport = function _normalizeModuleImport(parent2, moduleImport, record, data) {
          !(typeof data === "object" && data) ? true ? invariant5(false, "RelayResponseNormalizer: Expected data for @module to be an object.") : invariant5(false) : void 0;
          var typeName = RelayModernRecord.getType(record);
          var componentKey = getModuleComponentKey(moduleImport.documentName);
          var componentReference = moduleImport.componentModuleProvider || data[componentKey];
          RelayModernRecord.setValue(record, componentKey, componentReference !== null && componentReference !== void 0 ? componentReference : null);
          var operationKey = getModuleOperationKey(moduleImport.documentName);
          var operationReference = moduleImport.operationModuleProvider || data[operationKey];
          RelayModernRecord.setValue(record, operationKey, operationReference !== null && operationReference !== void 0 ? operationReference : null);
          if (operationReference != null) {
            this._followupPayloads.push({
              kind: "ModuleImportPayload",
              args: moduleImport.args,
              data,
              dataID: RelayModernRecord.getDataID(record),
              operationReference,
              path: (0, _toConsumableArray22["default"])(this._path),
              typeName,
              variables: this._variables,
              actorIdentifier: this._actorIdentifier
            });
          }
        };
        _proto._normalizeField = function _normalizeField(parent2, selection, record, data) {
          !(typeof data === "object" && data) ? true ? invariant5(false, "writeField(): Expected data for field `%s` to be an object.", selection.name) : invariant5(false) : void 0;
          var responseKey = selection.alias || selection.name;
          var storageKey = getStorageKey(selection, this._variables);
          var fieldValue = data[responseKey];
          if (fieldValue == null) {
            if (fieldValue === void 0) {
              var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;
              if (isOptionalField) {
                return;
              } else if (!this._treatMissingFieldsAsNull) {
                if (true) {
                  true ? warning6(false, "RelayResponseNormalizer: Payload did not contain a value for field `%s: %s`. Check that you are parsing with the same query that was used to fetch the payload.", responseKey, storageKey) : void 0;
                }
                return;
              }
            }
            if (true) {
              if (selection.kind === SCALAR_FIELD) {
                this._validateConflictingFieldsWithIdenticalId(
                  record,
                  storageKey,
                  null
                );
              }
            }
            RelayModernRecord.setValue(record, storageKey, null);
            return;
          }
          if (selection.kind === SCALAR_FIELD) {
            if (true) {
              this._validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue);
            }
            RelayModernRecord.setValue(record, storageKey, fieldValue);
          } else if (selection.kind === LINKED_FIELD) {
            this._path.push(responseKey);
            if (selection.plural) {
              this._normalizePluralLink(selection, record, storageKey, fieldValue);
            } else {
              this._normalizeLink(selection, record, storageKey, fieldValue);
            }
            this._path.pop();
          } else {
            selection;
            true ? true ? invariant5(false, "RelayResponseNormalizer(): Unexpected ast kind `%s` during normalization.", selection.kind) : invariant5(false) : void 0;
          }
        };
        _proto._normalizeActorChange = function _normalizeActorChange(parent2, selection, record, data) {
          var _field$concreteType;
          var field = selection.linkedField;
          !(typeof data === "object" && data) ? true ? invariant5(false, "_normalizeActorChange(): Expected data for field `%s` to be an object.", field.name) : invariant5(false) : void 0;
          var responseKey = field.alias || field.name;
          var storageKey = getStorageKey(field, this._variables);
          var fieldValue = data[responseKey];
          if (fieldValue == null) {
            if (fieldValue === void 0) {
              var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;
              if (isOptionalField) {
                return;
              } else if (!this._treatMissingFieldsAsNull) {
                if (true) {
                  true ? warning6(false, "RelayResponseNormalizer: Payload did not contain a value for field `%s: %s`. Check that you are parsing with the same query that was used to fetch the payload.", responseKey, storageKey) : void 0;
                }
                return;
              }
            }
            RelayModernRecord.setValue(record, storageKey, null);
            return;
          }
          var actorIdentifier = getActorIdentifierFromPayload(fieldValue);
          if (actorIdentifier == null) {
            if (true) {
              true ? warning6(false, "RelayResponseNormalizer: Payload did not contain a value for field `%s`. Check that you are parsing with the same query that was used to fetch the payload. Payload is `%s`.", ACTOR_IDENTIFIER_FIELD_NAME, JSON.stringify(fieldValue, null, 2)) : void 0;
            }
            RelayModernRecord.setValue(record, storageKey, null);
            return;
          }
          var typeName = (_field$concreteType = field.concreteType) !== null && _field$concreteType !== void 0 ? _field$concreteType : this._getRecordType(fieldValue);
          var nextID2 = this._getDataId(
            fieldValue,
            typeName
          ) || RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);
          !(typeof nextID2 === "string") ? true ? invariant5(false, "RelayResponseNormalizer: Expected id on field `%s` to be a string.", storageKey) : invariant5(false) : void 0;
          RelayModernRecord.setActorLinkedRecordID(record, storageKey, actorIdentifier, nextID2);
          this._followupPayloads.push({
            kind: "ActorPayload",
            data: fieldValue,
            dataID: nextID2,
            path: [].concat((0, _toConsumableArray22["default"])(this._path), [responseKey]),
            typeName,
            variables: this._variables,
            node: field,
            actorIdentifier
          });
        };
        _proto._normalizeFlightField = function _normalizeFlightField(parent2, selection, record, data) {
          var responseKey = selection.alias || selection.name;
          var storageKey = getStorageKey(selection, this._variables);
          var fieldValue = data[responseKey];
          if (fieldValue == null) {
            if (fieldValue === void 0) {
              if (this._isUnmatchedAbstractType) {
                return;
              } else {
                !this._treatMissingFieldsAsNull ? true ? invariant5(false, "RelayResponseNormalizer: Payload did not contain a value for field `%s: %s`. Check that you are parsing with the same query that was used to fetch the payload.", responseKey, storageKey) : invariant5(false) : void 0;
              }
            }
            RelayModernRecord.setValue(record, storageKey, null);
            return;
          }
          var reactFlightPayload = refineToReactFlightPayloadData(fieldValue);
          var reactFlightPayloadDeserializer = this._reactFlightPayloadDeserializer;
          !(reactFlightPayload != null) ? true ? invariant5(false, "RelayResponseNormalizer: Expected React Flight payload data to be an object with `status`, tree`, `queries` and `errors` properties, got `%s`.", fieldValue) : invariant5(false) : void 0;
          !(typeof reactFlightPayloadDeserializer === "function") ? true ? invariant5(false, "RelayResponseNormalizer: Expected reactFlightPayloadDeserializer to be a function, got `%s`.", reactFlightPayloadDeserializer) : invariant5(false) : void 0;
          if (reactFlightPayload.errors.length > 0) {
            if (typeof this._reactFlightServerErrorHandler === "function") {
              this._reactFlightServerErrorHandler(reactFlightPayload.status, reactFlightPayload.errors);
            } else {
              true ? warning6(false, "RelayResponseNormalizer: Received server errors for field `%s`.\n\n%s\n%s", responseKey, reactFlightPayload.errors[0].message, reactFlightPayload.errors[0].stack) : void 0;
            }
          }
          var reactFlightID = generateClientID(RelayModernRecord.getDataID(record), getStorageKey(selection, this._variables));
          var reactFlightClientResponseRecord = this._recordSource.get(reactFlightID);
          if (reactFlightClientResponseRecord == null) {
            reactFlightClientResponseRecord = RelayModernRecord.create(reactFlightID, REACT_FLIGHT_TYPE_NAME);
            this._recordSource.set(reactFlightID, reactFlightClientResponseRecord);
          }
          if (reactFlightPayload.tree == null) {
            true ? warning6(false, "RelayResponseNormalizer: Expected `tree` not to be null. This typically indicates that a fatal server error prevented any Server Component rows from being written.") : void 0;
            RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_TREE_STORAGE_KEY, null);
            RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY, []);
            RelayModernRecord.setLinkedRecordID(record, storageKey, reactFlightID);
            return;
          }
          var reactFlightClientResponse = reactFlightPayloadDeserializer(reactFlightPayload.tree);
          RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_TREE_STORAGE_KEY, reactFlightClientResponse);
          var reachableExecutableDefinitions = [];
          var _iterator2 = (0, _createForOfIteratorHelper2["default"])(reactFlightPayload.queries), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var query = _step2.value;
              if (query.response.data != null) {
                this._followupPayloads.push({
                  kind: "ModuleImportPayload",
                  args: null,
                  data: query.response.data,
                  dataID: ROOT_ID,
                  operationReference: query.module,
                  path: [],
                  typeName: ROOT_TYPE,
                  variables: query.variables,
                  actorIdentifier: this._actorIdentifier
                });
              }
              reachableExecutableDefinitions.push({
                module: query.module,
                variables: query.variables
              });
            }
          } catch (err2) {
            _iterator2.e(err2);
          } finally {
            _iterator2.f();
          }
          var _iterator3 = (0, _createForOfIteratorHelper2["default"])(reactFlightPayload.fragments), _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
              var fragment = _step3.value;
              if (fragment.response.data != null) {
                this._followupPayloads.push({
                  kind: "ModuleImportPayload",
                  args: null,
                  data: fragment.response.data,
                  dataID: fragment.__id,
                  operationReference: fragment.module,
                  path: [],
                  typeName: fragment.__typename,
                  variables: fragment.variables,
                  actorIdentifier: this._actorIdentifier
                });
              }
              reachableExecutableDefinitions.push({
                module: fragment.module,
                variables: fragment.variables
              });
            }
          } catch (err2) {
            _iterator3.e(err2);
          } finally {
            _iterator3.f();
          }
          RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY, reachableExecutableDefinitions);
          RelayModernRecord.setLinkedRecordID(record, storageKey, reactFlightID);
        };
        _proto._normalizeLink = function _normalizeLink(field, record, storageKey, fieldValue) {
          var _field$concreteType2;
          !(typeof fieldValue === "object" && fieldValue) ? true ? invariant5(false, "RelayResponseNormalizer: Expected data for field `%s` to be an object.", storageKey) : invariant5(false) : void 0;
          var nextID2 = this._getDataId(
            fieldValue,
            (_field$concreteType2 = field.concreteType) !== null && _field$concreteType2 !== void 0 ? _field$concreteType2 : this._getRecordType(fieldValue)
          ) || RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);
          !(typeof nextID2 === "string") ? true ? invariant5(false, "RelayResponseNormalizer: Expected id on field `%s` to be a string.", storageKey) : invariant5(false) : void 0;
          if (true) {
            this._validateConflictingLinkedFieldsWithIdenticalId(record, RelayModernRecord.getLinkedRecordID(record, storageKey), nextID2, storageKey);
          }
          RelayModernRecord.setLinkedRecordID(record, storageKey, nextID2);
          var nextRecord = this._recordSource.get(nextID2);
          if (!nextRecord) {
            var typeName = field.concreteType || this._getRecordType(fieldValue);
            nextRecord = RelayModernRecord.create(nextID2, typeName);
            this._recordSource.set(nextID2, nextRecord);
          } else if (true) {
            this._validateRecordType(nextRecord, field, fieldValue);
          }
          this._traverseSelections(field, nextRecord, fieldValue);
        };
        _proto._normalizePluralLink = function _normalizePluralLink(field, record, storageKey, fieldValue) {
          var _this = this;
          !Array.isArray(fieldValue) ? true ? invariant5(false, "RelayResponseNormalizer: Expected data for field `%s` to be an array of objects.", storageKey) : invariant5(false) : void 0;
          var prevIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);
          var nextIDs = [];
          fieldValue.forEach(function(item, nextIndex2) {
            var _field$concreteType3;
            if (item == null) {
              nextIDs.push(item);
              return;
            }
            _this._path.push(String(nextIndex2));
            !(typeof item === "object") ? true ? invariant5(false, "RelayResponseNormalizer: Expected elements for field `%s` to be objects.", storageKey) : invariant5(false) : void 0;
            var nextID2 = _this._getDataId(
              item,
              (_field$concreteType3 = field.concreteType) !== null && _field$concreteType3 !== void 0 ? _field$concreteType3 : _this._getRecordType(item)
            ) || prevIDs && prevIDs[nextIndex2] || generateClientID(RelayModernRecord.getDataID(record), storageKey, nextIndex2);
            !(typeof nextID2 === "string") ? true ? invariant5(false, "RelayResponseNormalizer: Expected id of elements of field `%s` to be strings.", storageKey) : invariant5(false) : void 0;
            nextIDs.push(nextID2);
            var nextRecord = _this._recordSource.get(nextID2);
            if (!nextRecord) {
              var typeName = field.concreteType || _this._getRecordType(item);
              nextRecord = RelayModernRecord.create(nextID2, typeName);
              _this._recordSource.set(nextID2, nextRecord);
            } else if (true) {
              _this._validateRecordType(nextRecord, field, item);
            }
            if (true) {
              if (prevIDs) {
                _this._validateConflictingLinkedFieldsWithIdenticalId(record, prevIDs[nextIndex2], nextID2, storageKey);
              }
            }
            _this._traverseSelections(field, nextRecord, item);
            _this._path.pop();
          });
          RelayModernRecord.setLinkedRecordIDs(record, storageKey, nextIDs);
        };
        _proto._validateRecordType = function _validateRecordType(record, field, payload) {
          var _field$concreteType4;
          var typeName = (_field$concreteType4 = field.concreteType) !== null && _field$concreteType4 !== void 0 ? _field$concreteType4 : this._getRecordType(payload);
          var dataID = RelayModernRecord.getDataID(record);
          true ? warning6(isClientID(dataID) && dataID !== ROOT_ID || RelayModernRecord.getType(record) === typeName, "RelayResponseNormalizer: Invalid record `%s`. Expected %s to be consistent, but the record was assigned conflicting types `%s` and `%s`. The GraphQL server likely violated the globally unique id requirement by returning the same id for different objects.", dataID, TYPENAME_KEY, RelayModernRecord.getType(record), typeName) : void 0;
        };
        _proto._validateConflictingFieldsWithIdenticalId = function _validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue) {
          if (true) {
            var dataID = RelayModernRecord.getDataID(record);
            var previousValue = RelayModernRecord.getValue(record, storageKey);
            true ? warning6(storageKey === TYPENAME_KEY || previousValue === void 0 || areEqual(previousValue, fieldValue), "RelayResponseNormalizer: Invalid record. The record contains two instances of the same id: `%s` with conflicting field, %s and its values: %s and %s. If two fields are different but share the same id, one field will overwrite the other.", dataID, storageKey, previousValue, fieldValue) : void 0;
          }
        };
        _proto._validateConflictingLinkedFieldsWithIdenticalId = function _validateConflictingLinkedFieldsWithIdenticalId(record, prevID, nextID2, storageKey) {
          if (true) {
            true ? warning6(prevID === void 0 || prevID === nextID2, "RelayResponseNormalizer: Invalid record. The record contains references to the conflicting field, %s and its id values: %s and %s. We need to make sure that the record the field points to remains consistent or one field will overwrite the other.", storageKey, prevID, nextID2) : void 0;
          }
        };
        return RelayResponseNormalizer2;
      }();
      module2.exports = {
        normalize
      };
    }
  });

  // node_modules/relay-runtime/lib/store/OperationExecutor.js
  var require_OperationExecutor = __commonJS({
    "node_modules/relay-runtime/lib/store/OperationExecutor.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      var _defineProperty210 = _interopRequireDefault(require_defineProperty());
      var _toConsumableArray22 = _interopRequireDefault(require_toConsumableArray());
      var RelayObservable = require_RelayObservable();
      var generateID = require_generateID();
      var getOperation = require_getOperation();
      var RelayError = require_RelayError();
      var RelayFeatureFlags = require_RelayFeatureFlags();
      var stableCopy = require_stableCopy();
      var withDuration = require_withDuration();
      var _require = require_ClientID();
      var generateClientID = _require.generateClientID;
      var generateUniqueClientID = _require.generateUniqueClientID;
      var _require2 = require_RelayConcreteVariables();
      var getLocalVariables = _require2.getLocalVariables;
      var RelayModernRecord = require_RelayModernRecord();
      var _require3 = require_RelayModernSelector();
      var createNormalizationSelector = _require3.createNormalizationSelector;
      var createReaderSelector = _require3.createReaderSelector;
      var RelayRecordSource = require_RelayRecordSource();
      var RelayResponseNormalizer = require_RelayResponseNormalizer();
      var _require4 = require_RelayStoreUtils();
      var ROOT_TYPE = _require4.ROOT_TYPE;
      var TYPENAME_KEY = _require4.TYPENAME_KEY;
      var getStorageKey = _require4.getStorageKey;
      var invariant5 = require_browser();
      var warning6 = require_warning();
      function execute(config) {
        return new Executor(config);
      }
      var Executor = /* @__PURE__ */ function() {
        function Executor2(_ref2) {
          var _this = this;
          var actorIdentifier = _ref2.actorIdentifier, getDataID = _ref2.getDataID, getPublishQueue = _ref2.getPublishQueue, getStore = _ref2.getStore, isClientPayload = _ref2.isClientPayload, operation = _ref2.operation, operationExecutions = _ref2.operationExecutions, operationLoader = _ref2.operationLoader, operationTracker = _ref2.operationTracker, optimisticConfig = _ref2.optimisticConfig, _reactFlightPayloadDeserializer = _ref2.reactFlightPayloadDeserializer, reactFlightServerErrorHandler = _ref2.reactFlightServerErrorHandler, scheduler = _ref2.scheduler, shouldProcessClientComponents = _ref2.shouldProcessClientComponents, sink = _ref2.sink, source2 = _ref2.source, treatMissingFieldsAsNull = _ref2.treatMissingFieldsAsNull, updater = _ref2.updater, log = _ref2.log;
          (0, _defineProperty210["default"])(this, "_deserializeReactFlightPayloadWithLogging", function(tree) {
            var reactFlightPayloadDeserializer = _this._reactFlightPayloadDeserializer;
            !(typeof reactFlightPayloadDeserializer === "function") ? true ? invariant5(false, "OperationExecutor: Expected reactFlightPayloadDeserializer to be available when calling _deserializeReactFlightPayloadWithLogging.") : invariant5(false) : void 0;
            var _withDuration = withDuration(function() {
              return reactFlightPayloadDeserializer(tree);
            }), duration = _withDuration[0], result = _withDuration[1];
            _this._log({
              name: "execute.flight.payload_deserialize",
              executeId: _this._executeId,
              operationName: _this._operation.request.node.params.name,
              duration
            });
            return result;
          });
          this._actorIdentifier = actorIdentifier;
          this._getDataID = getDataID;
          this._treatMissingFieldsAsNull = treatMissingFieldsAsNull;
          this._incrementalPayloadsPending = false;
          this._incrementalResults = /* @__PURE__ */ new Map();
          this._log = log;
          this._executeId = generateID();
          this._nextSubscriptionId = 0;
          this._operation = operation;
          this._operationExecutions = operationExecutions;
          this._operationLoader = operationLoader;
          this._operationTracker = operationTracker;
          this._operationUpdateEpochs = /* @__PURE__ */ new Map();
          this._optimisticUpdates = null;
          this._pendingModulePayloadsCount = 0;
          this._getPublishQueue = getPublishQueue;
          this._scheduler = scheduler;
          this._sink = sink;
          this._source = /* @__PURE__ */ new Map();
          this._state = "started";
          this._getStore = getStore;
          this._subscriptions = /* @__PURE__ */ new Map();
          this._updater = updater;
          this._isClientPayload = isClientPayload === true;
          this._reactFlightPayloadDeserializer = _reactFlightPayloadDeserializer;
          this._reactFlightServerErrorHandler = reactFlightServerErrorHandler;
          this._isSubscriptionOperation = this._operation.request.node.params.operationKind === "subscription";
          this._shouldProcessClientComponents = shouldProcessClientComponents;
          this._retainDisposables = /* @__PURE__ */ new Map();
          this._seenActors = /* @__PURE__ */ new Set();
          this._completeFns = [];
          var id = this._nextSubscriptionId++;
          source2.subscribe({
            complete: function complete() {
              return _this._complete(id);
            },
            error: function error(_error2) {
              return _this._error(_error2);
            },
            next: function next(response) {
              try {
                _this._next(id, response);
              } catch (error) {
                sink.error(error);
              }
            },
            start: function start(subscription) {
              var _this$_operation$requ;
              _this._start(id, subscription);
              _this._log({
                name: "execute.start",
                executeId: _this._executeId,
                params: _this._operation.request.node.params,
                variables: _this._operation.request.variables,
                cacheConfig: (_this$_operation$requ = _this._operation.request.cacheConfig) !== null && _this$_operation$requ !== void 0 ? _this$_operation$requ : {}
              });
            }
          });
          if (optimisticConfig != null) {
            this._processOptimisticResponse(optimisticConfig.response != null ? {
              data: optimisticConfig.response
            } : null, optimisticConfig.updater, false);
          }
        }
        var _proto = Executor2.prototype;
        _proto.cancel = function cancel() {
          var _this2 = this;
          if (this._state === "completed") {
            return;
          }
          this._state = "completed";
          this._operationExecutions["delete"](this._operation.request.identifier);
          if (this._subscriptions.size !== 0) {
            this._subscriptions.forEach(function(sub) {
              return sub.unsubscribe();
            });
            this._subscriptions.clear();
          }
          var optimisticUpdates = this._optimisticUpdates;
          if (optimisticUpdates !== null) {
            this._optimisticUpdates = null;
            optimisticUpdates.forEach(function(update2) {
              return _this2._getPublishQueueAndSaveActor().revertUpdate(update2);
            });
            this._runPublishQueue();
          }
          this._incrementalResults.clear();
          if (this._asyncStoreUpdateDisposable != null) {
            this._asyncStoreUpdateDisposable.dispose();
            this._asyncStoreUpdateDisposable = null;
          }
          this._completeFns = [];
          this._completeOperationTracker();
          this._disposeRetainedData();
        };
        _proto._updateActiveState = function _updateActiveState() {
          var activeState;
          switch (this._state) {
            case "started": {
              activeState = "active";
              break;
            }
            case "loading_incremental": {
              activeState = "active";
              break;
            }
            case "completed": {
              activeState = "inactive";
              break;
            }
            case "loading_final": {
              activeState = this._pendingModulePayloadsCount > 0 ? "active" : "inactive";
              break;
            }
            default:
              this._state;
              true ? true ? invariant5(false, "OperationExecutor: invalid executor state.") : invariant5(false) : void 0;
          }
          this._operationExecutions.set(this._operation.request.identifier, activeState);
        };
        _proto._schedule = function _schedule(task) {
          var _this3 = this;
          var scheduler = this._scheduler;
          if (scheduler != null) {
            var id = this._nextSubscriptionId++;
            RelayObservable.create(function(sink) {
              var cancellationToken = scheduler.schedule(function() {
                try {
                  task();
                  sink.complete();
                } catch (error) {
                  sink.error(error);
                }
              });
              return function() {
                return scheduler.cancel(cancellationToken);
              };
            }).subscribe({
              complete: function complete() {
                return _this3._complete(id);
              },
              error: function error(_error3) {
                return _this3._error(_error3);
              },
              start: function start(subscription) {
                return _this3._start(id, subscription);
              }
            });
          } else {
            task();
          }
        };
        _proto._complete = function _complete(id) {
          this._subscriptions["delete"](id);
          if (this._subscriptions.size === 0) {
            this.cancel();
            this._sink.complete();
            this._log({
              name: "execute.complete",
              executeId: this._executeId
            });
          }
        };
        _proto._error = function _error(error) {
          this.cancel();
          this._sink.error(error);
          this._log({
            name: "execute.error",
            executeId: this._executeId,
            error
          });
        };
        _proto._start = function _start(id, subscription) {
          this._subscriptions.set(id, subscription);
          this._updateActiveState();
        };
        _proto._next = function _next(_id, response) {
          var _this4 = this;
          this._schedule(function() {
            var _withDuration2 = withDuration(function() {
              _this4._handleNext(response);
              _this4._maybeCompleteSubscriptionOperationTracking();
            }), duration = _withDuration2[0];
            _this4._log({
              name: "execute.next",
              executeId: _this4._executeId,
              response,
              duration
            });
          });
        };
        _proto._handleErrorResponse = function _handleErrorResponse(responses) {
          var _this5 = this;
          var results = [];
          responses.forEach(function(response) {
            if (response.data === null && response.extensions != null && !response.hasOwnProperty("errors")) {
              return;
            } else if (response.data == null) {
              var errors = response.hasOwnProperty("errors") && response.errors != null ? response.errors : null;
              var messages = errors ? errors.map(function(_ref3) {
                var message = _ref3.message;
                return message;
              }).join("\n") : "(No errors)";
              var error = RelayError.create("RelayNetwork", "No data returned for operation `" + _this5._operation.request.node.params.name + "`, got error(s):\n" + messages + "\n\nSee the error `source` property for more information.");
              error.source = {
                errors,
                operation: _this5._operation.request.node,
                variables: _this5._operation.request.variables
              };
              error.stack;
              throw error;
            } else {
              var responseWithData = response;
              results.push(responseWithData);
            }
          });
          return results;
        };
        _proto._handleOptimisticResponses = function _handleOptimisticResponses(responses) {
          var _response$extensions;
          if (responses.length > 1) {
            if (responses.some(function(responsePart) {
              var _responsePart$extensi;
              return ((_responsePart$extensi = responsePart.extensions) === null || _responsePart$extensi === void 0 ? void 0 : _responsePart$extensi.isOptimistic) === true;
            })) {
              true ? true ? invariant5(false, "OperationExecutor: Optimistic responses cannot be batched.") : invariant5(false) : void 0;
            }
            return false;
          }
          var response = responses[0];
          var isOptimistic = ((_response$extensions = response.extensions) === null || _response$extensions === void 0 ? void 0 : _response$extensions.isOptimistic) === true;
          if (isOptimistic && this._state !== "started") {
            true ? true ? invariant5(false, "OperationExecutor: optimistic payload received after server payload.") : invariant5(false) : void 0;
          }
          if (isOptimistic) {
            this._processOptimisticResponse(response, null, this._treatMissingFieldsAsNull);
            this._sink.next(response);
            return true;
          }
          return false;
        };
        _proto._handleNext = function _handleNext(response) {
          if (this._state === "completed") {
            return;
          }
          this._seenActors.clear();
          var responses = Array.isArray(response) ? response : [response];
          var responsesWithData = this._handleErrorResponse(responses);
          if (responsesWithData.length === 0) {
            var isFinal = responses.some(function(x) {
              var _x$extensions;
              return ((_x$extensions = x.extensions) === null || _x$extensions === void 0 ? void 0 : _x$extensions.is_final) === true;
            });
            if (isFinal) {
              this._state = "loading_final";
              this._updateActiveState();
              this._incrementalPayloadsPending = false;
            }
            this._sink.next(response);
            return;
          }
          var isOptimistic = this._handleOptimisticResponses(responsesWithData);
          if (isOptimistic) {
            return;
          }
          var _partitionGraphQLResp = partitionGraphQLResponses(responsesWithData), nonIncrementalResponses = _partitionGraphQLResp[0], incrementalResponses = _partitionGraphQLResp[1];
          var hasNonIncrementalResponses = nonIncrementalResponses.length > 0;
          if (hasNonIncrementalResponses) {
            if (this._isSubscriptionOperation) {
              var nextID2 = generateUniqueClientID();
              this._operation = {
                request: this._operation.request,
                fragment: createReaderSelector(this._operation.fragment.node, nextID2, this._operation.fragment.variables, this._operation.fragment.owner),
                root: createNormalizationSelector(this._operation.root.node, nextID2, this._operation.root.variables)
              };
            }
            var payloadFollowups = this._processResponses(nonIncrementalResponses);
            this._processPayloadFollowups(payloadFollowups);
          }
          if (incrementalResponses.length > 0) {
            var _payloadFollowups = this._processIncrementalResponses(incrementalResponses);
            this._processPayloadFollowups(_payloadFollowups);
          }
          if (this._isSubscriptionOperation) {
            if (responsesWithData[0].extensions == null) {
              responsesWithData[0].extensions = {
                __relay_subscription_root_id: this._operation.fragment.dataID
              };
            } else {
              responsesWithData[0].extensions.__relay_subscription_root_id = this._operation.fragment.dataID;
            }
          }
          var updatedOwners = this._runPublishQueue(hasNonIncrementalResponses ? this._operation : void 0);
          if (hasNonIncrementalResponses) {
            if (this._incrementalPayloadsPending) {
              this._retainData();
            }
          }
          this._updateOperationTracker(updatedOwners);
          this._sink.next(response);
        };
        _proto._processOptimisticResponse = function _processOptimisticResponse(response, updater, treatMissingFieldsAsNull) {
          var _this6 = this;
          !(this._optimisticUpdates === null) ? true ? invariant5(false, "OperationExecutor: environment.execute: only support one optimistic response per execute.") : invariant5(false) : void 0;
          if (response == null && updater == null) {
            return;
          }
          var optimisticUpdates = [];
          if (response) {
            var payload = normalizeResponse(response, this._operation.root, ROOT_TYPE, {
              actorIdentifier: this._actorIdentifier,
              getDataID: this._getDataID,
              path: [],
              reactFlightPayloadDeserializer: this._reactFlightPayloadDeserializer != null ? this._deserializeReactFlightPayloadWithLogging : null,
              reactFlightServerErrorHandler: this._reactFlightServerErrorHandler,
              shouldProcessClientComponents: this._shouldProcessClientComponents,
              treatMissingFieldsAsNull
            });
            validateOptimisticResponsePayload(payload);
            optimisticUpdates.push({
              operation: this._operation,
              payload,
              updater
            });
            this._processOptimisticFollowups(payload, optimisticUpdates);
          } else if (updater) {
            optimisticUpdates.push({
              operation: this._operation,
              payload: {
                errors: null,
                fieldPayloads: null,
                incrementalPlaceholders: null,
                followupPayloads: null,
                source: RelayRecordSource.create(),
                isFinal: false
              },
              updater
            });
          }
          this._optimisticUpdates = optimisticUpdates;
          optimisticUpdates.forEach(function(update2) {
            return _this6._getPublishQueueAndSaveActor().applyUpdate(update2);
          });
          this._runPublishQueue();
        };
        _proto._processOptimisticFollowups = function _processOptimisticFollowups(payload, optimisticUpdates) {
          if (payload.followupPayloads && payload.followupPayloads.length) {
            var followupPayloads = payload.followupPayloads;
            var _iterator = (0, _createForOfIteratorHelper2["default"])(followupPayloads), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var followupPayload = _step.value;
                switch (followupPayload.kind) {
                  case "ModuleImportPayload":
                    var operationLoader = this._expectOperationLoader();
                    var operation = operationLoader.get(followupPayload.operationReference);
                    if (operation == null) {
                      this._processAsyncOptimisticModuleImport(followupPayload);
                    } else {
                      var moduleImportOptimisticUpdates = this._processOptimisticModuleImport(operation, followupPayload);
                      optimisticUpdates.push.apply(optimisticUpdates, (0, _toConsumableArray22["default"])(moduleImportOptimisticUpdates));
                    }
                    break;
                  case "ActorPayload":
                    true ? warning6(false, "OperationExecutor: Unexpected optimistic ActorPayload. These updates are not supported.") : void 0;
                    break;
                  default:
                    followupPayload;
                    true ? true ? invariant5(false, "OperationExecutor: Unexpected followup kind `%s`. when processing optimistic updates.", followupPayload.kind) : invariant5(false) : void 0;
                }
              }
            } catch (err2) {
              _iterator.e(err2);
            } finally {
              _iterator.f();
            }
          }
        };
        _proto._normalizeFollowupPayload = function _normalizeFollowupPayload(followupPayload, normalizationNode) {
          var variables;
          if (normalizationNode.kind === "SplitOperation" && followupPayload.kind === "ModuleImportPayload") {
            variables = getLocalVariables(followupPayload.variables, normalizationNode.argumentDefinitions, followupPayload.args);
          } else {
            variables = followupPayload.variables;
          }
          var selector2 = createNormalizationSelector(normalizationNode, followupPayload.dataID, variables);
          return normalizeResponse({
            data: followupPayload.data
          }, selector2, followupPayload.typeName, {
            actorIdentifier: this._actorIdentifier,
            getDataID: this._getDataID,
            path: followupPayload.path,
            reactFlightPayloadDeserializer: this._reactFlightPayloadDeserializer != null ? this._deserializeReactFlightPayloadWithLogging : null,
            reactFlightServerErrorHandler: this._reactFlightServerErrorHandler,
            treatMissingFieldsAsNull: this._treatMissingFieldsAsNull,
            shouldProcessClientComponents: this._shouldProcessClientComponents
          });
        };
        _proto._processOptimisticModuleImport = function _processOptimisticModuleImport(normalizationRootNode, moduleImportPayload) {
          var operation = getOperation(normalizationRootNode);
          var optimisticUpdates = [];
          var modulePayload = this._normalizeFollowupPayload(moduleImportPayload, operation);
          validateOptimisticResponsePayload(modulePayload);
          optimisticUpdates.push({
            operation: this._operation,
            payload: modulePayload,
            updater: null
          });
          this._processOptimisticFollowups(modulePayload, optimisticUpdates);
          return optimisticUpdates;
        };
        _proto._processAsyncOptimisticModuleImport = function _processAsyncOptimisticModuleImport(moduleImportPayload) {
          var _this7 = this;
          this._expectOperationLoader().load(moduleImportPayload.operationReference).then(function(operation) {
            if (operation == null || _this7._state !== "started") {
              return;
            }
            var moduleImportOptimisticUpdates = _this7._processOptimisticModuleImport(operation, moduleImportPayload);
            moduleImportOptimisticUpdates.forEach(function(update2) {
              return _this7._getPublishQueueAndSaveActor().applyUpdate(update2);
            });
            if (_this7._optimisticUpdates == null) {
              true ? warning6(false, "OperationExecutor: Unexpected ModuleImport optimistic update in operation %s." + _this7._operation.request.node.params.name) : void 0;
            } else {
              var _this$_optimisticUpda;
              (_this$_optimisticUpda = _this7._optimisticUpdates).push.apply(_this$_optimisticUpda, (0, _toConsumableArray22["default"])(moduleImportOptimisticUpdates));
              _this7._runPublishQueue();
            }
          });
        };
        _proto._processResponses = function _processResponses(responses) {
          var _this8 = this;
          if (this._optimisticUpdates !== null) {
            this._optimisticUpdates.forEach(function(update2) {
              _this8._getPublishQueueAndSaveActor().revertUpdate(update2);
            });
            this._optimisticUpdates = null;
          }
          this._incrementalPayloadsPending = false;
          this._incrementalResults.clear();
          this._source.clear();
          return responses.map(function(payloadPart) {
            var relayPayload = normalizeResponse(payloadPart, _this8._operation.root, ROOT_TYPE, {
              actorIdentifier: _this8._actorIdentifier,
              getDataID: _this8._getDataID,
              path: [],
              reactFlightPayloadDeserializer: _this8._reactFlightPayloadDeserializer != null ? _this8._deserializeReactFlightPayloadWithLogging : null,
              reactFlightServerErrorHandler: _this8._reactFlightServerErrorHandler,
              treatMissingFieldsAsNull: _this8._treatMissingFieldsAsNull,
              shouldProcessClientComponents: _this8._shouldProcessClientComponents
            });
            _this8._getPublishQueueAndSaveActor().commitPayload(_this8._operation, relayPayload, _this8._updater);
            return relayPayload;
          });
        };
        _proto._processPayloadFollowups = function _processPayloadFollowups(payloads) {
          var _this9 = this;
          if (this._state === "completed") {
            return;
          }
          payloads.forEach(function(payload) {
            var incrementalPlaceholders = payload.incrementalPlaceholders, followupPayloads = payload.followupPayloads, isFinal = payload.isFinal;
            _this9._state = isFinal ? "loading_final" : "loading_incremental";
            _this9._updateActiveState();
            if (isFinal) {
              _this9._incrementalPayloadsPending = false;
            }
            if (followupPayloads && followupPayloads.length !== 0) {
              followupPayloads.forEach(function(followupPayload) {
                var _followupPayload$acto;
                var prevActorIdentifier = _this9._actorIdentifier;
                _this9._actorIdentifier = (_followupPayload$acto = followupPayload.actorIdentifier) !== null && _followupPayload$acto !== void 0 ? _followupPayload$acto : _this9._actorIdentifier;
                _this9._processFollowupPayload(followupPayload);
                _this9._actorIdentifier = prevActorIdentifier;
              });
            }
            if (incrementalPlaceholders && incrementalPlaceholders.length !== 0) {
              _this9._incrementalPayloadsPending = _this9._state !== "loading_final";
              incrementalPlaceholders.forEach(function(incrementalPlaceholder) {
                var _incrementalPlacehold;
                var prevActorIdentifier = _this9._actorIdentifier;
                _this9._actorIdentifier = (_incrementalPlacehold = incrementalPlaceholder.actorIdentifier) !== null && _incrementalPlacehold !== void 0 ? _incrementalPlacehold : _this9._actorIdentifier;
                _this9._processIncrementalPlaceholder(payload, incrementalPlaceholder);
                _this9._actorIdentifier = prevActorIdentifier;
              });
              if (_this9._isClientPayload || _this9._state === "loading_final") {
                true ? warning6(_this9._isClientPayload, "RelayModernEnvironment: Operation `%s` contains @defer/@stream directives but was executed in non-streaming mode. See https://fburl.com/relay-incremental-delivery-non-streaming-warning.", _this9._operation.request.node.params.name) : void 0;
                var relayPayloads = [];
                incrementalPlaceholders.forEach(function(placeholder) {
                  if (placeholder.kind === "defer") {
                    relayPayloads.push(_this9._processDeferResponse(placeholder.label, placeholder.path, placeholder, {
                      data: placeholder.data
                    }));
                  }
                });
                if (relayPayloads.length > 0) {
                  _this9._processPayloadFollowups(relayPayloads);
                }
              }
            }
          });
        };
        _proto._maybeCompleteSubscriptionOperationTracking = function _maybeCompleteSubscriptionOperationTracking() {
          if (!this._isSubscriptionOperation) {
            return;
          }
          if (this._pendingModulePayloadsCount === 0 && this._incrementalPayloadsPending === false) {
            this._completeOperationTracker();
          }
        };
        _proto._processFollowupPayload = function _processFollowupPayload(followupPayload) {
          var _this10 = this;
          switch (followupPayload.kind) {
            case "ModuleImportPayload":
              var operationLoader = this._expectOperationLoader();
              var node5 = operationLoader.get(followupPayload.operationReference);
              if (node5 != null) {
                this._processFollowupPayloadWithNormalizationNode(followupPayload, getOperation(node5));
              } else {
                var id = this._nextSubscriptionId++;
                this._pendingModulePayloadsCount++;
                var decrementPendingCount = function decrementPendingCount2() {
                  _this10._pendingModulePayloadsCount--;
                  _this10._maybeCompleteSubscriptionOperationTracking();
                };
                var networkObservable = RelayObservable.from(new Promise(function(resolve, reject) {
                  operationLoader.load(followupPayload.operationReference).then(resolve, reject);
                }));
                RelayObservable.create(function(sink) {
                  var cancellationToken;
                  var subscription = networkObservable.subscribe({
                    next: function next(loadedNode) {
                      if (loadedNode != null) {
                        var publishModuleImportPayload = function publishModuleImportPayload2() {
                          try {
                            var operation = getOperation(loadedNode);
                            var batchAsyncModuleUpdatesFN = RelayFeatureFlags.BATCH_ASYNC_MODULE_UPDATES_FN;
                            var shouldScheduleAsyncStoreUpdate = batchAsyncModuleUpdatesFN != null && _this10._pendingModulePayloadsCount > 1;
                            var _withDuration3 = withDuration(function() {
                              _this10._handleFollowupPayload(followupPayload, operation);
                              if (shouldScheduleAsyncStoreUpdate) {
                                _this10._scheduleAsyncStoreUpdate(
                                  batchAsyncModuleUpdatesFN,
                                  sink.complete
                                );
                              } else {
                                var updatedOwners = _this10._runPublishQueue();
                                _this10._updateOperationTracker(updatedOwners);
                              }
                            }), duration = _withDuration3[0];
                            _this10._log({
                              name: "execute.async.module",
                              executeId: _this10._executeId,
                              operationName: operation.name,
                              duration
                            });
                            if (!shouldScheduleAsyncStoreUpdate) {
                              sink.complete();
                            }
                          } catch (error) {
                            sink.error(error);
                          }
                        };
                        var scheduler = _this10._scheduler;
                        if (scheduler == null) {
                          publishModuleImportPayload();
                        } else {
                          cancellationToken = scheduler.schedule(publishModuleImportPayload);
                        }
                      } else {
                        sink.complete();
                      }
                    },
                    error: sink.error
                  });
                  return function() {
                    subscription.unsubscribe();
                    if (_this10._scheduler != null && cancellationToken != null) {
                      _this10._scheduler.cancel(cancellationToken);
                    }
                  };
                }).subscribe({
                  complete: function complete() {
                    _this10._complete(id);
                    decrementPendingCount();
                  },
                  error: function error(_error4) {
                    _this10._error(_error4);
                    decrementPendingCount();
                  },
                  start: function start(subscription) {
                    return _this10._start(id, subscription);
                  }
                });
              }
              break;
            case "ActorPayload":
              this._processFollowupPayloadWithNormalizationNode(followupPayload, followupPayload.node);
              break;
            default:
              followupPayload;
              true ? true ? invariant5(false, "OperationExecutor: Unexpected followup kind `%s`.", followupPayload.kind) : invariant5(false) : void 0;
          }
        };
        _proto._processFollowupPayloadWithNormalizationNode = function _processFollowupPayloadWithNormalizationNode(followupPayload, normalizationNode) {
          this._handleFollowupPayload(followupPayload, normalizationNode);
          this._maybeCompleteSubscriptionOperationTracking();
        };
        _proto._handleFollowupPayload = function _handleFollowupPayload(followupPayload, normalizationNode) {
          var relayPayload = this._normalizeFollowupPayload(followupPayload, normalizationNode);
          this._getPublishQueueAndSaveActor().commitPayload(this._operation, relayPayload);
          this._processPayloadFollowups([relayPayload]);
        };
        _proto._processIncrementalPlaceholder = function _processIncrementalPlaceholder(relayPayload, placeholder) {
          var _relayPayload$fieldPa;
          var label = placeholder.label, path = placeholder.path;
          var pathKey = path.map(String).join(".");
          var resultForLabel = this._incrementalResults.get(label);
          if (resultForLabel == null) {
            resultForLabel = /* @__PURE__ */ new Map();
            this._incrementalResults.set(label, resultForLabel);
          }
          var resultForPath = resultForLabel.get(pathKey);
          var pendingResponses = resultForPath != null && resultForPath.kind === "response" ? resultForPath.responses : null;
          resultForLabel.set(pathKey, {
            kind: "placeholder",
            placeholder
          });
          var parentID;
          if (placeholder.kind === "stream") {
            parentID = placeholder.parentID;
          } else if (placeholder.kind === "defer") {
            parentID = placeholder.selector.dataID;
          } else {
            placeholder;
            true ? true ? invariant5(false, "OperationExecutor: Unsupported incremental placeholder kind `%s`.", placeholder.kind) : invariant5(false) : void 0;
          }
          var parentRecord = relayPayload.source.get(parentID);
          var parentPayloads = ((_relayPayload$fieldPa = relayPayload.fieldPayloads) !== null && _relayPayload$fieldPa !== void 0 ? _relayPayload$fieldPa : []).filter(function(fieldPayload) {
            var fieldID = generateClientID(fieldPayload.dataID, fieldPayload.fieldKey);
            return fieldPayload.dataID === parentID || fieldID === parentID;
          });
          !(parentRecord != null) ? true ? invariant5(false, "OperationExecutor: Expected record `%s` to exist.", parentID) : invariant5(false) : void 0;
          var nextParentRecord;
          var nextParentPayloads;
          var previousParentEntry = this._source.get(parentID);
          if (previousParentEntry != null) {
            nextParentRecord = RelayModernRecord.update(previousParentEntry.record, parentRecord);
            var handlePayloads = /* @__PURE__ */ new Map();
            var dedupePayload = function dedupePayload2(payload) {
              var key = stableStringify2(payload);
              handlePayloads.set(key, payload);
            };
            previousParentEntry.fieldPayloads.forEach(dedupePayload);
            parentPayloads.forEach(dedupePayload);
            nextParentPayloads = Array.from(handlePayloads.values());
          } else {
            nextParentRecord = parentRecord;
            nextParentPayloads = parentPayloads;
          }
          this._source.set(parentID, {
            record: nextParentRecord,
            fieldPayloads: nextParentPayloads
          });
          if (pendingResponses != null) {
            var payloadFollowups = this._processIncrementalResponses(pendingResponses);
            this._processPayloadFollowups(payloadFollowups);
          }
        };
        _proto._processIncrementalResponses = function _processIncrementalResponses(incrementalResponses) {
          var _this11 = this;
          var relayPayloads = [];
          incrementalResponses.forEach(function(incrementalResponse) {
            var label = incrementalResponse.label, path = incrementalResponse.path, response = incrementalResponse.response;
            var resultForLabel = _this11._incrementalResults.get(label);
            if (resultForLabel == null) {
              resultForLabel = /* @__PURE__ */ new Map();
              _this11._incrementalResults.set(label, resultForLabel);
            }
            if (label.indexOf("$defer$") !== -1) {
              var pathKey = path.map(String).join(".");
              var resultForPath = resultForLabel.get(pathKey);
              if (resultForPath == null) {
                resultForPath = {
                  kind: "response",
                  responses: [incrementalResponse]
                };
                resultForLabel.set(pathKey, resultForPath);
                return;
              } else if (resultForPath.kind === "response") {
                resultForPath.responses.push(incrementalResponse);
                return;
              }
              var placeholder = resultForPath.placeholder;
              !(placeholder.kind === "defer") ? true ? invariant5(false, "OperationExecutor: Expected data for path `%s` for label `%s` to be data for @defer, was `@%s`.", pathKey, label, placeholder.kind) : invariant5(false) : void 0;
              relayPayloads.push(_this11._processDeferResponse(label, path, placeholder, response));
            } else {
              var _pathKey = path.slice(0, -2).map(String).join(".");
              var _resultForPath = resultForLabel.get(_pathKey);
              if (_resultForPath == null) {
                _resultForPath = {
                  kind: "response",
                  responses: [incrementalResponse]
                };
                resultForLabel.set(_pathKey, _resultForPath);
                return;
              } else if (_resultForPath.kind === "response") {
                _resultForPath.responses.push(incrementalResponse);
                return;
              }
              var _placeholder = _resultForPath.placeholder;
              !(_placeholder.kind === "stream") ? true ? invariant5(false, "OperationExecutor: Expected data for path `%s` for label `%s` to be data for @stream, was `@%s`.", _pathKey, label, _placeholder.kind) : invariant5(false) : void 0;
              relayPayloads.push(_this11._processStreamResponse(label, path, _placeholder, response));
            }
          });
          return relayPayloads;
        };
        _proto._processDeferResponse = function _processDeferResponse(label, path, placeholder, response) {
          var _placeholder$actorIde;
          var parentID = placeholder.selector.dataID;
          var prevActorIdentifier = this._actorIdentifier;
          this._actorIdentifier = (_placeholder$actorIde = placeholder.actorIdentifier) !== null && _placeholder$actorIde !== void 0 ? _placeholder$actorIde : this._actorIdentifier;
          var relayPayload = normalizeResponse(response, placeholder.selector, placeholder.typeName, {
            actorIdentifier: this._actorIdentifier,
            getDataID: this._getDataID,
            path: placeholder.path,
            reactFlightPayloadDeserializer: this._reactFlightPayloadDeserializer != null ? this._deserializeReactFlightPayloadWithLogging : null,
            reactFlightServerErrorHandler: this._reactFlightServerErrorHandler,
            treatMissingFieldsAsNull: this._treatMissingFieldsAsNull,
            shouldProcessClientComponents: this._shouldProcessClientComponents
          });
          this._getPublishQueueAndSaveActor().commitPayload(this._operation, relayPayload);
          var parentEntry = this._source.get(parentID);
          !(parentEntry != null) ? true ? invariant5(false, "OperationExecutor: Expected the parent record `%s` for @defer data to exist.", parentID) : invariant5(false) : void 0;
          var fieldPayloads = parentEntry.fieldPayloads;
          if (fieldPayloads.length !== 0) {
            var _response$extensions2;
            var handleFieldsRelayPayload = {
              errors: null,
              fieldPayloads,
              incrementalPlaceholders: null,
              followupPayloads: null,
              source: RelayRecordSource.create(),
              isFinal: ((_response$extensions2 = response.extensions) === null || _response$extensions2 === void 0 ? void 0 : _response$extensions2.is_final) === true
            };
            this._getPublishQueueAndSaveActor().commitPayload(this._operation, handleFieldsRelayPayload);
          }
          this._actorIdentifier = prevActorIdentifier;
          return relayPayload;
        };
        _proto._processStreamResponse = function _processStreamResponse(label, path, placeholder, response) {
          var parentID = placeholder.parentID, node5 = placeholder.node, variables = placeholder.variables, actorIdentifier = placeholder.actorIdentifier;
          var prevActorIdentifier = this._actorIdentifier;
          this._actorIdentifier = actorIdentifier !== null && actorIdentifier !== void 0 ? actorIdentifier : this._actorIdentifier;
          var field = node5.selections[0];
          !(field != null && field.kind === "LinkedField" && field.plural === true) ? true ? invariant5(false, "OperationExecutor: Expected @stream to be used on a plural field.") : invariant5(false) : void 0;
          var _this$_normalizeStrea = this._normalizeStreamItem(response, parentID, field, variables, path, placeholder.path), fieldPayloads = _this$_normalizeStrea.fieldPayloads, itemID = _this$_normalizeStrea.itemID, itemIndex = _this$_normalizeStrea.itemIndex, prevIDs = _this$_normalizeStrea.prevIDs, relayPayload = _this$_normalizeStrea.relayPayload, storageKey = _this$_normalizeStrea.storageKey;
          this._getPublishQueueAndSaveActor().commitPayload(this._operation, relayPayload, function(store) {
            var currentParentRecord = store.get(parentID);
            if (currentParentRecord == null) {
              return;
            }
            var currentItems = currentParentRecord.getLinkedRecords(storageKey);
            if (currentItems == null) {
              return;
            }
            if (currentItems.length !== prevIDs.length || currentItems.some(function(currentItem, index2) {
              return prevIDs[index2] !== (currentItem && currentItem.getDataID());
            })) {
              return;
            }
            var nextItems = (0, _toConsumableArray22["default"])(currentItems);
            nextItems[itemIndex] = store.get(itemID);
            currentParentRecord.setLinkedRecords(nextItems, storageKey);
          });
          if (fieldPayloads.length !== 0) {
            var handleFieldsRelayPayload = {
              errors: null,
              fieldPayloads,
              incrementalPlaceholders: null,
              followupPayloads: null,
              source: RelayRecordSource.create(),
              isFinal: false
            };
            this._getPublishQueueAndSaveActor().commitPayload(this._operation, handleFieldsRelayPayload);
          }
          this._actorIdentifier = prevActorIdentifier;
          return relayPayload;
        };
        _proto._normalizeStreamItem = function _normalizeStreamItem(response, parentID, field, variables, path, normalizationPath) {
          var _field$alias, _field$concreteType, _ref2, _this$_getDataID;
          var data = response.data;
          !(typeof data === "object") ? true ? invariant5(false, "OperationExecutor: Expected the GraphQL @stream payload `data` value to be an object.") : invariant5(false) : void 0;
          var responseKey = (_field$alias = field.alias) !== null && _field$alias !== void 0 ? _field$alias : field.name;
          var storageKey = getStorageKey(field, variables);
          var parentEntry = this._source.get(parentID);
          !(parentEntry != null) ? true ? invariant5(false, "OperationExecutor: Expected the parent record `%s` for @stream data to exist.", parentID) : invariant5(false) : void 0;
          var parentRecord = parentEntry.record, fieldPayloads = parentEntry.fieldPayloads;
          var prevIDs = RelayModernRecord.getLinkedRecordIDs(parentRecord, storageKey);
          !(prevIDs != null) ? true ? invariant5(false, "OperationExecutor: Expected record `%s` to have fetched field `%s` with @stream.", parentID, field.name) : invariant5(false) : void 0;
          var finalPathEntry = path[path.length - 1];
          var itemIndex = parseInt(finalPathEntry, 10);
          !(itemIndex === finalPathEntry && itemIndex >= 0) ? true ? invariant5(false, "OperationExecutor: Expected path for @stream to end in a positive integer index, got `%s`", finalPathEntry) : invariant5(false) : void 0;
          var typeName = (_field$concreteType = field.concreteType) !== null && _field$concreteType !== void 0 ? _field$concreteType : data[TYPENAME_KEY];
          !(typeof typeName === "string") ? true ? invariant5(false, "OperationExecutor: Expected @stream field `%s` to have a __typename.", field.name) : invariant5(false) : void 0;
          var itemID = (_ref2 = (_this$_getDataID = this._getDataID(data, typeName)) !== null && _this$_getDataID !== void 0 ? _this$_getDataID : prevIDs === null || prevIDs === void 0 ? void 0 : prevIDs[itemIndex]) !== null && _ref2 !== void 0 ? _ref2 : generateClientID(parentID, storageKey, itemIndex);
          !(typeof itemID === "string") ? true ? invariant5(false, "OperationExecutor: Expected id of elements of field `%s` to be strings.", storageKey) : invariant5(false) : void 0;
          var selector2 = createNormalizationSelector(field, itemID, variables);
          var nextParentRecord = RelayModernRecord.clone(parentRecord);
          var nextIDs = (0, _toConsumableArray22["default"])(prevIDs);
          nextIDs[itemIndex] = itemID;
          RelayModernRecord.setLinkedRecordIDs(nextParentRecord, storageKey, nextIDs);
          this._source.set(parentID, {
            record: nextParentRecord,
            fieldPayloads
          });
          var relayPayload = normalizeResponse(response, selector2, typeName, {
            actorIdentifier: this._actorIdentifier,
            getDataID: this._getDataID,
            path: [].concat((0, _toConsumableArray22["default"])(normalizationPath), [responseKey, String(itemIndex)]),
            reactFlightPayloadDeserializer: this._reactFlightPayloadDeserializer != null ? this._deserializeReactFlightPayloadWithLogging : null,
            reactFlightServerErrorHandler: this._reactFlightServerErrorHandler,
            treatMissingFieldsAsNull: this._treatMissingFieldsAsNull,
            shouldProcessClientComponents: this._shouldProcessClientComponents
          });
          return {
            fieldPayloads,
            itemID,
            itemIndex,
            prevIDs,
            relayPayload,
            storageKey
          };
        };
        _proto._scheduleAsyncStoreUpdate = function _scheduleAsyncStoreUpdate(scheduleFn, completeFn) {
          var _this12 = this;
          this._completeFns.push(completeFn);
          if (this._asyncStoreUpdateDisposable != null) {
            return;
          }
          this._asyncStoreUpdateDisposable = scheduleFn(function() {
            _this12._asyncStoreUpdateDisposable = null;
            var updatedOwners = _this12._runPublishQueue();
            _this12._updateOperationTracker(updatedOwners);
            var _iterator2 = (0, _createForOfIteratorHelper2["default"])(_this12._completeFns), _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                var complete = _step2.value;
                complete();
              }
            } catch (err2) {
              _iterator2.e(err2);
            } finally {
              _iterator2.f();
            }
            _this12._completeFns = [];
          });
        };
        _proto._updateOperationTracker = function _updateOperationTracker(updatedOwners) {
          if (updatedOwners != null && updatedOwners.length > 0) {
            this._operationTracker.update(this._operation.request, new Set(updatedOwners));
          }
        };
        _proto._completeOperationTracker = function _completeOperationTracker() {
          this._operationTracker.complete(this._operation.request);
        };
        _proto._getPublishQueueAndSaveActor = function _getPublishQueueAndSaveActor() {
          this._seenActors.add(this._actorIdentifier);
          return this._getPublishQueue(this._actorIdentifier);
        };
        _proto._getActorsToVisit = function _getActorsToVisit() {
          if (this._seenActors.size === 0) {
            return /* @__PURE__ */ new Set([this._actorIdentifier]);
          } else {
            return this._seenActors;
          }
        };
        _proto._runPublishQueue = function _runPublishQueue(operation) {
          var updatedOwners = /* @__PURE__ */ new Set();
          var _iterator3 = (0, _createForOfIteratorHelper2["default"])(this._getActorsToVisit()), _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
              var actorIdentifier = _step3.value;
              var owners = this._getPublishQueue(actorIdentifier).run(operation);
              owners.forEach(function(owner) {
                return updatedOwners.add(owner);
              });
            }
          } catch (err2) {
            _iterator3.e(err2);
          } finally {
            _iterator3.f();
          }
          return Array.from(updatedOwners);
        };
        _proto._retainData = function _retainData() {
          var _iterator4 = (0, _createForOfIteratorHelper2["default"])(this._getActorsToVisit()), _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
              var actorIdentifier = _step4.value;
              if (!this._retainDisposables.has(actorIdentifier)) {
                this._retainDisposables.set(actorIdentifier, this._getStore(actorIdentifier).retain(this._operation));
              }
            }
          } catch (err2) {
            _iterator4.e(err2);
          } finally {
            _iterator4.f();
          }
        };
        _proto._disposeRetainedData = function _disposeRetainedData() {
          var _iterator5 = (0, _createForOfIteratorHelper2["default"])(this._retainDisposables.values()), _step5;
          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
              var disposable = _step5.value;
              disposable.dispose();
            }
          } catch (err2) {
            _iterator5.e(err2);
          } finally {
            _iterator5.f();
          }
          this._retainDisposables.clear();
        };
        _proto._expectOperationLoader = function _expectOperationLoader() {
          var operationLoader = this._operationLoader;
          !operationLoader ? true ? invariant5(false, "OperationExecutor: Expected an operationLoader to be configured when using `@match`.") : invariant5(false) : void 0;
          return operationLoader;
        };
        return Executor2;
      }();
      function partitionGraphQLResponses(responses) {
        var nonIncrementalResponses = [];
        var incrementalResponses = [];
        responses.forEach(function(response) {
          if (response.path != null || response.label != null) {
            var label = response.label, path = response.path;
            if (label == null || path == null) {
              true ? true ? invariant5(false, "OperationExecutor: invalid incremental payload, expected `path` and `label` to either both be null/undefined, or `path` to be an `Array<string | number>` and `label` to be a `string`.") : invariant5(false) : void 0;
            }
            incrementalResponses.push({
              label,
              path,
              response
            });
          } else {
            nonIncrementalResponses.push(response);
          }
        });
        return [nonIncrementalResponses, incrementalResponses];
      }
      function normalizeResponse(response, selector2, typeName, options) {
        var _response$extensions3;
        var data = response.data, errors = response.errors;
        var source2 = RelayRecordSource.create();
        var record = RelayModernRecord.create(selector2.dataID, typeName);
        source2.set(selector2.dataID, record);
        var relayPayload = RelayResponseNormalizer.normalize(source2, selector2, data, options);
        return (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, relayPayload), {}, {
          errors,
          isFinal: ((_response$extensions3 = response.extensions) === null || _response$extensions3 === void 0 ? void 0 : _response$extensions3.is_final) === true
        });
      }
      function stableStringify2(value) {
        var _JSON$stringify;
        return (_JSON$stringify = JSON.stringify(stableCopy(value))) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : "";
      }
      function validateOptimisticResponsePayload(payload) {
        var incrementalPlaceholders = payload.incrementalPlaceholders;
        if (incrementalPlaceholders != null && incrementalPlaceholders.length !== 0) {
          true ? true ? invariant5(false, "OperationExecutor: optimistic responses cannot be returned for operations that use incremental data delivery (@defer, @stream, and @stream_connection).") : invariant5(false) : void 0;
        }
      }
      module2.exports = {
        execute
      };
    }
  });

  // node_modules/relay-runtime/lib/mutations/RelayRecordSourceMutator.js
  var require_RelayRecordSourceMutator = __commonJS({
    "node_modules/relay-runtime/lib/mutations/RelayRecordSourceMutator.js"(exports2, module2) {
      "use strict";
      var RelayModernRecord = require_RelayModernRecord();
      var _require = require_RelayRecordState();
      var EXISTENT = _require.EXISTENT;
      var invariant5 = require_browser();
      var RelayRecordSourceMutator = /* @__PURE__ */ function() {
        function RelayRecordSourceMutator2(base, sink) {
          this.__sources = [sink, base];
          this._base = base;
          this._sink = sink;
        }
        var _proto = RelayRecordSourceMutator2.prototype;
        _proto.unstable_getRawRecordWithChanges = function unstable_getRawRecordWithChanges(dataID) {
          var baseRecord = this._base.get(dataID);
          var sinkRecord = this._sink.get(dataID);
          if (sinkRecord === void 0) {
            if (baseRecord == null) {
              return baseRecord;
            }
            var nextRecord = RelayModernRecord.clone(baseRecord);
            if (true) {
              RelayModernRecord.freeze(nextRecord);
            }
            return nextRecord;
          } else if (sinkRecord === null) {
            return null;
          } else if (baseRecord != null) {
            var _nextRecord = RelayModernRecord.update(baseRecord, sinkRecord);
            if (true) {
              if (_nextRecord !== baseRecord) {
                RelayModernRecord.freeze(_nextRecord);
              }
            }
            return _nextRecord;
          } else {
            var _nextRecord2 = RelayModernRecord.clone(sinkRecord);
            if (true) {
              RelayModernRecord.freeze(_nextRecord2);
            }
            return _nextRecord2;
          }
        };
        _proto._getSinkRecord = function _getSinkRecord(dataID) {
          var sinkRecord = this._sink.get(dataID);
          if (!sinkRecord) {
            var baseRecord = this._base.get(dataID);
            !baseRecord ? true ? invariant5(false, "RelayRecordSourceMutator: Cannot modify non-existent record `%s`.", dataID) : invariant5(false) : void 0;
            sinkRecord = RelayModernRecord.create(dataID, RelayModernRecord.getType(baseRecord));
            this._sink.set(dataID, sinkRecord);
          }
          return sinkRecord;
        };
        _proto.copyFields = function copyFields(sourceID, sinkID) {
          var sinkSource = this._sink.get(sourceID);
          var baseSource = this._base.get(sourceID);
          !(sinkSource || baseSource) ? true ? invariant5(false, "RelayRecordSourceMutator#copyFields(): Cannot copy fields from non-existent record `%s`.", sourceID) : invariant5(false) : void 0;
          var sink = this._getSinkRecord(sinkID);
          if (baseSource) {
            RelayModernRecord.copyFields(baseSource, sink);
          }
          if (sinkSource) {
            RelayModernRecord.copyFields(sinkSource, sink);
          }
        };
        _proto.copyFieldsFromRecord = function copyFieldsFromRecord(record, sinkID) {
          var sink = this._getSinkRecord(sinkID);
          RelayModernRecord.copyFields(record, sink);
        };
        _proto.create = function create(dataID, typeName) {
          !(this._base.getStatus(dataID) !== EXISTENT && this._sink.getStatus(dataID) !== EXISTENT) ? true ? invariant5(false, "RelayRecordSourceMutator#create(): Cannot create a record with id `%s`, this record already exists.", dataID) : invariant5(false) : void 0;
          var record = RelayModernRecord.create(dataID, typeName);
          this._sink.set(dataID, record);
        };
        _proto["delete"] = function _delete(dataID) {
          this._sink["delete"](dataID);
        };
        _proto.getStatus = function getStatus(dataID) {
          return this._sink.has(dataID) ? this._sink.getStatus(dataID) : this._base.getStatus(dataID);
        };
        _proto.getType = function getType(dataID) {
          for (var ii = 0; ii < this.__sources.length; ii++) {
            var record = this.__sources[ii].get(dataID);
            if (record) {
              return RelayModernRecord.getType(record);
            } else if (record === null) {
              return null;
            }
          }
        };
        _proto.getValue = function getValue3(dataID, storageKey) {
          for (var ii = 0; ii < this.__sources.length; ii++) {
            var record = this.__sources[ii].get(dataID);
            if (record) {
              var value = RelayModernRecord.getValue(record, storageKey);
              if (value !== void 0) {
                return value;
              }
            } else if (record === null) {
              return null;
            }
          }
        };
        _proto.setValue = function setValue(dataID, storageKey, value) {
          var sinkRecord = this._getSinkRecord(dataID);
          RelayModernRecord.setValue(sinkRecord, storageKey, value);
        };
        _proto.getLinkedRecordID = function getLinkedRecordID(dataID, storageKey) {
          for (var ii = 0; ii < this.__sources.length; ii++) {
            var record = this.__sources[ii].get(dataID);
            if (record) {
              var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
              if (linkedID !== void 0) {
                return linkedID;
              }
            } else if (record === null) {
              return null;
            }
          }
        };
        _proto.setLinkedRecordID = function setLinkedRecordID(dataID, storageKey, linkedID) {
          var sinkRecord = this._getSinkRecord(dataID);
          RelayModernRecord.setLinkedRecordID(sinkRecord, storageKey, linkedID);
        };
        _proto.getLinkedRecordIDs = function getLinkedRecordIDs(dataID, storageKey) {
          for (var ii = 0; ii < this.__sources.length; ii++) {
            var record = this.__sources[ii].get(dataID);
            if (record) {
              var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);
              if (linkedIDs !== void 0) {
                return linkedIDs;
              }
            } else if (record === null) {
              return null;
            }
          }
        };
        _proto.setLinkedRecordIDs = function setLinkedRecordIDs(dataID, storageKey, linkedIDs) {
          var sinkRecord = this._getSinkRecord(dataID);
          RelayModernRecord.setLinkedRecordIDs(sinkRecord, storageKey, linkedIDs);
        };
        return RelayRecordSourceMutator2;
      }();
      module2.exports = RelayRecordSourceMutator;
    }
  });

  // node_modules/relay-runtime/lib/mutations/createUpdatableProxy.js
  var require_createUpdatableProxy = __commonJS({
    "node_modules/relay-runtime/lib/mutations/createUpdatableProxy.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      var _require = require_RelayStoreUtils();
      var getArgumentValues = _require.getArgumentValues;
      var _require2 = require_RelayConcreteNode();
      var ACTOR_CHANGE = _require2.ACTOR_CHANGE;
      var ALIASED_FRAGMENT_SPREAD = _require2.ALIASED_FRAGMENT_SPREAD;
      var ALIASED_INLINE_FRAGMENT_SPREAD = _require2.ALIASED_INLINE_FRAGMENT_SPREAD;
      var CLIENT_EDGE_TO_CLIENT_OBJECT = _require2.CLIENT_EDGE_TO_CLIENT_OBJECT;
      var CLIENT_EDGE_TO_SERVER_OBJECT = _require2.CLIENT_EDGE_TO_SERVER_OBJECT;
      var CLIENT_EXTENSION = _require2.CLIENT_EXTENSION;
      var CONDITION = _require2.CONDITION;
      var DEFER = _require2.DEFER;
      var FLIGHT_FIELD = _require2.FLIGHT_FIELD;
      var FRAGMENT_SPREAD = _require2.FRAGMENT_SPREAD;
      var INLINE_DATA_FRAGMENT_SPREAD = _require2.INLINE_DATA_FRAGMENT_SPREAD;
      var INLINE_FRAGMENT = _require2.INLINE_FRAGMENT;
      var LINKED_FIELD = _require2.LINKED_FIELD;
      var MODULE_IMPORT = _require2.MODULE_IMPORT;
      var RELAY_LIVE_RESOLVER = _require2.RELAY_LIVE_RESOLVER;
      var RELAY_RESOLVER = _require2.RELAY_RESOLVER;
      var REQUIRED_FIELD = _require2.REQUIRED_FIELD;
      var SCALAR_FIELD = _require2.SCALAR_FIELD;
      var STREAM = _require2.STREAM;
      var nonUpdatableKeys = ["id", "__id", "__typename", "js"];
      function createUpdatableProxy(updatableProxyRootRecord, variables, selections, recordSourceProxy) {
        var mutableUpdatableProxy = {};
        updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selections, recordSourceProxy);
        if (true) {
          Object.freeze(mutableUpdatableProxy);
        }
        return mutableUpdatableProxy;
      }
      function updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selections, recordSourceProxy) {
        var _selection$alias3;
        var _iterator = (0, _createForOfIteratorHelper2["default"])(selections), _step;
        try {
          var _loop = function _loop2() {
            var selection = _step.value;
            switch (selection.kind) {
              case LINKED_FIELD:
                if (selection.plural) {
                  Object.defineProperty(mutableUpdatableProxy, (_selection$alias = selection.alias) !== null && _selection$alias !== void 0 ? _selection$alias : selection.name, {
                    get: createGetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy),
                    set: createSetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy)
                  });
                } else {
                  Object.defineProperty(mutableUpdatableProxy, (_selection$alias2 = selection.alias) !== null && _selection$alias2 !== void 0 ? _selection$alias2 : selection.name, {
                    get: createGetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy),
                    set: createSetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy)
                  });
                }
                break;
              case SCALAR_FIELD:
                var scalarFieldName = (_selection$alias3 = selection.alias) !== null && _selection$alias3 !== void 0 ? _selection$alias3 : selection.name;
                Object.defineProperty(mutableUpdatableProxy, scalarFieldName, {
                  get: function get2() {
                    var _selection$args;
                    var newVariables = getArgumentValues((_selection$args = selection.args) !== null && _selection$args !== void 0 ? _selection$args : [], variables);
                    return updatableProxyRootRecord.getValue(
                      selection.name,
                      newVariables
                    );
                  },
                  set: nonUpdatableKeys.includes(selection.name) ? void 0 : function(newValue) {
                    var _selection$args2;
                    var newVariables = getArgumentValues((_selection$args2 = selection.args) !== null && _selection$args2 !== void 0 ? _selection$args2 : [], variables);
                    updatableProxyRootRecord.setValue__UNSAFE(newValue, selection.name, newVariables);
                  }
                });
                break;
              case INLINE_FRAGMENT:
                if (updatableProxyRootRecord.getType() === selection.type) {
                  updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selection.selections, recordSourceProxy);
                }
                break;
              case CLIENT_EXTENSION:
                updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selection.selections, recordSourceProxy);
                break;
              case FRAGMENT_SPREAD:
                break;
              case CONDITION:
              case ACTOR_CHANGE:
              case ALIASED_FRAGMENT_SPREAD:
              case INLINE_DATA_FRAGMENT_SPREAD:
              case ALIASED_INLINE_FRAGMENT_SPREAD:
              case CLIENT_EDGE_TO_CLIENT_OBJECT:
              case CLIENT_EDGE_TO_SERVER_OBJECT:
              case DEFER:
              case FLIGHT_FIELD:
              case MODULE_IMPORT:
              case RELAY_LIVE_RESOLVER:
              case REQUIRED_FIELD:
              case STREAM:
              case RELAY_RESOLVER:
                throw new Error("Encountered an unexpected ReaderSelection variant in RelayRecordSourceProxy. This indicates a bug in Relay.");
              default:
                selection.kind;
                throw new Error("Encountered an unexpected ReaderSelection variant in RelayRecordSourceProxy. This indicates a bug in Relay.");
            }
          };
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _selection$alias;
            var _selection$alias2;
            _loop();
          }
        } catch (err2) {
          _iterator.e(err2);
        } finally {
          _iterator.f();
        }
      }
      function createSetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy) {
        return function set2(newValue) {
          var _selection$args3;
          var newVariables = getArgumentValues((_selection$args3 = selection.args) !== null && _selection$args3 !== void 0 ? _selection$args3 : [], variables);
          if (newValue == null) {
            throw new Error("Do not assign null to plural linked fields; assign an empty array instead.");
          } else {
            var recordProxies = newValue.map(function(item) {
              if (item == null) {
                throw new Error("When assigning an array of items, none of the items should be null or undefined.");
              }
              var __id = item.__id;
              if (__id == null) {
                throw new Error("The __id field must be present on each item passed to the setter. This indicates a bug in Relay.");
              }
              var newValueRecord = recordSourceProxy.get(__id);
              if (newValueRecord == null) {
                throw new Error("Did not find item with data id ".concat(__id, " in the store."));
              }
              return newValueRecord;
            });
            updatableProxyRootRecord.setLinkedRecords(recordProxies, selection.name, newVariables);
          }
        };
      }
      function createSetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy) {
        return function set2(newValue) {
          var _selection$args4;
          var newVariables = getArgumentValues((_selection$args4 = selection.args) !== null && _selection$args4 !== void 0 ? _selection$args4 : [], variables);
          if (newValue == null) {
            updatableProxyRootRecord.setValue(newValue, selection.name, newVariables);
          } else {
            var __id = newValue.__id;
            if (__id == null) {
              throw new Error("The __id field must be present on the argument. This indicates a bug in Relay.");
            }
            var newValueRecord = recordSourceProxy.get(__id);
            if (newValueRecord == null) {
              throw new Error("Did not find item with data id ".concat(__id, " in the store."));
            }
            updatableProxyRootRecord.setLinkedRecord(newValueRecord, selection.name, newVariables);
          }
        };
      }
      function createGetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy) {
        return function() {
          var _selection$args5;
          var newVariables = getArgumentValues((_selection$args5 = selection.args) !== null && _selection$args5 !== void 0 ? _selection$args5 : [], variables);
          var linkedRecords = updatableProxyRootRecord.getLinkedRecords(selection.name, newVariables);
          if (linkedRecords != null) {
            return linkedRecords.map(function(linkedRecord) {
              if (linkedRecord != null) {
                var updatableProxy = {};
                updateProxyFromSelections(updatableProxy, linkedRecord, variables, selection.selections, recordSourceProxy);
                if (true) {
                  Object.freeze(updatableProxy);
                }
                return updatableProxy;
              } else {
                return linkedRecord;
              }
            });
          } else {
            return linkedRecords;
          }
        };
      }
      function createGetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy) {
        return function() {
          var _selection$args6;
          var newVariables = getArgumentValues((_selection$args6 = selection.args) !== null && _selection$args6 !== void 0 ? _selection$args6 : [], variables);
          var linkedRecord = updatableProxyRootRecord.getLinkedRecord(selection.name, newVariables);
          if (linkedRecord != null) {
            var updatableProxy = {};
            updateProxyFromSelections(updatableProxy, linkedRecord, variables, selection.selections, recordSourceProxy);
            if (true) {
              Object.freeze(updatableProxy);
            }
            return updatableProxy;
          } else {
            return linkedRecord;
          }
        };
      }
      module2.exports = {
        createUpdatableProxy
      };
    }
  });

  // node_modules/relay-runtime/lib/mutations/readUpdatableFragment_EXPERIMENTAL.js
  var require_readUpdatableFragment_EXPERIMENTAL = __commonJS({
    "node_modules/relay-runtime/lib/mutations/readUpdatableFragment_EXPERIMENTAL.js"(exports2, module2) {
      "use strict";
      var _require = require_GraphQLTag();
      var getFragment = _require.getFragment;
      var _require2 = require_RelayModernSelector();
      var getVariablesFromFragment = _require2.getVariablesFromFragment;
      var _require3 = require_RelayStoreUtils();
      var ID_KEY2 = _require3.ID_KEY;
      var _require4 = require_createUpdatableProxy();
      var createUpdatableProxy = _require4.createUpdatableProxy;
      var invariant5 = require_browser();
      function readUpdatableFragment_EXPERIMENTAL(fragment, fragmentReference, proxy) {
        var updatableFragment = getFragment(fragment);
        var fragmentVariables = getVariablesFromFragment(updatableFragment, fragmentReference);
        var id = fragmentReference[ID_KEY2];
        var fragmentRoot = proxy.get(id);
        !(fragmentRoot != null) ? true ? invariant5(false, "No record with ".concat(id, " was found. This likely indicates a problem with Relay.")) : invariant5(false) : void 0;
        return {
          updatableData: createUpdatableProxy(fragmentRoot, fragmentVariables, updatableFragment.selections, proxy)
        };
      }
      module2.exports = {
        readUpdatableFragment_EXPERIMENTAL
      };
    }
  });

  // node_modules/relay-runtime/lib/mutations/readUpdatableQuery_EXPERIMENTAL.js
  var require_readUpdatableQuery_EXPERIMENTAL = __commonJS({
    "node_modules/relay-runtime/lib/mutations/readUpdatableQuery_EXPERIMENTAL.js"(exports2, module2) {
      "use strict";
      var _require = require_GraphQLTag();
      var getUpdatableQuery = _require.getUpdatableQuery;
      var _require2 = require_createUpdatableProxy();
      var createUpdatableProxy = _require2.createUpdatableProxy;
      function readUpdatableQuery_EXPERIMENTAL(query, variables, proxy) {
        var updatableQuery = getUpdatableQuery(query);
        return {
          updatableData: createUpdatableProxy(proxy.getRoot(), variables, updatableQuery.fragment.selections, proxy)
        };
      }
      module2.exports = {
        readUpdatableQuery_EXPERIMENTAL
      };
    }
  });

  // node_modules/relay-runtime/lib/mutations/RelayRecordProxy.js
  var require_RelayRecordProxy = __commonJS({
    "node_modules/relay-runtime/lib/mutations/RelayRecordProxy.js"(exports2, module2) {
      "use strict";
      var _require = require_ClientID();
      var generateClientID = _require.generateClientID;
      var _require2 = require_RelayStoreUtils();
      var getStableStorageKey = _require2.getStableStorageKey;
      var invariant5 = require_browser();
      var RelayRecordProxy = /* @__PURE__ */ function() {
        function RelayRecordProxy2(source2, mutator, dataID) {
          this._dataID = dataID;
          this._mutator = mutator;
          this._source = source2;
        }
        var _proto = RelayRecordProxy2.prototype;
        _proto.copyFieldsFrom = function copyFieldsFrom(source2) {
          this._mutator.copyFields(source2.getDataID(), this._dataID);
        };
        _proto.getDataID = function getDataID() {
          return this._dataID;
        };
        _proto.getType = function getType() {
          var type = this._mutator.getType(this._dataID);
          !(type != null) ? true ? invariant5(false, "RelayRecordProxy: Cannot get the type of deleted record `%s`.", this._dataID) : invariant5(false) : void 0;
          return type;
        };
        _proto.getValue = function getValue3(name, args) {
          var storageKey = getStableStorageKey(name, args);
          return this._mutator.getValue(this._dataID, storageKey);
        };
        _proto.setValue = function setValue(value, name, args) {
          !isValidLeafValue(value) ? true ? invariant5(false, "RelayRecordProxy#setValue(): Expected a scalar or array of scalars, got `%s`.", JSON.stringify(value)) : invariant5(false) : void 0;
          return this.setValue__UNSAFE(value, name, args);
        };
        _proto.setValue__UNSAFE = function setValue__UNSAFE(value, name, args) {
          var storageKey = getStableStorageKey(name, args);
          this._mutator.setValue(this._dataID, storageKey, value);
          return this;
        };
        _proto.getLinkedRecord = function getLinkedRecord(name, args) {
          var storageKey = getStableStorageKey(name, args);
          var linkedID = this._mutator.getLinkedRecordID(this._dataID, storageKey);
          return linkedID != null ? this._source.get(linkedID) : linkedID;
        };
        _proto.setLinkedRecord = function setLinkedRecord(record, name, args) {
          !(record instanceof RelayRecordProxy2) ? true ? invariant5(false, "RelayRecordProxy#setLinkedRecord(): Expected a record, got `%s`.", record) : invariant5(false) : void 0;
          var storageKey = getStableStorageKey(name, args);
          var linkedID = record.getDataID();
          this._mutator.setLinkedRecordID(this._dataID, storageKey, linkedID);
          return this;
        };
        _proto.getOrCreateLinkedRecord = function getOrCreateLinkedRecord(name, typeName, args) {
          var linkedRecord = this.getLinkedRecord(name, args);
          if (!linkedRecord) {
            var _this$_source$get;
            var storageKey = getStableStorageKey(name, args);
            var clientID = generateClientID(this.getDataID(), storageKey);
            linkedRecord = (_this$_source$get = this._source.get(clientID)) !== null && _this$_source$get !== void 0 ? _this$_source$get : this._source.create(clientID, typeName);
            this.setLinkedRecord(linkedRecord, name, args);
          }
          return linkedRecord;
        };
        _proto.getLinkedRecords = function getLinkedRecords(name, args) {
          var _this = this;
          var storageKey = getStableStorageKey(name, args);
          var linkedIDs = this._mutator.getLinkedRecordIDs(this._dataID, storageKey);
          if (linkedIDs == null) {
            return linkedIDs;
          }
          return linkedIDs.map(function(linkedID) {
            return linkedID != null ? _this._source.get(linkedID) : linkedID;
          });
        };
        _proto.setLinkedRecords = function setLinkedRecords(records, name, args) {
          !Array.isArray(records) ? true ? invariant5(false, "RelayRecordProxy#setLinkedRecords(): Expected records to be an array, got `%s`.", records) : invariant5(false) : void 0;
          var storageKey = getStableStorageKey(name, args);
          var linkedIDs = records.map(function(record) {
            return record && record.getDataID();
          });
          this._mutator.setLinkedRecordIDs(this._dataID, storageKey, linkedIDs);
          return this;
        };
        _proto.invalidateRecord = function invalidateRecord() {
          this._source.markIDForInvalidation(this._dataID);
        };
        return RelayRecordProxy2;
      }();
      function isValidLeafValue(value) {
        return value == null || typeof value !== "object" || Array.isArray(value) && value.every(isValidLeafValue);
      }
      module2.exports = RelayRecordProxy;
    }
  });

  // node_modules/relay-runtime/lib/mutations/RelayRecordSourceProxy.js
  var require_RelayRecordSourceProxy = __commonJS({
    "node_modules/relay-runtime/lib/mutations/RelayRecordSourceProxy.js"(exports2, module2) {
      "use strict";
      var RelayModernRecord = require_RelayModernRecord();
      var _require = require_RelayRecordState();
      var EXISTENT = _require.EXISTENT;
      var NONEXISTENT = _require.NONEXISTENT;
      var _require2 = require_RelayStoreUtils();
      var ROOT_ID = _require2.ROOT_ID;
      var ROOT_TYPE = _require2.ROOT_TYPE;
      var _require3 = require_readUpdatableFragment_EXPERIMENTAL();
      var _readUpdatableFragment_EXPERIMENTAL = _require3.readUpdatableFragment_EXPERIMENTAL;
      var _require4 = require_readUpdatableQuery_EXPERIMENTAL();
      var _readUpdatableQuery_EXPERIMENTAL = _require4.readUpdatableQuery_EXPERIMENTAL;
      var RelayRecordProxy = require_RelayRecordProxy();
      var invariant5 = require_browser();
      var RelayRecordSourceProxy = /* @__PURE__ */ function() {
        function RelayRecordSourceProxy2(mutator, getDataID, handlerProvider) {
          this.__mutator = mutator;
          this._handlerProvider = handlerProvider || null;
          this._proxies = {};
          this._getDataID = getDataID;
          this._invalidatedStore = false;
          this._idsMarkedForInvalidation = /* @__PURE__ */ new Set();
        }
        var _proto = RelayRecordSourceProxy2.prototype;
        _proto.publishSource = function publishSource(source2, fieldPayloads) {
          var _this = this;
          var dataIDs = source2.getRecordIDs();
          dataIDs.forEach(function(dataID) {
            var status = source2.getStatus(dataID);
            if (status === EXISTENT) {
              var sourceRecord = source2.get(dataID);
              if (sourceRecord) {
                if (_this.__mutator.getStatus(dataID) !== EXISTENT) {
                  _this.create(dataID, RelayModernRecord.getType(sourceRecord));
                }
                _this.__mutator.copyFieldsFromRecord(sourceRecord, dataID);
              }
            } else if (status === NONEXISTENT) {
              _this["delete"](dataID);
            }
          });
          if (fieldPayloads && fieldPayloads.length) {
            fieldPayloads.forEach(function(fieldPayload) {
              var handler = _this._handlerProvider && _this._handlerProvider(fieldPayload.handle);
              !handler ? true ? invariant5(false, "RelayModernEnvironment: Expected a handler to be provided for handle `%s`.", fieldPayload.handle) : invariant5(false) : void 0;
              handler.update(_this, fieldPayload);
            });
          }
        };
        _proto.create = function create(dataID, typeName) {
          this.__mutator.create(dataID, typeName);
          delete this._proxies[dataID];
          var record = this.get(dataID);
          !record ? true ? invariant5(false, "RelayRecordSourceProxy#create(): Expected the created record to exist.") : invariant5(false) : void 0;
          return record;
        };
        _proto["delete"] = function _delete(dataID) {
          !(dataID !== ROOT_ID) ? true ? invariant5(false, "RelayRecordSourceProxy#delete(): Cannot delete the root record.") : invariant5(false) : void 0;
          delete this._proxies[dataID];
          this.__mutator["delete"](dataID);
        };
        _proto.get = function get2(dataID) {
          if (!this._proxies.hasOwnProperty(dataID)) {
            var status = this.__mutator.getStatus(dataID);
            if (status === EXISTENT) {
              this._proxies[dataID] = new RelayRecordProxy(this, this.__mutator, dataID);
            } else {
              this._proxies[dataID] = status === NONEXISTENT ? null : void 0;
            }
          }
          return this._proxies[dataID];
        };
        _proto.getRoot = function getRoot2() {
          var root3 = this.get(ROOT_ID);
          if (!root3) {
            root3 = this.create(ROOT_ID, ROOT_TYPE);
          }
          !(root3 && root3.getType() === ROOT_TYPE) ? true ? invariant5(false, "RelayRecordSourceProxy#getRoot(): Expected the source to contain a root record, %s.", root3 == null ? "no root record found" : "found a root record of type `".concat(root3.getType(), "`")) : invariant5(false) : void 0;
          return root3;
        };
        _proto.invalidateStore = function invalidateStore() {
          this._invalidatedStore = true;
        };
        _proto.isStoreMarkedForInvalidation = function isStoreMarkedForInvalidation() {
          return this._invalidatedStore;
        };
        _proto.markIDForInvalidation = function markIDForInvalidation(dataID) {
          this._idsMarkedForInvalidation.add(dataID);
        };
        _proto.getIDsMarkedForInvalidation = function getIDsMarkedForInvalidation() {
          return this._idsMarkedForInvalidation;
        };
        _proto.readUpdatableQuery_EXPERIMENTAL = function readUpdatableQuery_EXPERIMENTAL(query, variables) {
          return _readUpdatableQuery_EXPERIMENTAL(query, variables, this);
        };
        _proto.readUpdatableFragment_EXPERIMENTAL = function readUpdatableFragment_EXPERIMENTAL(fragment, fragmentReference) {
          return _readUpdatableFragment_EXPERIMENTAL(fragment, fragmentReference, this);
        };
        return RelayRecordSourceProxy2;
      }();
      module2.exports = RelayRecordSourceProxy;
    }
  });

  // node_modules/relay-runtime/lib/mutations/RelayRecordSourceSelectorProxy.js
  var require_RelayRecordSourceSelectorProxy = __commonJS({
    "node_modules/relay-runtime/lib/mutations/RelayRecordSourceSelectorProxy.js"(exports2, module2) {
      "use strict";
      var _require = require_RelayStoreUtils();
      var ROOT_TYPE = _require.ROOT_TYPE;
      var getStorageKey = _require.getStorageKey;
      var _require2 = require_readUpdatableFragment_EXPERIMENTAL();
      var _readUpdatableFragment_EXPERIMENTAL = _require2.readUpdatableFragment_EXPERIMENTAL;
      var _require3 = require_readUpdatableQuery_EXPERIMENTAL();
      var _readUpdatableQuery_EXPERIMENTAL = _require3.readUpdatableQuery_EXPERIMENTAL;
      var invariant5 = require_browser();
      var RelayRecordSourceSelectorProxy = /* @__PURE__ */ function() {
        function RelayRecordSourceSelectorProxy2(mutator, recordSource, readSelector) {
          this.__mutator = mutator;
          this.__recordSource = recordSource;
          this._readSelector = readSelector;
        }
        var _proto = RelayRecordSourceSelectorProxy2.prototype;
        _proto.create = function create(dataID, typeName) {
          return this.__recordSource.create(dataID, typeName);
        };
        _proto["delete"] = function _delete(dataID) {
          this.__recordSource["delete"](dataID);
        };
        _proto.get = function get2(dataID) {
          return this.__recordSource.get(dataID);
        };
        _proto.getRoot = function getRoot2() {
          return this.__recordSource.getRoot();
        };
        _proto.getOperationRoot = function getOperationRoot() {
          var root3 = this.__recordSource.get(this._readSelector.dataID);
          if (!root3) {
            root3 = this.__recordSource.create(this._readSelector.dataID, ROOT_TYPE);
          }
          return root3;
        };
        _proto._getRootField = function _getRootField(selector2, fieldName, plural) {
          var field = selector2.node.selections.find(function(selection) {
            return selection.kind === "LinkedField" && selection.name === fieldName || selection.kind === "RequiredField" && selection.field.name === fieldName;
          });
          if (field && field.kind === "RequiredField") {
            field = field.field;
          }
          !(field && field.kind === "LinkedField") ? true ? invariant5(false, "RelayRecordSourceSelectorProxy#getRootField(): Cannot find root field `%s`, no such field is defined on GraphQL document `%s`.", fieldName, selector2.node.name) : invariant5(false) : void 0;
          !(field.plural === plural) ? true ? invariant5(false, "RelayRecordSourceSelectorProxy#getRootField(): Expected root field `%s` to be %s.", fieldName, plural ? "plural" : "singular") : invariant5(false) : void 0;
          return field;
        };
        _proto.getRootField = function getRootField(fieldName) {
          var field = this._getRootField(this._readSelector, fieldName, false);
          var storageKey = getStorageKey(field, this._readSelector.variables);
          return this.getOperationRoot().getLinkedRecord(storageKey);
        };
        _proto.getPluralRootField = function getPluralRootField(fieldName) {
          var field = this._getRootField(this._readSelector, fieldName, true);
          var storageKey = getStorageKey(field, this._readSelector.variables);
          return this.getOperationRoot().getLinkedRecords(storageKey);
        };
        _proto.invalidateStore = function invalidateStore() {
          this.__recordSource.invalidateStore();
        };
        _proto.readUpdatableQuery_EXPERIMENTAL = function readUpdatableQuery_EXPERIMENTAL(query, variables) {
          return _readUpdatableQuery_EXPERIMENTAL(query, variables, this);
        };
        _proto.readUpdatableFragment_EXPERIMENTAL = function readUpdatableFragment_EXPERIMENTAL(fragment, fragmentReference) {
          return _readUpdatableFragment_EXPERIMENTAL(fragment, fragmentReference, this);
        };
        return RelayRecordSourceSelectorProxy2;
      }();
      module2.exports = RelayRecordSourceSelectorProxy;
    }
  });

  // node_modules/relay-runtime/lib/store/experimental-live-resolvers/LiveResolverSuspenseSentinel.js
  var require_LiveResolverSuspenseSentinel = __commonJS({
    "node_modules/relay-runtime/lib/store/experimental-live-resolvers/LiveResolverSuspenseSentinel.js"(exports2, module2) {
      "use strict";
      var LIVE_RESOLVER_SUSPENSE_SENTINEL = Object.freeze({
        __LIVE_RESOLVER_SUSPENSE_SENTINEL: true
      });
      function suspenseSentinel() {
        return LIVE_RESOLVER_SUSPENSE_SENTINEL;
      }
      function isSuspenseSentinel(value) {
        return value === LIVE_RESOLVER_SUSPENSE_SENTINEL;
      }
      module2.exports = {
        isSuspenseSentinel,
        suspenseSentinel
      };
    }
  });

  // node_modules/relay-runtime/lib/store/ResolverCache.js
  var require_ResolverCache = __commonJS({
    "node_modules/relay-runtime/lib/store/ResolverCache.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      var recycleNodesInto = require_recycleNodesInto();
      var _require = require_RelayConcreteNode();
      var RELAY_LIVE_RESOLVER = _require.RELAY_LIVE_RESOLVER;
      var _require2 = require_ClientID();
      var generateClientID = _require2.generateClientID;
      var RelayModernRecord = require_RelayModernRecord();
      var _require3 = require_RelayStoreUtils();
      var RELAY_RESOLVER_ERROR_KEY = _require3.RELAY_RESOLVER_ERROR_KEY;
      var RELAY_RESOLVER_INVALIDATION_KEY = _require3.RELAY_RESOLVER_INVALIDATION_KEY;
      var RELAY_RESOLVER_SNAPSHOT_KEY = _require3.RELAY_RESOLVER_SNAPSHOT_KEY;
      var RELAY_RESOLVER_VALUE_KEY = _require3.RELAY_RESOLVER_VALUE_KEY;
      var getStorageKey = _require3.getStorageKey;
      var invariant5 = require_browser();
      var warning6 = require_warning();
      var emptySet2 = /* @__PURE__ */ new Set();
      var NoopResolverCache = /* @__PURE__ */ function() {
        function NoopResolverCache2() {
        }
        var _proto = NoopResolverCache2.prototype;
        _proto.readFromCacheOrEvaluate = function readFromCacheOrEvaluate(record, field, variables, evaluate, getDataForResolverFragment) {
          !(field.kind !== RELAY_LIVE_RESOLVER) ? true ? invariant5(false, "This store does not support Live Resolvers") : invariant5(false) : void 0;
          var _evaluate = evaluate(), resolverResult = _evaluate.resolverResult, snapshot = _evaluate.snapshot, error = _evaluate.error;
          return [resolverResult, void 0, error, snapshot, void 0];
        };
        _proto.invalidateDataIDs = function invalidateDataIDs(updatedDataIDs) {
        };
        _proto.ensureClientRecord = function ensureClientRecord(id, typeName) {
          true ? true ? invariant5(false, "Client Edges to Client Objects are not supported in this version of Relay Store") : invariant5(false) : void 0;
        };
        return NoopResolverCache2;
      }();
      function addDependencyEdge(edges, from, to) {
        var set2 = edges.get(from);
        if (!set2) {
          set2 = /* @__PURE__ */ new Set();
          edges.set(from, set2);
        }
        set2.add(to);
      }
      var RecordResolverCache = /* @__PURE__ */ function() {
        function RecordResolverCache2(getRecordSource) {
          this._resolverIDToRecordIDs = /* @__PURE__ */ new Map();
          this._recordIDToResolverIDs = /* @__PURE__ */ new Map();
          this._getRecordSource = getRecordSource;
        }
        var _proto2 = RecordResolverCache2.prototype;
        _proto2.readFromCacheOrEvaluate = function readFromCacheOrEvaluate(record, field, variables, evaluate, getDataForResolverFragment) {
          var recordSource = this._getRecordSource();
          var recordID = RelayModernRecord.getDataID(record);
          var storageKey = getStorageKey(field, variables);
          var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
          var linkedRecord = linkedID == null ? null : recordSource.get(linkedID);
          if (linkedRecord == null || this._isInvalid(linkedRecord, getDataForResolverFragment)) {
            var _linkedID, _evaluationResult$sna;
            linkedID = (_linkedID = linkedID) !== null && _linkedID !== void 0 ? _linkedID : generateClientID(recordID, storageKey);
            linkedRecord = RelayModernRecord.create(linkedID, "__RELAY_RESOLVER__");
            var evaluationResult = evaluate();
            RelayModernRecord.setValue(linkedRecord, RELAY_RESOLVER_VALUE_KEY, evaluationResult.resolverResult);
            RelayModernRecord.setValue(linkedRecord, RELAY_RESOLVER_SNAPSHOT_KEY, evaluationResult.snapshot);
            RelayModernRecord.setValue(linkedRecord, RELAY_RESOLVER_ERROR_KEY, evaluationResult.error);
            recordSource.set(linkedID, linkedRecord);
            var nextRecord = RelayModernRecord.clone(record);
            RelayModernRecord.setLinkedRecordID(nextRecord, storageKey, linkedID);
            recordSource.set(RelayModernRecord.getDataID(nextRecord), nextRecord);
            var resolverID = evaluationResult.resolverID;
            addDependencyEdge(this._resolverIDToRecordIDs, resolverID, linkedID);
            addDependencyEdge(this._recordIDToResolverIDs, recordID, resolverID);
            var seenRecordIds = (_evaluationResult$sna = evaluationResult.snapshot) === null || _evaluationResult$sna === void 0 ? void 0 : _evaluationResult$sna.seenRecords;
            if (seenRecordIds != null) {
              var _iterator = (0, _createForOfIteratorHelper2["default"])(seenRecordIds), _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                  var seenRecordID = _step.value;
                  addDependencyEdge(this._recordIDToResolverIDs, seenRecordID, resolverID);
                }
              } catch (err2) {
                _iterator.e(err2);
              } finally {
                _iterator.f();
              }
            }
          }
          var answer = linkedRecord[RELAY_RESOLVER_VALUE_KEY];
          var snapshot = linkedRecord[RELAY_RESOLVER_SNAPSHOT_KEY];
          var error = linkedRecord[RELAY_RESOLVER_ERROR_KEY];
          return [answer, linkedID, error, snapshot, void 0];
        };
        _proto2.invalidateDataIDs = function invalidateDataIDs(updatedDataIDs) {
          var recordSource = this._getRecordSource();
          var visited = /* @__PURE__ */ new Set();
          var recordsToVisit = Array.from(updatedDataIDs);
          while (recordsToVisit.length) {
            var recordID = recordsToVisit.pop();
            updatedDataIDs.add(recordID);
            var _iterator2 = (0, _createForOfIteratorHelper2["default"])((_this$_recordIDToReso = this._recordIDToResolverIDs.get(recordID)) !== null && _this$_recordIDToReso !== void 0 ? _this$_recordIDToReso : emptySet2), _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                var _this$_recordIDToReso;
                var fragment = _step2.value;
                if (!visited.has(fragment)) {
                  var _iterator3 = (0, _createForOfIteratorHelper2["default"])((_this$_resolverIDToRe = this._resolverIDToRecordIDs.get(fragment)) !== null && _this$_resolverIDToRe !== void 0 ? _this$_resolverIDToRe : emptySet2), _step3;
                  try {
                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                      var _this$_resolverIDToRe;
                      var anotherRecordID = _step3.value;
                      this._markInvalidatedResolverRecord(anotherRecordID, recordSource, updatedDataIDs);
                      if (!visited.has(anotherRecordID)) {
                        recordsToVisit.push(anotherRecordID);
                      }
                    }
                  } catch (err2) {
                    _iterator3.e(err2);
                  } finally {
                    _iterator3.f();
                  }
                }
              }
            } catch (err2) {
              _iterator2.e(err2);
            } finally {
              _iterator2.f();
            }
          }
        };
        _proto2._markInvalidatedResolverRecord = function _markInvalidatedResolverRecord(dataID, recordSource, updatedDataIDs) {
          var record = recordSource.get(dataID);
          if (!record) {
            true ? warning6(false, "Expected a resolver record with ID %s, but it was missing.", dataID) : void 0;
            return;
          }
          var nextRecord = RelayModernRecord.clone(record);
          RelayModernRecord.setValue(nextRecord, RELAY_RESOLVER_INVALIDATION_KEY, true);
          recordSource.set(dataID, nextRecord);
        };
        _proto2._isInvalid = function _isInvalid(record, getDataForResolverFragment) {
          if (!RelayModernRecord.getValue(record, RELAY_RESOLVER_INVALIDATION_KEY)) {
            return false;
          }
          var snapshot = RelayModernRecord.getValue(record, RELAY_RESOLVER_SNAPSHOT_KEY);
          var originalInputs = snapshot === null || snapshot === void 0 ? void 0 : snapshot.data;
          var readerSelector = snapshot === null || snapshot === void 0 ? void 0 : snapshot.selector;
          if (originalInputs == null || readerSelector == null) {
            true ? warning6(false, "Expected previous inputs and reader selector on resolver record with ID %s, but they were missing.", RelayModernRecord.getDataID(record)) : void 0;
            return true;
          }
          var _getDataForResolverFr = getDataForResolverFragment(readerSelector), latestValues = _getDataForResolverFr.data;
          var recycled = recycleNodesInto(originalInputs, latestValues);
          if (recycled !== originalInputs) {
            return true;
          }
          return false;
        };
        _proto2.ensureClientRecord = function ensureClientRecord(id, typename) {
          true ? true ? invariant5(false, "Client Edges to Client Objects are not supported in this version of Relay Store") : invariant5(false) : void 0;
        };
        return RecordResolverCache2;
      }();
      module2.exports = {
        NoopResolverCache,
        RecordResolverCache
      };
    }
  });

  // node_modules/relay-runtime/lib/store/ResolverFragments.js
  var require_ResolverFragments = __commonJS({
    "node_modules/relay-runtime/lib/store/ResolverFragments.js"(exports2, module2) {
      "use strict";
      var _require = require_GraphQLTag();
      var getFragment = _require.getFragment;
      var _require2 = require_RelayModernSelector();
      var getSelector = _require2.getSelector;
      var invariant5 = require_browser();
      var contextStack = [];
      function withResolverContext(context3, cb) {
        contextStack.push(context3);
        try {
          return cb();
        } finally {
          contextStack.pop();
        }
      }
      function readFragment(fragmentInput, fragmentKey) {
        if (!contextStack.length) {
          throw new Error("readFragment should be called only from within a Relay Resolver function.");
        }
        var context3 = contextStack[contextStack.length - 1];
        var fragmentNode = getFragment(fragmentInput);
        var fragmentSelector = getSelector(fragmentNode, fragmentKey);
        !(fragmentSelector != null) ? true ? invariant5(false, "Expected a selector for the fragment of the resolver ".concat(fragmentNode.name, ", but got null.")) : invariant5(false) : void 0;
        !(fragmentSelector.kind === "SingularReaderSelector") ? true ? invariant5(false, "Expected a singular reader selector for the fragment of the resolver ".concat(fragmentNode.name, ", but it was plural.")) : invariant5(false) : void 0;
        var _context$getDataForRe = context3.getDataForResolverFragment(fragmentSelector, fragmentKey), data = _context$getDataForRe.data, isMissingData = _context$getDataForRe.isMissingData;
        if (isMissingData) {
          throw RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL;
        }
        return data;
      }
      var RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL = {};
      module2.exports = {
        readFragment,
        withResolverContext,
        RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL
      };
    }
  });

  // node_modules/relay-runtime/lib/store/RelayReader.js
  var require_RelayReader = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayReader.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      var _defineProperty210 = _interopRequireDefault(require_defineProperty());
      var _toConsumableArray22 = _interopRequireDefault(require_toConsumableArray());
      var _require = require_RelayConcreteNode();
      var ACTOR_CHANGE = _require.ACTOR_CHANGE;
      var ALIASED_FRAGMENT_SPREAD = _require.ALIASED_FRAGMENT_SPREAD;
      var ALIASED_INLINE_FRAGMENT_SPREAD = _require.ALIASED_INLINE_FRAGMENT_SPREAD;
      var CLIENT_EDGE_TO_CLIENT_OBJECT = _require.CLIENT_EDGE_TO_CLIENT_OBJECT;
      var CLIENT_EDGE_TO_SERVER_OBJECT = _require.CLIENT_EDGE_TO_SERVER_OBJECT;
      var CLIENT_EXTENSION = _require.CLIENT_EXTENSION;
      var CONDITION = _require.CONDITION;
      var DEFER = _require.DEFER;
      var FLIGHT_FIELD = _require.FLIGHT_FIELD;
      var FRAGMENT_SPREAD = _require.FRAGMENT_SPREAD;
      var INLINE_DATA_FRAGMENT_SPREAD = _require.INLINE_DATA_FRAGMENT_SPREAD;
      var INLINE_FRAGMENT = _require.INLINE_FRAGMENT;
      var LINKED_FIELD = _require.LINKED_FIELD;
      var MODULE_IMPORT = _require.MODULE_IMPORT;
      var RELAY_LIVE_RESOLVER = _require.RELAY_LIVE_RESOLVER;
      var RELAY_RESOLVER = _require.RELAY_RESOLVER;
      var REQUIRED_FIELD = _require.REQUIRED_FIELD;
      var SCALAR_FIELD = _require.SCALAR_FIELD;
      var STREAM = _require.STREAM;
      var RelayFeatureFlags = require_RelayFeatureFlags();
      var ClientID = require_ClientID();
      var _require2 = require_LiveResolverSuspenseSentinel();
      var isSuspenseSentinel = _require2.isSuspenseSentinel;
      var RelayConcreteVariables = require_RelayConcreteVariables();
      var RelayModernRecord = require_RelayModernRecord();
      var _require3 = require_RelayStoreReactFlightUtils();
      var getReactFlightClientResponse = _require3.getReactFlightClientResponse;
      var _require4 = require_RelayStoreUtils();
      var CLIENT_EDGE_TRAVERSAL_PATH = _require4.CLIENT_EDGE_TRAVERSAL_PATH;
      var FRAGMENT_OWNER_KEY = _require4.FRAGMENT_OWNER_KEY;
      var FRAGMENT_PROP_NAME_KEY = _require4.FRAGMENT_PROP_NAME_KEY;
      var FRAGMENTS_KEY = _require4.FRAGMENTS_KEY;
      var ID_KEY2 = _require4.ID_KEY;
      var IS_WITHIN_UNMATCHED_TYPE_REFINEMENT = _require4.IS_WITHIN_UNMATCHED_TYPE_REFINEMENT;
      var MODULE_COMPONENT_KEY = _require4.MODULE_COMPONENT_KEY;
      var ROOT_ID = _require4.ROOT_ID;
      var getArgumentValues = _require4.getArgumentValues;
      var getModuleComponentKey = _require4.getModuleComponentKey;
      var getStorageKey = _require4.getStorageKey;
      var _require5 = require_ResolverCache();
      var NoopResolverCache = _require5.NoopResolverCache;
      var _require6 = require_ResolverFragments();
      var RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL = _require6.RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL;
      var withResolverContext = _require6.withResolverContext;
      var _require7 = require_TypeID();
      var generateTypeID = _require7.generateTypeID;
      var invariant5 = require_browser();
      function read(recordSource, selector2, resolverCache) {
        var reader = new RelayReader(recordSource, selector2, resolverCache !== null && resolverCache !== void 0 ? resolverCache : new NoopResolverCache());
        return reader.read();
      }
      var RelayReader = /* @__PURE__ */ function() {
        function RelayReader2(recordSource, selector2, resolverCache) {
          var _selector$clientEdgeT;
          this._clientEdgeTraversalPath = RelayFeatureFlags.ENABLE_CLIENT_EDGES && (_selector$clientEdgeT = selector2.clientEdgeTraversalPath) !== null && _selector$clientEdgeT !== void 0 && _selector$clientEdgeT.length ? (0, _toConsumableArray22["default"])(selector2.clientEdgeTraversalPath) : [];
          this._missingClientEdges = [];
          this._missingLiveResolverFields = [];
          this._isMissingData = false;
          this._isWithinUnmatchedTypeRefinement = false;
          this._missingRequiredFields = null;
          this._owner = selector2.owner;
          this._recordSource = recordSource;
          this._seenRecords = /* @__PURE__ */ new Set();
          this._selector = selector2;
          this._variables = selector2.variables;
          this._resolverCache = resolverCache;
          this._resolverErrors = [];
          this._fragmentName = selector2.node.name;
        }
        var _proto = RelayReader2.prototype;
        _proto.read = function read2() {
          var _this$_selector = this._selector, node5 = _this$_selector.node, dataID = _this$_selector.dataID, isWithinUnmatchedTypeRefinement = _this$_selector.isWithinUnmatchedTypeRefinement;
          var abstractKey = node5.abstractKey;
          var record = this._recordSource.get(dataID);
          var isDataExpectedToBePresent = !isWithinUnmatchedTypeRefinement;
          if (isDataExpectedToBePresent && abstractKey == null && record != null) {
            var recordType = RelayModernRecord.getType(record);
            if (recordType !== node5.type && dataID !== ROOT_ID) {
              isDataExpectedToBePresent = false;
            }
          }
          if (isDataExpectedToBePresent && abstractKey != null && record != null) {
            var implementsInterface = this._implementsInterface(record, abstractKey);
            if (implementsInterface === false) {
              isDataExpectedToBePresent = false;
            } else if (implementsInterface == null) {
              this._isMissingData = true;
            }
          }
          this._isWithinUnmatchedTypeRefinement = !isDataExpectedToBePresent;
          var data = this._traverse(node5, dataID, null);
          return {
            data,
            isMissingData: this._isMissingData && isDataExpectedToBePresent,
            missingClientEdges: RelayFeatureFlags.ENABLE_CLIENT_EDGES && this._missingClientEdges.length ? this._missingClientEdges : null,
            missingLiveResolverFields: this._missingLiveResolverFields,
            seenRecords: this._seenRecords,
            selector: this._selector,
            missingRequiredFields: this._missingRequiredFields,
            relayResolverErrors: this._resolverErrors
          };
        };
        _proto._markDataAsMissing = function _markDataAsMissing() {
          this._isMissingData = true;
          if (RelayFeatureFlags.ENABLE_CLIENT_EDGES && this._clientEdgeTraversalPath.length) {
            var top = this._clientEdgeTraversalPath[this._clientEdgeTraversalPath.length - 1];
            if (top !== null) {
              this._missingClientEdges.push({
                request: top.readerClientEdge.operation,
                clientEdgeDestinationID: top.clientEdgeDestinationID
              });
            }
          }
        };
        _proto._traverse = function _traverse(node5, dataID, prevData) {
          var record = this._recordSource.get(dataID);
          this._seenRecords.add(dataID);
          if (record == null) {
            if (record === void 0) {
              this._markDataAsMissing();
            }
            return record;
          }
          var data = prevData || {};
          var hadRequiredData = this._traverseSelections(node5.selections, record, data);
          return hadRequiredData ? data : null;
        };
        _proto._getVariableValue = function _getVariableValue(name) {
          !this._variables.hasOwnProperty(name) ? true ? invariant5(false, "RelayReader(): Undefined variable `%s`.", name) : invariant5(false) : void 0;
          return this._variables[name];
        };
        _proto._maybeReportUnexpectedNull = function _maybeReportUnexpectedNull(fieldPath, action, record) {
          var _this$_missingRequire;
          if (((_this$_missingRequire = this._missingRequiredFields) === null || _this$_missingRequire === void 0 ? void 0 : _this$_missingRequire.action) === "THROW") {
            return;
          }
          var owner = this._fragmentName;
          switch (action) {
            case "THROW":
              this._missingRequiredFields = {
                action,
                field: {
                  path: fieldPath,
                  owner
                }
              };
              return;
            case "LOG":
              if (this._missingRequiredFields == null) {
                this._missingRequiredFields = {
                  action,
                  fields: [{
                    path: fieldPath,
                    owner
                  }]
                };
              } else {
                this._missingRequiredFields = {
                  action,
                  fields: [].concat((0, _toConsumableArray22["default"])(this._missingRequiredFields.fields), [{
                    path: fieldPath,
                    owner
                  }])
                };
              }
              return;
            default:
              action;
          }
        };
        _proto._traverseSelections = function _traverseSelections(selections, record, data) {
          for (var i = 0; i < selections.length; i++) {
            var selection = selections[i];
            switch (selection.kind) {
              case REQUIRED_FIELD: {
                var fieldValue = this._readRequiredField(selection, record, data);
                if (fieldValue == null) {
                  var action = selection.action;
                  if (action !== "NONE") {
                    this._maybeReportUnexpectedNull(selection.path, action, record);
                  }
                  return false;
                }
                break;
              }
              case SCALAR_FIELD:
                this._readScalar(selection, record, data);
                break;
              case LINKED_FIELD:
                if (selection.plural) {
                  this._readPluralLink(selection, record, data);
                } else {
                  this._readLink(selection, record, data);
                }
                break;
              case CONDITION:
                var conditionValue = Boolean(this._getVariableValue(selection.condition));
                if (conditionValue === selection.passingValue) {
                  var hasExpectedData = this._traverseSelections(selection.selections, record, data);
                  if (!hasExpectedData) {
                    return false;
                  }
                }
                break;
              case INLINE_FRAGMENT: {
                if (this._readInlineFragment(selection, record, data) === false) {
                  return false;
                }
                break;
              }
              case RELAY_LIVE_RESOLVER:
              case RELAY_RESOLVER: {
                if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
                  throw new Error("Relay Resolver fields are not yet supported.");
                }
                this._readResolverField(selection, record, data);
                break;
              }
              case FRAGMENT_SPREAD:
                this._createFragmentPointer(selection, record, data);
                break;
              case ALIASED_FRAGMENT_SPREAD:
                data[selection.name] = this._createAliasedFragmentSpread(selection, record);
                break;
              case ALIASED_INLINE_FRAGMENT_SPREAD: {
                var _fieldValue = this._readInlineFragment(selection.fragment, record, {});
                if (_fieldValue === false) {
                  _fieldValue = null;
                }
                data[selection.name] = _fieldValue;
                break;
              }
              case MODULE_IMPORT:
                this._readModuleImport(selection, record, data);
                break;
              case INLINE_DATA_FRAGMENT_SPREAD:
                this._createInlineDataOrResolverFragmentPointer(selection, record, data);
                break;
              case DEFER:
              case CLIENT_EXTENSION: {
                var isMissingData = this._isMissingData;
                var alreadyMissingClientEdges = this._missingClientEdges.length;
                if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
                  this._clientEdgeTraversalPath.push(null);
                }
                var _hasExpectedData = this._traverseSelections(selection.selections, record, data);
                this._isMissingData = isMissingData || this._missingClientEdges.length > alreadyMissingClientEdges;
                if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
                  this._clientEdgeTraversalPath.pop();
                }
                if (!_hasExpectedData) {
                  return false;
                }
                break;
              }
              case STREAM: {
                var _hasExpectedData2 = this._traverseSelections(selection.selections, record, data);
                if (!_hasExpectedData2) {
                  return false;
                }
                break;
              }
              case FLIGHT_FIELD:
                if (RelayFeatureFlags.ENABLE_REACT_FLIGHT_COMPONENT_FIELD) {
                  this._readFlightField(selection, record, data);
                } else {
                  throw new Error("Flight fields are not yet supported.");
                }
                break;
              case ACTOR_CHANGE:
                this._readActorChange(selection, record, data);
                break;
              case CLIENT_EDGE_TO_CLIENT_OBJECT:
              case CLIENT_EDGE_TO_SERVER_OBJECT:
                if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
                  this._readClientEdge(selection, record, data);
                } else {
                  throw new Error("Client edges are not yet supported.");
                }
                break;
              default:
                selection;
                true ? true ? invariant5(false, "RelayReader(): Unexpected ast kind `%s`.", selection.kind) : invariant5(false) : void 0;
            }
          }
          return true;
        };
        _proto._readRequiredField = function _readRequiredField(selection, record, data) {
          switch (selection.field.kind) {
            case SCALAR_FIELD:
              return this._readScalar(selection.field, record, data);
            case LINKED_FIELD:
              if (selection.field.plural) {
                return this._readPluralLink(selection.field, record, data);
              } else {
                return this._readLink(selection.field, record, data);
              }
            case RELAY_RESOLVER:
              if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
                throw new Error("Relay Resolver fields are not yet supported.");
              }
              return this._readResolverField(selection.field, record, data);
            case RELAY_LIVE_RESOLVER:
              if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
                throw new Error("Relay Resolver fields are not yet supported.");
              }
              return this._readResolverField(selection.field, record, data);
            case CLIENT_EDGE_TO_CLIENT_OBJECT:
            case CLIENT_EDGE_TO_SERVER_OBJECT:
              if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
                throw new Error("Relay Resolver fields are not yet supported.");
              }
              return this._readClientEdge(selection.field, record, data);
            default:
              selection.field.kind;
              true ? true ? invariant5(false, "RelayReader(): Unexpected ast kind `%s`.", selection.kind) : invariant5(false) : void 0;
          }
        };
        _proto._readResolverField = function _readResolverField(field, record, data) {
          var _this = this;
          var _field$alias;
          var fragment = field.fragment;
          var storageKey = getStorageKey(fragment !== null && fragment !== void 0 ? fragment : field, this._variables);
          var resolverID = ClientID.generateClientID(RelayModernRecord.getDataID(record), storageKey);
          var snapshot;
          var getDataForResolverFragment = function getDataForResolverFragment2(singularReaderSelector) {
            if (snapshot != null) {
              return {
                data: snapshot.data,
                isMissingData: snapshot.isMissingData
              };
            }
            snapshot = read(_this._recordSource, singularReaderSelector, _this._resolverCache);
            return {
              data: snapshot.data,
              isMissingData: snapshot.isMissingData
            };
          };
          var resolverContext = {
            getDataForResolverFragment
          };
          var evaluate = function evaluate2() {
            if (fragment != null) {
              var key = {
                __id: RelayModernRecord.getDataID(record),
                __fragmentOwner: _this._owner,
                __fragments: (0, _defineProperty210["default"])({}, fragment.name, fragment.args ? getArgumentValues(fragment.args, _this._variables) : {})
              };
              return withResolverContext(resolverContext, function() {
                var _getResolverValue = getResolverValue(field, _this._variables, key, _this._fragmentName), resolverResult2 = _getResolverValue[0], resolverError2 = _getResolverValue[1];
                return {
                  resolverResult: resolverResult2,
                  snapshot,
                  resolverID,
                  error: resolverError2
                };
              });
            } else {
              var _getResolverValue2 = getResolverValue(field, _this._variables, null, _this._fragmentName), resolverResult = _getResolverValue2[0], _resolverError = _getResolverValue2[1];
              return {
                resolverResult,
                snapshot: void 0,
                resolverID,
                error: _resolverError
              };
            }
          };
          var _this$_resolverCache$ = this._resolverCache.readFromCacheOrEvaluate(record, field, this._variables, evaluate, getDataForResolverFragment), result = _this$_resolverCache$[0], seenRecord = _this$_resolverCache$[1], resolverError = _this$_resolverCache$[2], cachedSnapshot = _this$_resolverCache$[3], suspenseID = _this$_resolverCache$[4];
          if (cachedSnapshot != null) {
            if (cachedSnapshot.missingRequiredFields != null) {
              this._addMissingRequiredFields(cachedSnapshot.missingRequiredFields);
            }
            if (cachedSnapshot.missingClientEdges != null) {
              var _iterator = (0, _createForOfIteratorHelper2["default"])(cachedSnapshot.missingClientEdges), _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                  var missing = _step.value;
                  this._missingClientEdges.push(missing);
                }
              } catch (err2) {
                _iterator.e(err2);
              } finally {
                _iterator.f();
              }
            }
            if (cachedSnapshot.missingLiveResolverFields != null) {
              this._isMissingData = this._isMissingData || cachedSnapshot.missingLiveResolverFields.length > 0;
              var _iterator2 = (0, _createForOfIteratorHelper2["default"])(cachedSnapshot.missingLiveResolverFields), _step2;
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                  var missingResolverField = _step2.value;
                  this._missingLiveResolverFields.push(missingResolverField);
                }
              } catch (err2) {
                _iterator2.e(err2);
              } finally {
                _iterator2.f();
              }
            }
            var _iterator3 = (0, _createForOfIteratorHelper2["default"])(cachedSnapshot.relayResolverErrors), _step3;
            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                var error = _step3.value;
                this._resolverErrors.push(error);
              }
            } catch (err2) {
              _iterator3.e(err2);
            } finally {
              _iterator3.f();
            }
            this._isMissingData = this._isMissingData || cachedSnapshot.isMissingData;
          }
          if (resolverError) {
            this._resolverErrors.push(resolverError);
          }
          if (seenRecord != null) {
            this._seenRecords.add(seenRecord);
          }
          if (suspenseID != null) {
            this._isMissingData = true;
            this._missingLiveResolverFields.push({
              path: "".concat(this._fragmentName, ".").concat(field.path),
              liveStateID: suspenseID
            });
          }
          var applicationName = (_field$alias = field.alias) !== null && _field$alias !== void 0 ? _field$alias : field.name;
          data[applicationName] = result;
          return result;
        };
        _proto._readClientEdge = function _readClientEdge(field, record, data) {
          var _this2 = this;
          var _backingField$alias;
          var backingField = field.backingField;
          !(backingField.kind !== "ClientExtension") ? true ? invariant5(false, "Client extension client edges are not yet implemented.") : invariant5(false) : void 0;
          var applicationName = (_backingField$alias = backingField.alias) !== null && _backingField$alias !== void 0 ? _backingField$alias : backingField.name;
          var backingFieldData = {};
          this._traverseSelections([backingField], record, backingFieldData);
          var destinationDataID = backingFieldData[applicationName];
          if (destinationDataID == null || isSuspenseSentinel(destinationDataID)) {
            data[applicationName] = destinationDataID;
            return;
          }
          if (field.linkedField.plural) {
            !Array.isArray(destinationDataID) ? true ? invariant5(false, "Expected plural Client Edge Relay Resolver to return an array of IDs.") : invariant5(false) : void 0;
          } else {
            !(typeof destinationDataID === "string") ? true ? invariant5(false, "Expected a Client Edge Relay Resolver to return an ID of type `string`.") : invariant5(false) : void 0;
          }
          if (field.kind === CLIENT_EDGE_TO_CLIENT_OBJECT) {
            if (field.linkedField.plural) {
              destinationDataID = destinationDataID.map(function(id) {
                return _this2._resolverCache.ensureClientRecord(id, field.concreteType);
              });
            } else {
              destinationDataID = this._resolverCache.ensureClientRecord(destinationDataID, field.concreteType);
            }
            this._clientEdgeTraversalPath.push(null);
          } else {
            !!field.linkedField.plural ? true ? invariant5(false, "Unexpected Client Edge to plural server type. This should be prevented by the compiler.") : invariant5(false) : void 0;
            this._clientEdgeTraversalPath.push({
              readerClientEdge: field,
              clientEdgeDestinationID: destinationDataID
            });
          }
          if (field.linkedField.plural) {
            data[applicationName] = this._readLinkedIds(
              field.linkedField,
              destinationDataID,
              record,
              data
            );
          } else {
            var prevData = data[applicationName];
            !(prevData == null || typeof prevData === "object") ? true ? invariant5(false, "RelayReader(): Expected data for field `%s` on record `%s` to be an object, got `%s`.", applicationName, RelayModernRecord.getDataID(record), prevData) : invariant5(false) : void 0;
            data[applicationName] = this._traverse(
              field.linkedField,
              destinationDataID,
              prevData
            );
          }
          this._clientEdgeTraversalPath.pop();
        };
        _proto._readFlightField = function _readFlightField(field, record, data) {
          var _field$alias2;
          var applicationName = (_field$alias2 = field.alias) !== null && _field$alias2 !== void 0 ? _field$alias2 : field.name;
          var storageKey = getStorageKey(field, this._variables);
          var reactFlightClientResponseRecordID = RelayModernRecord.getLinkedRecordID(record, storageKey);
          if (reactFlightClientResponseRecordID == null) {
            data[applicationName] = reactFlightClientResponseRecordID;
            if (reactFlightClientResponseRecordID === void 0) {
              this._markDataAsMissing();
            }
            return reactFlightClientResponseRecordID;
          }
          var reactFlightClientResponseRecord = this._recordSource.get(reactFlightClientResponseRecordID);
          this._seenRecords.add(reactFlightClientResponseRecordID);
          if (reactFlightClientResponseRecord == null) {
            data[applicationName] = reactFlightClientResponseRecord;
            if (reactFlightClientResponseRecord === void 0) {
              this._markDataAsMissing();
            }
            return reactFlightClientResponseRecord;
          }
          var clientResponse = getReactFlightClientResponse(reactFlightClientResponseRecord);
          data[applicationName] = clientResponse;
          return clientResponse;
        };
        _proto._readScalar = function _readScalar(field, record, data) {
          var _field$alias3;
          var applicationName = (_field$alias3 = field.alias) !== null && _field$alias3 !== void 0 ? _field$alias3 : field.name;
          var storageKey = getStorageKey(field, this._variables);
          var value = RelayModernRecord.getValue(record, storageKey);
          if (value === void 0) {
            this._markDataAsMissing();
          }
          data[applicationName] = value;
          return value;
        };
        _proto._readLink = function _readLink(field, record, data) {
          var _field$alias4;
          var applicationName = (_field$alias4 = field.alias) !== null && _field$alias4 !== void 0 ? _field$alias4 : field.name;
          var storageKey = getStorageKey(field, this._variables);
          var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
          if (linkedID == null) {
            data[applicationName] = linkedID;
            if (linkedID === void 0) {
              this._markDataAsMissing();
            }
            return linkedID;
          }
          var prevData = data[applicationName];
          !(prevData == null || typeof prevData === "object") ? true ? invariant5(false, "RelayReader(): Expected data for field `%s` on record `%s` to be an object, got `%s`.", applicationName, RelayModernRecord.getDataID(record), prevData) : invariant5(false) : void 0;
          var value = this._traverse(field, linkedID, prevData);
          data[applicationName] = value;
          return value;
        };
        _proto._readActorChange = function _readActorChange(field, record, data) {
          var _field$alias5;
          var applicationName = (_field$alias5 = field.alias) !== null && _field$alias5 !== void 0 ? _field$alias5 : field.name;
          var storageKey = getStorageKey(field, this._variables);
          var externalRef = RelayModernRecord.getActorLinkedRecordID(record, storageKey);
          if (externalRef == null) {
            data[applicationName] = externalRef;
            if (externalRef === void 0) {
              this._markDataAsMissing();
            }
            return data[applicationName];
          }
          var actorIdentifier = externalRef[0], dataID = externalRef[1];
          var fragmentRef = {};
          this._createFragmentPointer(field.fragmentSpread, {
            __id: dataID
          }, fragmentRef);
          data[applicationName] = {
            __fragmentRef: fragmentRef,
            __viewer: actorIdentifier
          };
          return data[applicationName];
        };
        _proto._readPluralLink = function _readPluralLink(field, record, data) {
          var storageKey = getStorageKey(field, this._variables);
          var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);
          return this._readLinkedIds(field, linkedIDs, record, data);
        };
        _proto._readLinkedIds = function _readLinkedIds(field, linkedIDs, record, data) {
          var _this3 = this;
          var _field$alias6;
          var applicationName = (_field$alias6 = field.alias) !== null && _field$alias6 !== void 0 ? _field$alias6 : field.name;
          if (linkedIDs == null) {
            data[applicationName] = linkedIDs;
            if (linkedIDs === void 0) {
              this._markDataAsMissing();
            }
            return linkedIDs;
          }
          var prevData = data[applicationName];
          !(prevData == null || Array.isArray(prevData)) ? true ? invariant5(false, "RelayReader(): Expected data for field `%s` on record `%s` to be an array, got `%s`.", applicationName, RelayModernRecord.getDataID(record), prevData) : invariant5(false) : void 0;
          var linkedArray = prevData || [];
          linkedIDs.forEach(function(linkedID, nextIndex2) {
            if (linkedID == null) {
              if (linkedID === void 0) {
                _this3._markDataAsMissing();
              }
              linkedArray[nextIndex2] = linkedID;
              return;
            }
            var prevItem = linkedArray[nextIndex2];
            !(prevItem == null || typeof prevItem === "object") ? true ? invariant5(false, "RelayReader(): Expected data for field `%s` on record `%s` to be an object, got `%s`.", applicationName, RelayModernRecord.getDataID(record), prevItem) : invariant5(false) : void 0;
            linkedArray[nextIndex2] = _this3._traverse(field, linkedID, prevItem);
          });
          data[applicationName] = linkedArray;
          return linkedArray;
        };
        _proto._readModuleImport = function _readModuleImport(moduleImport, record, data) {
          var componentKey = getModuleComponentKey(moduleImport.documentName);
          var component = RelayModernRecord.getValue(record, componentKey);
          if (component == null) {
            if (component === void 0) {
              this._markDataAsMissing();
            }
            return;
          }
          this._createFragmentPointer({
            kind: "FragmentSpread",
            name: moduleImport.fragmentName,
            args: moduleImport.args
          }, record, data);
          data[FRAGMENT_PROP_NAME_KEY] = moduleImport.fragmentPropName;
          data[MODULE_COMPONENT_KEY] = component;
        };
        _proto._createAliasedFragmentSpread = function _createAliasedFragmentSpread(namedFragmentSpread, record) {
          var abstractKey = namedFragmentSpread.abstractKey;
          if (abstractKey == null) {
            var typeName = RelayModernRecord.getType(record);
            if (typeName == null || typeName !== namedFragmentSpread.type) {
              return null;
            }
          } else {
            var implementsInterface = this._implementsInterface(record, abstractKey);
            if (implementsInterface === false) {
              return null;
            } else if (implementsInterface == null) {
              this._markDataAsMissing();
              return void 0;
            }
          }
          var fieldData = {};
          this._createFragmentPointer(namedFragmentSpread.fragment, record, fieldData);
          return fieldData;
        };
        _proto._readInlineFragment = function _readInlineFragment(inlineFragment, record, data) {
          var abstractKey = inlineFragment.abstractKey;
          if (abstractKey == null) {
            var typeName = RelayModernRecord.getType(record);
            if (typeName == null || typeName !== inlineFragment.type) {
              return null;
            } else {
              var hasExpectedData = this._traverseSelections(inlineFragment.selections, record, data);
              if (!hasExpectedData) {
                return false;
              }
            }
          } else {
            var implementsInterface = this._implementsInterface(record, abstractKey);
            var parentIsMissingData = this._isMissingData;
            var parentIsWithinUnmatchedTypeRefinement = this._isWithinUnmatchedTypeRefinement;
            this._isWithinUnmatchedTypeRefinement = parentIsWithinUnmatchedTypeRefinement || implementsInterface === false;
            this._traverseSelections(inlineFragment.selections, record, data);
            this._isWithinUnmatchedTypeRefinement = parentIsWithinUnmatchedTypeRefinement;
            if (implementsInterface === false) {
              this._isMissingData = parentIsMissingData;
              return void 0;
            } else if (implementsInterface == null) {
              this._markDataAsMissing();
              return null;
            }
          }
          return data;
        };
        _proto._createFragmentPointer = function _createFragmentPointer(fragmentSpread, record, data) {
          var fragmentPointers = data[FRAGMENTS_KEY];
          if (fragmentPointers == null) {
            fragmentPointers = data[FRAGMENTS_KEY] = {};
          }
          !(typeof fragmentPointers === "object" && fragmentPointers != null) ? true ? invariant5(false, "RelayReader: Expected fragment spread data to be an object, got `%s`.", fragmentPointers) : invariant5(false) : void 0;
          if (data[ID_KEY2] == null) {
            data[ID_KEY2] = RelayModernRecord.getDataID(record);
          }
          fragmentPointers[fragmentSpread.name] = fragmentSpread.args ? getArgumentValues(fragmentSpread.args, this._variables) : {};
          data[FRAGMENT_OWNER_KEY] = this._owner;
          data[IS_WITHIN_UNMATCHED_TYPE_REFINEMENT] = this._isWithinUnmatchedTypeRefinement;
          if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
            if (this._clientEdgeTraversalPath.length > 0 && this._clientEdgeTraversalPath[this._clientEdgeTraversalPath.length - 1] !== null) {
              data[CLIENT_EDGE_TRAVERSAL_PATH] = (0, _toConsumableArray22["default"])(this._clientEdgeTraversalPath);
            }
          }
        };
        _proto._createInlineDataOrResolverFragmentPointer = function _createInlineDataOrResolverFragmentPointer(fragmentSpreadOrFragment, record, data) {
          var fragmentPointers = data[FRAGMENTS_KEY];
          if (fragmentPointers == null) {
            fragmentPointers = data[FRAGMENTS_KEY] = {};
          }
          !(typeof fragmentPointers === "object" && fragmentPointers != null) ? true ? invariant5(false, "RelayReader: Expected fragment spread data to be an object, got `%s`.", fragmentPointers) : invariant5(false) : void 0;
          if (data[ID_KEY2] == null) {
            data[ID_KEY2] = RelayModernRecord.getDataID(record);
          }
          var inlineData = {};
          var parentFragmentName = this._fragmentName;
          this._fragmentName = fragmentSpreadOrFragment.name;
          var parentVariables = this._variables;
          var argumentVariables = fragmentSpreadOrFragment.args ? getArgumentValues(fragmentSpreadOrFragment.args, this._variables) : {};
          this._variables = RelayConcreteVariables.getFragmentVariables(fragmentSpreadOrFragment, this._owner.variables, argumentVariables);
          this._traverseSelections(fragmentSpreadOrFragment.selections, record, inlineData);
          this._variables = parentVariables;
          this._fragmentName = parentFragmentName;
          fragmentPointers[fragmentSpreadOrFragment.name] = inlineData;
        };
        _proto._addMissingRequiredFields = function _addMissingRequiredFields(additional) {
          if (this._missingRequiredFields == null) {
            this._missingRequiredFields = additional;
            return;
          }
          if (this._missingRequiredFields.action === "THROW") {
            return;
          }
          if (additional.action === "THROW") {
            this._missingRequiredFields = additional;
            return;
          }
          this._missingRequiredFields = {
            action: "LOG",
            fields: [].concat((0, _toConsumableArray22["default"])(this._missingRequiredFields.fields), (0, _toConsumableArray22["default"])(additional.fields))
          };
        };
        _proto._implementsInterface = function _implementsInterface(record, abstractKey) {
          var typeName = RelayModernRecord.getType(record);
          var typeRecord = this._recordSource.get(generateTypeID(typeName));
          var implementsInterface = typeRecord != null ? RelayModernRecord.getValue(typeRecord, abstractKey) : null;
          return implementsInterface;
        };
        return RelayReader2;
      }();
      function getResolverValue(field, variables, fragmentKey, ownerName) {
        var resolverFunction = typeof field.resolverModule === "function" ? field.resolverModule : field.resolverModule["default"];
        var resolverResult = null;
        var resolverError = null;
        try {
          var resolverFunctionArgs = [];
          if (field.fragment != null) {
            resolverFunctionArgs.push(fragmentKey);
          }
          var args = field.args ? getArgumentValues(field.args, variables) : void 0;
          resolverFunctionArgs.push(args);
          resolverResult = resolverFunction.apply(null, resolverFunctionArgs);
        } catch (e) {
          if (e === RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL) {
            resolverResult = void 0;
          } else {
            var _field$path;
            var path = (_field$path = field.path) !== null && _field$path !== void 0 ? _field$path : "[UNKNOWN]";
            resolverError = {
              field: {
                path,
                owner: ownerName
              },
              error: e
            };
          }
        }
        return [resolverResult, resolverError];
      }
      module2.exports = {
        read
      };
    }
  });

  // node_modules/relay-runtime/lib/store/RelayPublishQueue.js
  var require_RelayPublishQueue = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayPublishQueue.js"(exports2, module2) {
      "use strict";
      var _global$ErrorUtils$ap;
      var _global$ErrorUtils;
      var RelayRecordSourceMutator = require_RelayRecordSourceMutator();
      var RelayRecordSourceProxy = require_RelayRecordSourceProxy();
      var RelayRecordSourceSelectorProxy = require_RelayRecordSourceSelectorProxy();
      var RelayReader = require_RelayReader();
      var RelayRecordSource = require_RelayRecordSource();
      var invariant5 = require_browser();
      var warning6 = require_warning();
      var _global = typeof window !== "undefined" ? window : typeof window !== "undefined" ? window : void 0;
      var applyWithGuard = (_global$ErrorUtils$ap = _global === null || _global === void 0 ? void 0 : (_global$ErrorUtils = _global.ErrorUtils) === null || _global$ErrorUtils === void 0 ? void 0 : _global$ErrorUtils.applyWithGuard) !== null && _global$ErrorUtils$ap !== void 0 ? _global$ErrorUtils$ap : function(callback, context3, args, onError, name) {
        return callback.apply(context3, args);
      };
      var RelayPublishQueue = /* @__PURE__ */ function() {
        function RelayPublishQueue2(store, handlerProvider, getDataID) {
          this._hasStoreSnapshot = false;
          this._handlerProvider = handlerProvider || null;
          this._pendingBackupRebase = false;
          this._pendingData = /* @__PURE__ */ new Set();
          this._pendingOptimisticUpdates = /* @__PURE__ */ new Set();
          this._store = store;
          this._appliedOptimisticUpdates = /* @__PURE__ */ new Set();
          this._gcHold = null;
          this._getDataID = getDataID;
        }
        var _proto = RelayPublishQueue2.prototype;
        _proto.applyUpdate = function applyUpdate(updater) {
          !(!this._appliedOptimisticUpdates.has(updater) && !this._pendingOptimisticUpdates.has(updater)) ? true ? invariant5(false, "RelayPublishQueue: Cannot apply the same update function more than once concurrently.") : invariant5(false) : void 0;
          this._pendingOptimisticUpdates.add(updater);
        };
        _proto.revertUpdate = function revertUpdate(updater) {
          if (this._pendingOptimisticUpdates.has(updater)) {
            this._pendingOptimisticUpdates["delete"](updater);
          } else if (this._appliedOptimisticUpdates.has(updater)) {
            this._pendingBackupRebase = true;
            this._appliedOptimisticUpdates["delete"](updater);
          }
        };
        _proto.revertAll = function revertAll() {
          this._pendingBackupRebase = true;
          this._pendingOptimisticUpdates.clear();
          this._appliedOptimisticUpdates.clear();
        };
        _proto.commitPayload = function commitPayload(operation, payload, updater) {
          this._pendingBackupRebase = true;
          this._pendingData.add({
            kind: "payload",
            operation,
            payload,
            updater
          });
        };
        _proto.commitUpdate = function commitUpdate(updater) {
          this._pendingBackupRebase = true;
          this._pendingData.add({
            kind: "updater",
            updater
          });
        };
        _proto.commitSource = function commitSource(source2) {
          this._pendingBackupRebase = true;
          this._pendingData.add({
            kind: "source",
            source: source2
          });
        };
        _proto.run = function run(sourceOperation) {
          var runWillClearGcHold = this._appliedOptimisticUpdates === 0 && !!this._gcHold;
          var runIsANoop = !this._pendingBackupRebase && this._pendingOptimisticUpdates.size === 0 && !runWillClearGcHold;
          if (true) {
            true ? warning6(!runIsANoop, "RelayPublishQueue.run was called, but the call would have been a noop.") : void 0;
            true ? warning6(this._isRunning !== true, "A store update was detected within another store update. Please make sure new store updates aren't being executed within an updater function for a different update.") : void 0;
            this._isRunning = true;
          }
          if (runIsANoop) {
            if (true) {
              this._isRunning = false;
            }
            return [];
          }
          if (this._pendingBackupRebase) {
            if (this._hasStoreSnapshot) {
              this._store.restore();
              this._hasStoreSnapshot = false;
            }
          }
          var invalidatedStore = this._commitData();
          if (this._pendingOptimisticUpdates.size || this._pendingBackupRebase && this._appliedOptimisticUpdates.size) {
            if (!this._hasStoreSnapshot) {
              this._store.snapshot();
              this._hasStoreSnapshot = true;
            }
            this._applyUpdates();
          }
          this._pendingBackupRebase = false;
          if (this._appliedOptimisticUpdates.size > 0) {
            if (!this._gcHold) {
              this._gcHold = this._store.holdGC();
            }
          } else {
            if (this._gcHold) {
              this._gcHold.dispose();
              this._gcHold = null;
            }
          }
          if (true) {
            this._isRunning = false;
          }
          return this._store.notify(sourceOperation, invalidatedStore);
        };
        _proto._publishSourceFromPayload = function _publishSourceFromPayload(pendingPayload) {
          var _this = this;
          var payload = pendingPayload.payload, operation = pendingPayload.operation, updater = pendingPayload.updater;
          var source2 = payload.source, fieldPayloads = payload.fieldPayloads;
          var mutator = new RelayRecordSourceMutator(this._store.getSource(), source2);
          var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID);
          if (fieldPayloads && fieldPayloads.length) {
            fieldPayloads.forEach(function(fieldPayload) {
              var handler = _this._handlerProvider && _this._handlerProvider(fieldPayload.handle);
              !handler ? true ? invariant5(false, "RelayModernEnvironment: Expected a handler to be provided for handle `%s`.", fieldPayload.handle) : invariant5(false) : void 0;
              handler.update(recordSourceProxy, fieldPayload);
            });
          }
          if (updater) {
            var selector2 = operation.fragment;
            !(selector2 != null) ? true ? invariant5(false, "RelayModernEnvironment: Expected a selector to be provided with updater function.") : invariant5(false) : void 0;
            var recordSourceSelectorProxy = new RelayRecordSourceSelectorProxy(mutator, recordSourceProxy, selector2);
            var selectorData = lookupSelector(source2, selector2);
            updater(recordSourceSelectorProxy, selectorData);
          }
          var idsMarkedForInvalidation = recordSourceProxy.getIDsMarkedForInvalidation();
          this._store.publish(source2, idsMarkedForInvalidation);
          return recordSourceProxy.isStoreMarkedForInvalidation();
        };
        _proto._commitData = function _commitData() {
          var _this2 = this;
          if (!this._pendingData.size) {
            return false;
          }
          var invalidatedStore = false;
          this._pendingData.forEach(function(data) {
            if (data.kind === "payload") {
              var payloadInvalidatedStore = _this2._publishSourceFromPayload(data);
              invalidatedStore = invalidatedStore || payloadInvalidatedStore;
            } else if (data.kind === "source") {
              var source2 = data.source;
              _this2._store.publish(source2);
            } else {
              var updater = data.updater;
              var sink = RelayRecordSource.create();
              var mutator = new RelayRecordSourceMutator(_this2._store.getSource(), sink);
              var recordSourceProxy = new RelayRecordSourceProxy(mutator, _this2._getDataID);
              applyWithGuard(updater, null, [recordSourceProxy], null, "RelayPublishQueue:commitData");
              invalidatedStore = invalidatedStore || recordSourceProxy.isStoreMarkedForInvalidation();
              var idsMarkedForInvalidation = recordSourceProxy.getIDsMarkedForInvalidation();
              _this2._store.publish(sink, idsMarkedForInvalidation);
            }
          });
          this._pendingData.clear();
          return invalidatedStore;
        };
        _proto._applyUpdates = function _applyUpdates() {
          var _this3 = this;
          var sink = RelayRecordSource.create();
          var mutator = new RelayRecordSourceMutator(this._store.getSource(), sink);
          var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID, this._handlerProvider);
          var processUpdate = function processUpdate2(optimisticUpdate) {
            if (optimisticUpdate.storeUpdater) {
              var storeUpdater = optimisticUpdate.storeUpdater;
              applyWithGuard(storeUpdater, null, [recordSourceProxy], null, "RelayPublishQueue:applyUpdates");
            } else {
              var operation = optimisticUpdate.operation, payload = optimisticUpdate.payload, updater = optimisticUpdate.updater;
              var source2 = payload.source, fieldPayloads = payload.fieldPayloads;
              if (source2) {
                recordSourceProxy.publishSource(source2, fieldPayloads);
              }
              if (updater) {
                var selectorData;
                if (source2) {
                  selectorData = lookupSelector(source2, operation.fragment);
                }
                var recordSourceSelectorProxy = new RelayRecordSourceSelectorProxy(mutator, recordSourceProxy, operation.fragment);
                applyWithGuard(updater, null, [recordSourceSelectorProxy, selectorData], null, "RelayPublishQueue:applyUpdates");
              }
            }
          };
          if (this._pendingBackupRebase && this._appliedOptimisticUpdates.size) {
            this._appliedOptimisticUpdates.forEach(processUpdate);
          }
          if (this._pendingOptimisticUpdates.size) {
            this._pendingOptimisticUpdates.forEach(function(optimisticUpdate) {
              processUpdate(optimisticUpdate);
              _this3._appliedOptimisticUpdates.add(optimisticUpdate);
            });
            this._pendingOptimisticUpdates.clear();
          }
          this._store.publish(sink);
        };
        return RelayPublishQueue2;
      }();
      function lookupSelector(source2, selector2) {
        var selectorData = RelayReader.read(source2, selector2).data;
        if (true) {
          var deepFreeze = require_deepFreeze();
          if (selectorData) {
            deepFreeze(selectorData);
          }
        }
        return selectorData;
      }
      module2.exports = RelayPublishQueue;
    }
  });

  // node_modules/relay-runtime/lib/store/StoreInspector.js
  var require_StoreInspector = __commonJS({
    "node_modules/relay-runtime/lib/store/StoreInspector.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var _toConsumableArray22 = _interopRequireDefault(require_toConsumableArray());
      var inspect = function inspect2() {
      };
      if (true) {
        formattersInstalled = false;
        installDevtoolFormatters = function installDevtoolFormatters2() {
          var _window$devtoolsForma;
          if (formattersInstalled) {
            return;
          }
          formattersInstalled = true;
          if (window.devtoolsFormatters == null) {
            window.devtoolsFormatters = [];
          }
          if (!Array.isArray(window.devtoolsFormatters)) {
            return;
          }
          console.info('Make sure to select "Enable custom formatters" in the Chrome Developer Tools settings, tab "Preferences" under the "Console" section.');
          (_window$devtoolsForma = window.devtoolsFormatters).push.apply(_window$devtoolsForma, (0, _toConsumableArray22["default"])(createFormatters()));
        };
        createFormatters = function createFormatters2() {
          var listStyle = {
            style: "list-style-type: none; padding: 0; margin: 0 0 0 12px; font-style: normal"
          };
          var keyStyle = {
            style: "rgb(136, 19, 145)"
          };
          var nullStyle = {
            style: "color: #777"
          };
          var reference = function reference2(object2, config) {
            return object2 == null ? ["span", nullStyle, "undefined"] : ["object", {
              object: object2,
              config
            }];
          };
          var renderRecordHeader = function renderRecordHeader2(record) {
            return ["span", {
              style: "font-style: italic"
            }, record.__typename, ["span", nullStyle, ' {id: "', record.__id, '", \u2026}']];
          };
          var isRecord = function isRecord2(o) {
            return o != null && typeof o.__id === "string";
          };
          var RecordEntry = function RecordEntry2(key, value) {
            this.key = key;
            this.value = value;
          };
          var renderRecordEntries = function renderRecordEntries2(record) {
            var children2 = Object.keys(record).map(function(key) {
              return ["li", {}, ["object", {
                object: new RecordEntry(key, record[key])
              }]];
            });
            return ["ol", listStyle].concat((0, _toConsumableArray22["default"])(children2));
          };
          var recordFormatter = {
            header: function header(obj) {
              if (!isRecord(obj)) {
                return null;
              }
              return renderRecordHeader(obj);
            },
            hasBody: function hasBody(obj) {
              return true;
            },
            body: function body(obj) {
              return renderRecordEntries(obj);
            }
          };
          var recordEntryFormatter = {
            header: function header(obj) {
              if (obj instanceof RecordEntry) {
                var value = isRecord(obj.value) ? renderRecordHeader(obj.value) : reference(obj.value);
                return ["span", keyStyle, obj.key, ": ", value];
              }
              return null;
            },
            hasBody: function hasBody(obj) {
              return isRecord(obj.value);
            },
            body: function body(obj) {
              return renderRecordEntries(obj.value);
            }
          };
          return [recordFormatter, recordEntryFormatter];
        };
        getWrappedRecord = function getWrappedRecord2(source2, dataID) {
          var record = source2.get(dataID);
          if (record == null) {
            return record;
          }
          return new Proxy((0, _objectSpread28["default"])({}, record), {
            get: function get2(target, prop) {
              var value = target[prop];
              if (value == null) {
                return value;
              }
              if (typeof value === "object") {
                if (typeof value.__ref === "string") {
                  return getWrappedRecord2(source2, value.__ref);
                }
                if (Array.isArray(value.__refs)) {
                  return value.__refs.map(function(ref) {
                    return getWrappedRecord2(source2, ref);
                  });
                }
              }
              return value;
            }
          });
        };
        inspect = function inspect2(environment, dataID) {
          installDevtoolFormatters();
          return getWrappedRecord(environment.getStore().getSource(), dataID !== null && dataID !== void 0 ? dataID : "client:root");
        };
      }
      var formattersInstalled;
      var installDevtoolFormatters;
      var createFormatters;
      var getWrappedRecord;
      module2.exports = {
        inspect
      };
    }
  });

  // node_modules/relay-runtime/lib/store/RelayModernEnvironment.js
  var require_RelayModernEnvironment = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayModernEnvironment.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var RelayDefaultHandlerProvider = require_RelayDefaultHandlerProvider();
      var _require = require_ActorIdentifier();
      var INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE = _require.INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE;
      var assertInternalActorIndentifier = _require.assertInternalActorIndentifier;
      var RelayObservable = require_RelayObservable();
      var wrapNetworkWithLogObserver = require_wrapNetworkWithLogObserver();
      var RelayOperationTracker = require_RelayOperationTracker();
      var registerEnvironmentWithDevTools = require_registerEnvironmentWithDevTools();
      var RelayFeatureFlags = require_RelayFeatureFlags();
      var defaultGetDataID = require_defaultGetDataID();
      var defaultRequiredFieldLogger = require_defaultRequiredFieldLogger();
      var OperationExecutor = require_OperationExecutor();
      var RelayPublishQueue = require_RelayPublishQueue();
      var RelayRecordSource = require_RelayRecordSource();
      var invariant5 = require_browser();
      var RelayModernEnvironment = /* @__PURE__ */ function() {
        function RelayModernEnvironment2(config) {
          var _this = this;
          var _config$log, _config$requiredField, _config$UNSTABLE_defa, _config$getDataID, _config$handlerProvid, _config$scheduler, _config$isServer, _config$operationTrac;
          this.configName = config.configName;
          this._treatMissingFieldsAsNull = config.treatMissingFieldsAsNull === true;
          var operationLoader = config.operationLoader;
          var reactFlightPayloadDeserializer = config.reactFlightPayloadDeserializer;
          var reactFlightServerErrorHandler = config.reactFlightServerErrorHandler;
          if (true) {
            if (operationLoader != null) {
              !(typeof operationLoader === "object" && typeof operationLoader.get === "function" && typeof operationLoader.load === "function") ? true ? invariant5(false, "RelayModernEnvironment: Expected `operationLoader` to be an object with get() and load() functions, got `%s`.", operationLoader) : invariant5(false) : void 0;
            }
            if (reactFlightPayloadDeserializer != null) {
              !(typeof reactFlightPayloadDeserializer === "function") ? true ? invariant5(false, "RelayModernEnvironment: Expected `reactFlightPayloadDeserializer`  to be a function, got `%s`.", reactFlightPayloadDeserializer) : invariant5(false) : void 0;
            }
          }
          this.__log = (_config$log = config.log) !== null && _config$log !== void 0 ? _config$log : emptyFunction;
          this.requiredFieldLogger = (_config$requiredField = config.requiredFieldLogger) !== null && _config$requiredField !== void 0 ? _config$requiredField : defaultRequiredFieldLogger;
          this._defaultRenderPolicy = ((_config$UNSTABLE_defa = config.UNSTABLE_defaultRenderPolicy) !== null && _config$UNSTABLE_defa !== void 0 ? _config$UNSTABLE_defa : RelayFeatureFlags.ENABLE_PARTIAL_RENDERING_DEFAULT === true) ? "partial" : "full";
          this._operationLoader = operationLoader;
          this._operationExecutions = /* @__PURE__ */ new Map();
          this._network = wrapNetworkWithLogObserver(this, config.network);
          this._getDataID = (_config$getDataID = config.getDataID) !== null && _config$getDataID !== void 0 ? _config$getDataID : defaultGetDataID;
          this._publishQueue = new RelayPublishQueue(config.store, (_config$handlerProvid = config.handlerProvider) !== null && _config$handlerProvid !== void 0 ? _config$handlerProvid : RelayDefaultHandlerProvider, this._getDataID);
          this._scheduler = (_config$scheduler = config.scheduler) !== null && _config$scheduler !== void 0 ? _config$scheduler : null;
          this._store = config.store;
          this.options = config.options;
          this._isServer = (_config$isServer = config.isServer) !== null && _config$isServer !== void 0 ? _config$isServer : false;
          this.__setNet = function(newNet) {
            return _this._network = wrapNetworkWithLogObserver(_this, newNet);
          };
          if (true) {
            var _require2 = require_StoreInspector(), inspect = _require2.inspect;
            this.DEBUG_inspect = function(dataID) {
              return inspect(_this, dataID);
            };
          }
          this._missingFieldHandlers = config.missingFieldHandlers;
          this._operationTracker = (_config$operationTrac = config.operationTracker) !== null && _config$operationTrac !== void 0 ? _config$operationTrac : new RelayOperationTracker();
          this._reactFlightPayloadDeserializer = reactFlightPayloadDeserializer;
          this._reactFlightServerErrorHandler = reactFlightServerErrorHandler;
          this._shouldProcessClientComponents = config.shouldProcessClientComponents;
          registerEnvironmentWithDevTools(this);
        }
        var _proto = RelayModernEnvironment2.prototype;
        _proto.getStore = function getStore() {
          return this._store;
        };
        _proto.getNetwork = function getNetwork() {
          return this._network;
        };
        _proto.getOperationTracker = function getOperationTracker() {
          return this._operationTracker;
        };
        _proto.isRequestActive = function isRequestActive(requestIdentifier) {
          var activeState = this._operationExecutions.get(requestIdentifier);
          return activeState === "active";
        };
        _proto.UNSTABLE_getDefaultRenderPolicy = function UNSTABLE_getDefaultRenderPolicy() {
          return this._defaultRenderPolicy;
        };
        _proto.applyUpdate = function applyUpdate(optimisticUpdate) {
          var _this2 = this;
          var dispose = function dispose2() {
            _this2._scheduleUpdates(function() {
              _this2._publishQueue.revertUpdate(optimisticUpdate);
              _this2._publishQueue.run();
            });
          };
          this._scheduleUpdates(function() {
            _this2._publishQueue.applyUpdate(optimisticUpdate);
            _this2._publishQueue.run();
          });
          return {
            dispose
          };
        };
        _proto.revertUpdate = function revertUpdate(update2) {
          var _this3 = this;
          this._scheduleUpdates(function() {
            _this3._publishQueue.revertUpdate(update2);
            _this3._publishQueue.run();
          });
        };
        _proto.replaceUpdate = function replaceUpdate(update2, newUpdate) {
          var _this4 = this;
          this._scheduleUpdates(function() {
            _this4._publishQueue.revertUpdate(update2);
            _this4._publishQueue.applyUpdate(newUpdate);
            _this4._publishQueue.run();
          });
        };
        _proto.applyMutation = function applyMutation(optimisticConfig) {
          var subscription = this._execute({
            createSource: function createSource2() {
              return RelayObservable.create(function(_sink) {
              });
            },
            isClientPayload: false,
            operation: optimisticConfig.operation,
            optimisticConfig,
            updater: null
          }).subscribe({});
          return {
            dispose: function dispose() {
              return subscription.unsubscribe();
            }
          };
        };
        _proto.check = function check(operation) {
          if (this._missingFieldHandlers == null || this._missingFieldHandlers.length === 0) {
            return this._store.check(operation);
          }
          return this._checkSelectorAndHandleMissingFields(operation, this._missingFieldHandlers);
        };
        _proto.commitPayload = function commitPayload(operation, payload) {
          this._execute({
            createSource: function createSource2() {
              return RelayObservable.from({
                data: payload
              });
            },
            isClientPayload: true,
            operation,
            optimisticConfig: null,
            updater: null
          }).subscribe({});
        };
        _proto.commitUpdate = function commitUpdate(updater) {
          var _this5 = this;
          this._scheduleUpdates(function() {
            _this5._publishQueue.commitUpdate(updater);
            _this5._publishQueue.run();
          });
        };
        _proto.lookup = function lookup(readSelector) {
          return this._store.lookup(readSelector);
        };
        _proto.subscribe = function subscribe(snapshot, callback) {
          return this._store.subscribe(snapshot, callback);
        };
        _proto.retain = function retain(operation) {
          return this._store.retain(operation);
        };
        _proto.isServer = function isServer() {
          return this._isServer;
        };
        _proto._checkSelectorAndHandleMissingFields = function _checkSelectorAndHandleMissingFields(operation, handlers) {
          var _this6 = this;
          var target = RelayRecordSource.create();
          var source2 = this._store.getSource();
          var result = this._store.check(operation, {
            handlers,
            defaultActorIdentifier: INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE,
            getSourceForActor: function getSourceForActor(actorIdentifier) {
              assertInternalActorIndentifier(actorIdentifier);
              return source2;
            },
            getTargetForActor: function getTargetForActor(actorIdentifier) {
              assertInternalActorIndentifier(actorIdentifier);
              return target;
            }
          });
          if (target.size() > 0) {
            this._scheduleUpdates(function() {
              _this6._publishQueue.commitSource(target);
              _this6._publishQueue.run();
            });
          }
          return result;
        };
        _proto._scheduleUpdates = function _scheduleUpdates(task) {
          var scheduler = this._scheduler;
          if (scheduler != null) {
            scheduler.schedule(task);
          } else {
            task();
          }
        };
        _proto.execute = function execute(_ref2) {
          var _this7 = this;
          var operation = _ref2.operation;
          return this._execute({
            createSource: function createSource2() {
              return _this7.getNetwork().execute(operation.request.node.params, operation.request.variables, operation.request.cacheConfig || {}, null);
            },
            isClientPayload: false,
            operation,
            optimisticConfig: null,
            updater: null
          });
        };
        _proto.executeSubscription = function executeSubscription(_ref2) {
          var _this8 = this;
          var operation = _ref2.operation, updater = _ref2.updater;
          return this._execute({
            createSource: function createSource2() {
              return _this8.getNetwork().execute(operation.request.node.params, operation.request.variables, operation.request.cacheConfig || {}, null);
            },
            isClientPayload: false,
            operation,
            optimisticConfig: null,
            updater
          });
        };
        _proto.executeMutation = function executeMutation(_ref3) {
          var _this9 = this;
          var operation = _ref3.operation, optimisticResponse = _ref3.optimisticResponse, optimisticUpdater = _ref3.optimisticUpdater, updater = _ref3.updater, uploadables = _ref3.uploadables;
          var optimisticConfig;
          if (optimisticResponse || optimisticUpdater) {
            optimisticConfig = {
              operation,
              response: optimisticResponse,
              updater: optimisticUpdater
            };
          }
          return this._execute({
            createSource: function createSource2() {
              return _this9.getNetwork().execute(operation.request.node.params, operation.request.variables, (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, operation.request.cacheConfig), {}, {
                force: true
              }), uploadables);
            },
            isClientPayload: false,
            operation,
            optimisticConfig,
            updater
          });
        };
        _proto.executeWithSource = function executeWithSource(_ref4) {
          var operation = _ref4.operation, source2 = _ref4.source;
          return this._execute({
            createSource: function createSource2() {
              return source2;
            },
            isClientPayload: false,
            operation,
            optimisticConfig: null,
            updater: null
          });
        };
        _proto.toJSON = function toJSON() {
          var _this$configName;
          return "RelayModernEnvironment(".concat((_this$configName = this.configName) !== null && _this$configName !== void 0 ? _this$configName : "", ")");
        };
        _proto._execute = function _execute(_ref5) {
          var _this10 = this;
          var createSource2 = _ref5.createSource, isClientPayload = _ref5.isClientPayload, operation = _ref5.operation, optimisticConfig = _ref5.optimisticConfig, updater = _ref5.updater;
          var publishQueue = this._publishQueue;
          var store = this._store;
          return RelayObservable.create(function(sink) {
            var executor = OperationExecutor.execute({
              actorIdentifier: INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE,
              getDataID: _this10._getDataID,
              isClientPayload,
              log: _this10.__log,
              operation,
              operationExecutions: _this10._operationExecutions,
              operationLoader: _this10._operationLoader,
              operationTracker: _this10._operationTracker,
              optimisticConfig,
              getPublishQueue: function getPublishQueue(actorIdentifier) {
                assertInternalActorIndentifier(actorIdentifier);
                return publishQueue;
              },
              reactFlightPayloadDeserializer: _this10._reactFlightPayloadDeserializer,
              reactFlightServerErrorHandler: _this10._reactFlightServerErrorHandler,
              scheduler: _this10._scheduler,
              shouldProcessClientComponents: _this10._shouldProcessClientComponents,
              sink,
              source: createSource2(),
              getStore: function getStore(actorIdentifier) {
                assertInternalActorIndentifier(actorIdentifier);
                return store;
              },
              treatMissingFieldsAsNull: _this10._treatMissingFieldsAsNull,
              updater
            });
            return function() {
              return executor.cancel();
            };
          });
        };
        return RelayModernEnvironment2;
      }();
      RelayModernEnvironment.prototype["@@RelayModernEnvironment"] = true;
      function emptyFunction() {
      }
      module2.exports = RelayModernEnvironment;
    }
  });

  // node_modules/relay-runtime/lib/util/resolveImmediate.js
  var require_resolveImmediate = __commonJS({
    "node_modules/relay-runtime/lib/util/resolveImmediate.js"(exports2, module2) {
      "use strict";
      var resolvedPromise = Promise.resolve();
      function resolveImmediate(callback) {
        resolvedPromise.then(callback)["catch"](throwNext);
      }
      function throwNext(error) {
        setTimeout(function() {
          throw error;
        }, 0);
      }
      module2.exports = resolveImmediate;
    }
  });

  // node_modules/relay-runtime/lib/store/cloneRelayHandleSourceField.js
  var require_cloneRelayHandleSourceField = __commonJS({
    "node_modules/relay-runtime/lib/store/cloneRelayHandleSourceField.js"(exports2, module2) {
      "use strict";
      var _require = require_RelayConcreteNode();
      var LINKED_FIELD = _require.LINKED_FIELD;
      var _require2 = require_RelayStoreUtils();
      var getHandleStorageKey = _require2.getHandleStorageKey;
      var areEqual = require_areEqual();
      var invariant5 = require_browser();
      function cloneRelayHandleSourceField(handleField, selections, variables) {
        var sourceField = selections.find(function(source2) {
          return source2.kind === LINKED_FIELD && source2.name === handleField.name && source2.alias === handleField.alias && areEqual(source2.args, handleField.args);
        });
        !(sourceField && sourceField.kind === LINKED_FIELD) ? true ? invariant5(false, "cloneRelayHandleSourceField: Expected a corresponding source field for handle `%s`.", handleField.handle) : invariant5(false) : void 0;
        var handleKey = getHandleStorageKey(handleField, variables);
        return {
          kind: "LinkedField",
          alias: sourceField.alias,
          name: handleKey,
          storageKey: handleKey,
          args: null,
          concreteType: sourceField.concreteType,
          plural: sourceField.plural,
          selections: sourceField.selections
        };
      }
      module2.exports = cloneRelayHandleSourceField;
    }
  });

  // node_modules/relay-runtime/lib/store/cloneRelayScalarHandleSourceField.js
  var require_cloneRelayScalarHandleSourceField = __commonJS({
    "node_modules/relay-runtime/lib/store/cloneRelayScalarHandleSourceField.js"(exports2, module2) {
      "use strict";
      var _require = require_RelayConcreteNode();
      var SCALAR_FIELD = _require.SCALAR_FIELD;
      var _require2 = require_RelayStoreUtils();
      var getHandleStorageKey = _require2.getHandleStorageKey;
      var areEqual = require_areEqual();
      var invariant5 = require_browser();
      function cloneRelayScalarHandleSourceField(handleField, selections, variables) {
        var sourceField = selections.find(function(source2) {
          return source2.kind === SCALAR_FIELD && source2.name === handleField.name && source2.alias === handleField.alias && areEqual(source2.args, handleField.args);
        });
        !(sourceField && sourceField.kind === SCALAR_FIELD) ? true ? invariant5(false, "cloneRelayScalarHandleSourceField: Expected a corresponding source field for handle `%s`.", handleField.handle) : invariant5(false) : void 0;
        var handleKey = getHandleStorageKey(handleField, variables);
        return {
          kind: "ScalarField",
          alias: sourceField.alias,
          name: handleKey,
          storageKey: handleKey,
          args: null
        };
      }
      module2.exports = cloneRelayScalarHandleSourceField;
    }
  });

  // node_modules/relay-runtime/lib/store/DataChecker.js
  var require_DataChecker = __commonJS({
    "node_modules/relay-runtime/lib/store/DataChecker.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      var RelayRecordSourceMutator = require_RelayRecordSourceMutator();
      var RelayRecordSourceProxy = require_RelayRecordSourceProxy();
      var getOperation = require_getOperation();
      var RelayConcreteNode = require_RelayConcreteNode();
      var RelayFeatureFlags = require_RelayFeatureFlags();
      var _require = require_ClientID();
      var isClientID = _require.isClientID;
      var cloneRelayHandleSourceField = require_cloneRelayHandleSourceField();
      var cloneRelayScalarHandleSourceField = require_cloneRelayScalarHandleSourceField();
      var _require2 = require_RelayConcreteVariables();
      var getLocalVariables = _require2.getLocalVariables;
      var RelayModernRecord = require_RelayModernRecord();
      var _require3 = require_RelayRecordState();
      var EXISTENT = _require3.EXISTENT;
      var UNKNOWN = _require3.UNKNOWN;
      var RelayStoreReactFlightUtils = require_RelayStoreReactFlightUtils();
      var RelayStoreUtils = require_RelayStoreUtils();
      var _require4 = require_TypeID();
      var generateTypeID = _require4.generateTypeID;
      var invariant5 = require_browser();
      var ACTOR_CHANGE = RelayConcreteNode.ACTOR_CHANGE;
      var CONDITION = RelayConcreteNode.CONDITION;
      var CLIENT_COMPONENT = RelayConcreteNode.CLIENT_COMPONENT;
      var CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION;
      var DEFER = RelayConcreteNode.DEFER;
      var FLIGHT_FIELD = RelayConcreteNode.FLIGHT_FIELD;
      var FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD;
      var INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT;
      var LINKED_FIELD = RelayConcreteNode.LINKED_FIELD;
      var LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE;
      var MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT;
      var SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD;
      var SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE;
      var STREAM = RelayConcreteNode.STREAM;
      var TYPE_DISCRIMINATOR = RelayConcreteNode.TYPE_DISCRIMINATOR;
      var ROOT_ID = RelayStoreUtils.ROOT_ID;
      var getModuleOperationKey = RelayStoreUtils.getModuleOperationKey;
      var getStorageKey = RelayStoreUtils.getStorageKey;
      var getArgumentValues = RelayStoreUtils.getArgumentValues;
      function check(getSourceForActor, getTargetForActor, defaultActorIdentifier, selector2, handlers, operationLoader, getDataID, shouldProcessClientComponents) {
        var dataID = selector2.dataID, node5 = selector2.node, variables = selector2.variables;
        var checker = new DataChecker(getSourceForActor, getTargetForActor, defaultActorIdentifier, variables, handlers, operationLoader, getDataID, shouldProcessClientComponents);
        return checker.check(node5, dataID);
      }
      var DataChecker = /* @__PURE__ */ function() {
        function DataChecker2(getSourceForActor, getTargetForActor, defaultActorIdentifier, variables, handlers, operationLoader, getDataID, shouldProcessClientComponents) {
          this._getSourceForActor = getSourceForActor;
          this._getTargetForActor = getTargetForActor;
          this._getDataID = getDataID;
          this._source = getSourceForActor(defaultActorIdentifier);
          this._mutatorRecordSourceProxyCache = /* @__PURE__ */ new Map();
          var _this$_getMutatorAndR = this._getMutatorAndRecordProxyForActor(defaultActorIdentifier), mutator = _this$_getMutatorAndR[0], recordSourceProxy = _this$_getMutatorAndR[1];
          this._mostRecentlyInvalidatedAt = null;
          this._handlers = handlers;
          this._mutator = mutator;
          this._operationLoader = operationLoader !== null && operationLoader !== void 0 ? operationLoader : null;
          this._recordSourceProxy = recordSourceProxy;
          this._recordWasMissing = false;
          this._variables = variables;
          this._shouldProcessClientComponents = shouldProcessClientComponents;
        }
        var _proto = DataChecker2.prototype;
        _proto._getMutatorAndRecordProxyForActor = function _getMutatorAndRecordProxyForActor(actorIdentifier) {
          var tuple = this._mutatorRecordSourceProxyCache.get(actorIdentifier);
          if (tuple == null) {
            var target = this._getTargetForActor(actorIdentifier);
            var mutator = new RelayRecordSourceMutator(this._getSourceForActor(actorIdentifier), target);
            var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID);
            tuple = [mutator, recordSourceProxy];
            this._mutatorRecordSourceProxyCache.set(actorIdentifier, tuple);
          }
          return tuple;
        };
        _proto.check = function check2(node5, dataID) {
          this._traverse(node5, dataID);
          return this._recordWasMissing === true ? {
            status: "missing",
            mostRecentlyInvalidatedAt: this._mostRecentlyInvalidatedAt
          } : {
            status: "available",
            mostRecentlyInvalidatedAt: this._mostRecentlyInvalidatedAt
          };
        };
        _proto._getVariableValue = function _getVariableValue(name) {
          !this._variables.hasOwnProperty(name) ? true ? invariant5(false, "RelayAsyncLoader(): Undefined variable `%s`.", name) : invariant5(false) : void 0;
          return this._variables[name];
        };
        _proto._handleMissing = function _handleMissing() {
          this._recordWasMissing = true;
        };
        _proto._getDataForHandlers = function _getDataForHandlers(field, dataID) {
          return {
            args: field.args ? getArgumentValues(field.args, this._variables) : {},
            record: this._source.get(dataID)
          };
        };
        _proto._handleMissingScalarField = function _handleMissingScalarField(field, dataID) {
          if (field.name === "id" && field.alias == null && isClientID(dataID)) {
            return void 0;
          }
          var _this$_getDataForHand = this._getDataForHandlers(field, dataID), args = _this$_getDataForHand.args, record = _this$_getDataForHand.record;
          var _iterator = (0, _createForOfIteratorHelper2["default"])(this._handlers), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var handler = _step.value;
              if (handler.kind === "scalar") {
                var newValue = handler.handle(field, record, args, this._recordSourceProxy);
                if (newValue !== void 0) {
                  return newValue;
                }
              }
            }
          } catch (err2) {
            _iterator.e(err2);
          } finally {
            _iterator.f();
          }
          this._handleMissing();
        };
        _proto._handleMissingLinkField = function _handleMissingLinkField(field, dataID) {
          var _this$_getDataForHand2 = this._getDataForHandlers(field, dataID), args = _this$_getDataForHand2.args, record = _this$_getDataForHand2.record;
          var _iterator2 = (0, _createForOfIteratorHelper2["default"])(this._handlers), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var handler = _step2.value;
              if (handler.kind === "linked") {
                var newValue = handler.handle(field, record, args, this._recordSourceProxy);
                if (newValue !== void 0 && (newValue === null || this._mutator.getStatus(newValue) === EXISTENT)) {
                  return newValue;
                }
              }
            }
          } catch (err2) {
            _iterator2.e(err2);
          } finally {
            _iterator2.f();
          }
          this._handleMissing();
        };
        _proto._handleMissingPluralLinkField = function _handleMissingPluralLinkField(field, dataID) {
          var _this = this;
          var _this$_getDataForHand3 = this._getDataForHandlers(field, dataID), args = _this$_getDataForHand3.args, record = _this$_getDataForHand3.record;
          var _iterator3 = (0, _createForOfIteratorHelper2["default"])(this._handlers), _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
              var handler = _step3.value;
              if (handler.kind === "pluralLinked") {
                var newValue = handler.handle(field, record, args, this._recordSourceProxy);
                if (newValue != null) {
                  var allItemsKnown = newValue.every(function(linkedID) {
                    return linkedID != null && _this._mutator.getStatus(linkedID) === EXISTENT;
                  });
                  if (allItemsKnown) {
                    return newValue;
                  }
                } else if (newValue === null) {
                  return null;
                }
              }
            }
          } catch (err2) {
            _iterator3.e(err2);
          } finally {
            _iterator3.f();
          }
          this._handleMissing();
        };
        _proto._traverse = function _traverse(node5, dataID) {
          var status = this._mutator.getStatus(dataID);
          if (status === UNKNOWN) {
            this._handleMissing();
          }
          if (status === EXISTENT) {
            var record = this._source.get(dataID);
            var invalidatedAt = RelayModernRecord.getInvalidationEpoch(record);
            if (invalidatedAt != null) {
              this._mostRecentlyInvalidatedAt = this._mostRecentlyInvalidatedAt != null ? Math.max(this._mostRecentlyInvalidatedAt, invalidatedAt) : invalidatedAt;
            }
            this._traverseSelections(node5.selections, dataID);
          }
        };
        _proto._traverseSelections = function _traverseSelections(selections, dataID) {
          var _this2 = this;
          selections.forEach(function(selection) {
            switch (selection.kind) {
              case SCALAR_FIELD:
                _this2._checkScalar(selection, dataID);
                break;
              case LINKED_FIELD:
                if (selection.plural) {
                  _this2._checkPluralLink(selection, dataID);
                } else {
                  _this2._checkLink(selection, dataID);
                }
                break;
              case ACTOR_CHANGE:
                _this2._checkActorChange(selection.linkedField, dataID);
                break;
              case CONDITION:
                var conditionValue = Boolean(_this2._getVariableValue(selection.condition));
                if (conditionValue === selection.passingValue) {
                  _this2._traverseSelections(selection.selections, dataID);
                }
                break;
              case INLINE_FRAGMENT: {
                var _abstractKey = selection.abstractKey;
                if (_abstractKey == null) {
                  var typeName = _this2._mutator.getType(dataID);
                  if (typeName === selection.type) {
                    _this2._traverseSelections(selection.selections, dataID);
                  }
                } else {
                  var _recordType = _this2._mutator.getType(dataID);
                  !(_recordType != null) ? true ? invariant5(false, "DataChecker: Expected record `%s` to have a known type", dataID) : invariant5(false) : void 0;
                  var _typeID = generateTypeID(_recordType);
                  var _implementsInterface = _this2._mutator.getValue(_typeID, _abstractKey);
                  if (_implementsInterface === true) {
                    _this2._traverseSelections(selection.selections, dataID);
                  } else if (_implementsInterface == null) {
                    _this2._handleMissing();
                  }
                }
                break;
              }
              case LINKED_HANDLE: {
                var handleField = cloneRelayHandleSourceField(selection, selections, _this2._variables);
                if (handleField.plural) {
                  _this2._checkPluralLink(handleField, dataID);
                } else {
                  _this2._checkLink(handleField, dataID);
                }
                break;
              }
              case SCALAR_HANDLE: {
                var _handleField = cloneRelayScalarHandleSourceField(selection, selections, _this2._variables);
                _this2._checkScalar(_handleField, dataID);
                break;
              }
              case MODULE_IMPORT:
                _this2._checkModuleImport(selection, dataID);
                break;
              case DEFER:
              case STREAM:
                _this2._traverseSelections(selection.selections, dataID);
                break;
              case FRAGMENT_SPREAD:
                var prevVariables = _this2._variables;
                _this2._variables = getLocalVariables(_this2._variables, selection.fragment.argumentDefinitions, selection.args);
                _this2._traverseSelections(selection.fragment.selections, dataID);
                _this2._variables = prevVariables;
                break;
              case CLIENT_EXTENSION:
                var recordWasMissing = _this2._recordWasMissing;
                _this2._traverseSelections(selection.selections, dataID);
                _this2._recordWasMissing = recordWasMissing;
                break;
              case TYPE_DISCRIMINATOR:
                var abstractKey = selection.abstractKey;
                var recordType = _this2._mutator.getType(dataID);
                !(recordType != null) ? true ? invariant5(false, "DataChecker: Expected record `%s` to have a known type", dataID) : invariant5(false) : void 0;
                var typeID = generateTypeID(recordType);
                var implementsInterface = _this2._mutator.getValue(typeID, abstractKey);
                if (implementsInterface == null) {
                  _this2._handleMissing();
                }
                break;
              case FLIGHT_FIELD:
                if (RelayFeatureFlags.ENABLE_REACT_FLIGHT_COMPONENT_FIELD) {
                  _this2._checkFlightField(selection, dataID);
                } else {
                  throw new Error("Flight fields are not yet supported.");
                }
                break;
              case CLIENT_COMPONENT:
                if (_this2._shouldProcessClientComponents === false) {
                  break;
                }
                _this2._traverseSelections(selection.fragment.selections, dataID);
                break;
              default:
                selection;
                true ? true ? invariant5(false, "RelayAsyncLoader(): Unexpected ast kind `%s`.", selection.kind) : invariant5(false) : void 0;
            }
          });
        };
        _proto._checkModuleImport = function _checkModuleImport(moduleImport, dataID) {
          var operationLoader = this._operationLoader;
          !(operationLoader !== null) ? true ? invariant5(false, "DataChecker: Expected an operationLoader to be configured when using `@module`.") : invariant5(false) : void 0;
          var operationKey = getModuleOperationKey(moduleImport.documentName);
          var operationReference = this._mutator.getValue(dataID, operationKey);
          if (operationReference == null) {
            if (operationReference === void 0) {
              this._handleMissing();
            }
            return;
          }
          var normalizationRootNode = operationLoader.get(operationReference);
          if (normalizationRootNode != null) {
            var operation = getOperation(normalizationRootNode);
            var prevVariables = this._variables;
            this._variables = getLocalVariables(this._variables, operation.argumentDefinitions, moduleImport.args);
            this._traverse(operation, dataID);
            this._variables = prevVariables;
          } else {
            this._handleMissing();
          }
        };
        _proto._checkScalar = function _checkScalar(field, dataID) {
          var storageKey = getStorageKey(field, this._variables);
          var fieldValue = this._mutator.getValue(dataID, storageKey);
          if (fieldValue === void 0) {
            fieldValue = this._handleMissingScalarField(field, dataID);
            if (fieldValue !== void 0) {
              this._mutator.setValue(dataID, storageKey, fieldValue);
            }
          }
        };
        _proto._checkLink = function _checkLink(field, dataID) {
          var storageKey = getStorageKey(field, this._variables);
          var linkedID = this._mutator.getLinkedRecordID(dataID, storageKey);
          if (linkedID === void 0) {
            linkedID = this._handleMissingLinkField(field, dataID);
            if (linkedID != null) {
              this._mutator.setLinkedRecordID(dataID, storageKey, linkedID);
            } else if (linkedID === null) {
              this._mutator.setValue(dataID, storageKey, null);
            }
          }
          if (linkedID != null) {
            this._traverse(field, linkedID);
          }
        };
        _proto._checkPluralLink = function _checkPluralLink(field, dataID) {
          var _this3 = this;
          var storageKey = getStorageKey(field, this._variables);
          var linkedIDs = this._mutator.getLinkedRecordIDs(dataID, storageKey);
          if (linkedIDs === void 0) {
            linkedIDs = this._handleMissingPluralLinkField(field, dataID);
            if (linkedIDs != null) {
              this._mutator.setLinkedRecordIDs(dataID, storageKey, linkedIDs);
            } else if (linkedIDs === null) {
              this._mutator.setValue(dataID, storageKey, null);
            }
          }
          if (linkedIDs) {
            linkedIDs.forEach(function(linkedID) {
              if (linkedID != null) {
                _this3._traverse(field, linkedID);
              }
            });
          }
        };
        _proto._checkActorChange = function _checkActorChange(field, dataID) {
          var storageKey = getStorageKey(field, this._variables);
          var record = this._source.get(dataID);
          var tuple = record != null ? RelayModernRecord.getActorLinkedRecordID(record, storageKey) : record;
          if (tuple == null) {
            if (tuple === void 0) {
              this._handleMissing();
            }
          } else {
            var actorIdentifier = tuple[0], linkedID = tuple[1];
            var prevSource = this._source;
            var prevMutator = this._mutator;
            var prevRecordSourceProxy = this._recordSourceProxy;
            var _this$_getMutatorAndR2 = this._getMutatorAndRecordProxyForActor(actorIdentifier), mutator = _this$_getMutatorAndR2[0], recordSourceProxy = _this$_getMutatorAndR2[1];
            this._source = this._getSourceForActor(actorIdentifier);
            this._mutator = mutator;
            this._recordSourceProxy = recordSourceProxy;
            this._traverse(field, linkedID);
            this._source = prevSource;
            this._mutator = prevMutator;
            this._recordSourceProxy = prevRecordSourceProxy;
          }
        };
        _proto._checkFlightField = function _checkFlightField(field, dataID) {
          var storageKey = getStorageKey(field, this._variables);
          var linkedID = this._mutator.getLinkedRecordID(dataID, storageKey);
          if (linkedID == null) {
            if (linkedID === void 0) {
              this._handleMissing();
              return;
            }
            return;
          }
          var tree = this._mutator.getValue(linkedID, RelayStoreReactFlightUtils.REACT_FLIGHT_TREE_STORAGE_KEY);
          var reachableExecutableDefinitions = this._mutator.getValue(linkedID, RelayStoreReactFlightUtils.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY);
          if (tree == null || !Array.isArray(reachableExecutableDefinitions)) {
            this._handleMissing();
            return;
          }
          var operationLoader = this._operationLoader;
          !(operationLoader !== null) ? true ? invariant5(false, "DataChecker: Expected an operationLoader to be configured when using React Flight.") : invariant5(false) : void 0;
          var prevVariables = this._variables;
          var _iterator4 = (0, _createForOfIteratorHelper2["default"])(reachableExecutableDefinitions), _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
              var definition = _step4.value;
              this._variables = definition.variables;
              var normalizationRootNode = operationLoader.get(definition.module);
              if (normalizationRootNode != null) {
                var operation = getOperation(normalizationRootNode);
                this._traverseSelections(operation.selections, ROOT_ID);
              } else {
                this._handleMissing();
              }
            }
          } catch (err2) {
            _iterator4.e(err2);
          } finally {
            _iterator4.f();
          }
          this._variables = prevVariables;
        };
        return DataChecker2;
      }();
      module2.exports = {
        check
      };
    }
  });

  // node_modules/relay-runtime/lib/store/RelayOptimisticRecordSource.js
  var require_RelayOptimisticRecordSource = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayOptimisticRecordSource.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var RelayRecordSource = require_RelayRecordSource();
      var invariant5 = require_browser();
      var UNPUBLISH_RECORD_SENTINEL = Object.freeze({
        __UNPUBLISH_RECORD_SENTINEL: true
      });
      var RelayOptimisticRecordSource = /* @__PURE__ */ function() {
        function RelayOptimisticRecordSource2(base) {
          this._base = base;
          this._sink = RelayRecordSource.create();
        }
        var _proto = RelayOptimisticRecordSource2.prototype;
        _proto.has = function has2(dataID) {
          if (this._sink.has(dataID)) {
            var sinkRecord = this._sink.get(dataID);
            return sinkRecord !== UNPUBLISH_RECORD_SENTINEL;
          } else {
            return this._base.has(dataID);
          }
        };
        _proto.get = function get2(dataID) {
          if (this._sink.has(dataID)) {
            var sinkRecord = this._sink.get(dataID);
            if (sinkRecord === UNPUBLISH_RECORD_SENTINEL) {
              return void 0;
            } else {
              return sinkRecord;
            }
          } else {
            return this._base.get(dataID);
          }
        };
        _proto.getStatus = function getStatus(dataID) {
          var record = this.get(dataID);
          if (record === void 0) {
            return "UNKNOWN";
          } else if (record === null) {
            return "NONEXISTENT";
          } else {
            return "EXISTENT";
          }
        };
        _proto.clear = function clear() {
          this._base = RelayRecordSource.create();
          this._sink.clear();
        };
        _proto["delete"] = function _delete(dataID) {
          this._sink["delete"](dataID);
        };
        _proto.remove = function remove(dataID) {
          this._sink.set(dataID, UNPUBLISH_RECORD_SENTINEL);
        };
        _proto.set = function set2(dataID, record) {
          this._sink.set(dataID, record);
        };
        _proto.getRecordIDs = function getRecordIDs() {
          return Object.keys(this.toJSON());
        };
        _proto.size = function size() {
          return Object.keys(this.toJSON()).length;
        };
        _proto.toJSON = function toJSON() {
          var _this = this;
          var merged = (0, _objectSpread28["default"])({}, this._base.toJSON());
          this._sink.getRecordIDs().forEach(function(dataID) {
            var record = _this.get(dataID);
            if (record === void 0) {
              delete merged[dataID];
            } else {
              merged[dataID] = record;
            }
          });
          return merged;
        };
        _proto.getOptimisticRecordIDs = function getOptimisticRecordIDs2() {
          return new Set(this._sink.getRecordIDs());
        };
        return RelayOptimisticRecordSource2;
      }();
      function create(base) {
        return new RelayOptimisticRecordSource(base);
      }
      function getOptimisticRecordIDs(source2) {
        !(source2 instanceof RelayOptimisticRecordSource) ? true ? invariant5(false, "getOptimisticRecordIDs: Instance of RelayOptimisticRecordSource is expected") : invariant5(false) : void 0;
        return source2.getOptimisticRecordIDs();
      }
      module2.exports = {
        create,
        getOptimisticRecordIDs
      };
    }
  });

  // node_modules/relay-runtime/lib/store/RelayReferenceMarker.js
  var require_RelayReferenceMarker = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayReferenceMarker.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      var getOperation = require_getOperation();
      var RelayConcreteNode = require_RelayConcreteNode();
      var RelayFeatureFlags = require_RelayFeatureFlags();
      var cloneRelayHandleSourceField = require_cloneRelayHandleSourceField();
      var _require = require_RelayConcreteVariables();
      var getLocalVariables = _require.getLocalVariables;
      var RelayModernRecord = require_RelayModernRecord();
      var RelayStoreReactFlightUtils = require_RelayStoreReactFlightUtils();
      var RelayStoreUtils = require_RelayStoreUtils();
      var _require2 = require_TypeID();
      var generateTypeID = _require2.generateTypeID;
      var invariant5 = require_browser();
      var ACTOR_CHANGE = RelayConcreteNode.ACTOR_CHANGE;
      var CONDITION = RelayConcreteNode.CONDITION;
      var CLIENT_COMPONENT = RelayConcreteNode.CLIENT_COMPONENT;
      var CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION;
      var DEFER = RelayConcreteNode.DEFER;
      var FLIGHT_FIELD = RelayConcreteNode.FLIGHT_FIELD;
      var FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD;
      var INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT;
      var LINKED_FIELD = RelayConcreteNode.LINKED_FIELD;
      var MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT;
      var LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE;
      var SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD;
      var SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE;
      var STREAM = RelayConcreteNode.STREAM;
      var TYPE_DISCRIMINATOR = RelayConcreteNode.TYPE_DISCRIMINATOR;
      var ROOT_ID = RelayStoreUtils.ROOT_ID;
      var getStorageKey = RelayStoreUtils.getStorageKey;
      var getModuleOperationKey = RelayStoreUtils.getModuleOperationKey;
      function mark(recordSource, selector2, references, operationLoader, shouldProcessClientComponents) {
        var dataID = selector2.dataID, node5 = selector2.node, variables = selector2.variables;
        var marker = new RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents);
        marker.mark(node5, dataID);
      }
      var RelayReferenceMarker = /* @__PURE__ */ function() {
        function RelayReferenceMarker2(recordSource, variables, references, operationLoader, shouldProcessClientComponents) {
          this._operationLoader = operationLoader !== null && operationLoader !== void 0 ? operationLoader : null;
          this._operationName = null;
          this._recordSource = recordSource;
          this._references = references;
          this._variables = variables;
          this._shouldProcessClientComponents = shouldProcessClientComponents;
        }
        var _proto = RelayReferenceMarker2.prototype;
        _proto.mark = function mark2(node5, dataID) {
          if (node5.kind === "Operation" || node5.kind === "SplitOperation") {
            this._operationName = node5.name;
          }
          this._traverse(node5, dataID);
        };
        _proto._traverse = function _traverse(node5, dataID) {
          this._references.add(dataID);
          var record = this._recordSource.get(dataID);
          if (record == null) {
            return;
          }
          this._traverseSelections(node5.selections, record);
        };
        _proto._getVariableValue = function _getVariableValue(name) {
          !this._variables.hasOwnProperty(name) ? true ? invariant5(false, "RelayReferenceMarker(): Undefined variable `%s`.", name) : invariant5(false) : void 0;
          return this._variables[name];
        };
        _proto._traverseSelections = function _traverseSelections(selections, record) {
          var _this = this;
          selections.forEach(function(selection) {
            switch (selection.kind) {
              case ACTOR_CHANGE:
                _this._traverseLink(selection.linkedField, record);
                break;
              case LINKED_FIELD:
                if (selection.plural) {
                  _this._traversePluralLink(selection, record);
                } else {
                  _this._traverseLink(selection, record);
                }
                break;
              case CONDITION:
                var conditionValue = Boolean(_this._getVariableValue(selection.condition));
                if (conditionValue === selection.passingValue) {
                  _this._traverseSelections(selection.selections, record);
                }
                break;
              case INLINE_FRAGMENT:
                if (selection.abstractKey == null) {
                  var typeName = RelayModernRecord.getType(record);
                  if (typeName != null && typeName === selection.type) {
                    _this._traverseSelections(selection.selections, record);
                  }
                } else {
                  var _typeName = RelayModernRecord.getType(record);
                  var typeID = generateTypeID(_typeName);
                  _this._references.add(typeID);
                  _this._traverseSelections(selection.selections, record);
                }
                break;
              case FRAGMENT_SPREAD:
                var prevVariables = _this._variables;
                _this._variables = getLocalVariables(_this._variables, selection.fragment.argumentDefinitions, selection.args);
                _this._traverseSelections(selection.fragment.selections, record);
                _this._variables = prevVariables;
                break;
              case LINKED_HANDLE:
                var handleField = cloneRelayHandleSourceField(selection, selections, _this._variables);
                if (handleField.plural) {
                  _this._traversePluralLink(handleField, record);
                } else {
                  _this._traverseLink(handleField, record);
                }
                break;
              case DEFER:
              case STREAM:
                _this._traverseSelections(selection.selections, record);
                break;
              case SCALAR_FIELD:
              case SCALAR_HANDLE:
                break;
              case TYPE_DISCRIMINATOR: {
                var _typeName2 = RelayModernRecord.getType(record);
                var _typeID = generateTypeID(_typeName2);
                _this._references.add(_typeID);
                break;
              }
              case MODULE_IMPORT:
                _this._traverseModuleImport(selection, record);
                break;
              case CLIENT_EXTENSION:
                _this._traverseSelections(selection.selections, record);
                break;
              case FLIGHT_FIELD:
                if (RelayFeatureFlags.ENABLE_REACT_FLIGHT_COMPONENT_FIELD) {
                  _this._traverseFlightField(selection, record);
                } else {
                  throw new Error("Flight fields are not yet supported.");
                }
                break;
              case CLIENT_COMPONENT:
                if (_this._shouldProcessClientComponents === false) {
                  break;
                }
                _this._traverseSelections(selection.fragment.selections, record);
                break;
              default:
                selection;
                true ? true ? invariant5(false, "RelayReferenceMarker: Unknown AST node `%s`.", selection) : invariant5(false) : void 0;
            }
          });
        };
        _proto._traverseModuleImport = function _traverseModuleImport(moduleImport, record) {
          var _this$_operationName;
          var operationLoader = this._operationLoader;
          !(operationLoader !== null) ? true ? invariant5(false, "RelayReferenceMarker: Expected an operationLoader to be configured when using `@module`. Could not load fragment `%s` in operation `%s`.", moduleImport.fragmentName, (_this$_operationName = this._operationName) !== null && _this$_operationName !== void 0 ? _this$_operationName : "(unknown)") : invariant5(false) : void 0;
          var operationKey = getModuleOperationKey(moduleImport.documentName);
          var operationReference = RelayModernRecord.getValue(record, operationKey);
          if (operationReference == null) {
            return;
          }
          var normalizationRootNode = operationLoader.get(operationReference);
          if (normalizationRootNode != null) {
            var operation = getOperation(normalizationRootNode);
            var prevVariables = this._variables;
            this._variables = getLocalVariables(this._variables, operation.argumentDefinitions, moduleImport.args);
            this._traverseSelections(operation.selections, record);
            this._variables = prevVariables;
          }
        };
        _proto._traverseLink = function _traverseLink(field, record) {
          var storageKey = getStorageKey(field, this._variables);
          var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
          if (linkedID == null) {
            return;
          }
          this._traverse(field, linkedID);
        };
        _proto._traversePluralLink = function _traversePluralLink(field, record) {
          var _this2 = this;
          var storageKey = getStorageKey(field, this._variables);
          var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);
          if (linkedIDs == null) {
            return;
          }
          linkedIDs.forEach(function(linkedID) {
            if (linkedID != null) {
              _this2._traverse(field, linkedID);
            }
          });
        };
        _proto._traverseFlightField = function _traverseFlightField(field, record) {
          var storageKey = getStorageKey(field, this._variables);
          var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
          if (linkedID == null) {
            return;
          }
          this._references.add(linkedID);
          var reactFlightClientResponseRecord = this._recordSource.get(linkedID);
          if (reactFlightClientResponseRecord == null) {
            return;
          }
          var reachableExecutableDefinitions = RelayModernRecord.getValue(reactFlightClientResponseRecord, RelayStoreReactFlightUtils.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY);
          if (!Array.isArray(reachableExecutableDefinitions)) {
            return;
          }
          var operationLoader = this._operationLoader;
          !(operationLoader !== null) ? true ? invariant5(false, "DataChecker: Expected an operationLoader to be configured when using React Flight") : invariant5(false) : void 0;
          var prevVariables = this._variables;
          var _iterator = (0, _createForOfIteratorHelper2["default"])(reachableExecutableDefinitions), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var definition = _step.value;
              this._variables = definition.variables;
              var operationReference = definition.module;
              var normalizationRootNode = operationLoader.get(operationReference);
              if (normalizationRootNode != null) {
                var operation = getOperation(normalizationRootNode);
                this._traverse(operation, ROOT_ID);
              }
            }
          } catch (err2) {
            _iterator.e(err2);
          } finally {
            _iterator.f();
          }
          this._variables = prevVariables;
        };
        return RelayReferenceMarker2;
      }();
      module2.exports = {
        mark
      };
    }
  });

  // node_modules/relay-runtime/lib/store/hasOverlappingIDs.js
  var require_hasOverlappingIDs = __commonJS({
    "node_modules/relay-runtime/lib/store/hasOverlappingIDs.js"(exports2, module2) {
      "use strict";
      var ITERATOR_KEY = Symbol.iterator;
      function hasOverlappingIDs(seenRecords, updatedRecordIDs) {
        var iterator = seenRecords[ITERATOR_KEY]();
        var next = iterator.next();
        while (!next.done) {
          var key = next.value;
          if (updatedRecordIDs.has(key)) {
            return true;
          }
          next = iterator.next();
        }
        return false;
      }
      module2.exports = hasOverlappingIDs;
    }
  });

  // node_modules/relay-runtime/lib/store/RelayStoreSubscriptions.js
  var require_RelayStoreSubscriptions = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayStoreSubscriptions.js"(exports2, module2) {
      "use strict";
      var deepFreeze = require_deepFreeze();
      var recycleNodesInto = require_recycleNodesInto();
      var RelayFeatureFlags = require_RelayFeatureFlags();
      var hasOverlappingIDs = require_hasOverlappingIDs();
      var RelayReader = require_RelayReader();
      var RelayStoreSubscriptions = /* @__PURE__ */ function() {
        function RelayStoreSubscriptions2(log, resolverCache) {
          this._subscriptions = /* @__PURE__ */ new Set();
          this.__log = log;
          this._resolverCache = resolverCache;
        }
        var _proto = RelayStoreSubscriptions2.prototype;
        _proto.subscribe = function subscribe(snapshot, callback) {
          var _this = this;
          var subscription = {
            backup: null,
            callback,
            snapshot,
            stale: false
          };
          var dispose = function dispose2() {
            _this._subscriptions["delete"](subscription);
          };
          this._subscriptions.add(subscription);
          return {
            dispose
          };
        };
        _proto.snapshotSubscriptions = function snapshotSubscriptions(source2) {
          var _this2 = this;
          this._subscriptions.forEach(function(subscription) {
            if (!subscription.stale) {
              subscription.backup = subscription.snapshot;
              return;
            }
            var snapshot = subscription.snapshot;
            var backup = RelayReader.read(source2, snapshot.selector, _this2._resolverCache);
            var nextData = recycleNodesInto(snapshot.data, backup.data);
            backup.data = nextData;
            subscription.backup = backup;
          });
        };
        _proto.restoreSubscriptions = function restoreSubscriptions() {
          this._subscriptions.forEach(function(subscription) {
            var backup = subscription.backup;
            subscription.backup = null;
            if (backup) {
              if (backup.data !== subscription.snapshot.data) {
                subscription.stale = true;
              }
              subscription.snapshot = {
                data: subscription.snapshot.data,
                isMissingData: backup.isMissingData,
                missingClientEdges: backup.missingClientEdges,
                missingLiveResolverFields: backup.missingLiveResolverFields,
                seenRecords: backup.seenRecords,
                selector: backup.selector,
                missingRequiredFields: backup.missingRequiredFields,
                relayResolverErrors: backup.relayResolverErrors
              };
            } else {
              subscription.stale = true;
            }
          });
        };
        _proto.updateSubscriptions = function updateSubscriptions(source2, updatedRecordIDs, updatedOwners, sourceOperation) {
          var _this3 = this;
          var hasUpdatedRecords = updatedRecordIDs.size !== 0;
          this._subscriptions.forEach(function(subscription) {
            var owner = _this3._updateSubscription(source2, subscription, updatedRecordIDs, hasUpdatedRecords, sourceOperation);
            if (owner != null) {
              updatedOwners.push(owner);
            }
          });
        };
        _proto._updateSubscription = function _updateSubscription(source2, subscription, updatedRecordIDs, hasUpdatedRecords, sourceOperation) {
          var backup = subscription.backup, callback = subscription.callback, snapshot = subscription.snapshot, stale = subscription.stale;
          var hasOverlappingUpdates = hasUpdatedRecords && hasOverlappingIDs(snapshot.seenRecords, updatedRecordIDs);
          if (!stale && !hasOverlappingUpdates) {
            return;
          }
          var nextSnapshot = hasOverlappingUpdates || !backup ? RelayReader.read(source2, snapshot.selector, this._resolverCache) : backup;
          var nextData = recycleNodesInto(snapshot.data, nextSnapshot.data);
          nextSnapshot = {
            data: nextData,
            isMissingData: nextSnapshot.isMissingData,
            missingClientEdges: nextSnapshot.missingClientEdges,
            missingLiveResolverFields: nextSnapshot.missingLiveResolverFields,
            seenRecords: nextSnapshot.seenRecords,
            selector: nextSnapshot.selector,
            missingRequiredFields: nextSnapshot.missingRequiredFields,
            relayResolverErrors: nextSnapshot.relayResolverErrors
          };
          if (true) {
            deepFreeze(nextSnapshot);
          }
          subscription.snapshot = nextSnapshot;
          subscription.stale = false;
          if (nextSnapshot.data !== snapshot.data) {
            if (this.__log && RelayFeatureFlags.ENABLE_NOTIFY_SUBSCRIPTION) {
              this.__log({
                name: "store.notify.subscription",
                sourceOperation,
                snapshot,
                nextSnapshot
              });
            }
            callback(nextSnapshot);
            return snapshot.selector.owner;
          }
        };
        return RelayStoreSubscriptions2;
      }();
      module2.exports = RelayStoreSubscriptions;
    }
  });

  // node_modules/relay-runtime/lib/store/RelayModernStore.js
  var require_RelayModernStore = __commonJS({
    "node_modules/relay-runtime/lib/store/RelayModernStore.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      var _defineProperty210 = _interopRequireDefault(require_defineProperty());
      var _require = require_ActorIdentifier();
      var INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE = _require.INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE;
      var assertInternalActorIndentifier = _require.assertInternalActorIndentifier;
      var deepFreeze = require_deepFreeze();
      var RelayFeatureFlags = require_RelayFeatureFlags();
      var resolveImmediate = require_resolveImmediate();
      var DataChecker = require_DataChecker();
      var defaultGetDataID = require_defaultGetDataID();
      var RelayModernRecord = require_RelayModernRecord();
      var RelayOptimisticRecordSource = require_RelayOptimisticRecordSource();
      var RelayReader = require_RelayReader();
      var RelayReferenceMarker = require_RelayReferenceMarker();
      var RelayStoreReactFlightUtils = require_RelayStoreReactFlightUtils();
      var RelayStoreSubscriptions = require_RelayStoreSubscriptions();
      var RelayStoreUtils = require_RelayStoreUtils();
      var _require2 = require_RelayStoreUtils();
      var ROOT_ID = _require2.ROOT_ID;
      var ROOT_TYPE = _require2.ROOT_TYPE;
      var _require3 = require_ResolverCache();
      var RecordResolverCache = _require3.RecordResolverCache;
      var invariant5 = require_browser();
      var DEFAULT_RELEASE_BUFFER_SIZE = 10;
      var RelayModernStore = /* @__PURE__ */ function() {
        function RelayModernStore2(source2, options) {
          var _this = this;
          var _options$gcReleaseBuf, _options$gcScheduler, _options$getDataID, _options$log, _options$operationLoa;
          (0, _defineProperty210["default"])(this, "_gcStep", function() {
            if (_this._gcRun) {
              if (_this._gcRun.next().done) {
                _this._gcRun = null;
              } else {
                _this._gcScheduler(_this._gcStep);
              }
            }
          });
          if (true) {
            var storeIDs = source2.getRecordIDs();
            for (var ii = 0; ii < storeIDs.length; ii++) {
              var record = source2.get(storeIDs[ii]);
              if (record) {
                RelayModernRecord.freeze(record);
              }
            }
          }
          this._currentWriteEpoch = 0;
          this._gcHoldCounter = 0;
          this._gcReleaseBufferSize = (_options$gcReleaseBuf = options === null || options === void 0 ? void 0 : options.gcReleaseBufferSize) !== null && _options$gcReleaseBuf !== void 0 ? _options$gcReleaseBuf : DEFAULT_RELEASE_BUFFER_SIZE;
          this._gcRun = null;
          this._gcScheduler = (_options$gcScheduler = options === null || options === void 0 ? void 0 : options.gcScheduler) !== null && _options$gcScheduler !== void 0 ? _options$gcScheduler : resolveImmediate;
          this._getDataID = (_options$getDataID = options === null || options === void 0 ? void 0 : options.getDataID) !== null && _options$getDataID !== void 0 ? _options$getDataID : defaultGetDataID;
          this._globalInvalidationEpoch = null;
          this._invalidationSubscriptions = /* @__PURE__ */ new Set();
          this._invalidatedRecordIDs = /* @__PURE__ */ new Set();
          this.__log = (_options$log = options === null || options === void 0 ? void 0 : options.log) !== null && _options$log !== void 0 ? _options$log : null;
          this._queryCacheExpirationTime = options === null || options === void 0 ? void 0 : options.queryCacheExpirationTime;
          this._operationLoader = (_options$operationLoa = options === null || options === void 0 ? void 0 : options.operationLoader) !== null && _options$operationLoa !== void 0 ? _options$operationLoa : null;
          this._optimisticSource = null;
          this._recordSource = source2;
          this._releaseBuffer = [];
          this._roots = /* @__PURE__ */ new Map();
          this._shouldScheduleGC = false;
          this._resolverCache = new RecordResolverCache(function() {
            return _this._getMutableRecordSource();
          });
          this._storeSubscriptions = new RelayStoreSubscriptions(options === null || options === void 0 ? void 0 : options.log, this._resolverCache);
          this._updatedRecordIDs = /* @__PURE__ */ new Set();
          this._shouldProcessClientComponents = options === null || options === void 0 ? void 0 : options.shouldProcessClientComponents;
          initializeRecordSource(this._recordSource);
        }
        var _proto = RelayModernStore2.prototype;
        _proto.getSource = function getSource() {
          var _this$_optimisticSour;
          return (_this$_optimisticSour = this._optimisticSource) !== null && _this$_optimisticSour !== void 0 ? _this$_optimisticSour : this._recordSource;
        };
        _proto._getMutableRecordSource = function _getMutableRecordSource() {
          var _this$_optimisticSour2;
          return (_this$_optimisticSour2 = this._optimisticSource) !== null && _this$_optimisticSour2 !== void 0 ? _this$_optimisticSour2 : this._recordSource;
        };
        _proto.check = function check(operation, options) {
          var _options$handlers, _options$getSourceFor, _options$getTargetFor, _options$defaultActor;
          var selector2 = operation.root;
          var source2 = this._getMutableRecordSource();
          var globalInvalidationEpoch = this._globalInvalidationEpoch;
          var rootEntry = this._roots.get(operation.request.identifier);
          var operationLastWrittenAt = rootEntry != null ? rootEntry.epoch : null;
          if (globalInvalidationEpoch != null) {
            if (operationLastWrittenAt == null || operationLastWrittenAt <= globalInvalidationEpoch) {
              return {
                status: "stale"
              };
            }
          }
          var handlers = (_options$handlers = options === null || options === void 0 ? void 0 : options.handlers) !== null && _options$handlers !== void 0 ? _options$handlers : [];
          var getSourceForActor = (_options$getSourceFor = options === null || options === void 0 ? void 0 : options.getSourceForActor) !== null && _options$getSourceFor !== void 0 ? _options$getSourceFor : function(actorIdentifier) {
            assertInternalActorIndentifier(actorIdentifier);
            return source2;
          };
          var getTargetForActor = (_options$getTargetFor = options === null || options === void 0 ? void 0 : options.getTargetForActor) !== null && _options$getTargetFor !== void 0 ? _options$getTargetFor : function(actorIdentifier) {
            assertInternalActorIndentifier(actorIdentifier);
            return source2;
          };
          var operationAvailability = DataChecker.check(getSourceForActor, getTargetForActor, (_options$defaultActor = options === null || options === void 0 ? void 0 : options.defaultActorIdentifier) !== null && _options$defaultActor !== void 0 ? _options$defaultActor : INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE, selector2, handlers, this._operationLoader, this._getDataID, this._shouldProcessClientComponents);
          return getAvailabilityStatus(operationAvailability, operationLastWrittenAt, rootEntry === null || rootEntry === void 0 ? void 0 : rootEntry.fetchTime, this._queryCacheExpirationTime);
        };
        _proto.retain = function retain(operation) {
          var _this2 = this;
          var id = operation.request.identifier;
          var disposed = false;
          var dispose = function dispose2() {
            if (disposed) {
              return;
            }
            disposed = true;
            var rootEntry2 = _this2._roots.get(id);
            if (rootEntry2 == null) {
              return;
            }
            rootEntry2.refCount--;
            if (rootEntry2.refCount === 0) {
              var _queryCacheExpirationTime = _this2._queryCacheExpirationTime;
              var rootEntryIsStale = rootEntry2.fetchTime != null && _queryCacheExpirationTime != null && rootEntry2.fetchTime <= Date.now() - _queryCacheExpirationTime;
              if (rootEntryIsStale) {
                _this2._roots["delete"](id);
                _this2.scheduleGC();
              } else {
                _this2._releaseBuffer.push(id);
                if (_this2._releaseBuffer.length > _this2._gcReleaseBufferSize) {
                  var _id = _this2._releaseBuffer.shift();
                  _this2._roots["delete"](_id);
                  _this2.scheduleGC();
                }
              }
            }
          };
          var rootEntry = this._roots.get(id);
          if (rootEntry != null) {
            if (rootEntry.refCount === 0) {
              this._releaseBuffer = this._releaseBuffer.filter(function(_id) {
                return _id !== id;
              });
            }
            rootEntry.refCount += 1;
          } else {
            this._roots.set(id, {
              operation,
              refCount: 1,
              epoch: null,
              fetchTime: null
            });
          }
          return {
            dispose
          };
        };
        _proto.lookup = function lookup(selector2) {
          var source2 = this.getSource();
          var snapshot = RelayReader.read(source2, selector2, this._resolverCache);
          if (true) {
            deepFreeze(snapshot);
          }
          return snapshot;
        };
        _proto.notify = function notify(sourceOperation, invalidateStore) {
          var _this3 = this;
          var log = this.__log;
          if (log != null) {
            log({
              name: "store.notify.start",
              sourceOperation
            });
          }
          this._currentWriteEpoch++;
          if (invalidateStore === true) {
            this._globalInvalidationEpoch = this._currentWriteEpoch;
          }
          if (RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
            this._resolverCache.invalidateDataIDs(this._updatedRecordIDs);
          }
          var source2 = this.getSource();
          var updatedOwners = [];
          this._storeSubscriptions.updateSubscriptions(source2, this._updatedRecordIDs, updatedOwners, sourceOperation);
          this._invalidationSubscriptions.forEach(function(subscription) {
            _this3._updateInvalidationSubscription(subscription, invalidateStore === true);
          });
          if (log != null) {
            log({
              name: "store.notify.complete",
              sourceOperation,
              updatedRecordIDs: this._updatedRecordIDs,
              invalidatedRecordIDs: this._invalidatedRecordIDs
            });
          }
          this._updatedRecordIDs.clear();
          this._invalidatedRecordIDs.clear();
          if (sourceOperation != null) {
            var id = sourceOperation.request.identifier;
            var rootEntry = this._roots.get(id);
            if (rootEntry != null) {
              rootEntry.epoch = this._currentWriteEpoch;
              rootEntry.fetchTime = Date.now();
            } else if (sourceOperation.request.node.params.operationKind === "query" && this._gcReleaseBufferSize > 0 && this._releaseBuffer.length < this._gcReleaseBufferSize) {
              var temporaryRootEntry = {
                operation: sourceOperation,
                refCount: 0,
                epoch: this._currentWriteEpoch,
                fetchTime: Date.now()
              };
              this._releaseBuffer.push(id);
              this._roots.set(id, temporaryRootEntry);
            }
          }
          return updatedOwners;
        };
        _proto.publish = function publish(source2, idsMarkedForInvalidation) {
          var target = this._getMutableRecordSource();
          updateTargetFromSource(
            target,
            source2,
            this._currentWriteEpoch + 1,
            idsMarkedForInvalidation,
            this._updatedRecordIDs,
            this._invalidatedRecordIDs
          );
          var log = this.__log;
          if (log != null) {
            log({
              name: "store.publish",
              source: source2,
              optimistic: target === this._optimisticSource
            });
          }
        };
        _proto.subscribe = function subscribe(snapshot, callback) {
          return this._storeSubscriptions.subscribe(snapshot, callback);
        };
        _proto.holdGC = function holdGC() {
          var _this4 = this;
          if (this._gcRun) {
            this._gcRun = null;
            this._shouldScheduleGC = true;
          }
          this._gcHoldCounter++;
          var dispose = function dispose2() {
            if (_this4._gcHoldCounter > 0) {
              _this4._gcHoldCounter--;
              if (_this4._gcHoldCounter === 0 && _this4._shouldScheduleGC) {
                _this4.scheduleGC();
                _this4._shouldScheduleGC = false;
              }
            }
          };
          return {
            dispose
          };
        };
        _proto.toJSON = function toJSON() {
          return "RelayModernStore()";
        };
        _proto.getEpoch = function getEpoch() {
          return this._currentWriteEpoch;
        };
        _proto.__getUpdatedRecordIDs = function __getUpdatedRecordIDs() {
          return this._updatedRecordIDs;
        };
        _proto.lookupInvalidationState = function lookupInvalidationState(dataIDs) {
          var _this5 = this;
          var invalidations = /* @__PURE__ */ new Map();
          dataIDs.forEach(function(dataID) {
            var _RelayModernRecord$ge;
            var record = _this5.getSource().get(dataID);
            invalidations.set(dataID, (_RelayModernRecord$ge = RelayModernRecord.getInvalidationEpoch(record)) !== null && _RelayModernRecord$ge !== void 0 ? _RelayModernRecord$ge : null);
          });
          invalidations.set("global", this._globalInvalidationEpoch);
          return {
            dataIDs,
            invalidations
          };
        };
        _proto.checkInvalidationState = function checkInvalidationState(prevInvalidationState) {
          var latestInvalidationState = this.lookupInvalidationState(prevInvalidationState.dataIDs);
          var currentInvalidations = latestInvalidationState.invalidations;
          var prevInvalidations = prevInvalidationState.invalidations;
          if (currentInvalidations.get("global") !== prevInvalidations.get("global")) {
            return true;
          }
          var _iterator = (0, _createForOfIteratorHelper2["default"])(prevInvalidationState.dataIDs), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var dataID = _step.value;
              if (currentInvalidations.get(dataID) !== prevInvalidations.get(dataID)) {
                return true;
              }
            }
          } catch (err2) {
            _iterator.e(err2);
          } finally {
            _iterator.f();
          }
          return false;
        };
        _proto.subscribeToInvalidationState = function subscribeToInvalidationState(invalidationState, callback) {
          var _this6 = this;
          var subscription = {
            callback,
            invalidationState
          };
          var dispose = function dispose2() {
            _this6._invalidationSubscriptions["delete"](subscription);
          };
          this._invalidationSubscriptions.add(subscription);
          return {
            dispose
          };
        };
        _proto._updateInvalidationSubscription = function _updateInvalidationSubscription(subscription, invalidatedStore) {
          var _this7 = this;
          var callback = subscription.callback, invalidationState = subscription.invalidationState;
          var dataIDs = invalidationState.dataIDs;
          var isSubscribedToInvalidatedIDs = invalidatedStore || dataIDs.some(function(dataID) {
            return _this7._invalidatedRecordIDs.has(dataID);
          });
          if (!isSubscribedToInvalidatedIDs) {
            return;
          }
          callback();
        };
        _proto.snapshot = function snapshot() {
          !(this._optimisticSource == null) ? true ? invariant5(false, "RelayModernStore: Unexpected call to snapshot() while a previous snapshot exists.") : invariant5(false) : void 0;
          var log = this.__log;
          if (log != null) {
            log({
              name: "store.snapshot"
            });
          }
          this._storeSubscriptions.snapshotSubscriptions(this.getSource());
          if (this._gcRun) {
            this._gcRun = null;
            this._shouldScheduleGC = true;
          }
          this._optimisticSource = RelayOptimisticRecordSource.create(this.getSource());
        };
        _proto.restore = function restore() {
          !(this._optimisticSource != null) ? true ? invariant5(false, "RelayModernStore: Unexpected call to restore(), expected a snapshot to exist (make sure to call snapshot()).") : invariant5(false) : void 0;
          var log = this.__log;
          if (log != null) {
            log({
              name: "store.restore"
            });
          }
          this._optimisticSource = null;
          if (this._shouldScheduleGC) {
            this.scheduleGC();
          }
          this._storeSubscriptions.restoreSubscriptions();
        };
        _proto.scheduleGC = function scheduleGC() {
          if (this._gcHoldCounter > 0) {
            this._shouldScheduleGC = true;
            return;
          }
          if (this._gcRun) {
            return;
          }
          this._gcRun = this._collect();
          this._gcScheduler(this._gcStep);
        };
        _proto.__gc = function __gc() {
          if (this._optimisticSource != null) {
            return;
          }
          var gcRun = this._collect();
          while (!gcRun.next().done) {
          }
        };
        _proto._collect = function* _collect() {
          top:
            while (true) {
              var startEpoch = this._currentWriteEpoch;
              var references = /* @__PURE__ */ new Set();
              var _iterator2 = (0, _createForOfIteratorHelper2["default"])(this._roots.values()), _step2;
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                  var operation = _step2.value.operation;
                  var selector2 = operation.root;
                  RelayReferenceMarker.mark(this._recordSource, selector2, references, this._operationLoader, this._shouldProcessClientComponents);
                  yield;
                  if (startEpoch !== this._currentWriteEpoch) {
                    continue top;
                  }
                }
              } catch (err2) {
                _iterator2.e(err2);
              } finally {
                _iterator2.f();
              }
              var log = this.__log;
              if (log != null) {
                log({
                  name: "store.gc",
                  references
                });
              }
              if (references.size === 0) {
                this._recordSource.clear();
              } else {
                var storeIDs = this._recordSource.getRecordIDs();
                for (var ii = 0; ii < storeIDs.length; ii++) {
                  var dataID = storeIDs[ii];
                  if (!references.has(dataID)) {
                    this._recordSource.remove(dataID);
                  }
                }
              }
              return;
            }
        };
        return RelayModernStore2;
      }();
      function initializeRecordSource(target) {
        if (!target.has(ROOT_ID)) {
          var rootRecord = RelayModernRecord.create(ROOT_ID, ROOT_TYPE);
          target.set(ROOT_ID, rootRecord);
        }
      }
      function updateTargetFromSource(target, source2, currentWriteEpoch, idsMarkedForInvalidation, updatedRecordIDs, invalidatedRecordIDs) {
        if (idsMarkedForInvalidation) {
          idsMarkedForInvalidation.forEach(function(dataID2) {
            var targetRecord2 = target.get(dataID2);
            var sourceRecord2 = source2.get(dataID2);
            if (sourceRecord2 === null) {
              return;
            }
            var nextRecord2;
            if (targetRecord2 != null) {
              nextRecord2 = RelayModernRecord.clone(targetRecord2);
            } else {
              nextRecord2 = sourceRecord2 != null ? RelayModernRecord.clone(sourceRecord2) : null;
            }
            if (!nextRecord2) {
              return;
            }
            RelayModernRecord.setValue(nextRecord2, RelayStoreUtils.INVALIDATED_AT_KEY, currentWriteEpoch);
            invalidatedRecordIDs.add(dataID2);
            target.set(dataID2, nextRecord2);
          });
        }
        var dataIDs = source2.getRecordIDs();
        for (var ii = 0; ii < dataIDs.length; ii++) {
          var dataID = dataIDs[ii];
          var sourceRecord = source2.get(dataID);
          var targetRecord = target.get(dataID);
          if (true) {
            if (sourceRecord) {
              RelayModernRecord.freeze(sourceRecord);
            }
          }
          if (sourceRecord && targetRecord) {
            var nextRecord = RelayModernRecord.getType(targetRecord) === RelayStoreReactFlightUtils.REACT_FLIGHT_TYPE_NAME ? sourceRecord : RelayModernRecord.update(targetRecord, sourceRecord);
            if (nextRecord !== targetRecord) {
              if (true) {
                RelayModernRecord.freeze(nextRecord);
              }
              updatedRecordIDs.add(dataID);
              target.set(dataID, nextRecord);
            }
          } else if (sourceRecord === null) {
            target["delete"](dataID);
            if (targetRecord !== null) {
              updatedRecordIDs.add(dataID);
            }
          } else if (sourceRecord) {
            target.set(dataID, sourceRecord);
            updatedRecordIDs.add(dataID);
          }
        }
      }
      function getAvailabilityStatus(operationAvailability, operationLastWrittenAt, operationFetchTime, queryCacheExpirationTime) {
        var mostRecentlyInvalidatedAt = operationAvailability.mostRecentlyInvalidatedAt, status = operationAvailability.status;
        if (typeof mostRecentlyInvalidatedAt === "number") {
          if (operationLastWrittenAt == null || mostRecentlyInvalidatedAt > operationLastWrittenAt) {
            return {
              status: "stale"
            };
          }
        }
        if (status === "missing") {
          return {
            status: "missing"
          };
        }
        if (operationFetchTime != null && queryCacheExpirationTime != null) {
          var isStale = operationFetchTime <= Date.now() - queryCacheExpirationTime;
          if (isStale) {
            return {
              status: "stale"
            };
          }
        }
        return {
          status: "available",
          fetchTime: operationFetchTime !== null && operationFetchTime !== void 0 ? operationFetchTime : null
        };
      }
      module2.exports = RelayModernStore;
    }
  });

  // node_modules/relay-runtime/lib/subscription/requestSubscription.js
  var require_requestSubscription = __commonJS({
    "node_modules/relay-runtime/lib/subscription/requestSubscription.js"(exports2, module2) {
      "use strict";
      var RelayDeclarativeMutationConfig = require_RelayDeclarativeMutationConfig();
      var _require = require_GraphQLTag();
      var getRequest = _require.getRequest;
      var _require2 = require_RelayModernOperationDescriptor();
      var createOperationDescriptor = _require2.createOperationDescriptor;
      var _require3 = require_RelayModernSelector();
      var createReaderSelector = _require3.createReaderSelector;
      var warning6 = require_warning();
      function requestSubscription(environment, config) {
        var subscription = getRequest(config.subscription);
        if (subscription.params.operationKind !== "subscription") {
          throw new Error("requestSubscription: Must use Subscription operation");
        }
        var configs = config.configs, onCompleted = config.onCompleted, onError = config.onError, onNext = config.onNext, variables = config.variables, cacheConfig = config.cacheConfig;
        var operation = createOperationDescriptor(subscription, variables, cacheConfig);
        true ? warning6(!(config.updater && configs), "requestSubscription: Expected only one of `updater` and `configs` to be provided") : void 0;
        var _ref2 = configs ? RelayDeclarativeMutationConfig.convert(
          configs,
          subscription,
          null,
          config.updater
        ) : config, updater = _ref2.updater;
        var sub = environment.executeSubscription({
          operation,
          updater
        }).subscribe({
          next: function next(responses) {
            if (onNext != null) {
              var selector2 = operation.fragment;
              var nextID2;
              if (Array.isArray(responses)) {
                var _responses$, _responses$$extension;
                nextID2 = (_responses$ = responses[0]) === null || _responses$ === void 0 ? void 0 : (_responses$$extension = _responses$.extensions) === null || _responses$$extension === void 0 ? void 0 : _responses$$extension.__relay_subscription_root_id;
              } else {
                var _responses$extensions;
                nextID2 = (_responses$extensions = responses.extensions) === null || _responses$extensions === void 0 ? void 0 : _responses$extensions.__relay_subscription_root_id;
              }
              if (typeof nextID2 === "string") {
                selector2 = createReaderSelector(selector2.node, nextID2, selector2.variables, selector2.owner);
              }
              var data = environment.lookup(selector2).data;
              onNext(data);
            }
          },
          error: onError,
          complete: onCompleted
        });
        return {
          dispose: sub.unsubscribe
        };
      }
      module2.exports = requestSubscription;
    }
  });

  // node_modules/relay-runtime/lib/util/createPayloadFor3DField.js
  var require_createPayloadFor3DField = __commonJS({
    "node_modules/relay-runtime/lib/util/createPayloadFor3DField.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var _require = require_RelayStoreUtils();
      var getModuleComponentKey = _require.getModuleComponentKey;
      var getModuleOperationKey = _require.getModuleOperationKey;
      function createPayloadFor3DField(name, operation, component, response) {
        var data = (0, _objectSpread28["default"])({}, response);
        data[getModuleComponentKey(name)] = component;
        data[getModuleOperationKey(name)] = operation;
        return data;
      }
      module2.exports = createPayloadFor3DField;
    }
  });

  // node_modules/relay-runtime/lib/util/isEmptyObject.js
  var require_isEmptyObject = __commonJS({
    "node_modules/relay-runtime/lib/util/isEmptyObject.js"(exports2, module2) {
      "use strict";
      var hasOwnProperty16 = Object.prototype.hasOwnProperty;
      function isEmptyObject(obj) {
        for (var _key in obj) {
          if (hasOwnProperty16.call(obj, _key)) {
            return false;
          }
        }
        return true;
      }
      module2.exports = isEmptyObject;
    }
  });

  // node_modules/relay-runtime/lib/util/getFragmentIdentifier.js
  var require_getFragmentIdentifier = __commonJS({
    "node_modules/relay-runtime/lib/util/getFragmentIdentifier.js"(exports2, module2) {
      "use strict";
      var _require = require_RelayModernSelector();
      var getDataIDsFromFragment = _require.getDataIDsFromFragment;
      var getSelector = _require.getSelector;
      var getVariablesFromFragment = _require.getVariablesFromFragment;
      var isEmptyObject = require_isEmptyObject();
      var RelayFeatureFlags = require_RelayFeatureFlags();
      var stableCopy = require_stableCopy();
      var _require2 = require_StringInterner();
      var intern = _require2.intern;
      function getFragmentIdentifier(fragmentNode, fragmentRef) {
        var selector2 = getSelector(fragmentNode, fragmentRef);
        var fragmentOwnerIdentifier = selector2 == null ? "null" : selector2.kind === "SingularReaderSelector" ? selector2.owner.identifier : "[" + selector2.selectors.map(function(sel) {
          return sel.owner.identifier;
        }).join(",") + "]";
        var fragmentVariables = getVariablesFromFragment(fragmentNode, fragmentRef);
        var dataIDs = getDataIDsFromFragment(fragmentNode, fragmentRef);
        if (RelayFeatureFlags.ENABLE_GETFRAGMENTIDENTIFIER_OPTIMIZATION) {
          var ids = typeof dataIDs === "undefined" ? "missing" : dataIDs == null ? "null" : Array.isArray(dataIDs) ? "[" + dataIDs.join(",") + "]" : dataIDs;
          ids = RelayFeatureFlags.STRING_INTERN_LEVEL <= 1 ? ids : intern(ids, RelayFeatureFlags.MAX_DATA_ID_LENGTH);
          return fragmentOwnerIdentifier + "/" + fragmentNode.name + "/" + (fragmentVariables == null || isEmptyObject(fragmentVariables) ? "{}" : JSON.stringify(stableCopy(fragmentVariables))) + "/" + ids;
        } else {
          var _JSON$stringify;
          var _ids = (_JSON$stringify = JSON.stringify(dataIDs)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : "missing";
          _ids = RelayFeatureFlags.STRING_INTERN_LEVEL <= 1 ? _ids : intern(_ids, RelayFeatureFlags.MAX_DATA_ID_LENGTH);
          return fragmentOwnerIdentifier + "/" + fragmentNode.name + "/" + JSON.stringify(stableCopy(fragmentVariables)) + "/" + _ids;
        }
      }
      module2.exports = getFragmentIdentifier;
    }
  });

  // node_modules/relay-runtime/lib/util/getRefetchMetadata.js
  var require_getRefetchMetadata = __commonJS({
    "node_modules/relay-runtime/lib/util/getRefetchMetadata.js"(exports2, module2) {
      "use strict";
      var invariant5 = require_browser();
      function getRefetchMetadata(fragmentNode, componentDisplayName) {
        var _fragmentNode$metadat, _fragmentNode$metadat2;
        !(((_fragmentNode$metadat = fragmentNode.metadata) === null || _fragmentNode$metadat === void 0 ? void 0 : _fragmentNode$metadat.plural) !== true) ? true ? invariant5(false, "Relay: getRefetchMetadata(): Expected fragment `%s` not to be plural when using `%s`. Remove `@relay(plural: true)` from fragment `%s` in order to use it with `%s`.", fragmentNode.name, componentDisplayName, fragmentNode.name, componentDisplayName) : invariant5(false) : void 0;
        var refetchMetadata = (_fragmentNode$metadat2 = fragmentNode.metadata) === null || _fragmentNode$metadat2 === void 0 ? void 0 : _fragmentNode$metadat2.refetch;
        !(refetchMetadata != null) ? true ? invariant5(false, "Relay: getRefetchMetadata(): Expected fragment `%s` to be refetchable when using `%s`. Did you forget to add a @refetchable directive to the fragment?", componentDisplayName, fragmentNode.name) : invariant5(false) : void 0;
        var refetchableRequest = refetchMetadata.operation["default"] ? refetchMetadata.operation["default"] : refetchMetadata.operation;
        var fragmentRefPathInResponse = refetchMetadata.fragmentPathInResult;
        !(typeof refetchableRequest !== "string") ? true ? invariant5(false, "Relay: getRefetchMetadata(): Expected refetch query to be an operation and not a string when using `%s`. If you're seeing this, this is likely a bug in Relay.", componentDisplayName) : invariant5(false) : void 0;
        var identifierField = refetchMetadata.identifierField;
        !(identifierField == null || typeof identifierField === "string") ? true ? invariant5(false, "Relay: getRefetchMetadata(): Expected `identifierField` to be a string.") : invariant5(false) : void 0;
        return {
          fragmentRefPathInResponse,
          identifierField,
          refetchableRequest,
          refetchMetadata
        };
      }
      module2.exports = getRefetchMetadata;
    }
  });

  // node_modules/relay-runtime/lib/util/getPaginationMetadata.js
  var require_getPaginationMetadata = __commonJS({
    "node_modules/relay-runtime/lib/util/getPaginationMetadata.js"(exports2, module2) {
      "use strict";
      var getRefetchMetadata = require_getRefetchMetadata();
      var invariant5 = require_browser();
      function getPaginationMetadata(fragmentNode, componentDisplayName) {
        var _fragmentNode$metadat, _fragmentNode$metadat2;
        var _getRefetchMetadata = getRefetchMetadata(fragmentNode, componentDisplayName), paginationRequest = _getRefetchMetadata.refetchableRequest, refetchMetadata = _getRefetchMetadata.refetchMetadata;
        var paginationMetadata = refetchMetadata.connection;
        !(paginationMetadata != null) ? true ? invariant5(false, "Relay: getPaginationMetadata(): Expected fragment `%s` to include a connection when using `%s`. Did you forget to add a @connection directive to the connection field in the fragment?", componentDisplayName, fragmentNode.name) : invariant5(false) : void 0;
        var connectionPathInFragmentData = paginationMetadata.path;
        var connectionMetadata = ((_fragmentNode$metadat = (_fragmentNode$metadat2 = fragmentNode.metadata) === null || _fragmentNode$metadat2 === void 0 ? void 0 : _fragmentNode$metadat2.connection) !== null && _fragmentNode$metadat !== void 0 ? _fragmentNode$metadat : [])[0];
        !(connectionMetadata != null) ? true ? invariant5(false, "Relay: getPaginationMetadata(): Expected fragment `%s` to include a connection when using `%s`. Did you forget to add a @connection directive to the connection field in the fragment?", componentDisplayName, fragmentNode.name) : invariant5(false) : void 0;
        var identifierField = refetchMetadata.identifierField;
        !(identifierField == null || typeof identifierField === "string") ? true ? invariant5(false, "Relay: getRefetchMetadata(): Expected `identifierField` to be a string.") : invariant5(false) : void 0;
        return {
          connectionPathInFragmentData,
          identifierField,
          paginationRequest,
          paginationMetadata,
          stream: connectionMetadata.stream === true
        };
      }
      module2.exports = getPaginationMetadata;
    }
  });

  // node_modules/relay-runtime/lib/util/getPaginationVariables.js
  var require_getPaginationVariables = __commonJS({
    "node_modules/relay-runtime/lib/util/getPaginationVariables.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _defineProperty210 = _interopRequireDefault(require_defineProperty());
      var _objectSpread42 = _interopRequireDefault(require_objectSpread2());
      var invariant5 = require_browser();
      var warning6 = require_warning();
      function getPaginationVariables(direction, count, cursor2, baseVariables, extraVariables, paginationMetadata) {
        var _objectSpread32;
        var backwardMetadata = paginationMetadata.backward, forwardMetadata = paginationMetadata.forward;
        if (direction === "backward") {
          var _objectSpread28;
          !(backwardMetadata != null && backwardMetadata.count != null && backwardMetadata.cursor != null) ? true ? invariant5(false, "Relay: Expected backward pagination metadata to be available. If you're seeing this, this is likely a bug in Relay.") : invariant5(false) : void 0;
          true ? warning6(!extraVariables.hasOwnProperty(backwardMetadata.cursor), "Relay: `UNSTABLE_extraVariables` provided by caller should not contain cursor variable `%s`. This variable is automatically determined by Relay.", backwardMetadata.cursor) : void 0;
          true ? warning6(!extraVariables.hasOwnProperty(backwardMetadata.count), "Relay: `UNSTABLE_extraVariables` provided by caller should not contain count variable `%s`. This variable is automatically determined by Relay.", backwardMetadata.count) : void 0;
          var _paginationVariables = (0, _objectSpread42["default"])((0, _objectSpread42["default"])((0, _objectSpread42["default"])({}, baseVariables), extraVariables), {}, (_objectSpread28 = {}, (0, _defineProperty210["default"])(_objectSpread28, backwardMetadata.cursor, cursor2), (0, _defineProperty210["default"])(_objectSpread28, backwardMetadata.count, count), _objectSpread28));
          if (forwardMetadata && forwardMetadata.cursor) {
            _paginationVariables[forwardMetadata.cursor] = null;
          }
          if (forwardMetadata && forwardMetadata.count) {
            _paginationVariables[forwardMetadata.count] = null;
          }
          return _paginationVariables;
        }
        !(forwardMetadata != null && forwardMetadata.count != null && forwardMetadata.cursor != null) ? true ? invariant5(false, "Relay: Expected forward pagination metadata to be available. If you're seeing this, this is likely a bug in Relay.") : invariant5(false) : void 0;
        true ? warning6(!extraVariables.hasOwnProperty(forwardMetadata.cursor), "Relay: `UNSTABLE_extraVariables` provided by caller should not contain cursor variable `%s`. This variable is automatically determined by Relay.", forwardMetadata.cursor) : void 0;
        true ? warning6(!extraVariables.hasOwnProperty(forwardMetadata.count), "Relay: `UNSTABLE_extraVariables` provided by caller should not contain count variable `%s`. This variable is automatically determined by Relay.", forwardMetadata.count) : void 0;
        var paginationVariables = (0, _objectSpread42["default"])((0, _objectSpread42["default"])((0, _objectSpread42["default"])({}, baseVariables), extraVariables), {}, (_objectSpread32 = {}, (0, _defineProperty210["default"])(_objectSpread32, forwardMetadata.cursor, cursor2), (0, _defineProperty210["default"])(_objectSpread32, forwardMetadata.count, count), _objectSpread32));
        if (backwardMetadata && backwardMetadata.cursor) {
          paginationVariables[backwardMetadata.cursor] = null;
        }
        if (backwardMetadata && backwardMetadata.count) {
          paginationVariables[backwardMetadata.count] = null;
        }
        return paginationVariables;
      }
      module2.exports = getPaginationVariables;
    }
  });

  // node_modules/relay-runtime/lib/util/getValueAtPath.js
  var require_getValueAtPath = __commonJS({
    "node_modules/relay-runtime/lib/util/getValueAtPath.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      var invariant5 = require_browser();
      function getValueAtPath(data, path) {
        var result = data;
        var _iterator = (0, _createForOfIteratorHelper2["default"])(path), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var key = _step.value;
            if (result == null) {
              return null;
            }
            if (typeof key === "number") {
              !Array.isArray(result) ? true ? invariant5(false, "Relay: Expected an array when extracting value at path. If you're seeing this, this is likely a bug in Relay.") : invariant5(false) : void 0;
              result = result[key];
            } else {
              !(typeof result === "object" && !Array.isArray(result)) ? true ? invariant5(false, "Relay: Expected an object when extracting value at path. If you're seeing this, this is likely a bug in Relay.") : invariant5(false) : void 0;
              result = result[key];
            }
          }
        } catch (err2) {
          _iterator.e(err2);
        } finally {
          _iterator.f();
        }
        return result;
      }
      module2.exports = getValueAtPath;
    }
  });

  // node_modules/relay-runtime/lib/util/RelayProfiler.js
  var require_RelayProfiler = __commonJS({
    "node_modules/relay-runtime/lib/util/RelayProfiler.js"(exports2, module2) {
      "use strict";
      var profileHandlersByName = {};
      var defaultProfiler = {
        stop: function stop() {
        }
      };
      var RelayProfiler = {
        profile: function profile(name, state) {
          var handlers = profileHandlersByName[name];
          if (handlers && handlers.length > 0) {
            var stopHandlers = [];
            for (var ii = handlers.length - 1; ii >= 0; ii--) {
              var stopHandler = handlers[ii](name, state);
              stopHandlers.unshift(stopHandler);
            }
            return {
              stop: function stop(error) {
                stopHandlers.forEach(function(stopHandler2) {
                  return stopHandler2(error);
                });
              }
            };
          }
          return defaultProfiler;
        },
        attachProfileHandler: function attachProfileHandler(name, handler) {
          if (!profileHandlersByName.hasOwnProperty(name)) {
            profileHandlersByName[name] = [];
          }
          profileHandlersByName[name].push(handler);
        },
        detachProfileHandler: function detachProfileHandler(name, handler) {
          if (profileHandlersByName.hasOwnProperty(name)) {
            removeFromArray(profileHandlersByName[name], handler);
          }
        }
      };
      function removeFromArray(array, element) {
        var index2 = array.indexOf(element);
        if (index2 !== -1) {
          array.splice(index2, 1);
        }
      }
      module2.exports = RelayProfiler;
    }
  });

  // node_modules/relay-runtime/lib/index.js
  var require_lib = __commonJS({
    "node_modules/relay-runtime/lib/index.js"(exports2, module2) {
      "use strict";
      var ConnectionHandler = require_ConnectionHandler();
      var ConnectionInterface = require_ConnectionInterface();
      var MutationHandlers = require_MutationHandlers();
      var RelayDefaultHandlerProvider = require_RelayDefaultHandlerProvider();
      var applyOptimisticMutation = require_applyOptimisticMutation();
      var commitLocalUpdate = require_commitLocalUpdate();
      var commitMutation = require_commitMutation();
      var RelayDeclarativeMutationConfig = require_RelayDeclarativeMutationConfig();
      var RelayNetwork = require_RelayNetwork();
      var RelayObservable = require_RelayObservable();
      var RelayQueryResponseCache = require_RelayQueryResponseCache();
      var fetchQuery = require_fetchQuery();
      var fetchQuery_DEPRECATED = require_fetchQuery_DEPRECATED();
      var fetchQueryInternal = require_fetchQueryInternal();
      var GraphQLTag = require_GraphQLTag();
      var PreloadableQueryRegistry = require_PreloadableQueryRegistry();
      var _require = require_ClientID();
      var generateClientID = _require.generateClientID;
      var generateUniqueClientID = _require.generateUniqueClientID;
      var isClientID = _require.isClientID;
      var createFragmentSpecResolver = require_createFragmentSpecResolver();
      var createRelayContext = require_createRelayContext();
      var isRelayModernEnvironment = require_isRelayModernEnvironment();
      var readInlineData = require_readInlineData();
      var RelayConcreteVariables = require_RelayConcreteVariables();
      var RelayModernEnvironment = require_RelayModernEnvironment();
      var RelayModernOperationDescriptor = require_RelayModernOperationDescriptor();
      var RelayModernRecord = require_RelayModernRecord();
      var RelayModernSelector = require_RelayModernSelector();
      var RelayModernStore = require_RelayModernStore();
      var RelayOperationTracker = require_RelayOperationTracker();
      var RelayRecordSource = require_RelayRecordSource();
      var RelayStoreUtils = require_RelayStoreUtils();
      var ResolverFragments = require_ResolverFragments();
      var ViewerPattern = require_ViewerPattern();
      var requestSubscription = require_requestSubscription();
      var createPayloadFor3DField = require_createPayloadFor3DField();
      var deepFreeze = require_deepFreeze();
      var getFragmentIdentifier = require_getFragmentIdentifier();
      var getPaginationMetadata = require_getPaginationMetadata();
      var getPaginationVariables = require_getPaginationVariables();
      var getPendingOperationsForFragment = require_getPendingOperationsForFragment();
      var getRefetchMetadata = require_getRefetchMetadata();
      var getRelayHandleKey = require_getRelayHandleKey();
      var getRequestIdentifier = require_getRequestIdentifier();
      var getValueAtPath = require_getValueAtPath();
      var handlePotentialSnapshotErrors = require_handlePotentialSnapshotErrors();
      var isPromise2 = require_isPromise();
      var isScalarAndEqual = require_isScalarAndEqual();
      var recycleNodesInto = require_recycleNodesInto();
      var RelayConcreteNode = require_RelayConcreteNode();
      var RelayDefaultHandleKey = require_RelayDefaultHandleKey();
      var RelayError = require_RelayError();
      var RelayFeatureFlags = require_RelayFeatureFlags();
      var RelayProfiler = require_RelayProfiler();
      var RelayReplaySubject = require_RelayReplaySubject();
      var stableCopy = require_stableCopy();
      var withProvidedVariables = require_withProvidedVariables();
      if (true) {
        mapStr = typeof Map !== "function" ? "Map" : null;
        setStr = typeof Set !== "function" ? "Set" : null;
        promiseStr = typeof Promise !== "function" ? "Promise" : null;
        objStr = typeof Object.assign !== "function" ? "Object.assign" : null;
        if (mapStr || setStr || promiseStr || objStr) {
          throw new Error("relay-runtime requires ".concat([mapStr, setStr, promiseStr, objStr].filter(Boolean).join(", and "), " to exist. ") + "Use a polyfill to provide these for older browsers.");
        }
      }
      var mapStr;
      var setStr;
      var promiseStr;
      var objStr;
      module2.exports = {
        Environment: RelayModernEnvironment,
        Network: RelayNetwork,
        Observable: RelayObservable,
        QueryResponseCache: RelayQueryResponseCache,
        RecordSource: RelayRecordSource,
        Record: RelayModernRecord,
        ReplaySubject: RelayReplaySubject,
        Store: RelayModernStore,
        areEqualSelectors: RelayModernSelector.areEqualSelectors,
        createFragmentSpecResolver,
        createNormalizationSelector: RelayModernSelector.createNormalizationSelector,
        createOperationDescriptor: RelayModernOperationDescriptor.createOperationDescriptor,
        createReaderSelector: RelayModernSelector.createReaderSelector,
        createRequestDescriptor: RelayModernOperationDescriptor.createRequestDescriptor,
        getDataIDsFromFragment: RelayModernSelector.getDataIDsFromFragment,
        getDataIDsFromObject: RelayModernSelector.getDataIDsFromObject,
        getNode: GraphQLTag.getNode,
        getFragment: GraphQLTag.getFragment,
        getInlineDataFragment: GraphQLTag.getInlineDataFragment,
        getModuleComponentKey: RelayStoreUtils.getModuleComponentKey,
        getModuleOperationKey: RelayStoreUtils.getModuleOperationKey,
        getPaginationFragment: GraphQLTag.getPaginationFragment,
        getPluralSelector: RelayModernSelector.getPluralSelector,
        getRefetchableFragment: GraphQLTag.getRefetchableFragment,
        getRequest: GraphQLTag.getRequest,
        getRequestIdentifier,
        getSelector: RelayModernSelector.getSelector,
        getSelectorsFromObject: RelayModernSelector.getSelectorsFromObject,
        getSingularSelector: RelayModernSelector.getSingularSelector,
        getStorageKey: RelayStoreUtils.getStorageKey,
        getVariablesFromFragment: RelayModernSelector.getVariablesFromFragment,
        getVariablesFromObject: RelayModernSelector.getVariablesFromObject,
        getVariablesFromPluralFragment: RelayModernSelector.getVariablesFromPluralFragment,
        getVariablesFromSingularFragment: RelayModernSelector.getVariablesFromSingularFragment,
        handlePotentialSnapshotErrors,
        graphql: GraphQLTag.graphql,
        isFragment: GraphQLTag.isFragment,
        isInlineDataFragment: GraphQLTag.isInlineDataFragment,
        isRequest: GraphQLTag.isRequest,
        readInlineData,
        MutationTypes: RelayDeclarativeMutationConfig.MutationTypes,
        RangeOperations: RelayDeclarativeMutationConfig.RangeOperations,
        DefaultHandlerProvider: RelayDefaultHandlerProvider,
        ConnectionHandler,
        MutationHandlers,
        VIEWER_ID: ViewerPattern.VIEWER_ID,
        VIEWER_TYPE: ViewerPattern.VIEWER_TYPE,
        applyOptimisticMutation,
        commitLocalUpdate,
        commitMutation,
        fetchQuery,
        fetchQuery_DEPRECATED,
        isRelayModernEnvironment,
        requestSubscription,
        ConnectionInterface,
        PreloadableQueryRegistry,
        RelayProfiler,
        createPayloadFor3DField,
        RelayConcreteNode,
        RelayError,
        RelayFeatureFlags,
        DEFAULT_HANDLE_KEY: RelayDefaultHandleKey.DEFAULT_HANDLE_KEY,
        FRAGMENTS_KEY: RelayStoreUtils.FRAGMENTS_KEY,
        FRAGMENT_OWNER_KEY: RelayStoreUtils.FRAGMENT_OWNER_KEY,
        ID_KEY: RelayStoreUtils.ID_KEY,
        REF_KEY: RelayStoreUtils.REF_KEY,
        REFS_KEY: RelayStoreUtils.REFS_KEY,
        ROOT_ID: RelayStoreUtils.ROOT_ID,
        ROOT_TYPE: RelayStoreUtils.ROOT_TYPE,
        TYPENAME_KEY: RelayStoreUtils.TYPENAME_KEY,
        deepFreeze,
        generateClientID,
        generateUniqueClientID,
        getRelayHandleKey,
        isClientID,
        isPromise: isPromise2,
        isScalarAndEqual,
        recycleNodesInto,
        stableCopy,
        getFragmentIdentifier,
        getRefetchMetadata,
        getPaginationMetadata,
        getPaginationVariables,
        getPendingOperationsForFragment,
        getValueAtPath,
        __internal: {
          ResolverFragments,
          OperationTracker: RelayOperationTracker,
          createRelayContext,
          getOperationVariables: RelayConcreteVariables.getOperationVariables,
          fetchQuery: fetchQueryInternal.fetchQuery,
          fetchQueryDeduped: fetchQueryInternal.fetchQueryDeduped,
          getPromiseForActiveRequest: fetchQueryInternal.getPromiseForActiveRequest,
          getObservableForActiveRequest: fetchQueryInternal.getObservableForActiveRequest,
          withProvidedVariables
        }
      };
    }
  });

  // node_modules/relay-runtime/index.js
  var require_relay_runtime = __commonJS({
    "node_modules/relay-runtime/index.js"(exports2, module2) {
      module2.exports = require_lib();
    }
  });

  // node_modules/react-relay/lib/ReactRelayContext.js
  var require_ReactRelayContext = __commonJS({
    "node_modules/react-relay/lib/ReactRelayContext.js"(exports2, module2) {
      "use strict";
      var React112 = require_react();
      var _require = require_relay_runtime();
      var createRelayContext = _require.__internal.createRelayContext;
      module2.exports = createRelayContext(React112);
    }
  });

  // node_modules/react-relay/ReactRelayContext.js
  var require_ReactRelayContext2 = __commonJS({
    "node_modules/react-relay/ReactRelayContext.js"(exports2, module2) {
      module2.exports = require_ReactRelayContext();
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js
  var require_useRelayEnvironment = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js"(exports2, module2) {
      "use strict";
      var invariant5 = require_browser();
      var _require = require_react();
      var useContext18 = _require.useContext;
      var ReactRelayContext = require_ReactRelayContext2();
      function useRelayEnvironment() {
        var context3 = useContext18(ReactRelayContext);
        !(context3 != null) ? true ? invariant5(false, "useRelayEnvironment: Expected to have found a Relay environment provided by a `RelayEnvironmentProvider` component. This usually means that useRelayEnvironment was used in a component that is not a descendant of a `RelayEnvironmentProvider`. Please make sure a `RelayEnvironmentProvider` has been rendered somewhere as a parent or ancestor of your component.") : invariant5(false) : void 0;
        return context3.environment;
      }
      module2.exports = useRelayEnvironment;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/EntryPointContainer.react.js
  var require_EntryPointContainer_react = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/EntryPointContainer.react.js"(exports2, module2) {
      "use strict";
      var ProfilerContext = require_ProfilerContext();
      var useRelayEnvironment = require_useRelayEnvironment();
      var React112 = require_react();
      var _require = require_react();
      var useContext18 = _require.useContext;
      var useEffect12 = _require.useEffect;
      var warning6 = require_warning();
      function EntryPointContainer(_ref2) {
        var entryPointReference = _ref2.entryPointReference, props = _ref2.props;
        true ? warning6(entryPointReference.isDisposed === false, "<EntryPointContainer>: Expected entryPointReference to not be disposed yet. This is because disposing the entrypoint marks it for future garbage collection, and as such may no longer be present in the Relay store. In the future, this will become a hard error.") : void 0;
        var getComponent = entryPointReference.getComponent, queries = entryPointReference.queries, entryPoints = entryPointReference.entryPoints, extraProps = entryPointReference.extraProps, rootModuleID = entryPointReference.rootModuleID;
        var Component15 = getComponent();
        var profilerContext = useContext18(ProfilerContext);
        var environment = useRelayEnvironment();
        useEffect12(function() {
          environment.__log({
            name: "entrypoint.root.consume",
            profilerContext,
            rootModuleID
          });
        }, [environment, profilerContext, rootModuleID]);
        return /* @__PURE__ */ React112.createElement(Component15, {
          entryPoints,
          extraProps,
          props,
          queries
        });
      }
      module2.exports = EntryPointContainer;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/loadQuery.js
  var require_loadQuery = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/loadQuery.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var invariant5 = require_browser();
      var React112 = require_react();
      var _require = require_relay_runtime();
      var Observable = _require.Observable;
      var PreloadableQueryRegistry = _require.PreloadableQueryRegistry;
      var RelayFeatureFlags = _require.RelayFeatureFlags;
      var ReplaySubject = _require.ReplaySubject;
      var fetchQueryDeduped = _require.__internal.fetchQueryDeduped;
      var createOperationDescriptor = _require.createOperationDescriptor;
      var getRequest = _require.getRequest;
      var getRequestIdentifier = _require.getRequestIdentifier;
      var warning6 = require_warning();
      var RenderDispatcher = null;
      var fetchKey = 100001;
      function useTrackLoadQueryInRender() {
        if (RenderDispatcher === null) {
          var _React$__SECRET_INTER, _React$__SECRET_INTER2;
          RenderDispatcher = (_React$__SECRET_INTER = React112.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React$__SECRET_INTER === void 0 ? void 0 : (_React$__SECRET_INTER2 = _React$__SECRET_INTER.ReactCurrentDispatcher) === null || _React$__SECRET_INTER2 === void 0 ? void 0 : _React$__SECRET_INTER2.current;
        }
      }
      function loadQuery(environment, preloadableRequest, variables, options, environmentProviderOptions) {
        var _React$__SECRET_INTER3, _React$__SECRET_INTER4, _options$__nameForWar, _options$fetchPolicy;
        var CurrentDispatcher = (_React$__SECRET_INTER3 = React112.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React$__SECRET_INTER3 === void 0 ? void 0 : (_React$__SECRET_INTER4 = _React$__SECRET_INTER3.ReactCurrentDispatcher) === null || _React$__SECRET_INTER4 === void 0 ? void 0 : _React$__SECRET_INTER4.current;
        true ? warning6(RenderDispatcher == null || CurrentDispatcher !== RenderDispatcher, "Relay: `%s` should not be called inside a React render function.", (_options$__nameForWar = options === null || options === void 0 ? void 0 : options.__nameForWarning) !== null && _options$__nameForWar !== void 0 ? _options$__nameForWar : "loadQuery") : void 0;
        fetchKey++;
        var fetchPolicy = (_options$fetchPolicy = options === null || options === void 0 ? void 0 : options.fetchPolicy) !== null && _options$fetchPolicy !== void 0 ? _options$fetchPolicy : "store-or-network";
        var networkCacheConfig = (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, options === null || options === void 0 ? void 0 : options.networkCacheConfig), {}, {
          force: true
        });
        var retainReference;
        var didExecuteNetworkSource = false;
        var executeWithNetworkSource = function executeWithNetworkSource2(operation, networkObservable2) {
          didExecuteNetworkSource = true;
          return environment.executeWithSource({
            operation,
            source: networkObservable2
          });
        };
        var executionSubject = new ReplaySubject();
        var returnedObservable = Observable.create(function(sink) {
          return executionSubject.subscribe(sink);
        });
        var unsubscribeFromNetworkRequest;
        var networkError = null;
        var didMakeNetworkRequest = false;
        var makeNetworkRequest = function makeNetworkRequest2(params2) {
          didMakeNetworkRequest = true;
          var observable;
          var subject = new ReplaySubject();
          if (RelayFeatureFlags.ENABLE_LOAD_QUERY_REQUEST_DEDUPING === true) {
            var identifier = "raw-network-request-" + getRequestIdentifier(params2, variables);
            observable = fetchQueryDeduped(environment, identifier, function() {
              var network2 = environment.getNetwork();
              return network2.execute(params2, variables, networkCacheConfig);
            });
          } else {
            var network = environment.getNetwork();
            observable = network.execute(params2, variables, networkCacheConfig);
          }
          var _observable$subscribe = observable.subscribe({
            error: function error(err2) {
              networkError = err2;
              subject.error(err2);
            },
            next: function next(data) {
              subject.next(data);
            },
            complete: function complete() {
              subject.complete();
            }
          }), unsubscribe = _observable$subscribe.unsubscribe;
          unsubscribeFromNetworkRequest = unsubscribe;
          return Observable.create(function(sink) {
            var subjectSubscription = subject.subscribe(sink);
            return function() {
              subjectSubscription.unsubscribe();
              unsubscribeFromNetworkRequest();
            };
          });
        };
        var unsubscribeFromExecution;
        var executeDeduped = function executeDeduped2(operation, fetchFn) {
          if (RelayFeatureFlags.ENABLE_LOAD_QUERY_REQUEST_DEDUPING === true) {
            didMakeNetworkRequest = true;
          }
          var _fetchQueryDeduped$su = fetchQueryDeduped(environment, operation.request.identifier, fetchFn).subscribe({
            error: function error(err2) {
              executionSubject.error(err2);
            },
            next: function next(data) {
              executionSubject.next(data);
            },
            complete: function complete() {
              executionSubject.complete();
            }
          });
          unsubscribeFromExecution = _fetchQueryDeduped$su.unsubscribe;
        };
        var checkAvailabilityAndExecute = function checkAvailabilityAndExecute2(concreteRequest) {
          var operation = createOperationDescriptor(concreteRequest, variables, networkCacheConfig);
          retainReference = environment.retain(operation);
          if (fetchPolicy === "store-only") {
            return;
          }
          var shouldFetch = fetchPolicy !== "store-or-network" || environment.check(operation).status !== "available";
          if (shouldFetch) {
            executeDeduped(operation, function() {
              var networkObservable2 = makeNetworkRequest(concreteRequest.params);
              var executeObservable = executeWithNetworkSource(operation, networkObservable2);
              return executeObservable;
            });
          }
        };
        var params;
        var cancelOnLoadCallback;
        var queryId;
        if (preloadableRequest.kind === "PreloadableConcreteRequest") {
          var preloadableConcreteRequest = preloadableRequest;
          params = preloadableConcreteRequest.params;
          var _params = params;
          queryId = _params.id;
          !(queryId !== null) ? true ? invariant5(false, "Relay: `loadQuery` requires that preloadable query `%s` has a persisted query id", params.name) : invariant5(false) : void 0;
          var _module = PreloadableQueryRegistry.get(queryId);
          if (_module != null) {
            checkAvailabilityAndExecute(_module);
          } else {
            var networkObservable = fetchPolicy === "store-only" ? null : makeNetworkRequest(params);
            var _PreloadableQueryRegi = PreloadableQueryRegistry.onLoad(queryId, function(preloadedModule) {
              cancelOnLoadCallback();
              var operation = createOperationDescriptor(preloadedModule, variables, networkCacheConfig);
              retainReference = environment.retain(operation);
              if (networkObservable != null) {
                executeDeduped(operation, function() {
                  return executeWithNetworkSource(operation, networkObservable);
                });
              }
            });
            cancelOnLoadCallback = _PreloadableQueryRegi.dispose;
          }
        } else {
          var graphQlTaggedNode = preloadableRequest;
          var request = getRequest(graphQlTaggedNode);
          params = request.params;
          queryId = params.cacheID != null ? params.cacheID : params.id;
          checkAvailabilityAndExecute(request);
        }
        var isDisposed = false;
        var isReleased = false;
        var isNetworkRequestCancelled = false;
        var releaseQuery = function releaseQuery2() {
          if (isReleased) {
            return;
          }
          retainReference && retainReference.dispose();
          isReleased = true;
        };
        var cancelNetworkRequest = function cancelNetworkRequest2() {
          if (isNetworkRequestCancelled) {
            return;
          }
          if (didExecuteNetworkSource) {
            unsubscribeFromExecution && unsubscribeFromExecution();
          } else {
            unsubscribeFromNetworkRequest && unsubscribeFromNetworkRequest();
          }
          cancelOnLoadCallback && cancelOnLoadCallback();
          isNetworkRequestCancelled = true;
        };
        return {
          kind: "PreloadedQuery",
          environment,
          environmentProviderOptions,
          dispose: function dispose() {
            if (isDisposed) {
              return;
            }
            releaseQuery();
            cancelNetworkRequest();
            isDisposed = true;
          },
          releaseQuery,
          cancelNetworkRequest,
          fetchKey,
          id: queryId,
          get isDisposed() {
            return isDisposed || isReleased;
          },
          get networkError() {
            return networkError;
          },
          name: params.name,
          networkCacheConfig,
          fetchPolicy,
          source: didMakeNetworkRequest ? returnedObservable : void 0,
          variables
        };
      }
      module2.exports = {
        loadQuery,
        useTrackLoadQueryInRender
      };
    }
  });

  // node_modules/react-relay/lib/relay-hooks/loadEntryPoint.js
  var require_loadEntryPoint = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/loadEntryPoint.js"(exports2, module2) {
      "use strict";
      var _require = require_loadQuery();
      var loadQuery = _require.loadQuery;
      function loadEntryPoint(environmentProvider, entryPoint, entryPointParams) {
        var loadingPromise = null;
        if (entryPoint.root.getModuleIfRequired() == null) {
          loadingPromise = entryPoint.root.load();
        }
        var preloadProps = entryPoint.getPreloadProps(entryPointParams);
        var queries = preloadProps.queries, entryPoints = preloadProps.entryPoints, extraProps = preloadProps.extraProps;
        var preloadedQueries = {};
        var preloadedEntryPoints = {};
        if (queries != null) {
          var queriesPropNames = Object.keys(queries);
          queriesPropNames.forEach(function(queryPropName) {
            var _queries$queryPropNam = queries[queryPropName], environmentProviderOptions = _queries$queryPropNam.environmentProviderOptions, options = _queries$queryPropNam.options, parameters = _queries$queryPropNam.parameters, variables = _queries$queryPropNam.variables;
            var environment = environmentProvider.getEnvironment(environmentProviderOptions);
            preloadedQueries[queryPropName] = loadQuery(environment, parameters, variables, {
              fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,
              networkCacheConfig: options === null || options === void 0 ? void 0 : options.networkCacheConfig,
              __nameForWarning: "loadEntryPoint"
            }, environmentProviderOptions);
          });
        }
        if (entryPoints != null) {
          var entryPointPropNames = Object.keys(entryPoints);
          entryPointPropNames.forEach(function(entryPointPropName) {
            var entryPointDescription = entryPoints[entryPointPropName];
            if (entryPointDescription == null) {
              return;
            }
            var nestedEntryPoint = entryPointDescription.entryPoint, nestedParams = entryPointDescription.entryPointParams;
            preloadedEntryPoints[entryPointPropName] = loadEntryPoint(environmentProvider, nestedEntryPoint, nestedParams);
          });
        }
        var isDisposed = false;
        return {
          dispose: function dispose() {
            if (isDisposed) {
              return;
            }
            if (preloadedQueries != null) {
              Object.values(preloadedQueries).forEach(function(_ref2) {
                var innerDispose = _ref2.dispose;
                innerDispose();
              });
            }
            if (preloadedEntryPoints != null) {
              Object.values(preloadedEntryPoints).forEach(function(_ref2) {
                var innerDispose = _ref2.dispose;
                innerDispose();
              });
            }
            isDisposed = true;
          },
          entryPoints: preloadedEntryPoints,
          extraProps: extraProps !== null && extraProps !== void 0 ? extraProps : null,
          getComponent: function getComponent() {
            var componentModule = entryPoint.root.getModuleIfRequired();
            if (componentModule == null) {
              var _loadingPromise;
              loadingPromise = (_loadingPromise = loadingPromise) !== null && _loadingPromise !== void 0 ? _loadingPromise : entryPoint.root.load();
              throw loadingPromise;
            }
            var component = componentModule["default"] != null ? componentModule["default"] : componentModule;
            return component;
          },
          get isDisposed() {
            return isDisposed;
          },
          queries: preloadedQueries,
          rootModuleID: entryPoint.root.getModuleId()
        };
      }
      module2.exports = loadEntryPoint;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/RelayEnvironmentProvider.js
  var require_RelayEnvironmentProvider = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/RelayEnvironmentProvider.js"(exports2, module2) {
      "use strict";
      var React112 = require_react();
      var ReactRelayContext = require_ReactRelayContext2();
      var useMemo13 = React112.useMemo;
      function RelayEnvironmentProvider2(props) {
        var children2 = props.children, environment = props.environment, getEnvironmentForActor = props.getEnvironmentForActor;
        var context3 = useMemo13(function() {
          return {
            environment,
            getEnvironmentForActor
          };
        }, [environment, getEnvironmentForActor]);
        return /* @__PURE__ */ React112.createElement(ReactRelayContext.Provider, {
          value: context3
        }, children2);
      }
      module2.exports = RelayEnvironmentProvider2;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useIsMountedRef.js
  var require_useIsMountedRef = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useIsMountedRef.js"(exports2, module2) {
      "use strict";
      var _require = require_react();
      var useEffect12 = _require.useEffect;
      var useRef11 = _require.useRef;
      function useIsMountedRef() {
        var isMountedRef = useRef11(true);
        useEffect12(function() {
          isMountedRef.current = true;
          return function() {
            isMountedRef.current = false;
          };
        }, []);
        return isMountedRef;
      }
      module2.exports = useIsMountedRef;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useEntryPointLoader.js
  var require_useEntryPointLoader = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useEntryPointLoader.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      var loadEntryPoint = require_loadEntryPoint();
      var _require = require_loadQuery();
      var useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;
      var useIsMountedRef = require_useIsMountedRef();
      var _require2 = require_react();
      var useCallback8 = _require2.useCallback;
      var useEffect12 = _require2.useEffect;
      var useRef11 = _require2.useRef;
      var useState17 = _require2.useState;
      var initialNullEntryPointReferenceState = {
        kind: "NullEntryPointReference"
      };
      function useLoadEntryPoint(environmentProvider, entryPoint, options) {
        var _options$TEST_ONLY__i, _options$TEST_ONLY__i2, _options$TEST_ONLY__i3, _options$TEST_ONLY__i4;
        useTrackLoadQueryInRender();
        var initialEntryPointReferenceInternal = (_options$TEST_ONLY__i = options === null || options === void 0 ? void 0 : (_options$TEST_ONLY__i2 = options.TEST_ONLY__initialEntryPointData) === null || _options$TEST_ONLY__i2 === void 0 ? void 0 : _options$TEST_ONLY__i2.entryPointReference) !== null && _options$TEST_ONLY__i !== void 0 ? _options$TEST_ONLY__i : initialNullEntryPointReferenceState;
        var initialEntryPointParamsInternal = (_options$TEST_ONLY__i3 = options === null || options === void 0 ? void 0 : (_options$TEST_ONLY__i4 = options.TEST_ONLY__initialEntryPointData) === null || _options$TEST_ONLY__i4 === void 0 ? void 0 : _options$TEST_ONLY__i4.entryPointParams) !== null && _options$TEST_ONLY__i3 !== void 0 ? _options$TEST_ONLY__i3 : null;
        var isMountedRef = useIsMountedRef();
        var undisposedEntryPointReferencesRef = useRef11(/* @__PURE__ */ new Set([initialEntryPointReferenceInternal]));
        var _useState = useState17(initialEntryPointReferenceInternal), entryPointReference = _useState[0], setEntryPointReference = _useState[1];
        var _useState2 = useState17(initialEntryPointParamsInternal), entryPointParams = _useState2[0], setEntryPointParams = _useState2[1];
        var disposeEntryPoint = useCallback8(function() {
          if (isMountedRef.current) {
            var nullEntryPointReference = {
              kind: "NullEntryPointReference"
            };
            undisposedEntryPointReferencesRef.current.add(nullEntryPointReference);
            setEntryPointReference(nullEntryPointReference);
          }
        }, [setEntryPointReference, isMountedRef]);
        var entryPointLoaderCallback = useCallback8(function(params) {
          if (isMountedRef.current) {
            var updatedEntryPointReference = loadEntryPoint(environmentProvider, entryPoint, params);
            undisposedEntryPointReferencesRef.current.add(updatedEntryPointReference);
            setEntryPointReference(updatedEntryPointReference);
            setEntryPointParams(params);
          }
        }, [environmentProvider, entryPoint, setEntryPointReference, isMountedRef]);
        var maybeHiddenOrFastRefresh = useRef11(false);
        useEffect12(function() {
          return function() {
            maybeHiddenOrFastRefresh.current = true;
          };
        }, []);
        useEffect12(function() {
          if (maybeHiddenOrFastRefresh.current === true) {
            maybeHiddenOrFastRefresh.current = false;
            if (entryPointReference.kind !== "NullEntryPointReference" && entryPointParams != null) {
              entryPointLoaderCallback(entryPointParams);
            }
            return;
          }
          var undisposedEntryPointReferences = undisposedEntryPointReferencesRef.current;
          if (isMountedRef.current) {
            var _iterator = (0, _createForOfIteratorHelper2["default"])(undisposedEntryPointReferences), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var undisposedEntryPointReference = _step.value;
                if (undisposedEntryPointReference === entryPointReference) {
                  break;
                }
                undisposedEntryPointReferences["delete"](undisposedEntryPointReference);
                if (undisposedEntryPointReference.kind !== "NullEntryPointReference") {
                  undisposedEntryPointReference.dispose();
                }
              }
            } catch (err2) {
              _iterator.e(err2);
            } finally {
              _iterator.f();
            }
          }
        }, [entryPointReference, entryPointParams, entryPointLoaderCallback, isMountedRef]);
        useEffect12(function() {
          return function disposeAllRemainingEntryPointReferences() {
            var _iterator2 = (0, _createForOfIteratorHelper2["default"])(undisposedEntryPointReferencesRef.current), _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                var unhandledStateChange = _step2.value;
                if (unhandledStateChange.kind !== "NullEntryPointReference") {
                  unhandledStateChange.dispose();
                }
              }
            } catch (err2) {
              _iterator2.e(err2);
            } finally {
              _iterator2.f();
            }
          };
        }, []);
        return [entryPointReference.kind === "NullEntryPointReference" ? null : entryPointReference, entryPointLoaderCallback, disposeEntryPoint];
      }
      module2.exports = useLoadEntryPoint;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/HooksImplementation.js
  var require_HooksImplementation = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/HooksImplementation.js"(exports2, module2) {
      "use strict";
      var warning6 = require_warning();
      var implementation = null;
      function inject(impl) {
        true ? warning6(implementation !== null, "Relay HooksImplementation was injected twice.") : void 0;
        implementation = impl;
      }
      function get2() {
        return implementation;
      }
      module2.exports = {
        inject,
        get: get2
      };
    }
  });

  // node_modules/react-relay/lib/relay-hooks/LRUCache.js
  var require_LRUCache = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/LRUCache.js"(exports2, module2) {
      "use strict";
      var invariant5 = require_browser();
      var LRUCache2 = /* @__PURE__ */ function() {
        function LRUCache3(capacity) {
          this._capacity = capacity;
          !(this._capacity > 0) ? true ? invariant5(false, "LRUCache: Unable to create instance of cache with zero or negative capacity.") : invariant5(false) : void 0;
          this._map = /* @__PURE__ */ new Map();
        }
        var _proto = LRUCache3.prototype;
        _proto.set = function set2(key, value) {
          this._map["delete"](key);
          this._map.set(key, value);
          if (this._map.size > this._capacity) {
            var firstKey = this._map.keys().next();
            if (!firstKey.done) {
              this._map["delete"](firstKey.value);
            }
          }
        };
        _proto.get = function get2(key) {
          var value = this._map.get(key);
          if (value != null) {
            this._map["delete"](key);
            this._map.set(key, value);
          }
          return value;
        };
        _proto.has = function has2(key) {
          return this._map.has(key);
        };
        _proto["delete"] = function _delete(key) {
          this._map["delete"](key);
        };
        _proto.size = function size() {
          return this._map.size;
        };
        _proto.capacity = function capacity() {
          return this._capacity - this._map.size;
        };
        _proto.clear = function clear() {
          this._map.clear();
        };
        return LRUCache3;
      }();
      function create(capacity) {
        return new LRUCache2(capacity);
      }
      module2.exports = {
        create
      };
    }
  });

  // node_modules/react-relay/lib/relay-hooks/SuspenseResource.js
  var require_SuspenseResource = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/SuspenseResource.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _defineProperty210 = _interopRequireDefault(require_defineProperty());
      var invariant5 = require_browser();
      var TEMPORARY_RETAIN_DURATION_MS = 5 * 60 * 1e3;
      var SuspenseResource = /* @__PURE__ */ function() {
        function SuspenseResource2(retain) {
          var _this = this;
          (0, _defineProperty210["default"])(this, "_retainCount", 0);
          (0, _defineProperty210["default"])(this, "_retainDisposable", null);
          (0, _defineProperty210["default"])(this, "_releaseTemporaryRetain", null);
          this._retain = function(environment) {
            _this._retainCount++;
            if (_this._retainCount === 1) {
              _this._retainDisposable = retain(environment);
            }
            return {
              dispose: function dispose() {
                _this._retainCount = Math.max(0, _this._retainCount - 1);
                if (_this._retainCount === 0) {
                  !(_this._retainDisposable != null) ? true ? invariant5(false, "Relay: Expected disposable to release query to be defined.If you're seeing this, this is likely a bug in Relay.") : invariant5(false) : void 0;
                  _this._retainDisposable.dispose();
                  _this._retainDisposable = null;
                }
              }
            };
          };
        }
        var _proto = SuspenseResource2.prototype;
        _proto.temporaryRetain = function temporaryRetain(environment) {
          var _this2 = this;
          var _this$_releaseTempora;
          if (environment.isServer()) {
            return {
              dispose: function dispose() {
              }
            };
          }
          var retention = this._retain(environment);
          var releaseQueryTimeout = null;
          var releaseTemporaryRetain = function releaseTemporaryRetain2() {
            clearTimeout(releaseQueryTimeout);
            releaseQueryTimeout = null;
            _this2._releaseTemporaryRetain = null;
            retention.dispose();
          };
          releaseQueryTimeout = setTimeout(releaseTemporaryRetain, TEMPORARY_RETAIN_DURATION_MS);
          (_this$_releaseTempora = this._releaseTemporaryRetain) === null || _this$_releaseTempora === void 0 ? void 0 : _this$_releaseTempora.call(this);
          this._releaseTemporaryRetain = releaseTemporaryRetain;
          return {
            dispose: function dispose() {
              var _this$_releaseTempora2;
              (_this$_releaseTempora2 = _this2._releaseTemporaryRetain) === null || _this$_releaseTempora2 === void 0 ? void 0 : _this$_releaseTempora2.call(_this2);
            }
          };
        };
        _proto.permanentRetain = function permanentRetain(environment) {
          var disposable = this._retain(environment);
          this.releaseTemporaryRetain();
          return disposable;
        };
        _proto.releaseTemporaryRetain = function releaseTemporaryRetain() {
          var _this$_releaseTempora3;
          (_this$_releaseTempora3 = this._releaseTemporaryRetain) === null || _this$_releaseTempora3 === void 0 ? void 0 : _this$_releaseTempora3.call(this);
          this._releaseTemporaryRetain = null;
        };
        _proto.getRetainCount = function getRetainCount() {
          return this._retainCount;
        };
        return SuspenseResource2;
      }();
      module2.exports = SuspenseResource;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/QueryResource.js
  var require_QueryResource = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/QueryResource.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var _defineProperty210 = _interopRequireDefault(require_defineProperty());
      var LRUCache2 = require_LRUCache();
      var SuspenseResource = require_SuspenseResource();
      var invariant5 = require_browser();
      var _require = require_relay_runtime();
      var isPromise2 = _require.isPromise;
      var warning6 = require_warning();
      var CACHE_CAPACITY = 1e3;
      var DEFAULT_FETCH_POLICY = "store-or-network";
      var WEAKMAP_SUPPORTED = typeof WeakMap === "function";
      function operationIsLiveQuery(operation) {
        return operation.request.node.params.metadata.live !== void 0;
      }
      function getQueryCacheIdentifier(environment, operation, maybeFetchPolicy, maybeRenderPolicy, cacheBreaker) {
        var fetchPolicy = maybeFetchPolicy !== null && maybeFetchPolicy !== void 0 ? maybeFetchPolicy : DEFAULT_FETCH_POLICY;
        var renderPolicy = maybeRenderPolicy !== null && maybeRenderPolicy !== void 0 ? maybeRenderPolicy : environment.UNSTABLE_getDefaultRenderPolicy();
        var cacheIdentifier = "".concat(fetchPolicy, "-").concat(renderPolicy, "-").concat(operation.request.identifier);
        if (cacheBreaker != null) {
          return "".concat(cacheIdentifier, "-").concat(cacheBreaker);
        }
        return cacheIdentifier;
      }
      function getQueryResult(operation, cacheIdentifier) {
        var rootFragmentRef = {
          __id: operation.fragment.dataID,
          __fragments: (0, _defineProperty210["default"])({}, operation.fragment.node.name, operation.request.variables),
          __fragmentOwner: operation.request
        };
        return {
          cacheIdentifier,
          fragmentNode: operation.request.node.fragment,
          fragmentRef: rootFragmentRef,
          operation
        };
      }
      var nextID2 = 2e5;
      function createCacheEntry(cacheIdentifier, operation, operationAvailability, value, networkSubscription, onDispose) {
        var isLiveQuery = operationIsLiveQuery(operation);
        var currentValue = value;
        var currentNetworkSubscription = networkSubscription;
        var suspenseResource = new SuspenseResource(function(environment) {
          var retention = environment.retain(operation);
          return {
            dispose: function dispose() {
              if (isLiveQuery && currentNetworkSubscription != null) {
                currentNetworkSubscription.unsubscribe();
              }
              retention.dispose();
              onDispose(cacheEntry);
            }
          };
        });
        var cacheEntry = {
          cacheIdentifier,
          id: nextID2++,
          processedPayloadsCount: 0,
          operationAvailability,
          getValue: function getValue3() {
            return currentValue;
          },
          setValue: function setValue(val) {
            currentValue = val;
          },
          setNetworkSubscription: function setNetworkSubscription(subscription) {
            if (isLiveQuery && currentNetworkSubscription != null) {
              currentNetworkSubscription.unsubscribe();
            }
            currentNetworkSubscription = subscription;
          },
          temporaryRetain: function temporaryRetain(environment) {
            return suspenseResource.temporaryRetain(environment);
          },
          permanentRetain: function permanentRetain(environment) {
            return suspenseResource.permanentRetain(environment);
          },
          releaseTemporaryRetain: function releaseTemporaryRetain() {
            suspenseResource.releaseTemporaryRetain();
          }
        };
        return cacheEntry;
      }
      var QueryResourceImpl = /* @__PURE__ */ function() {
        function QueryResourceImpl2(environment) {
          var _this = this;
          (0, _defineProperty210["default"])(this, "_clearCacheEntry", function(cacheEntry) {
            _this._cache["delete"](cacheEntry.cacheIdentifier);
          });
          this._environment = environment;
          this._cache = LRUCache2.create(CACHE_CAPACITY);
        }
        var _proto = QueryResourceImpl2.prototype;
        _proto.prepare = function prepare2(operation, fetchObservable, maybeFetchPolicy, maybeRenderPolicy, observer, cacheBreaker, profilerContext) {
          var cacheIdentifier = getQueryCacheIdentifier(this._environment, operation, maybeFetchPolicy, maybeRenderPolicy, cacheBreaker);
          return this.prepareWithIdentifier(cacheIdentifier, operation, fetchObservable, maybeFetchPolicy, maybeRenderPolicy, observer, profilerContext);
        };
        _proto.prepareWithIdentifier = function prepareWithIdentifier(cacheIdentifier, operation, fetchObservable, maybeFetchPolicy, maybeRenderPolicy, observer, profilerContext) {
          var environment = this._environment;
          var fetchPolicy = maybeFetchPolicy !== null && maybeFetchPolicy !== void 0 ? maybeFetchPolicy : DEFAULT_FETCH_POLICY;
          var renderPolicy = maybeRenderPolicy !== null && maybeRenderPolicy !== void 0 ? maybeRenderPolicy : environment.UNSTABLE_getDefaultRenderPolicy();
          var cacheEntry = this._cache.get(cacheIdentifier);
          var temporaryRetainDisposable = null;
          var entryWasCached = cacheEntry != null;
          if (cacheEntry == null) {
            cacheEntry = this._fetchAndSaveQuery(cacheIdentifier, operation, fetchObservable, fetchPolicy, renderPolicy, profilerContext, (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, observer), {}, {
              unsubscribe: function unsubscribe(subscription) {
                if (temporaryRetainDisposable != null) {
                  temporaryRetainDisposable.dispose();
                }
                var observerUnsubscribe = observer === null || observer === void 0 ? void 0 : observer.unsubscribe;
                observerUnsubscribe && observerUnsubscribe(subscription);
              }
            }));
          }
          temporaryRetainDisposable = cacheEntry.temporaryRetain(environment);
          var cachedValue = cacheEntry.getValue();
          if (isPromise2(cachedValue)) {
            environment.__log({
              name: "suspense.query",
              fetchPolicy,
              isPromiseCached: entryWasCached,
              operation,
              queryAvailability: cacheEntry.operationAvailability,
              renderPolicy
            });
            throw cachedValue;
          }
          if (cachedValue instanceof Error) {
            throw cachedValue;
          }
          return cachedValue;
        };
        _proto.retain = function retain(queryResult, profilerContext) {
          var environment = this._environment;
          var cacheIdentifier = queryResult.cacheIdentifier, operation = queryResult.operation;
          var cacheEntry = this._getOrCreateCacheEntry(cacheIdentifier, operation, null, queryResult, null);
          var disposable = cacheEntry.permanentRetain(environment);
          environment.__log({
            name: "queryresource.retain",
            profilerContext,
            resourceID: cacheEntry.id
          });
          return {
            dispose: function dispose() {
              disposable.dispose();
            }
          };
        };
        _proto.releaseTemporaryRetain = function releaseTemporaryRetain(queryResult) {
          var cacheEntry = this._cache.get(queryResult.cacheIdentifier);
          if (cacheEntry != null) {
            cacheEntry.releaseTemporaryRetain();
          }
        };
        _proto.TESTS_ONLY__getCacheEntry = function TESTS_ONLY__getCacheEntry(operation, maybeFetchPolicy, maybeRenderPolicy, cacheBreaker) {
          var environment = this._environment;
          var cacheIdentifier = getQueryCacheIdentifier(environment, operation, maybeFetchPolicy, maybeRenderPolicy, cacheBreaker);
          return this._cache.get(cacheIdentifier);
        };
        _proto._getOrCreateCacheEntry = function _getOrCreateCacheEntry(cacheIdentifier, operation, operationAvailability, value, networkSubscription) {
          var cacheEntry = this._cache.get(cacheIdentifier);
          if (cacheEntry == null) {
            cacheEntry = createCacheEntry(cacheIdentifier, operation, operationAvailability, value, networkSubscription, this._clearCacheEntry);
            this._cache.set(cacheIdentifier, cacheEntry);
          }
          return cacheEntry;
        };
        _proto._fetchAndSaveQuery = function _fetchAndSaveQuery(cacheIdentifier, operation, fetchObservable, fetchPolicy, renderPolicy, profilerContext, observer) {
          var _this2 = this;
          var environment = this._environment;
          var queryAvailability = environment.check(operation);
          var queryStatus = queryAvailability.status;
          var hasFullQuery = queryStatus === "available";
          var canPartialRender = hasFullQuery || renderPolicy === "partial" && queryStatus !== "stale";
          var shouldFetch;
          var shouldAllowRender;
          var resolveNetworkPromise = function resolveNetworkPromise2() {
          };
          switch (fetchPolicy) {
            case "store-only": {
              shouldFetch = false;
              shouldAllowRender = true;
              break;
            }
            case "store-or-network": {
              shouldFetch = !hasFullQuery;
              shouldAllowRender = canPartialRender;
              break;
            }
            case "store-and-network": {
              shouldFetch = true;
              shouldAllowRender = canPartialRender;
              break;
            }
            case "network-only":
            default: {
              shouldFetch = true;
              shouldAllowRender = false;
              break;
            }
          }
          if (shouldAllowRender) {
            var queryResult = getQueryResult(operation, cacheIdentifier);
            var _cacheEntry = createCacheEntry(cacheIdentifier, operation, queryAvailability, queryResult, null, this._clearCacheEntry);
            this._cache.set(cacheIdentifier, _cacheEntry);
          }
          if (shouldFetch) {
            var _queryResult = getQueryResult(operation, cacheIdentifier);
            var networkSubscription;
            fetchObservable.subscribe({
              start: function start(subscription) {
                networkSubscription = subscription;
                var cacheEntry2 = _this2._cache.get(cacheIdentifier);
                if (cacheEntry2) {
                  cacheEntry2.setNetworkSubscription(networkSubscription);
                }
                var observerStart = observer === null || observer === void 0 ? void 0 : observer.start;
                if (observerStart) {
                  var subscriptionWithConditionalCancelation = (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, subscription), {}, {
                    unsubscribe: function unsubscribe() {
                      if (operationIsLiveQuery(operation)) {
                        subscription.unsubscribe();
                      }
                    }
                  });
                  observerStart(subscriptionWithConditionalCancelation);
                }
              },
              next: function next() {
                var cacheEntry2 = _this2._getOrCreateCacheEntry(cacheIdentifier, operation, queryAvailability, _queryResult, networkSubscription);
                cacheEntry2.processedPayloadsCount += 1;
                cacheEntry2.setValue(_queryResult);
                resolveNetworkPromise();
                var observerNext = observer === null || observer === void 0 ? void 0 : observer.next;
                if (observerNext != null) {
                  var snapshot = environment.lookup(operation.fragment);
                  observerNext(snapshot);
                }
              },
              error: function error(_error) {
                var cacheEntry2 = _this2._getOrCreateCacheEntry(cacheIdentifier, operation, queryAvailability, _error, networkSubscription);
                if (cacheEntry2.processedPayloadsCount === 0) {
                  cacheEntry2.setValue(_error);
                } else {
                  true ? warning6(false, "QueryResource: An incremental payload for query `%s` returned an error: `%s`.", operation.fragment.node.name, String(_error.message)) : void 0;
                }
                resolveNetworkPromise();
                networkSubscription = null;
                cacheEntry2.setNetworkSubscription(null);
                var observerError = observer === null || observer === void 0 ? void 0 : observer.error;
                observerError && observerError(_error);
              },
              complete: function complete() {
                resolveNetworkPromise();
                networkSubscription = null;
                var cacheEntry2 = _this2._cache.get(cacheIdentifier);
                if (cacheEntry2) {
                  cacheEntry2.setNetworkSubscription(null);
                }
                var observerComplete2 = observer === null || observer === void 0 ? void 0 : observer.complete;
                observerComplete2 && observerComplete2();
              },
              unsubscribe: observer === null || observer === void 0 ? void 0 : observer.unsubscribe
            });
            var _cacheEntry2 = this._cache.get(cacheIdentifier);
            if (!_cacheEntry2) {
              var networkPromise = new Promise(function(resolve) {
                resolveNetworkPromise = resolve;
              });
              networkPromise.displayName = "Relay(" + operation.fragment.node.name + ")";
              _cacheEntry2 = createCacheEntry(cacheIdentifier, operation, queryAvailability, networkPromise, networkSubscription, this._clearCacheEntry);
              this._cache.set(cacheIdentifier, _cacheEntry2);
            }
          } else {
            var observerComplete = observer === null || observer === void 0 ? void 0 : observer.complete;
            observerComplete && observerComplete();
          }
          var cacheEntry = this._cache.get(cacheIdentifier);
          !(cacheEntry != null) ? true ? invariant5(false, "Relay: Expected to have cached a result when attempting to fetch query.If you're seeing this, this is likely a bug in Relay.") : invariant5(false) : void 0;
          environment.__log({
            name: "queryresource.fetch",
            resourceID: cacheEntry.id,
            operation,
            profilerContext,
            fetchPolicy,
            renderPolicy,
            queryAvailability,
            shouldFetch
          });
          return cacheEntry;
        };
        return QueryResourceImpl2;
      }();
      function createQueryResource(environment) {
        return new QueryResourceImpl(environment);
      }
      var dataResources = WEAKMAP_SUPPORTED ? /* @__PURE__ */ new WeakMap() : /* @__PURE__ */ new Map();
      function getQueryResourceForEnvironment(environment) {
        var cached = dataResources.get(environment);
        if (cached) {
          return cached;
        }
        var newDataResource = createQueryResource(environment);
        dataResources.set(environment, newDataResource);
        return newDataResource;
      }
      module2.exports = {
        createQueryResource,
        getQueryResourceForEnvironment,
        getQueryCacheIdentifier
      };
    }
  });

  // node_modules/react-relay/lib/relay-hooks/FragmentResource.js
  var require_FragmentResource = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/FragmentResource.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var _defineProperty210 = _interopRequireDefault(require_defineProperty());
      var _toConsumableArray22 = _interopRequireDefault(require_toConsumableArray());
      var LRUCache2 = require_LRUCache();
      var _require = require_QueryResource();
      var getQueryResourceForEnvironment = _require.getQueryResourceForEnvironment;
      var SuspenseResource = require_SuspenseResource();
      var invariant5 = require_browser();
      var _require2 = require_relay_runtime();
      var RelayFeatureFlags = _require2.RelayFeatureFlags;
      var _require2$__internal = _require2.__internal;
      var fetchQuery = _require2$__internal.fetchQuery;
      var getPromiseForActiveRequest = _require2$__internal.getPromiseForActiveRequest;
      var createOperationDescriptor = _require2.createOperationDescriptor;
      var getFragmentIdentifier = _require2.getFragmentIdentifier;
      var getPendingOperationsForFragment = _require2.getPendingOperationsForFragment;
      var getSelector = _require2.getSelector;
      var getVariablesFromFragment = _require2.getVariablesFromFragment;
      var handlePotentialSnapshotErrors = _require2.handlePotentialSnapshotErrors;
      var isPromise2 = _require2.isPromise;
      var recycleNodesInto = _require2.recycleNodesInto;
      var WEAKMAP_SUPPORTED = typeof WeakMap === "function";
      var CACHE_CAPACITY = 1e6;
      var CONSTANT_READONLY_EMPTY_ARRAY = Object.freeze([]);
      function isMissingData(snapshot) {
        if (Array.isArray(snapshot)) {
          return snapshot.some(function(s) {
            return s.isMissingData;
          });
        }
        return snapshot.isMissingData;
      }
      function hasMissingClientEdges(snapshot) {
        var _snapshot$missingClie, _snapshot$missingClie2;
        if (Array.isArray(snapshot)) {
          return snapshot.some(function(s) {
            var _s$missingClientEdges, _s$missingClientEdges2;
            return ((_s$missingClientEdges = (_s$missingClientEdges2 = s.missingClientEdges) === null || _s$missingClientEdges2 === void 0 ? void 0 : _s$missingClientEdges2.length) !== null && _s$missingClientEdges !== void 0 ? _s$missingClientEdges : 0) > 0;
          });
        }
        return ((_snapshot$missingClie = (_snapshot$missingClie2 = snapshot.missingClientEdges) === null || _snapshot$missingClie2 === void 0 ? void 0 : _snapshot$missingClie2.length) !== null && _snapshot$missingClie !== void 0 ? _snapshot$missingClie : 0) > 0;
      }
      function missingLiveResolverFields(snapshot) {
        if (Array.isArray(snapshot)) {
          return snapshot.map(function(s) {
            return s.missingLiveResolverFields;
          }).filter(Boolean).flat();
        }
        return snapshot.missingLiveResolverFields;
      }
      function singularOrPluralForEach(snapshot, f) {
        if (Array.isArray(snapshot)) {
          snapshot.forEach(f);
        } else {
          f(snapshot);
        }
      }
      function getFragmentResult(cacheKey, snapshot, storeEpoch) {
        if (Array.isArray(snapshot)) {
          return {
            cacheKey,
            snapshot,
            data: snapshot.map(function(s) {
              return s.data;
            }),
            isMissingData: isMissingData(snapshot),
            storeEpoch
          };
        }
        return {
          cacheKey,
          snapshot,
          data: snapshot.data,
          isMissingData: isMissingData(snapshot),
          storeEpoch
        };
      }
      var ClientEdgeQueryResultsCache = /* @__PURE__ */ function() {
        function ClientEdgeQueryResultsCache2(environment) {
          (0, _defineProperty210["default"])(this, "_cache", /* @__PURE__ */ new Map());
          (0, _defineProperty210["default"])(this, "_retainCounts", /* @__PURE__ */ new Map());
          this._environment = environment;
        }
        var _proto = ClientEdgeQueryResultsCache2.prototype;
        _proto.get = function get2(fragmentIdentifier) {
          var _this$_cache$get$, _this$_cache$get;
          return (_this$_cache$get$ = (_this$_cache$get = this._cache.get(fragmentIdentifier)) === null || _this$_cache$get === void 0 ? void 0 : _this$_cache$get[0]) !== null && _this$_cache$get$ !== void 0 ? _this$_cache$get$ : void 0;
        };
        _proto.recordQueryResults = function recordQueryResults(fragmentIdentifier, value) {
          var _this = this;
          var existing = this._cache.get(fragmentIdentifier);
          if (!existing) {
            var suspenseResource = new SuspenseResource(function() {
              return _this._retain(fragmentIdentifier);
            });
            this._cache.set(fragmentIdentifier, [value, suspenseResource]);
            suspenseResource.temporaryRetain(this._environment);
          } else {
            var existingResults = existing[0], _suspenseResource = existing[1];
            value.forEach(function(queryResult) {
              existingResults.push(queryResult);
            });
            _suspenseResource.temporaryRetain(this._environment);
          }
        };
        _proto._retain = function _retain(id) {
          var _this2 = this;
          var _this$_retainCounts$g;
          var retainCount = ((_this$_retainCounts$g = this._retainCounts.get(id)) !== null && _this$_retainCounts$g !== void 0 ? _this$_retainCounts$g : 0) + 1;
          this._retainCounts.set(id, retainCount);
          return {
            dispose: function dispose() {
              var _this$_retainCounts$g2;
              var newRetainCount = ((_this$_retainCounts$g2 = _this2._retainCounts.get(id)) !== null && _this$_retainCounts$g2 !== void 0 ? _this$_retainCounts$g2 : 0) - 1;
              if (newRetainCount > 0) {
                _this2._retainCounts.set(id, newRetainCount);
              } else {
                _this2._retainCounts["delete"](id);
                _this2._cache["delete"](id);
              }
            }
          };
        };
        return ClientEdgeQueryResultsCache2;
      }();
      var FragmentResourceImpl = /* @__PURE__ */ function() {
        function FragmentResourceImpl2(environment) {
          this._environment = environment;
          this._cache = LRUCache2.create(CACHE_CAPACITY);
          if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
            this._clientEdgeQueryResultsCache = new ClientEdgeQueryResultsCache(environment);
          }
        }
        var _proto2 = FragmentResourceImpl2.prototype;
        _proto2.read = function read(fragmentNode, fragmentRef, componentDisplayName, fragmentKey) {
          return this.readWithIdentifier(fragmentNode, fragmentRef, getFragmentIdentifier(fragmentNode, fragmentRef), componentDisplayName, fragmentKey);
        };
        _proto2.readWithIdentifier = function readWithIdentifier(fragmentNode, fragmentRef, fragmentIdentifier, componentDisplayName, fragmentKey) {
          var _this3 = this;
          var _fragmentNode$metadat, _fragmentNode$metadat2, _missingLiveResolverF2, _missingLiveResolverF3;
          var environment = this._environment;
          if (fragmentRef == null) {
            return {
              cacheKey: fragmentIdentifier,
              data: null,
              isMissingData: false,
              snapshot: null,
              storeEpoch: 0
            };
          }
          var storeEpoch = environment.getStore().getEpoch();
          if ((fragmentNode === null || fragmentNode === void 0 ? void 0 : (_fragmentNode$metadat = fragmentNode.metadata) === null || _fragmentNode$metadat === void 0 ? void 0 : _fragmentNode$metadat.plural) === true) {
            !Array.isArray(fragmentRef) ? true ? invariant5(false, "Relay: Expected fragment pointer%s for fragment `%s` to be an array, instead got `%s`. Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.", fragmentKey != null ? " for key `".concat(fragmentKey, "`") : "", fragmentNode.name, typeof fragmentRef, fragmentNode.name) : invariant5(false) : void 0;
            if (fragmentRef.length === 0) {
              return {
                cacheKey: fragmentIdentifier,
                data: CONSTANT_READONLY_EMPTY_ARRAY,
                isMissingData: false,
                snapshot: CONSTANT_READONLY_EMPTY_ARRAY,
                storeEpoch
              };
            }
          }
          var cachedValue = this._cache.get(fragmentIdentifier);
          if (cachedValue != null) {
            var _missingLiveResolverF;
            if (cachedValue.kind === "pending" && isPromise2(cachedValue.promise)) {
              environment.__log({
                name: "suspense.fragment",
                data: cachedValue.result.data,
                fragment: fragmentNode,
                isRelayHooks: true,
                isMissingData: cachedValue.result.isMissingData,
                isPromiseCached: true,
                pendingOperations: cachedValue.pendingOperations
              });
              throw cachedValue.promise;
            }
            if (cachedValue.kind === "done" && cachedValue.result.snapshot && !((_missingLiveResolverF = missingLiveResolverFields(cachedValue.result.snapshot)) !== null && _missingLiveResolverF !== void 0 && _missingLiveResolverF.length)) {
              this._handlePotentialSnapshotErrorsInSnapshot(cachedValue.result.snapshot);
              return cachedValue.result;
            }
          }
          var fragmentSelector = getSelector(fragmentNode, fragmentRef);
          !(fragmentSelector != null) ? true ? invariant5(false, "Relay: Expected to receive an object where `...%s` was spread, but the fragment reference was not found`. This is most likely the result of:\n- Forgetting to spread `%s` in `%s`'s parent's fragment.\n- Conditionally fetching `%s` but unconditionally passing %s prop to `%s`. If the parent fragment only fetches the fragment conditionally - with e.g. `@include`, `@skip`, or inside a `... on SomeType { }` spread  - then the fragment reference will not exist. In this case, pass `null` if the conditions for evaluating the fragment are not met (e.g. if the `@include(if)` value is false.)", fragmentNode.name, fragmentNode.name, componentDisplayName, fragmentNode.name, fragmentKey == null ? "a fragment reference" : "the `".concat(fragmentKey, "`"), componentDisplayName) : invariant5(false) : void 0;
          var snapshot = fragmentSelector.kind === "PluralReaderSelector" ? fragmentSelector.selectors.map(function(s) {
            return environment.lookup(s);
          }) : environment.lookup(fragmentSelector);
          var fragmentResult = getFragmentResult(fragmentIdentifier, snapshot, storeEpoch);
          if (!fragmentResult.isMissingData) {
            this._handlePotentialSnapshotErrorsInSnapshot(snapshot);
            this._cache.set(fragmentIdentifier, {
              kind: "done",
              result: fragmentResult
            });
            return fragmentResult;
          }
          var clientEdgeRequests = null;
          if (RelayFeatureFlags.ENABLE_CLIENT_EDGES && ((_fragmentNode$metadat2 = fragmentNode.metadata) === null || _fragmentNode$metadat2 === void 0 ? void 0 : _fragmentNode$metadat2.hasClientEdges) === true && hasMissingClientEdges(snapshot)) {
            clientEdgeRequests = [];
            var queryResource = getQueryResourceForEnvironment(this._environment);
            var queryResults = [];
            singularOrPluralForEach(snapshot, function(snap) {
              var _snap$missingClientEd;
              (_snap$missingClientEd = snap.missingClientEdges) === null || _snap$missingClientEd === void 0 ? void 0 : _snap$missingClientEd.forEach(function(_ref2) {
                var _clientEdgeRequests;
                var request = _ref2.request, clientEdgeDestinationID = _ref2.clientEdgeDestinationID;
                var _this3$_performClient = _this3._performClientEdgeQuery(queryResource, fragmentNode, fragmentRef, request, clientEdgeDestinationID), queryResult = _this3$_performClient.queryResult, requestDescriptor = _this3$_performClient.requestDescriptor;
                queryResults.push(queryResult);
                (_clientEdgeRequests = clientEdgeRequests) === null || _clientEdgeRequests === void 0 ? void 0 : _clientEdgeRequests.push(requestDescriptor);
              });
            });
            !(this._clientEdgeQueryResultsCache != null) ? true ? invariant5(false, "Client edge query result cache should exist when ENABLE_CLIENT_EDGES is on.") : invariant5(false) : void 0;
            this._clientEdgeQueryResultsCache.recordQueryResults(fragmentIdentifier, queryResults);
          }
          var clientEdgePromises = [];
          if (RelayFeatureFlags.ENABLE_CLIENT_EDGES && clientEdgeRequests) {
            clientEdgePromises = clientEdgeRequests.map(function(request) {
              return getPromiseForActiveRequest(_this3._environment, request);
            }).filter(Boolean);
          }
          var fragmentOwner = fragmentSelector.kind === "PluralReaderSelector" ? fragmentSelector.selectors[0].owner : fragmentSelector.owner;
          var parentQueryPromiseResult = this._getAndSavePromiseForFragmentRequestInFlight(fragmentIdentifier, fragmentNode, fragmentOwner, fragmentResult);
          var parentQueryPromiseResultPromise = parentQueryPromiseResult === null || parentQueryPromiseResult === void 0 ? void 0 : parentQueryPromiseResult.promise;
          var missingResolverFieldPromises = (_missingLiveResolverF2 = (_missingLiveResolverF3 = missingLiveResolverFields(snapshot)) === null || _missingLiveResolverF3 === void 0 ? void 0 : _missingLiveResolverF3.map(function(_ref2) {
            var liveStateID = _ref2.liveStateID;
            var store = environment.getStore();
            return store.getLiveResolverPromise(liveStateID);
          })) !== null && _missingLiveResolverF2 !== void 0 ? _missingLiveResolverF2 : [];
          if (clientEdgePromises.length || missingResolverFieldPromises.length || isPromise2(parentQueryPromiseResultPromise)) {
            var _parentQueryPromiseRe, _clientEdgeRequests2;
            environment.__log({
              name: "suspense.fragment",
              data: fragmentResult.data,
              fragment: fragmentNode,
              isRelayHooks: true,
              isPromiseCached: false,
              isMissingData: fragmentResult.isMissingData,
              pendingOperations: [].concat((0, _toConsumableArray22["default"])((_parentQueryPromiseRe = parentQueryPromiseResult === null || parentQueryPromiseResult === void 0 ? void 0 : parentQueryPromiseResult.pendingOperations) !== null && _parentQueryPromiseRe !== void 0 ? _parentQueryPromiseRe : []), (0, _toConsumableArray22["default"])((_clientEdgeRequests2 = clientEdgeRequests) !== null && _clientEdgeRequests2 !== void 0 ? _clientEdgeRequests2 : []))
            });
            var promises = [];
            if (clientEdgePromises.length > 0) {
              promises = promises.concat(clientEdgePromises);
            }
            if (missingResolverFieldPromises.length > 0) {
              promises = promises.concat(missingResolverFieldPromises);
            }
            if (promises.length > 0) {
              if (parentQueryPromiseResultPromise) {
                promises.push(parentQueryPromiseResultPromise);
              }
              throw Promise.all(promises);
            }
            if (parentQueryPromiseResultPromise) {
              throw parentQueryPromiseResultPromise;
            }
          }
          this._handlePotentialSnapshotErrorsInSnapshot(snapshot);
          return getFragmentResult(fragmentIdentifier, snapshot, storeEpoch);
        };
        _proto2._performClientEdgeQuery = function _performClientEdgeQuery(queryResource, fragmentNode, fragmentRef, request, clientEdgeDestinationID) {
          var originalVariables = getVariablesFromFragment(fragmentNode, fragmentRef);
          var variables = (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, originalVariables), {}, {
            id: clientEdgeDestinationID
          });
          var operation = createOperationDescriptor(
            request,
            variables,
            {}
          );
          var fetchObservable = fetchQuery(this._environment, operation);
          var queryResult = queryResource.prepare(
            operation,
            fetchObservable
          );
          return {
            requestDescriptor: operation.request,
            queryResult
          };
        };
        _proto2._handlePotentialSnapshotErrorsInSnapshot = function _handlePotentialSnapshotErrorsInSnapshot(snapshot) {
          var _this4 = this;
          if (Array.isArray(snapshot)) {
            snapshot.forEach(function(s) {
              handlePotentialSnapshotErrors(_this4._environment, s.missingRequiredFields, s.relayResolverErrors);
            });
          } else {
            handlePotentialSnapshotErrors(this._environment, snapshot.missingRequiredFields, snapshot.relayResolverErrors);
          }
        };
        _proto2.readSpec = function readSpec(fragmentNodes, fragmentRefs, componentDisplayName) {
          var result = {};
          for (var key in fragmentNodes) {
            result[key] = this.read(fragmentNodes[key], fragmentRefs[key], componentDisplayName, key);
          }
          return result;
        };
        _proto2.subscribe = function subscribe(fragmentResult, callback) {
          var _this5 = this;
          var environment = this._environment;
          var cacheKey = fragmentResult.cacheKey;
          var renderedSnapshot = fragmentResult.snapshot;
          if (!renderedSnapshot) {
            return {
              dispose: function dispose() {
              }
            };
          }
          var _this$checkMissedUpda = this.checkMissedUpdates(fragmentResult), didMissUpdates = _this$checkMissedUpda[0], currentSnapshot = _this$checkMissedUpda[1];
          if (didMissUpdates) {
            callback();
          }
          var disposables = [];
          if (Array.isArray(renderedSnapshot)) {
            !Array.isArray(currentSnapshot) ? true ? invariant5(false, "Relay: Expected snapshots to be plural. If you're seeing this, this is likely a bug in Relay.") : invariant5(false) : void 0;
            currentSnapshot.forEach(function(snapshot, idx) {
              disposables.push(environment.subscribe(snapshot, function(latestSnapshot) {
                var storeEpoch = environment.getStore().getEpoch();
                _this5._updatePluralSnapshot(cacheKey, currentSnapshot, latestSnapshot, idx, storeEpoch);
                callback();
              }));
            });
          } else {
            !(currentSnapshot != null && !Array.isArray(currentSnapshot)) ? true ? invariant5(false, "Relay: Expected snapshot to be singular. If you're seeing this, this is likely a bug in Relay.") : invariant5(false) : void 0;
            disposables.push(environment.subscribe(currentSnapshot, function(latestSnapshot) {
              var storeEpoch = environment.getStore().getEpoch();
              _this5._cache.set(cacheKey, {
                kind: "done",
                result: getFragmentResult(cacheKey, latestSnapshot, storeEpoch)
              });
              callback();
            }));
          }
          if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
            var _this$_clientEdgeQuer, _this$_clientEdgeQuer2;
            var clientEdgeQueryResults = (_this$_clientEdgeQuer = (_this$_clientEdgeQuer2 = this._clientEdgeQueryResultsCache) === null || _this$_clientEdgeQuer2 === void 0 ? void 0 : _this$_clientEdgeQuer2.get(cacheKey)) !== null && _this$_clientEdgeQuer !== void 0 ? _this$_clientEdgeQuer : void 0;
            if (clientEdgeQueryResults !== null && clientEdgeQueryResults !== void 0 && clientEdgeQueryResults.length) {
              var queryResource = getQueryResourceForEnvironment(this._environment);
              clientEdgeQueryResults.forEach(function(queryResult) {
                disposables.push(queryResource.retain(queryResult));
              });
            }
          }
          return {
            dispose: function dispose() {
              disposables.forEach(function(s) {
                return s.dispose();
              });
              _this5._cache["delete"](cacheKey);
            }
          };
        };
        _proto2.subscribeSpec = function subscribeSpec(fragmentResults, callback) {
          var _this6 = this;
          var disposables = Object.keys(fragmentResults).map(function(key) {
            return _this6.subscribe(fragmentResults[key], callback);
          });
          return {
            dispose: function dispose() {
              disposables.forEach(function(disposable) {
                disposable.dispose();
              });
            }
          };
        };
        _proto2.checkMissedUpdates = function checkMissedUpdates(fragmentResult) {
          var environment = this._environment;
          var renderedSnapshot = fragmentResult.snapshot;
          if (!renderedSnapshot) {
            return [false, null];
          }
          var storeEpoch = null;
          storeEpoch = environment.getStore().getEpoch();
          if (fragmentResult.storeEpoch === storeEpoch) {
            return [false, fragmentResult.snapshot];
          }
          var cacheKey = fragmentResult.cacheKey;
          if (Array.isArray(renderedSnapshot)) {
            var didMissUpdates = false;
            var currentSnapshots = [];
            renderedSnapshot.forEach(function(snapshot, idx) {
              var currentSnapshot2 = environment.lookup(snapshot.selector);
              var renderData2 = snapshot.data;
              var currentData2 = currentSnapshot2.data;
              var updatedData2 = recycleNodesInto(renderData2, currentData2);
              if (updatedData2 !== renderData2) {
                currentSnapshot2 = (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, currentSnapshot2), {}, {
                  data: updatedData2
                });
                didMissUpdates = true;
              }
              currentSnapshots[idx] = currentSnapshot2;
            });
            if (didMissUpdates) {
              this._cache.set(cacheKey, {
                kind: "done",
                result: getFragmentResult(cacheKey, currentSnapshots, storeEpoch)
              });
            }
            return [didMissUpdates, currentSnapshots];
          }
          var currentSnapshot = environment.lookup(renderedSnapshot.selector);
          var renderData = renderedSnapshot.data;
          var currentData = currentSnapshot.data;
          var updatedData = recycleNodesInto(renderData, currentData);
          var updatedCurrentSnapshot = {
            data: updatedData,
            isMissingData: currentSnapshot.isMissingData,
            missingClientEdges: currentSnapshot.missingClientEdges,
            missingLiveResolverFields: currentSnapshot.missingLiveResolverFields,
            seenRecords: currentSnapshot.seenRecords,
            selector: currentSnapshot.selector,
            missingRequiredFields: currentSnapshot.missingRequiredFields,
            relayResolverErrors: currentSnapshot.relayResolverErrors
          };
          if (updatedData !== renderData) {
            this._cache.set(cacheKey, {
              kind: "done",
              result: getFragmentResult(cacheKey, updatedCurrentSnapshot, storeEpoch)
            });
          }
          return [updatedData !== renderData, updatedCurrentSnapshot];
        };
        _proto2.checkMissedUpdatesSpec = function checkMissedUpdatesSpec(fragmentResults) {
          var _this7 = this;
          return Object.keys(fragmentResults).some(function(key) {
            return _this7.checkMissedUpdates(fragmentResults[key])[0];
          });
        };
        _proto2._getAndSavePromiseForFragmentRequestInFlight = function _getAndSavePromiseForFragmentRequestInFlight(cacheKey, fragmentNode, fragmentOwner, fragmentResult) {
          var _this8 = this;
          var pendingOperationsResult = getPendingOperationsForFragment(this._environment, fragmentNode, fragmentOwner);
          if (pendingOperationsResult == null) {
            return null;
          }
          var networkPromise = pendingOperationsResult.promise;
          var pendingOperations = pendingOperationsResult.pendingOperations;
          var promise = networkPromise.then(function() {
            _this8._cache["delete"](cacheKey);
          })["catch"](function(error) {
            _this8._cache["delete"](cacheKey);
          });
          promise.displayName = networkPromise.displayName;
          this._cache.set(cacheKey, {
            kind: "pending",
            pendingOperations,
            promise,
            result: fragmentResult
          });
          return {
            promise,
            pendingOperations
          };
        };
        _proto2._updatePluralSnapshot = function _updatePluralSnapshot(cacheKey, baseSnapshots, latestSnapshot, idx, storeEpoch) {
          var _currentFragmentResul;
          var currentFragmentResult = this._cache.get(cacheKey);
          if (isPromise2(currentFragmentResult)) {
            reportInvalidCachedData(latestSnapshot.selector.node.name);
            return;
          }
          var currentSnapshot = currentFragmentResult === null || currentFragmentResult === void 0 ? void 0 : (_currentFragmentResul = currentFragmentResult.result) === null || _currentFragmentResul === void 0 ? void 0 : _currentFragmentResul.snapshot;
          if (currentSnapshot && !Array.isArray(currentSnapshot)) {
            reportInvalidCachedData(latestSnapshot.selector.node.name);
            return;
          }
          var nextSnapshots = currentSnapshot ? (0, _toConsumableArray22["default"])(currentSnapshot) : (0, _toConsumableArray22["default"])(baseSnapshots);
          nextSnapshots[idx] = latestSnapshot;
          this._cache.set(cacheKey, {
            kind: "done",
            result: getFragmentResult(cacheKey, nextSnapshots, storeEpoch)
          });
        };
        return FragmentResourceImpl2;
      }();
      function reportInvalidCachedData(nodeName) {
        true ? true ? invariant5(false, "Relay: Expected to find cached data for plural fragment `%s` when receiving a subscription. If you're seeing this, this is likely a bug in Relay.", nodeName) : invariant5(false) : void 0;
      }
      function createFragmentResource(environment) {
        return new FragmentResourceImpl(environment);
      }
      var dataResources = WEAKMAP_SUPPORTED ? /* @__PURE__ */ new WeakMap() : /* @__PURE__ */ new Map();
      function getFragmentResourceForEnvironment(environment) {
        var cached = dataResources.get(environment);
        if (cached) {
          return cached;
        }
        var newDataResource = createFragmentResource(environment);
        dataResources.set(environment, newDataResource);
        return newDataResource;
      }
      module2.exports = {
        createFragmentResource,
        getFragmentResourceForEnvironment
      };
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useFragmentNode.js
  var require_useFragmentNode = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useFragmentNode.js"(exports2, module2) {
      "use strict";
      var _require = require_FragmentResource();
      var getFragmentResourceForEnvironment = _require.getFragmentResourceForEnvironment;
      var useRelayEnvironment = require_useRelayEnvironment();
      var _require2 = require_react();
      var useEffect12 = _require2.useEffect;
      var useRef11 = _require2.useRef;
      var useState17 = _require2.useState;
      var _require3 = require_relay_runtime();
      var getFragmentIdentifier = _require3.getFragmentIdentifier;
      var warning6 = require_warning();
      function useFragmentNode(fragmentNode, fragmentRef, componentDisplayName) {
        var environment = useRelayEnvironment();
        var FragmentResource = getFragmentResourceForEnvironment(environment);
        var isMountedRef = useRef11(false);
        var _useState = useState17(0), forceUpdate = _useState[1];
        var fragmentIdentifier = getFragmentIdentifier(fragmentNode, fragmentRef);
        var fragmentResult = FragmentResource.readWithIdentifier(fragmentNode, fragmentRef, fragmentIdentifier, componentDisplayName);
        var isListeningForUpdatesRef = useRef11(true);
        function enableStoreUpdates() {
          isListeningForUpdatesRef.current = true;
          var didMissUpdates = FragmentResource.checkMissedUpdates(fragmentResult)[0];
          if (didMissUpdates) {
            handleDataUpdate();
          }
        }
        function disableStoreUpdates() {
          isListeningForUpdatesRef.current = false;
        }
        function handleDataUpdate() {
          if (isMountedRef.current === false || isListeningForUpdatesRef.current === false) {
            return;
          }
          forceUpdate(function(count) {
            return count + 1;
          });
        }
        useEffect12(function() {
          isMountedRef.current = true;
          var disposable = FragmentResource.subscribe(fragmentResult, handleDataUpdate);
          return function() {
            isMountedRef.current = false;
            disposable.dispose();
          };
        }, [environment, fragmentIdentifier]);
        if (true) {
          if (fragmentRef != null && (fragmentResult.data === void 0 || Array.isArray(fragmentResult.data) && fragmentResult.data.length > 0 && fragmentResult.data.every(function(data) {
            return data === void 0;
          }))) {
            true ? warning6(false, "Relay: Expected to have been able to read non-null data for fragment `%s` declared in `%s`, since fragment reference was non-null. Make sure that that `%s`'s parent isn't holding on to and/or passing a fragment reference for data that has been deleted.", fragmentNode.name, componentDisplayName, componentDisplayName) : void 0;
          }
        }
        return {
          data: fragmentResult.data,
          disableStoreUpdates,
          enableStoreUpdates
        };
      }
      module2.exports = useFragmentNode;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useStaticFragmentNodeWarning.js
  var require_useStaticFragmentNodeWarning = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useStaticFragmentNodeWarning.js"(exports2, module2) {
      "use strict";
      var _require = require_react();
      var useRef11 = _require.useRef;
      var warning6 = require_warning();
      function useStaticFragmentNodeWarning(fragmentNode, warningContext) {
        if (true) {
          var initialPropRef = useRef11(fragmentNode.name);
          true ? warning6(initialPropRef.current === fragmentNode.name, "Relay: The %s has to remain the same over the lifetime of a component. Changing it is not supported and will result in unexpected behavior.", warningContext) : void 0;
        }
      }
      module2.exports = useStaticFragmentNodeWarning;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useFragment.js
  var require_useFragment = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useFragment.js"(exports2, module2) {
      "use strict";
      var HooksImplementation = require_HooksImplementation();
      var _require = require_loadQuery();
      var useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;
      var useFragmentNode = require_useFragmentNode();
      var useStaticFragmentNodeWarning = require_useStaticFragmentNodeWarning();
      var _require2 = require_react();
      var useDebugValue2 = _require2.useDebugValue;
      var _require3 = require_relay_runtime();
      var getFragment = _require3.getFragment;
      function useFragment_LEGACY(fragment, key) {
        useTrackLoadQueryInRender();
        var fragmentNode = getFragment(fragment);
        useStaticFragmentNodeWarning(fragmentNode, "first argument of useFragment()");
        var _useFragmentNode = useFragmentNode(fragmentNode, key, "useFragment()"), data = _useFragmentNode.data;
        if (true) {
          useDebugValue2({
            fragment: fragmentNode.name,
            data
          });
        }
        return data;
      }
      function useFragment(fragment, key) {
        var impl = HooksImplementation.get();
        if (impl) {
          return impl.useFragment(fragment, key);
        } else {
          return useFragment_LEGACY(fragment, key);
        }
      }
      module2.exports = useFragment;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useFetchTrackingRef.js
  var require_useFetchTrackingRef = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useFetchTrackingRef.js"(exports2, module2) {
      "use strict";
      var _require = require_react();
      var useCallback8 = _require.useCallback;
      var useEffect12 = _require.useEffect;
      var useRef11 = _require.useRef;
      function useFetchTrackingRef() {
        var subscriptionRef = useRef11(null);
        var isFetchingRef = useRef11(false);
        var disposeFetch = useCallback8(function() {
          if (subscriptionRef.current != null) {
            subscriptionRef.current.unsubscribe();
            subscriptionRef.current = null;
          }
          isFetchingRef.current = false;
        }, []);
        var startFetch = useCallback8(function(subscription) {
          subscriptionRef.current = subscription;
          isFetchingRef.current = true;
        }, []);
        var completeFetch = useCallback8(function() {
          subscriptionRef.current = null;
          isFetchingRef.current = false;
        }, []);
        useEffect12(function() {
          return disposeFetch;
        }, [disposeFetch]);
        return {
          isFetchingRef,
          startFetch,
          disposeFetch,
          completeFetch
        };
      }
      module2.exports = useFetchTrackingRef;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useLazyLoadQueryNode.js
  var require_useLazyLoadQueryNode = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useLazyLoadQueryNode.js"(exports2, module2) {
      "use strict";
      var ProfilerContext = require_ProfilerContext();
      var _require = require_QueryResource();
      var getQueryCacheIdentifier = _require.getQueryCacheIdentifier;
      var getQueryResourceForEnvironment = _require.getQueryResourceForEnvironment;
      var useFetchTrackingRef = require_useFetchTrackingRef();
      var useFragmentNode = require_useFragmentNode();
      var useRelayEnvironment = require_useRelayEnvironment();
      var React112 = require_react();
      var useContext18 = React112.useContext;
      var useEffect12 = React112.useEffect;
      var useState17 = React112.useState;
      var useRef11 = React112.useRef;
      function useLazyLoadQueryNode(_ref2) {
        var query = _ref2.query, componentDisplayName = _ref2.componentDisplayName, fetchObservable = _ref2.fetchObservable, fetchPolicy = _ref2.fetchPolicy, fetchKey = _ref2.fetchKey, renderPolicy = _ref2.renderPolicy;
        var environment = useRelayEnvironment();
        var profilerContext = useContext18(ProfilerContext);
        var QueryResource = getQueryResourceForEnvironment(environment);
        var _useState = useState17(0), forceUpdateKey = _useState[0], forceUpdate = _useState[1];
        var _useFetchTrackingRef = useFetchTrackingRef(), startFetch = _useFetchTrackingRef.startFetch, completeFetch = _useFetchTrackingRef.completeFetch;
        var cacheBreaker = "".concat(forceUpdateKey, "-").concat(fetchKey !== null && fetchKey !== void 0 ? fetchKey : "");
        var cacheIdentifier = getQueryCacheIdentifier(environment, query, fetchPolicy, renderPolicy, cacheBreaker);
        var preparedQueryResult = profilerContext.wrapPrepareQueryResource(function() {
          return QueryResource.prepareWithIdentifier(cacheIdentifier, query, fetchObservable, fetchPolicy, renderPolicy, {
            start: startFetch,
            complete: completeFetch,
            error: completeFetch
          }, profilerContext);
        });
        var maybeHiddenOrFastRefresh = useRef11(false);
        useEffect12(function() {
          return function() {
            maybeHiddenOrFastRefresh.current = true;
          };
        }, []);
        useEffect12(function() {
          if (maybeHiddenOrFastRefresh.current === true) {
            maybeHiddenOrFastRefresh.current = false;
            forceUpdate(function(n) {
              return n + 1;
            });
            return;
          }
          var disposable = QueryResource.retain(preparedQueryResult, profilerContext);
          return function() {
            disposable.dispose();
          };
        }, [environment, cacheIdentifier]);
        useEffect12(function() {
          QueryResource.releaseTemporaryRetain(preparedQueryResult);
        });
        var fragmentNode = preparedQueryResult.fragmentNode, fragmentRef = preparedQueryResult.fragmentRef;
        var _useFragmentNode = useFragmentNode(fragmentNode, fragmentRef, componentDisplayName), data = _useFragmentNode.data;
        return data;
      }
      module2.exports = useLazyLoadQueryNode;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useMemoVariables.js
  var require_useMemoVariables = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useMemoVariables.js"(exports2, module2) {
      "use strict";
      var areEqual = require_areEqual();
      var React112 = require_react();
      var useMemo13 = React112.useMemo;
      var useRef11 = React112.useRef;
      var useState17 = React112.useState;
      function useMemoVariables(variables) {
        var _variablesChangedGene2;
        var variablesChangedGenerationRef = useRef11(0);
        var _useState = useState17(variables), mirroredVariables = _useState[0], setMirroredVariables = _useState[1];
        var variablesChanged = !areEqual(variables, mirroredVariables);
        if (variablesChanged) {
          var _variablesChangedGene;
          variablesChangedGenerationRef.current = ((_variablesChangedGene = variablesChangedGenerationRef.current) !== null && _variablesChangedGene !== void 0 ? _variablesChangedGene : 0) + 1;
          setMirroredVariables(variables);
        }
        var memoVariables = useMemo13(function() {
          return variables;
        }, [variablesChangedGenerationRef.current]);
        return [memoVariables, (_variablesChangedGene2 = variablesChangedGenerationRef.current) !== null && _variablesChangedGene2 !== void 0 ? _variablesChangedGene2 : 0];
      }
      module2.exports = useMemoVariables;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useMemoOperationDescriptor.js
  var require_useMemoOperationDescriptor = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useMemoOperationDescriptor.js"(exports2, module2) {
      "use strict";
      var useMemoVariables = require_useMemoVariables();
      var React112 = require_react();
      var _require = require_relay_runtime();
      var createOperationDescriptor = _require.createOperationDescriptor;
      var getRequest = _require.getRequest;
      var useMemo13 = React112.useMemo;
      function useMemoOperationDescriptor(gqlQuery, variables, cacheConfig) {
        var _useMemoVariables = useMemoVariables(variables), memoVariables = _useMemoVariables[0];
        var _useMemoVariables2 = useMemoVariables(cacheConfig || {}), memoCacheConfig = _useMemoVariables2[0];
        return useMemo13(function() {
          return createOperationDescriptor(getRequest(gqlQuery), memoVariables, memoCacheConfig);
        }, [gqlQuery, memoVariables, memoCacheConfig]);
      }
      module2.exports = useMemoOperationDescriptor;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useLazyLoadQuery.js
  var require_useLazyLoadQuery = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useLazyLoadQuery.js"(exports2, module2) {
      "use strict";
      var _require = require_loadQuery();
      var useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;
      var useLazyLoadQueryNode = require_useLazyLoadQueryNode();
      var useMemoOperationDescriptor = require_useMemoOperationDescriptor();
      var useRelayEnvironment = require_useRelayEnvironment();
      var _require2 = require_relay_runtime();
      var fetchQuery = _require2.__internal.fetchQuery;
      function useLazyLoadQuery3(gqlQuery, variables, options) {
        useTrackLoadQueryInRender();
        var environment = useRelayEnvironment();
        var query = useMemoOperationDescriptor(gqlQuery, variables, options && options.networkCacheConfig ? options.networkCacheConfig : {
          force: true
        });
        var data = useLazyLoadQueryNode({
          componentDisplayName: "useLazyLoadQuery()",
          fetchKey: options === null || options === void 0 ? void 0 : options.fetchKey,
          fetchObservable: fetchQuery(environment, query),
          fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,
          query,
          renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy
        });
        return data;
      }
      module2.exports = useLazyLoadQuery3;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useMutation.js
  var require_useMutation = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useMutation.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var useIsMountedRef = require_useIsMountedRef();
      var useRelayEnvironment = require_useRelayEnvironment();
      var React112 = require_react();
      var _require = require_relay_runtime();
      var defaultCommitMutation = _require.commitMutation;
      var useState17 = React112.useState;
      var useEffect12 = React112.useEffect;
      var useRef11 = React112.useRef;
      var useCallback8 = React112.useCallback;
      function useMutation2(mutation) {
        var commitMutationFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultCommitMutation;
        var environment = useRelayEnvironment();
        var isMountedRef = useIsMountedRef();
        var environmentRef = useRef11(environment);
        var mutationRef = useRef11(mutation);
        var inFlightMutationsRef = useRef11(/* @__PURE__ */ new Set());
        var _useState = useState17(false), isMutationInFlight = _useState[0], setMutationInFlight = _useState[1];
        var cleanup = useCallback8(function(disposable) {
          if (environmentRef.current === environment && mutationRef.current === mutation) {
            inFlightMutationsRef.current["delete"](disposable);
            if (isMountedRef.current) {
              setMutationInFlight(inFlightMutationsRef.current.size > 0);
            }
          }
        }, [environment, isMountedRef, mutation]);
        useEffect12(function() {
          if (environmentRef.current !== environment || mutationRef.current !== mutation) {
            inFlightMutationsRef.current = /* @__PURE__ */ new Set();
            if (isMountedRef.current) {
              setMutationInFlight(false);
            }
            environmentRef.current = environment;
            mutationRef.current = mutation;
          }
        }, [environment, isMountedRef, mutation]);
        var commit = useCallback8(function(config) {
          if (isMountedRef.current) {
            setMutationInFlight(true);
          }
          var disposable = commitMutationFn(environment, (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, config), {}, {
            mutation,
            onCompleted: function onCompleted(response, errors) {
              var _config$onCompleted;
              cleanup(disposable);
              (_config$onCompleted = config.onCompleted) === null || _config$onCompleted === void 0 ? void 0 : _config$onCompleted.call(config, response, errors);
            },
            onError: function onError(error) {
              var _config$onError;
              cleanup(disposable);
              (_config$onError = config.onError) === null || _config$onError === void 0 ? void 0 : _config$onError.call(config, error);
            },
            onUnsubscribe: function onUnsubscribe() {
              var _config$onUnsubscribe;
              cleanup(disposable);
              (_config$onUnsubscribe = config.onUnsubscribe) === null || _config$onUnsubscribe === void 0 ? void 0 : _config$onUnsubscribe.call(config);
            },
            onNext: function onNext() {
              var _config$onNext;
              (_config$onNext = config.onNext) === null || _config$onNext === void 0 ? void 0 : _config$onNext.call(config);
            }
          }));
          inFlightMutationsRef.current.add(disposable);
          return disposable;
        }, [cleanup, commitMutationFn, environment, isMountedRef, mutation]);
        return [commit, isMutationInFlight];
      }
      module2.exports = useMutation2;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useIsOperationNodeActive.js
  var require_useIsOperationNodeActive = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useIsOperationNodeActive.js"(exports2, module2) {
      "use strict";
      var useRelayEnvironment = require_useRelayEnvironment();
      var invariant5 = require_browser();
      var React112 = require_react();
      var _require = require_relay_runtime();
      var getObservableForActiveRequest = _require.__internal.getObservableForActiveRequest;
      var getSelector = _require.getSelector;
      var useEffect12 = React112.useEffect;
      var useState17 = React112.useState;
      var useMemo13 = React112.useMemo;
      function useIsOperationNodeActive(fragmentNode, fragmentRef) {
        var environment = useRelayEnvironment();
        var observable = useMemo13(function() {
          var selector2 = getSelector(fragmentNode, fragmentRef);
          if (selector2 == null) {
            return null;
          }
          !(selector2.kind === "SingularReaderSelector") ? true ? invariant5(false, "useIsOperationNodeActive: Plural fragments are not supported.") : invariant5(false) : void 0;
          return getObservableForActiveRequest(environment, selector2.owner);
        }, [environment, fragmentNode, fragmentRef]);
        var _useState = useState17(observable != null), isActive = _useState[0], setIsActive = _useState[1];
        useEffect12(function() {
          var subscription;
          setIsActive(observable != null);
          if (observable != null) {
            var onCompleteOrError = function onCompleteOrError2() {
              setIsActive(false);
            };
            subscription = observable.subscribe({
              complete: onCompleteOrError,
              error: onCompleteOrError
            });
          }
          return function() {
            if (subscription) {
              subscription.unsubscribe();
            }
          };
        }, [observable]);
        return isActive;
      }
      module2.exports = useIsOperationNodeActive;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useLoadMoreFunction.js
  var require_useLoadMoreFunction = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useLoadMoreFunction.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var useFetchTrackingRef = require_useFetchTrackingRef();
      var useIsMountedRef = require_useIsMountedRef();
      var useIsOperationNodeActive = require_useIsOperationNodeActive();
      var useRelayEnvironment = require_useRelayEnvironment();
      var invariant5 = require_browser();
      var _require = require_react();
      var useCallback8 = _require.useCallback;
      var useEffect12 = _require.useEffect;
      var useState17 = _require.useState;
      var _require2 = require_relay_runtime();
      var ConnectionInterface = _require2.ConnectionInterface;
      var fetchQuery = _require2.__internal.fetchQuery;
      var createOperationDescriptor = _require2.createOperationDescriptor;
      var getPaginationVariables = _require2.getPaginationVariables;
      var getSelector = _require2.getSelector;
      var getValueAtPath = _require2.getValueAtPath;
      var warning6 = require_warning();
      function useLoadMoreFunction(args) {
        var direction = args.direction, fragmentNode = args.fragmentNode, fragmentRef = args.fragmentRef, fragmentIdentifier = args.fragmentIdentifier, fragmentData = args.fragmentData, connectionPathInFragmentData = args.connectionPathInFragmentData, paginationRequest = args.paginationRequest, paginationMetadata = args.paginationMetadata, componentDisplayName = args.componentDisplayName, observer = args.observer, onReset = args.onReset, identifierField = args.identifierField;
        var environment = useRelayEnvironment();
        var _useFetchTrackingRef = useFetchTrackingRef(), isFetchingRef = _useFetchTrackingRef.isFetchingRef, startFetch = _useFetchTrackingRef.startFetch, disposeFetch = _useFetchTrackingRef.disposeFetch, completeFetch = _useFetchTrackingRef.completeFetch;
        var identifierValue = identifierField != null && fragmentData != null && typeof fragmentData === "object" ? fragmentData[identifierField] : null;
        var isMountedRef = useIsMountedRef();
        var _useState = useState17(environment), mirroredEnvironment = _useState[0], setMirroredEnvironment = _useState[1];
        var _useState2 = useState17(fragmentIdentifier), mirroredFragmentIdentifier = _useState2[0], setMirroredFragmentIdentifier = _useState2[1];
        var isParentQueryActive = useIsOperationNodeActive(fragmentNode, fragmentRef);
        var shouldReset = environment !== mirroredEnvironment || fragmentIdentifier !== mirroredFragmentIdentifier;
        if (shouldReset) {
          disposeFetch();
          onReset();
          setMirroredEnvironment(environment);
          setMirroredFragmentIdentifier(fragmentIdentifier);
        }
        var _getConnectionState = getConnectionState(direction, fragmentNode, fragmentData, connectionPathInFragmentData), cursor2 = _getConnectionState.cursor, hasMore = _getConnectionState.hasMore;
        useEffect12(function() {
          return function() {
            disposeFetch();
          };
        }, [disposeFetch]);
        var loadMore = useCallback8(
          function(count, options) {
            var onComplete = options === null || options === void 0 ? void 0 : options.onComplete;
            if (isMountedRef.current !== true) {
              true ? warning6(false, "Relay: Unexpected fetch on unmounted component for fragment `%s` in `%s`. It looks like some instances of your component are still trying to fetch data but they already unmounted. Please make sure you clear all timers, intervals, async calls, etc that may trigger a fetch.", fragmentNode.name, componentDisplayName) : void 0;
              return {
                dispose: function dispose() {
                }
              };
            }
            var fragmentSelector = getSelector(fragmentNode, fragmentRef);
            if (isFetchingRef.current === true || fragmentData == null || isParentQueryActive) {
              if (fragmentSelector == null) {
                true ? warning6(false, "Relay: Unexpected fetch while using a null fragment ref for fragment `%s` in `%s`. When fetching more items, we expect initial fragment data to be non-null. Please make sure you're passing a valid fragment ref to `%s` before paginating.", fragmentNode.name, componentDisplayName, componentDisplayName) : void 0;
              }
              if (onComplete) {
                onComplete(null);
              }
              return {
                dispose: function dispose() {
                }
              };
            }
            !(fragmentSelector != null && fragmentSelector.kind !== "PluralReaderSelector") ? true ? invariant5(false, "Relay: Expected to be able to find a non-plural fragment owner for fragment `%s` when using `%s`. If you're seeing this, this is likely a bug in Relay.", fragmentNode.name, componentDisplayName) : invariant5(false) : void 0;
            var parentVariables = fragmentSelector.owner.variables;
            var fragmentVariables = fragmentSelector.variables;
            var extraVariables = options === null || options === void 0 ? void 0 : options.UNSTABLE_extraVariables;
            var baseVariables = (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, parentVariables), fragmentVariables);
            var paginationVariables = getPaginationVariables(direction, count, cursor2, baseVariables, (0, _objectSpread28["default"])({}, extraVariables), paginationMetadata);
            if (identifierField != null) {
              if (typeof identifierValue !== "string") {
                true ? warning6(false, "Relay: Expected result to have a string  `%s` in order to refetch, got `%s`.", identifierField, identifierValue) : void 0;
              }
              paginationVariables.id = identifierValue;
            }
            var paginationQuery = createOperationDescriptor(paginationRequest, paginationVariables, {
              force: true
            });
            fetchQuery(environment, paginationQuery).subscribe((0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, observer), {}, {
              start: function start(subscription) {
                startFetch(subscription);
                observer.start && observer.start(subscription);
              },
              complete: function complete() {
                completeFetch();
                observer.complete && observer.complete();
                onComplete && onComplete(null);
              },
              error: function error(_error) {
                completeFetch();
                observer.error && observer.error(_error);
                onComplete && onComplete(_error);
              }
            }));
            return {
              dispose: disposeFetch
            };
          },
          [environment, identifierValue, direction, cursor2, startFetch, disposeFetch, completeFetch, isFetchingRef, isParentQueryActive, fragmentData, fragmentNode.name, fragmentRef, componentDisplayName]
        );
        return [loadMore, hasMore, disposeFetch];
      }
      function getConnectionState(direction, fragmentNode, fragmentData, connectionPathInFragmentData) {
        var _pageInfo$END_CURSOR, _pageInfo$START_CURSO;
        var _ConnectionInterface$ = ConnectionInterface.get(), EDGES = _ConnectionInterface$.EDGES, PAGE_INFO = _ConnectionInterface$.PAGE_INFO, HAS_NEXT_PAGE = _ConnectionInterface$.HAS_NEXT_PAGE, HAS_PREV_PAGE = _ConnectionInterface$.HAS_PREV_PAGE, END_CURSOR = _ConnectionInterface$.END_CURSOR, START_CURSOR = _ConnectionInterface$.START_CURSOR;
        var connection = getValueAtPath(fragmentData, connectionPathInFragmentData);
        if (connection == null) {
          return {
            cursor: null,
            hasMore: false
          };
        }
        !(typeof connection === "object") ? true ? invariant5(false, "Relay: Expected connection in fragment `%s` to have been `null`, or a plain object with %s and %s properties. Instead got `%s`.", fragmentNode.name, EDGES, PAGE_INFO, connection) : invariant5(false) : void 0;
        var edges = connection[EDGES];
        var pageInfo = connection[PAGE_INFO];
        if (edges == null || pageInfo == null) {
          return {
            cursor: null,
            hasMore: false
          };
        }
        !Array.isArray(edges) ? true ? invariant5(false, "Relay: Expected connection in fragment `%s` to have a plural `%s` field. Instead got `%s`.", fragmentNode.name, EDGES, edges) : invariant5(false) : void 0;
        !(typeof pageInfo === "object") ? true ? invariant5(false, "Relay: Expected connection in fragment `%s` to have a `%s` field. Instead got `%s`.", fragmentNode.name, PAGE_INFO, pageInfo) : invariant5(false) : void 0;
        var cursor2 = direction === "forward" ? (_pageInfo$END_CURSOR = pageInfo[END_CURSOR]) !== null && _pageInfo$END_CURSOR !== void 0 ? _pageInfo$END_CURSOR : null : (_pageInfo$START_CURSO = pageInfo[START_CURSOR]) !== null && _pageInfo$START_CURSO !== void 0 ? _pageInfo$START_CURSO : null;
        !(cursor2 === null || typeof cursor2 === "string") ? true ? invariant5(false, "Relay: Expected page info for connection in fragment `%s` to have a valid `%s`. Instead got `%s`.", fragmentNode.name, START_CURSOR, cursor2) : invariant5(false) : void 0;
        var hasMore;
        if (direction === "forward") {
          hasMore = cursor2 != null && pageInfo[HAS_NEXT_PAGE] === true;
        } else {
          hasMore = cursor2 != null && pageInfo[HAS_PREV_PAGE] === true;
        }
        return {
          cursor: cursor2,
          hasMore
        };
      }
      module2.exports = useLoadMoreFunction;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useQueryLoader.js
  var require_useQueryLoader = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useQueryLoader.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
      var _require = require_loadQuery();
      var loadQuery = _require.loadQuery;
      var useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;
      var useIsMountedRef = require_useIsMountedRef();
      var useRelayEnvironment = require_useRelayEnvironment();
      var _require2 = require_react();
      var useCallback8 = _require2.useCallback;
      var useEffect12 = _require2.useEffect;
      var useRef11 = _require2.useRef;
      var useState17 = _require2.useState;
      var _require3 = require_relay_runtime();
      var getRequest = _require3.getRequest;
      var initialNullQueryReferenceState = {
        kind: "NullQueryReference"
      };
      function requestIsLiveQuery(preloadableRequest) {
        if (preloadableRequest.kind === "PreloadableConcreteRequest") {
          return preloadableRequest.params.metadata.live !== void 0;
        }
        var request = getRequest(preloadableRequest);
        return request.params.metadata.live !== void 0;
      }
      function useQueryLoader(preloadableRequest, initialQueryReference) {
        var initialQueryReferenceInternal = initialQueryReference !== null && initialQueryReference !== void 0 ? initialQueryReference : initialNullQueryReferenceState;
        var environment = useRelayEnvironment();
        useTrackLoadQueryInRender();
        var isMountedRef = useIsMountedRef();
        var undisposedQueryReferencesRef = useRef11(/* @__PURE__ */ new Set([initialQueryReferenceInternal]));
        var _useState = useState17(function() {
          return initialQueryReferenceInternal;
        }), queryReference = _useState[0], setQueryReference = _useState[1];
        var _useState2 = useState17(function() {
          return initialQueryReferenceInternal;
        }), previousInitialQueryReference = _useState2[0], setPreviousInitialQueryReference = _useState2[1];
        if (initialQueryReferenceInternal !== previousInitialQueryReference) {
          undisposedQueryReferencesRef.current.add(initialQueryReferenceInternal);
          setPreviousInitialQueryReference(initialQueryReferenceInternal);
          setQueryReference(initialQueryReferenceInternal);
        }
        var disposeQuery = useCallback8(function() {
          if (isMountedRef.current) {
            undisposedQueryReferencesRef.current.add(initialNullQueryReferenceState);
            setQueryReference(initialNullQueryReferenceState);
          }
        }, [isMountedRef]);
        var queryLoaderCallback = useCallback8(function(variables, options) {
          var mergedOptions = options != null && options.hasOwnProperty("__environment") ? {
            fetchPolicy: options.fetchPolicy,
            networkCacheConfig: options.networkCacheConfig,
            __nameForWarning: options.__nameForWarning
          } : options;
          if (isMountedRef.current) {
            var _options$__environmen;
            var updatedQueryReference = loadQuery((_options$__environmen = options === null || options === void 0 ? void 0 : options.__environment) !== null && _options$__environmen !== void 0 ? _options$__environmen : environment, preloadableRequest, variables, mergedOptions);
            undisposedQueryReferencesRef.current.add(updatedQueryReference);
            setQueryReference(updatedQueryReference);
          }
        }, [environment, preloadableRequest, setQueryReference, isMountedRef]);
        var maybeHiddenOrFastRefresh = useRef11(false);
        useEffect12(function() {
          return function() {
            maybeHiddenOrFastRefresh.current = true;
          };
        }, []);
        useEffect12(function() {
          if (maybeHiddenOrFastRefresh.current === true) {
            maybeHiddenOrFastRefresh.current = false;
            if (queryReference.kind !== "NullQueryReference") {
              queryLoaderCallback(queryReference.variables, {
                fetchPolicy: queryReference.fetchPolicy,
                networkCacheConfig: queryReference.networkCacheConfig
              });
            }
            return;
          }
          var undisposedQueryReferences = undisposedQueryReferencesRef.current;
          if (isMountedRef.current) {
            var _iterator = (0, _createForOfIteratorHelper2["default"])(undisposedQueryReferences), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var undisposedQueryReference = _step.value;
                if (undisposedQueryReference === queryReference) {
                  break;
                }
                undisposedQueryReferences["delete"](undisposedQueryReference);
                if (undisposedQueryReference.kind !== "NullQueryReference") {
                  if (requestIsLiveQuery(preloadableRequest)) {
                    undisposedQueryReference.dispose && undisposedQueryReference.dispose();
                  } else {
                    undisposedQueryReference.releaseQuery && undisposedQueryReference.releaseQuery();
                  }
                }
              }
            } catch (err2) {
              _iterator.e(err2);
            } finally {
              _iterator.f();
            }
          }
        }, [queryReference, isMountedRef, queryLoaderCallback, preloadableRequest]);
        useEffect12(function() {
          return function disposeAllRemainingQueryReferences() {
            var _iterator2 = (0, _createForOfIteratorHelper2["default"])(undisposedQueryReferencesRef.current), _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                var undisposedQueryReference = _step2.value;
                if (undisposedQueryReference.kind !== "NullQueryReference") {
                  if (requestIsLiveQuery(preloadableRequest)) {
                    undisposedQueryReference.dispose && undisposedQueryReference.dispose();
                  } else {
                    undisposedQueryReference.releaseQuery && undisposedQueryReference.releaseQuery();
                  }
                }
              }
            } catch (err2) {
              _iterator2.e(err2);
            } finally {
              _iterator2.f();
            }
          };
        }, [preloadableRequest]);
        return [queryReference.kind === "NullQueryReference" ? null : queryReference, queryLoaderCallback, disposeQuery];
      }
      module2.exports = useQueryLoader;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useRefetchableFragmentNode.js
  var require_useRefetchableFragmentNode = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useRefetchableFragmentNode.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var _require = require_FragmentResource();
      var getFragmentResourceForEnvironment = _require.getFragmentResourceForEnvironment;
      var ProfilerContext = require_ProfilerContext();
      var _require2 = require_QueryResource();
      var getQueryResourceForEnvironment = _require2.getQueryResourceForEnvironment;
      var useFragmentNode = require_useFragmentNode();
      var useIsMountedRef = require_useIsMountedRef();
      var useQueryLoader = require_useQueryLoader();
      var useRelayEnvironment = require_useRelayEnvironment();
      var invariant5 = require_browser();
      var _require3 = require_react();
      var useCallback8 = _require3.useCallback;
      var useContext18 = _require3.useContext;
      var useReducer3 = _require3.useReducer;
      var _require4 = require_relay_runtime();
      var fetchQuery = _require4.__internal.fetchQuery;
      var createOperationDescriptor = _require4.createOperationDescriptor;
      var getFragmentIdentifier = _require4.getFragmentIdentifier;
      var getRefetchMetadata = _require4.getRefetchMetadata;
      var getSelector = _require4.getSelector;
      var getValueAtPath = _require4.getValueAtPath;
      var warning6 = require_warning();
      function reducer(state, action) {
        switch (action.type) {
          case "refetch": {
            var _action$refetchEnviro;
            return (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, state), {}, {
              fetchPolicy: action.fetchPolicy,
              mirroredEnvironment: (_action$refetchEnviro = action.refetchEnvironment) !== null && _action$refetchEnviro !== void 0 ? _action$refetchEnviro : state.mirroredEnvironment,
              onComplete: action.onComplete,
              refetchEnvironment: action.refetchEnvironment,
              refetchQuery: action.refetchQuery,
              renderPolicy: action.renderPolicy
            });
          }
          case "reset": {
            return {
              fetchPolicy: void 0,
              mirroredEnvironment: action.environment,
              mirroredFragmentIdentifier: action.fragmentIdentifier,
              onComplete: void 0,
              refetchQuery: null,
              renderPolicy: void 0
            };
          }
          default: {
            action.type;
            throw new Error("useRefetchableFragmentNode: Unexpected action type");
          }
        }
      }
      function useRefetchableFragmentNode(fragmentNode, parentFragmentRef, componentDisplayName) {
        var parentEnvironment = useRelayEnvironment();
        var _getRefetchMetadata = getRefetchMetadata(fragmentNode, componentDisplayName), refetchableRequest = _getRefetchMetadata.refetchableRequest, fragmentRefPathInResponse = _getRefetchMetadata.fragmentRefPathInResponse, identifierField = _getRefetchMetadata.identifierField;
        var fragmentIdentifier = getFragmentIdentifier(fragmentNode, parentFragmentRef);
        var _useReducer = useReducer3(reducer, {
          fetchPolicy: void 0,
          mirroredEnvironment: parentEnvironment,
          mirroredFragmentIdentifier: fragmentIdentifier,
          onComplete: void 0,
          refetchEnvironment: null,
          refetchQuery: null,
          renderPolicy: void 0
        }), refetchState = _useReducer[0], dispatch = _useReducer[1];
        var fetchPolicy = refetchState.fetchPolicy, mirroredEnvironment = refetchState.mirroredEnvironment, mirroredFragmentIdentifier = refetchState.mirroredFragmentIdentifier, onComplete = refetchState.onComplete, refetchEnvironment = refetchState.refetchEnvironment, refetchQuery = refetchState.refetchQuery, renderPolicy = refetchState.renderPolicy;
        var environment = refetchEnvironment !== null && refetchEnvironment !== void 0 ? refetchEnvironment : parentEnvironment;
        var QueryResource = getQueryResourceForEnvironment(environment);
        var FragmentResource = getFragmentResourceForEnvironment(environment);
        var profilerContext = useContext18(ProfilerContext);
        var shouldReset = environment !== mirroredEnvironment || fragmentIdentifier !== mirroredFragmentIdentifier;
        var _useQueryLoader = useQueryLoader(refetchableRequest), queryRef = _useQueryLoader[0], loadQuery = _useQueryLoader[1], disposeQuery = _useQueryLoader[2];
        var fragmentRef = parentFragmentRef;
        if (shouldReset) {
          dispatch({
            type: "reset",
            environment,
            fragmentIdentifier
          });
          disposeQuery();
        } else if (refetchQuery != null && queryRef != null) {
          var debugPreviousIDAndTypename;
          if (true) {
            debugPreviousIDAndTypename = debugFunctions.getInitialIDAndType(refetchQuery.request.variables, fragmentRefPathInResponse, environment);
          }
          var handleQueryCompleted = function handleQueryCompleted2(maybeError) {
            onComplete && onComplete(maybeError !== null && maybeError !== void 0 ? maybeError : null);
          };
          var fetchObservable = queryRef.source != null ? queryRef.source : fetchQuery(environment, refetchQuery);
          var queryResult = profilerContext.wrapPrepareQueryResource(function() {
            return QueryResource.prepare(refetchQuery, fetchObservable, fetchPolicy, renderPolicy, {
              error: handleQueryCompleted,
              complete: function complete() {
                if (true) {
                  debugFunctions.checkSameTypeAfterRefetch(debugPreviousIDAndTypename, environment, fragmentNode, componentDisplayName);
                }
                handleQueryCompleted();
              }
            }, queryRef.fetchKey, profilerContext);
          });
          var queryData = FragmentResource.read(queryResult.fragmentNode, queryResult.fragmentRef, componentDisplayName).data;
          !(queryData != null) ? true ? invariant5(false, "Relay: Expected to be able to read refetch query response. If you're seeing this, this is likely a bug in Relay.") : invariant5(false) : void 0;
          var refetchedFragmentRef = getValueAtPath(queryData, fragmentRefPathInResponse);
          fragmentRef = refetchedFragmentRef;
          if (true) {
            debugFunctions.checkSameIDAfterRefetch(debugPreviousIDAndTypename, fragmentRef, fragmentNode, componentDisplayName);
          }
        }
        var _useFragmentNode = useFragmentNode(fragmentNode, fragmentRef, componentDisplayName), fragmentData = _useFragmentNode.data, disableStoreUpdates = _useFragmentNode.disableStoreUpdates, enableStoreUpdates = _useFragmentNode.enableStoreUpdates;
        var refetch = useRefetchFunction(componentDisplayName, dispatch, disposeQuery, fragmentData, fragmentIdentifier, fragmentNode, fragmentRefPathInResponse, identifierField, loadQuery, parentFragmentRef, refetchableRequest);
        return {
          fragmentData,
          fragmentRef,
          refetch,
          disableStoreUpdates,
          enableStoreUpdates
        };
      }
      function useRefetchFunction(componentDisplayName, dispatch, disposeQuery, fragmentData, fragmentIdentifier, fragmentNode, fragmentRefPathInResponse, identifierField, loadQuery, parentFragmentRef, refetchableRequest) {
        var isMountedRef = useIsMountedRef();
        var identifierValue = identifierField != null && fragmentData != null && typeof fragmentData === "object" ? fragmentData[identifierField] : null;
        return useCallback8(
          function(providedRefetchVariables, options) {
            if (isMountedRef.current !== true) {
              true ? warning6(false, "Relay: Unexpected call to `refetch` on unmounted component for fragment `%s` in `%s`. It looks like some instances of your component are still trying to fetch data but they already unmounted. Please make sure you clear all timers, intervals, async calls, etc that may trigger a fetch.", fragmentNode.name, componentDisplayName) : void 0;
              return {
                dispose: function dispose() {
                }
              };
            }
            if (parentFragmentRef == null) {
              true ? warning6(false, "Relay: Unexpected call to `refetch` while using a null fragment ref for fragment `%s` in `%s`. When calling `refetch`, we expect initial fragment data to be non-null. Please make sure you're passing a valid fragment ref to `%s` before calling `refetch`, or make sure you pass all required variables to `refetch`.", fragmentNode.name, componentDisplayName, componentDisplayName) : void 0;
            }
            var refetchEnvironment = options === null || options === void 0 ? void 0 : options.__environment;
            var fetchPolicy = options === null || options === void 0 ? void 0 : options.fetchPolicy;
            var renderPolicy = options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy;
            var onComplete = options === null || options === void 0 ? void 0 : options.onComplete;
            var fragmentSelector = getSelector(fragmentNode, parentFragmentRef);
            var parentVariables;
            var fragmentVariables;
            if (fragmentSelector == null) {
              parentVariables = {};
              fragmentVariables = {};
            } else if (fragmentSelector.kind === "PluralReaderSelector") {
              var _fragmentSelector$sel, _fragmentSelector$sel2, _fragmentSelector$sel3, _fragmentSelector$sel4;
              parentVariables = (_fragmentSelector$sel = (_fragmentSelector$sel2 = fragmentSelector.selectors[0]) === null || _fragmentSelector$sel2 === void 0 ? void 0 : _fragmentSelector$sel2.owner.variables) !== null && _fragmentSelector$sel !== void 0 ? _fragmentSelector$sel : {};
              fragmentVariables = (_fragmentSelector$sel3 = (_fragmentSelector$sel4 = fragmentSelector.selectors[0]) === null || _fragmentSelector$sel4 === void 0 ? void 0 : _fragmentSelector$sel4.variables) !== null && _fragmentSelector$sel3 !== void 0 ? _fragmentSelector$sel3 : {};
            } else {
              parentVariables = fragmentSelector.owner.variables;
              fragmentVariables = fragmentSelector.variables;
            }
            var refetchVariables = (0, _objectSpread28["default"])((0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, parentVariables), fragmentVariables), providedRefetchVariables);
            if (identifierField != null && !providedRefetchVariables.hasOwnProperty("id")) {
              if (typeof identifierValue !== "string") {
                true ? warning6(false, "Relay: Expected result to have a string  `%s` in order to refetch, got `%s`.", identifierField, identifierValue) : void 0;
              }
              refetchVariables.id = identifierValue;
            }
            var refetchQuery = createOperationDescriptor(refetchableRequest, refetchVariables, {
              force: true
            });
            loadQuery(refetchQuery.request.variables, {
              fetchPolicy,
              __environment: refetchEnvironment,
              __nameForWarning: "refetch"
            });
            dispatch({
              type: "refetch",
              fetchPolicy,
              onComplete,
              refetchEnvironment,
              refetchQuery,
              renderPolicy
            });
            return {
              dispose: disposeQuery
            };
          },
          [fragmentIdentifier, dispatch, disposeQuery, identifierValue, loadQuery]
        );
      }
      var debugFunctions;
      if (true) {
        debugFunctions = {
          getInitialIDAndType: function getInitialIDAndType(memoRefetchVariables, fragmentRefPathInResponse, environment) {
            var _require5 = require_relay_runtime(), Record = _require5.Record;
            var id = memoRefetchVariables === null || memoRefetchVariables === void 0 ? void 0 : memoRefetchVariables.id;
            if (fragmentRefPathInResponse.length !== 1 || fragmentRefPathInResponse[0] !== "node" || id == null) {
              return null;
            }
            var recordSource = environment.getStore().getSource();
            var record = recordSource.get(id);
            var typename = record && Record.getType(record);
            if (typename == null) {
              return null;
            }
            return {
              id,
              typename
            };
          },
          checkSameTypeAfterRefetch: function checkSameTypeAfterRefetch(previousIDAndType, environment, fragmentNode, componentDisplayName) {
            var _require6 = require_relay_runtime(), Record = _require6.Record;
            if (!previousIDAndType) {
              return;
            }
            var recordSource = environment.getStore().getSource();
            var record = recordSource.get(previousIDAndType.id);
            var typename = record && Record.getType(record);
            if (typename !== previousIDAndType.typename) {
              true ? warning6(false, "Relay: Call to `refetch` returned data with a different __typename: was `%s`, now `%s`, on `%s` in `%s`. Please make sure the server correctly implementsunique id requirement.", previousIDAndType.typename, typename, fragmentNode.name, componentDisplayName) : void 0;
            }
          },
          checkSameIDAfterRefetch: function checkSameIDAfterRefetch(previousIDAndTypename, refetchedFragmentRef, fragmentNode, componentDisplayName) {
            if (previousIDAndTypename == null) {
              return;
            }
            var _require7 = require_relay_runtime(), ID_KEY2 = _require7.ID_KEY;
            var resultID = refetchedFragmentRef[ID_KEY2];
            if (resultID != null && resultID !== previousIDAndTypename.id) {
              true ? warning6(false, "Relay: Call to `refetch` returned a different id, expected `%s`, got `%s`, on `%s` in `%s`. Please make sure the server correctly implements unique id requirement.", resultID, previousIDAndTypename.id, fragmentNode.name, componentDisplayName) : void 0;
            }
          }
        };
      }
      module2.exports = useRefetchableFragmentNode;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/usePaginationFragment.js
  var require_usePaginationFragment = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/usePaginationFragment.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var HooksImplementation = require_HooksImplementation();
      var useLoadMoreFunction = require_useLoadMoreFunction();
      var useRefetchableFragmentNode = require_useRefetchableFragmentNode();
      var useStaticFragmentNodeWarning = require_useStaticFragmentNodeWarning();
      var _require = require_react();
      var useCallback8 = _require.useCallback;
      var useDebugValue2 = _require.useDebugValue;
      var useState17 = _require.useState;
      var _require2 = require_relay_runtime();
      var getFragment = _require2.getFragment;
      var getFragmentIdentifier = _require2.getFragmentIdentifier;
      var getPaginationMetadata = _require2.getPaginationMetadata;
      function usePaginationFragment_LEGACY(fragmentInput, parentFragmentRef) {
        var fragmentNode = getFragment(fragmentInput);
        useStaticFragmentNodeWarning(fragmentNode, "first argument of usePaginationFragment()");
        var componentDisplayName = "usePaginationFragment()";
        var _getPaginationMetadat = getPaginationMetadata(fragmentNode, componentDisplayName), connectionPathInFragmentData = _getPaginationMetadat.connectionPathInFragmentData, paginationRequest = _getPaginationMetadat.paginationRequest, paginationMetadata = _getPaginationMetadat.paginationMetadata, identifierField = _getPaginationMetadat.identifierField;
        var _useRefetchableFragme = useRefetchableFragmentNode(fragmentNode, parentFragmentRef, componentDisplayName), fragmentData = _useRefetchableFragme.fragmentData, fragmentRef = _useRefetchableFragme.fragmentRef, refetch = _useRefetchableFragme.refetch;
        var fragmentIdentifier = getFragmentIdentifier(fragmentNode, fragmentRef);
        var _useLoadMore = useLoadMore({
          componentDisplayName,
          connectionPathInFragmentData,
          direction: "backward",
          fragmentData,
          fragmentIdentifier,
          fragmentNode,
          fragmentRef,
          identifierField,
          paginationMetadata,
          paginationRequest
        }), loadPrevious = _useLoadMore[0], hasPrevious = _useLoadMore[1], isLoadingPrevious = _useLoadMore[2], disposeFetchPrevious = _useLoadMore[3];
        var _useLoadMore2 = useLoadMore({
          componentDisplayName,
          connectionPathInFragmentData,
          direction: "forward",
          fragmentData,
          fragmentIdentifier,
          fragmentNode,
          fragmentRef,
          identifierField,
          paginationMetadata,
          paginationRequest
        }), loadNext = _useLoadMore2[0], hasNext = _useLoadMore2[1], isLoadingNext = _useLoadMore2[2], disposeFetchNext = _useLoadMore2[3];
        var refetchPagination = useCallback8(function(variables, options) {
          disposeFetchNext();
          disposeFetchPrevious();
          return refetch(variables, (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, options), {}, {
            __environment: void 0
          }));
        }, [disposeFetchNext, disposeFetchPrevious, refetch]);
        if (true) {
          useDebugValue2({
            fragment: fragmentNode.name,
            data: fragmentData,
            hasNext,
            isLoadingNext,
            hasPrevious,
            isLoadingPrevious
          });
        }
        return {
          data: fragmentData,
          loadNext,
          loadPrevious,
          hasNext,
          hasPrevious,
          isLoadingNext,
          isLoadingPrevious,
          refetch: refetchPagination
        };
      }
      function useLoadMore(args) {
        var _useState = useState17(false), isLoadingMore = _useState[0], setIsLoadingMore = _useState[1];
        var observer = {
          start: function start() {
            return setIsLoadingMore(true);
          },
          complete: function complete() {
            return setIsLoadingMore(false);
          },
          error: function error() {
            return setIsLoadingMore(false);
          }
        };
        var handleReset = function handleReset2() {
          return setIsLoadingMore(false);
        };
        var _useLoadMoreFunction = useLoadMoreFunction((0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, args), {}, {
          observer,
          onReset: handleReset
        })), loadMore = _useLoadMoreFunction[0], hasMore = _useLoadMoreFunction[1], disposeFetch = _useLoadMoreFunction[2];
        return [loadMore, hasMore, isLoadingMore, disposeFetch];
      }
      function usePaginationFragment(fragmentInput, parentFragmentRef) {
        var impl = HooksImplementation.get();
        if (impl) {
          return impl.usePaginationFragment(fragmentInput, parentFragmentRef);
        } else {
          return usePaginationFragment_LEGACY(fragmentInput, parentFragmentRef);
        }
      }
      module2.exports = usePaginationFragment;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/usePreloadedQuery.js
  var require_usePreloadedQuery = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/usePreloadedQuery.js"(exports2, module2) {
      "use strict";
      var _require = require_loadQuery();
      var useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;
      var useLazyLoadQueryNode = require_useLazyLoadQueryNode();
      var useMemoOperationDescriptor = require_useMemoOperationDescriptor();
      var useRelayEnvironment = require_useRelayEnvironment();
      var invariant5 = require_browser();
      var _require2 = require_react();
      var useDebugValue2 = _require2.useDebugValue;
      var _require3 = require_relay_runtime();
      var _require3$__internal = _require3.__internal;
      var fetchQueryDeduped = _require3$__internal.fetchQueryDeduped;
      var fetchQuery = _require3$__internal.fetchQuery;
      var warning6 = require_warning();
      function usePreloadedQuery(gqlQuery, preloadedQuery, options) {
        useTrackLoadQueryInRender();
        var environment = useRelayEnvironment();
        var fetchKey = preloadedQuery.fetchKey, fetchPolicy = preloadedQuery.fetchPolicy, source2 = preloadedQuery.source, variables = preloadedQuery.variables, networkCacheConfig = preloadedQuery.networkCacheConfig;
        var operation = useMemoOperationDescriptor(gqlQuery, variables, networkCacheConfig);
        var useLazyLoadQueryNodeParams;
        if (preloadedQuery.kind === "PreloadedQuery_DEPRECATED") {
          !(operation.request.node.params.name === preloadedQuery.name) ? true ? invariant5(false, "usePreloadedQuery(): Expected data to be prefetched for query `%s`, got prefetch results for query `%s`.", operation.request.node.params.name, preloadedQuery.name) : invariant5(false) : void 0;
          useLazyLoadQueryNodeParams = {
            componentDisplayName: "usePreloadedQuery()",
            fetchKey,
            fetchObservable: fetchQueryDeduped(environment, operation.request.identifier, function() {
              if (environment === preloadedQuery.environment && source2 != null) {
                return environment.executeWithSource({
                  operation,
                  source: source2
                });
              } else {
                return environment.execute({
                  operation
                });
              }
            }),
            fetchPolicy,
            query: operation,
            renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy
          };
        } else {
          true ? warning6(preloadedQuery.isDisposed === false, "usePreloadedQuery(): Expected preloadedQuery to not be disposed yet. This is because disposing the query marks it for future garbage collection, and as such query results may no longer be present in the Relay store. In the future, this will become a hard error.") : void 0;
          var fallbackFetchObservable = fetchQuery(environment, operation);
          var fetchObservable;
          if (source2 != null && environment === preloadedQuery.environment) {
            fetchObservable = source2.ifEmpty(fallbackFetchObservable);
          } else if (environment !== preloadedQuery.environment) {
            true ? warning6(false, "usePreloadedQuery(): usePreloadedQuery was passed a preloaded query that was created with a different environment than the one that is currently in context. In the future, this will become a hard error.") : void 0;
            fetchObservable = fallbackFetchObservable;
          } else {
            fetchObservable = fallbackFetchObservable;
          }
          useLazyLoadQueryNodeParams = {
            componentDisplayName: "usePreloadedQuery()",
            fetchObservable,
            fetchKey,
            fetchPolicy,
            query: operation,
            renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy
          };
        }
        var data = useLazyLoadQueryNode(useLazyLoadQueryNodeParams);
        if (true) {
          useDebugValue2({
            query: preloadedQuery.name,
            variables: preloadedQuery.variables,
            data,
            fetchKey,
            fetchPolicy,
            renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy
          });
        }
        return data;
      }
      module2.exports = usePreloadedQuery;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useRefetchableFragment.js
  var require_useRefetchableFragment = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useRefetchableFragment.js"(exports2, module2) {
      "use strict";
      var HooksImplementation = require_HooksImplementation();
      var useRefetchableFragmentNode = require_useRefetchableFragmentNode();
      var useStaticFragmentNodeWarning = require_useStaticFragmentNodeWarning();
      var _require = require_react();
      var useDebugValue2 = _require.useDebugValue;
      var _require2 = require_relay_runtime();
      var getFragment = _require2.getFragment;
      function useRefetchableFragment_LEGACY(fragmentInput, fragmentRef) {
        var fragmentNode = getFragment(fragmentInput);
        useStaticFragmentNodeWarning(fragmentNode, "first argument of useRefetchableFragment()");
        var _useRefetchableFragme = useRefetchableFragmentNode(fragmentNode, fragmentRef, "useRefetchableFragment()"), fragmentData = _useRefetchableFragme.fragmentData, refetch = _useRefetchableFragme.refetch;
        if (true) {
          useDebugValue2({
            fragment: fragmentNode.name,
            data: fragmentData
          });
        }
        return [fragmentData, refetch];
      }
      function useRefetchableFragment(fragmentInput, parentFragmentRef) {
        var impl = HooksImplementation.get();
        if (impl) {
          return impl.useRefetchableFragment(fragmentInput, parentFragmentRef);
        } else {
          return useRefetchableFragment_LEGACY(fragmentInput, parentFragmentRef);
        }
      }
      module2.exports = useRefetchableFragment;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useSubscribeToInvalidationState.js
  var require_useSubscribeToInvalidationState = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useSubscribeToInvalidationState.js"(exports2, module2) {
      "use strict";
      var useRelayEnvironment = require_useRelayEnvironment();
      var _require = require_react();
      var useEffect12 = _require.useEffect;
      var useRef11 = _require.useRef;
      function useSubscribeToInvalidationState(dataIDs, callback) {
        var environment = useRelayEnvironment();
        var disposableRef = useRef11(null);
        var stableDataIDs = Array.from(dataIDs).sort().join("");
        useEffect12(function() {
          var store = environment.getStore();
          var invalidationState = store.lookupInvalidationState(dataIDs);
          var disposable = store.subscribeToInvalidationState(invalidationState, callback);
          disposableRef.current = disposable;
          return function() {
            return disposable.dispose();
          };
        }, [stableDataIDs, callback, environment]);
        return {
          dispose: function dispose() {
            if (disposableRef.current != null) {
              disposableRef.current.dispose();
            }
          }
        };
      }
      module2.exports = useSubscribeToInvalidationState;
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useSubscription.js
  var require_useSubscription = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useSubscription.js"(exports2, module2) {
      "use strict";
      var useRelayEnvironment = require_useRelayEnvironment();
      var _require = require_react();
      var useEffect12 = _require.useEffect;
      var _require2 = require_relay_runtime();
      var requestSubscription = _require2.requestSubscription;
      function useSubscription(config, requestSubscriptionFn) {
        var actualRequestSubscription = requestSubscriptionFn !== null && requestSubscriptionFn !== void 0 ? requestSubscriptionFn : requestSubscription;
        var environment = useRelayEnvironment();
        useEffect12(function() {
          var _actualRequestSubscri = actualRequestSubscription(environment, config), dispose = _actualRequestSubscri.dispose;
          return dispose;
        }, [environment, config, actualRequestSubscription]);
      }
      module2.exports = useSubscription;
    }
  });

  // node_modules/react-relay/lib/hooks.js
  var require_hooks = __commonJS({
    "node_modules/react-relay/lib/hooks.js"(exports2, module2) {
      "use strict";
      var EntryPointContainer = require_EntryPointContainer_react();
      var loadEntryPoint = require_loadEntryPoint();
      var _require = require_loadQuery();
      var loadQuery = _require.loadQuery;
      var RelayEnvironmentProvider2 = require_RelayEnvironmentProvider();
      var useEntryPointLoader = require_useEntryPointLoader();
      var useFragment = require_useFragment();
      var useLazyLoadQuery3 = require_useLazyLoadQuery();
      var useMutation2 = require_useMutation();
      var usePaginationFragment = require_usePaginationFragment();
      var usePreloadedQuery = require_usePreloadedQuery();
      var useQueryLoader = require_useQueryLoader();
      var useRefetchableFragment = require_useRefetchableFragment();
      var useRelayEnvironment = require_useRelayEnvironment();
      var useSubscribeToInvalidationState = require_useSubscribeToInvalidationState();
      var useSubscription = require_useSubscription();
      var RelayRuntime = require_relay_runtime();
      module2.exports = {
        ConnectionHandler: RelayRuntime.ConnectionHandler,
        applyOptimisticMutation: RelayRuntime.applyOptimisticMutation,
        commitLocalUpdate: RelayRuntime.commitLocalUpdate,
        commitMutation: RelayRuntime.commitMutation,
        graphql: RelayRuntime.graphql,
        readInlineData: RelayRuntime.readInlineData,
        requestSubscription: RelayRuntime.requestSubscription,
        EntryPointContainer,
        RelayEnvironmentProvider: RelayEnvironmentProvider2,
        fetchQuery: RelayRuntime.fetchQuery,
        loadQuery,
        loadEntryPoint,
        useFragment,
        useLazyLoadQuery: useLazyLoadQuery3,
        useEntryPointLoader,
        useQueryLoader,
        useMutation: useMutation2,
        usePaginationFragment,
        usePreloadedQuery,
        useRefetchableFragment,
        useRelayEnvironment,
        useSubscribeToInvalidationState,
        useSubscription
      };
    }
  });

  // node_modules/react-relay/hooks.js
  var require_hooks2 = __commonJS({
    "node_modules/react-relay/hooks.js"(exports2, module2) {
      module2.exports = require_hooks();
    }
  });

  // node_modules/css-in-js-utils/lib/isPrefixedValue.js
  var require_isPrefixedValue = __commonJS({
    "node_modules/css-in-js-utils/lib/isPrefixedValue.js"(exports2, module2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = isPrefixedValue6;
      var regex = /-webkit-|-moz-|-ms-/;
      function isPrefixedValue6(value) {
        return typeof value === "string" && regex.test(value);
      }
      module2.exports = exports2["default"];
    }
  });

  // node_modules/hyphenate-style-name/index.cjs.js
  var require_index_cjs = __commonJS({
    "node_modules/hyphenate-style-name/index.cjs.js"(exports2, module2) {
      "use strict";
      var uppercasePattern2 = /[A-Z]/g;
      var msPattern2 = /^ms-/;
      var cache2 = {};
      function toHyphenLower(match) {
        return "-" + match.toLowerCase();
      }
      function hyphenateStyleName2(name) {
        if (cache2.hasOwnProperty(name)) {
          return cache2[name];
        }
        var hName = name.replace(uppercasePattern2, toHyphenLower);
        return cache2[name] = msPattern2.test(hName) ? "-" + hName : hName;
      }
      module2.exports = hyphenateStyleName2;
    }
  });

  // node_modules/css-in-js-utils/lib/hyphenateProperty.js
  var require_hyphenateProperty = __commonJS({
    "node_modules/css-in-js-utils/lib/hyphenateProperty.js"(exports2, module2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = hyphenateProperty2;
      var _hyphenateStyleName = require_index_cjs();
      var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function hyphenateProperty2(property) {
        return (0, _hyphenateStyleName2.default)(property);
      }
      module2.exports = exports2["default"];
    }
  });

  // node_modules/just-extend/index.js
  var require_just_extend = __commonJS({
    "node_modules/just-extend/index.js"(exports2, module2) {
      module2.exports = extend2;
      function extend2() {
        var args = [].slice.call(arguments);
        var deep = false;
        if (typeof args[0] == "boolean") {
          deep = args.shift();
        }
        var result = args[0];
        if (isUnextendable(result)) {
          throw new Error("extendee must be an object");
        }
        var extenders = args.slice(1);
        var len = extenders.length;
        for (var i = 0; i < len; i++) {
          var extender = extenders[i];
          for (var key in extender) {
            if (Object.prototype.hasOwnProperty.call(extender, key)) {
              var value = extender[key];
              if (deep && isCloneable2(value)) {
                var base = Array.isArray(value) ? [] : {};
                result[key] = extend2(
                  true,
                  Object.prototype.hasOwnProperty.call(result, key) && !isUnextendable(result[key]) ? result[key] : base,
                  value
                );
              } else {
                result[key] = value;
              }
            }
          }
        }
        return result;
      }
      function isCloneable2(obj) {
        return Array.isArray(obj) || {}.toString.call(obj) == "[object Object]";
      }
      function isUnextendable(val) {
        return !val || typeof val != "object" && typeof val != "function";
      }
    }
  });

  // node_modules/baseui/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/baseui/node_modules/react-is/cjs/react-is.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType3(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object2) {
            if (typeof object2 === "object" && object2 !== null) {
              var $$typeof = object2.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object2.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment9 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense2 = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object2) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object2) || typeOf(object2) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object2) {
            return typeOf(object2) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object2) {
            return typeOf(object2) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object2) {
            return typeOf(object2) === REACT_PROVIDER_TYPE;
          }
          function isElement(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object2) {
            return typeOf(object2) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment2(object2) {
            return typeOf(object2) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object2) {
            return typeOf(object2) === REACT_LAZY_TYPE;
          }
          function isMemo(object2) {
            return typeOf(object2) === REACT_MEMO_TYPE;
          }
          function isPortal(object2) {
            return typeOf(object2) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object2) {
            return typeOf(object2) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object2) {
            return typeOf(object2) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object2) {
            return typeOf(object2) === REACT_SUSPENSE_TYPE;
          }
          exports2.AsyncMode = AsyncMode;
          exports2.ConcurrentMode = ConcurrentMode;
          exports2.ContextConsumer = ContextConsumer;
          exports2.ContextProvider = ContextProvider;
          exports2.Element = Element;
          exports2.ForwardRef = ForwardRef;
          exports2.Fragment = Fragment9;
          exports2.Lazy = Lazy;
          exports2.Memo = Memo;
          exports2.Portal = Portal;
          exports2.Profiler = Profiler;
          exports2.StrictMode = StrictMode;
          exports2.Suspense = Suspense2;
          exports2.isAsyncMode = isAsyncMode;
          exports2.isConcurrentMode = isConcurrentMode;
          exports2.isContextConsumer = isContextConsumer;
          exports2.isContextProvider = isContextProvider;
          exports2.isElement = isElement;
          exports2.isForwardRef = isForwardRef;
          exports2.isFragment = isFragment2;
          exports2.isLazy = isLazy;
          exports2.isMemo = isMemo;
          exports2.isPortal = isPortal;
          exports2.isProfiler = isProfiler;
          exports2.isStrictMode = isStrictMode;
          exports2.isSuspense = isSuspense;
          exports2.isValidElementType = isValidElementType3;
          exports2.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/baseui/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/baseui/node_modules/react-is/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType3(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object2) {
            if (typeof object2 === "object" && object2 !== null) {
              var $$typeof = object2.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object2.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment9 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense2 = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object2) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object2) || typeOf(object2) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object2) {
            return typeOf(object2) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object2) {
            return typeOf(object2) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object2) {
            return typeOf(object2) === REACT_PROVIDER_TYPE;
          }
          function isElement(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object2) {
            return typeOf(object2) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment2(object2) {
            return typeOf(object2) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object2) {
            return typeOf(object2) === REACT_LAZY_TYPE;
          }
          function isMemo(object2) {
            return typeOf(object2) === REACT_MEMO_TYPE;
          }
          function isPortal(object2) {
            return typeOf(object2) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object2) {
            return typeOf(object2) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object2) {
            return typeOf(object2) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object2) {
            return typeOf(object2) === REACT_SUSPENSE_TYPE;
          }
          exports2.AsyncMode = AsyncMode;
          exports2.ConcurrentMode = ConcurrentMode;
          exports2.ContextConsumer = ContextConsumer;
          exports2.ContextProvider = ContextProvider;
          exports2.Element = Element;
          exports2.ForwardRef = ForwardRef;
          exports2.Fragment = Fragment9;
          exports2.Lazy = Lazy;
          exports2.Memo = Memo;
          exports2.Portal = Portal;
          exports2.Profiler = Profiler;
          exports2.StrictMode = StrictMode;
          exports2.Suspense = Suspense2;
          exports2.isAsyncMode = isAsyncMode;
          exports2.isConcurrentMode = isConcurrentMode;
          exports2.isContextConsumer = isContextConsumer;
          exports2.isContextProvider = isContextProvider;
          exports2.isElement = isElement;
          exports2.isForwardRef = isForwardRef;
          exports2.isFragment = isFragment2;
          exports2.isLazy = isLazy;
          exports2.isMemo = isMemo;
          exports2.isPortal = isPortal;
          exports2.isProfiler = isProfiler;
          exports2.isStrictMode = isStrictMode;
          exports2.isSuspense = isSuspense;
          exports2.isValidElementType = isValidElementType3;
          exports2.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports2, module2) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty16 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err2) {
          return false;
        }
      }
      module2.exports = shouldUseNative() ? Object.assign : function(target, source2) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key in from) {
            if (hasOwnProperty16.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports2, module2) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module2.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports2, module2) {
      module2.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports2, module2) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has2 = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has2;
      function checkPropTypes(typeSpecs, values5, location, componentName2, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err2 = Error(
                    (componentName2 || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err2.name = "Invariant Violation";
                  throw err2;
                }
                error = typeSpecs[typeSpecName](values5, typeSpecName, componentName2, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName2 || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module2.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports2, module2) {
      "use strict";
      var ReactIs3 = require_react_is2();
      var assign2 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has2 = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module2.exports = function(isValidElement5, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is2(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName2, location, propFullName, secret) {
            componentName2 = componentName2 || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err2 = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err2.name = "Invariant Violation";
                throw err2;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName2 + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName2 + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName2 + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName2 + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName2, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName2, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName2 + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName2, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName2 + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName2 + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName2, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName2, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement5(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName2 + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName2, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs3.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName2 + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName2, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName2 + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName2, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is2(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName2 + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName2, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName2 + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName2 + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has2(propValue, key)) {
                var error = typeChecker(propValue, key, componentName2, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName2, location, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName2, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has2(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName2 + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName2, location, propFullName) {
            if (!isNode2(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName2 + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName2, location, propFullName, key, type) {
          return new PropTypeError(
            (componentName2 || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName2, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName2 + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName2, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName2, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName2, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName2 + "`, expected `object`."));
            }
            var allKeys = assign2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has2(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName2, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName2 + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName2, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode2(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode2);
              }
              if (propValue === null || isValidElement5(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode2(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode2(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol2(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol2(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports2, module2) {
      if (true) {
        ReactIs3 = require_react_is2();
        throwOnDirectAccess = true;
        module2.exports = require_factoryWithTypeCheckers()(ReactIs3.isElement, throwOnDirectAccess);
      } else {
        module2.exports = null();
      }
      var ReactIs3;
      var throwOnDirectAccess;
    }
  });

  // node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js
  var require_objectWithoutPropertiesLoose = __commonJS({
    "node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"(exports2, module2) {
      function _objectWithoutPropertiesLoose32(source2, excluded) {
        if (source2 == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source2);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source2[key];
        }
        return target;
      }
      module2.exports = _objectWithoutPropertiesLoose32, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/assertThisInitialized.js
  var require_assertThisInitialized = __commonJS({
    "node_modules/@babel/runtime/helpers/assertThisInitialized.js"(exports2, module2) {
      function _assertThisInitialized12(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      module2.exports = _assertThisInitialized12, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/setPrototypeOf.js
  var require_setPrototypeOf = __commonJS({
    "node_modules/@babel/runtime/helpers/setPrototypeOf.js"(exports2, module2) {
      function _setPrototypeOf13(o, p) {
        module2.exports = _setPrototypeOf13 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf14(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
        return _setPrototypeOf13(o, p);
      }
      module2.exports = _setPrototypeOf13, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/inheritsLoose.js
  var require_inheritsLoose = __commonJS({
    "node_modules/@babel/runtime/helpers/inheritsLoose.js"(exports2, module2) {
      var setPrototypeOf = require_setPrototypeOf();
      function _inheritsLoose2(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        setPrototypeOf(subClass, superClass);
      }
      module2.exports = _inheritsLoose2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS({
    "node_modules/@babel/runtime/helpers/extends.js"(exports2, module2) {
      function _extends45() {
        module2.exports = _extends45 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source2 = arguments[i];
            for (var key in source2) {
              if (Object.prototype.hasOwnProperty.call(source2, key)) {
                target[key] = source2[key];
              }
            }
          }
          return target;
        }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
        return _extends45.apply(this, arguments);
      }
      module2.exports = _extends45, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/react-relay/lib/assertFragmentMap.js
  var require_assertFragmentMap = __commonJS({
    "node_modules/react-relay/lib/assertFragmentMap.js"(exports2, module2) {
      "use strict";
      var invariant5 = require_browser();
      function assertFragmentMap(componentName2, fragmentSpec) {
        !(fragmentSpec && typeof fragmentSpec === "object") ? true ? invariant5(false, "Could not create Relay Container for `%s`. Expected a set of GraphQL fragments, got `%s` instead.", componentName2, fragmentSpec) : invariant5(false) : void 0;
        for (var key in fragmentSpec) {
          if (fragmentSpec.hasOwnProperty(key)) {
            var fragment = fragmentSpec[key];
            !(fragment && (typeof fragment === "object" || typeof fragment === "function")) ? true ? invariant5(false, "Could not create Relay Container for `%s`. The value of fragment `%s` was expected to be a fragment, got `%s` instead.", componentName2, key, fragment) : invariant5(false) : void 0;
          }
        }
      }
      module2.exports = assertFragmentMap;
    }
  });

  // node_modules/react-relay/lib/ReactRelayContainerUtils.js
  var require_ReactRelayContainerUtils = __commonJS({
    "node_modules/react-relay/lib/ReactRelayContainerUtils.js"(exports2, module2) {
      "use strict";
      function getComponentName(component) {
        return component.displayName || component.name || "Component";
      }
      function getContainerName(Component15) {
        return "Relay(" + getComponentName(Component15) + ")";
      }
      module2.exports = {
        getComponentName,
        getContainerName
      };
    }
  });

  // node_modules/react-relay/lib/ReactRelayQueryRendererContext.js
  var require_ReactRelayQueryRendererContext = __commonJS({
    "node_modules/react-relay/lib/ReactRelayQueryRendererContext.js"(exports2, module2) {
      "use strict";
      var React112 = require_react();
      module2.exports = React112.createContext({
        rootIsQueryRenderer: false
      });
    }
  });

  // node_modules/react-relay/lib/readContext.js
  var require_readContext = __commonJS({
    "node_modules/react-relay/lib/readContext.js"(exports2, module2) {
      "use strict";
      var React112 = require_react();
      var _React$__SECRET_INTER = React112.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var ReactCurrentDispatcher = _React$__SECRET_INTER.ReactCurrentDispatcher;
      var ReactCurrentOwner = _React$__SECRET_INTER.ReactCurrentOwner;
      function readContext(Context) {
        var dispatcher = ReactCurrentDispatcher != null ? ReactCurrentDispatcher.current : ReactCurrentOwner.currentDispatcher;
        return dispatcher.readContext(Context);
      }
      module2.exports = readContext;
    }
  });

  // node_modules/react-relay/lib/buildReactRelayContainer.js
  var require_buildReactRelayContainer = __commonJS({
    "node_modules/react-relay/lib/buildReactRelayContainer.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _extends210 = _interopRequireDefault(require_extends());
      var assertFragmentMap = require_assertFragmentMap();
      var _require = require_ReactRelayContainerUtils();
      var getComponentName = _require.getComponentName;
      var getContainerName = _require.getContainerName;
      var ReactRelayContext = require_ReactRelayContext();
      var ReactRelayQueryRendererContext = require_ReactRelayQueryRendererContext();
      var readContext = require_readContext();
      var invariant5 = require_browser();
      var React112 = require_react();
      var _require2 = require_relay_runtime();
      var getFragment = _require2.getFragment;
      function buildReactRelayContainer(ComponentClass, fragmentSpec, createContainerWithFragments) {
        var containerName = getContainerName(ComponentClass);
        assertFragmentMap(getComponentName(ComponentClass), fragmentSpec);
        var fragments = {};
        for (var key in fragmentSpec) {
          fragments[key] = getFragment(fragmentSpec[key]);
        }
        var Container3 = createContainerWithFragments(ComponentClass, fragments);
        Container3.displayName = containerName;
        function forwardRef56(props, ref) {
          var _queryRendererContext;
          var context3 = readContext(ReactRelayContext);
          !(context3 != null) ? true ? invariant5(false, "`%s` tried to render a context that was not valid this means that `%s` was rendered outside of a query renderer.", containerName, containerName) : invariant5(false) : void 0;
          var queryRendererContext = readContext(ReactRelayQueryRendererContext);
          return /* @__PURE__ */ React112.createElement(Container3, (0, _extends210["default"])({}, props, {
            __relayContext: context3,
            __rootIsQueryRenderer: (_queryRendererContext = queryRendererContext === null || queryRendererContext === void 0 ? void 0 : queryRendererContext.rootIsQueryRenderer) !== null && _queryRendererContext !== void 0 ? _queryRendererContext : false,
            componentRef: props.componentRef || ref
          }));
        }
        forwardRef56.displayName = containerName;
        var ForwardContainer = React112.forwardRef(forwardRef56);
        if (true) {
          ForwardContainer.__ComponentClass = ComponentClass;
          ForwardContainer.displayName = containerName;
        }
        return ForwardContainer;
      }
      module2.exports = buildReactRelayContainer;
    }
  });

  // node_modules/react-relay/lib/isRelayEnvironment.js
  var require_isRelayEnvironment = __commonJS({
    "node_modules/react-relay/lib/isRelayEnvironment.js"(exports2, module2) {
      "use strict";
      function isRelayEnvironment(environment) {
        return typeof environment === "object" && environment !== null && typeof environment.check === "function" && typeof environment.lookup === "function" && typeof environment.retain === "function" && typeof environment.execute === "function" && typeof environment.subscribe === "function";
      }
      module2.exports = isRelayEnvironment;
    }
  });

  // node_modules/react-relay/lib/RelayContext.js
  var require_RelayContext = __commonJS({
    "node_modules/react-relay/lib/RelayContext.js"(exports2, module2) {
      "use strict";
      var isRelayEnvironment = require_isRelayEnvironment();
      var invariant5 = require_browser();
      function assertRelayContext(relay) {
        !isRelayContext(relay) ? true ? invariant5(false, "RelayContext: Expected `context.relay` to be an object conforming to the `RelayContext` interface, got `%s`.", relay) : invariant5(false) : void 0;
        return relay;
      }
      function isRelayContext(context3) {
        return typeof context3 === "object" && context3 !== null && !Array.isArray(context3) && isRelayEnvironment(context3.environment);
      }
      module2.exports = {
        assertRelayContext,
        isRelayContext
      };
    }
  });

  // node_modules/react-relay/lib/ReactRelayFragmentContainer.js
  var require_ReactRelayFragmentContainer = __commonJS({
    "node_modules/react-relay/lib/ReactRelayFragmentContainer.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var _objectWithoutPropertiesLoose210 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _assertThisInitialized22 = _interopRequireDefault(require_assertThisInitialized());
      var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
      var _defineProperty210 = _interopRequireDefault(require_defineProperty());
      var _excluded36 = ["componentRef", "__relayContext", "__rootIsQueryRenderer"];
      var buildReactRelayContainer = require_buildReactRelayContainer();
      var _require = require_ReactRelayContainerUtils();
      var getContainerName = _require.getContainerName;
      var _require2 = require_RelayContext();
      var assertRelayContext = _require2.assertRelayContext;
      var areEqual = require_areEqual();
      var React112 = require_react();
      var _require3 = require_relay_runtime();
      var createFragmentSpecResolver = _require3.createFragmentSpecResolver;
      var getDataIDsFromObject = _require3.getDataIDsFromObject;
      var isScalarAndEqual = _require3.isScalarAndEqual;
      function createContainerWithFragments(Component15, fragments) {
        var _class;
        var containerName = getContainerName(Component15);
        return _class = /* @__PURE__ */ function(_React$Component) {
          (0, _inheritsLoose2["default"])(_class2, _React$Component);
          function _class2(props) {
            var _props$__rootIsQueryR, _this;
            _this = _React$Component.call(this, props) || this;
            (0, _defineProperty210["default"])((0, _assertThisInitialized22["default"])(_this), "_handleFragmentDataUpdate", function() {
              var resolverFromThisUpdate = _this.state.resolver;
              _this.setState(function(updatedState) {
                return resolverFromThisUpdate === updatedState.resolver ? {
                  data: updatedState.resolver.resolve(),
                  relayProp: getRelayProp(updatedState.relayProp.environment)
                } : null;
              });
            });
            var relayContext = assertRelayContext(props.__relayContext);
            var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== void 0 ? _props$__rootIsQueryR : false;
            var resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);
            _this.state = {
              data: resolver.resolve(),
              prevProps: props,
              prevPropsContext: relayContext,
              relayProp: getRelayProp(relayContext.environment),
              resolver
            };
            return _this;
          }
          _class2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
            var _nextProps$__rootIsQu;
            var prevProps = prevState.prevProps;
            var relayContext = assertRelayContext(nextProps.__relayContext);
            var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== void 0 ? _nextProps$__rootIsQu : false;
            var prevIDs = getDataIDsFromObject(fragments, prevProps);
            var nextIDs = getDataIDsFromObject(fragments, nextProps);
            var resolver = prevState.resolver;
            if (prevState.prevPropsContext.environment !== relayContext.environment || !areEqual(prevIDs, nextIDs)) {
              resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);
              return {
                data: resolver.resolve(),
                prevPropsContext: relayContext,
                prevProps: nextProps,
                relayProp: getRelayProp(relayContext.environment),
                resolver
              };
            } else {
              resolver.setProps(nextProps);
              var data = resolver.resolve();
              if (data !== prevState.data) {
                return {
                  data,
                  prevProps: nextProps,
                  prevPropsContext: relayContext,
                  relayProp: getRelayProp(relayContext.environment)
                };
              }
            }
            return null;
          };
          var _proto = _class2.prototype;
          _proto.componentDidMount = function componentDidMount() {
            this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
          };
          _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
            if (this.state.resolver !== prevState.resolver) {
              prevState.resolver.dispose();
              this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
            } else {
              this._rerenderIfStoreHasChanged();
            }
          };
          _proto.componentWillUnmount = function componentWillUnmount() {
            this.state.resolver.dispose();
          };
          _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
            if (nextState.data !== this.state.data) {
              return true;
            }
            var keys2 = Object.keys(nextProps);
            for (var ii = 0; ii < keys2.length; ii++) {
              var key = keys2[ii];
              if (key === "__relayContext") {
                if (nextState.prevPropsContext.environment !== this.state.prevPropsContext.environment) {
                  return true;
                }
              } else {
                if (!fragments.hasOwnProperty(key) && !isScalarAndEqual(nextProps[key], this.props[key])) {
                  return true;
                }
              }
            }
            return false;
          };
          _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {
            var _this$state = this.state, data = _this$state.data, resolver = _this$state.resolver;
            var maybeNewData = resolver.resolve();
            if (data !== maybeNewData) {
              this.setState({
                data: maybeNewData
              });
            }
          };
          _proto._subscribeToNewResolverAndRerenderIfStoreHasChanged = function _subscribeToNewResolverAndRerenderIfStoreHasChanged() {
            var _this$state2 = this.state, data = _this$state2.data, resolver = _this$state2.resolver;
            var maybeNewData = resolver.resolve();
            resolver.setCallback(this.props, this._handleFragmentDataUpdate);
            if (data !== maybeNewData) {
              this.setState({
                data: maybeNewData
              });
            }
          };
          _proto.render = function render() {
            var _this$props = this.props, componentRef = _this$props.componentRef, __relayContext = _this$props.__relayContext, __rootIsQueryRenderer = _this$props.__rootIsQueryRenderer, props = (0, _objectWithoutPropertiesLoose210["default"])(_this$props, _excluded36);
            return React112.createElement(Component15, (0, _objectSpread28["default"])((0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, props), this.state.data), {}, {
              ref: componentRef,
              relay: this.state.relayProp
            }));
          };
          return _class2;
        }(React112.Component), (0, _defineProperty210["default"])(_class, "displayName", containerName), _class;
      }
      function getRelayProp(environment) {
        return {
          environment
        };
      }
      function createContainer(Component15, fragmentSpec) {
        return buildReactRelayContainer(Component15, fragmentSpec, createContainerWithFragments);
      }
      module2.exports = {
        createContainer
      };
    }
  });

  // node_modules/react-relay/lib/ReactRelayLocalQueryRenderer.js
  var require_ReactRelayLocalQueryRenderer = __commonJS({
    "node_modules/react-relay/lib/ReactRelayLocalQueryRenderer.js"(exports2, module2) {
      "use strict";
      var ReactRelayContext = require_ReactRelayContext();
      var ReactRelayQueryRendererContext = require_ReactRelayQueryRendererContext();
      var areEqual = require_areEqual();
      var React112 = require_react();
      var _require = require_relay_runtime();
      var createOperationDescriptor = _require.createOperationDescriptor;
      var deepFreeze = _require.deepFreeze;
      var getRequest = _require.getRequest;
      var useLayoutEffect4 = React112.useLayoutEffect;
      var useState17 = React112.useState;
      var useRef11 = React112.useRef;
      var useMemo13 = React112.useMemo;
      var queryRendererContext = {
        rootIsQueryRenderer: true
      };
      function useDeepCompare(value) {
        var latestValue = React112.useRef(value);
        if (!areEqual(latestValue.current, value)) {
          if (true) {
            deepFreeze(value);
          }
          latestValue.current = value;
        }
        return latestValue.current;
      }
      function ReactRelayLocalQueryRenderer(props) {
        var environment = props.environment, query = props.query, variables = props.variables, render = props.render;
        var latestVariables = useDeepCompare(variables);
        var operation = useMemo13(function() {
          var request = getRequest(query);
          return createOperationDescriptor(request, latestVariables);
        }, [query, latestVariables]);
        var relayContext = useMemo13(function() {
          return {
            environment
          };
        }, [environment]);
        var dataRef = useRef11(null);
        var _useState = useState17(null), forceUpdate = _useState[1];
        var cleanupFnRef = useRef11(null);
        var snapshot = useMemo13(function() {
          environment.check(operation);
          var res = environment.lookup(operation.fragment);
          dataRef.current = res.data;
          var retainDisposable = environment.retain(operation);
          var subscribeDisposable = environment.subscribe(res, function(newSnapshot) {
            dataRef.current = newSnapshot.data;
            forceUpdate(dataRef.current);
          });
          var disposed = false;
          function nextCleanupFn() {
            if (!disposed) {
              disposed = true;
              cleanupFnRef.current = null;
              retainDisposable.dispose();
              subscribeDisposable.dispose();
            }
          }
          if (cleanupFnRef.current) {
            cleanupFnRef.current();
          }
          cleanupFnRef.current = nextCleanupFn;
          return res;
        }, [environment, operation]);
        useLayoutEffect4(function() {
          var cleanupFn = cleanupFnRef.current;
          return function() {
            cleanupFn && cleanupFn();
          };
        }, [snapshot]);
        return /* @__PURE__ */ React112.createElement(ReactRelayContext.Provider, {
          value: relayContext
        }, /* @__PURE__ */ React112.createElement(ReactRelayQueryRendererContext.Provider, {
          value: queryRendererContext
        }, render({
          props: dataRef.current
        })));
      }
      module2.exports = ReactRelayLocalQueryRenderer;
    }
  });

  // node_modules/react-relay/lib/getRootVariablesForFragments.js
  var require_getRootVariablesForFragments = __commonJS({
    "node_modules/react-relay/lib/getRootVariablesForFragments.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var _require = require_relay_runtime();
      var getSelector = _require.getSelector;
      function getRootVariablesForFragments(fragments, props) {
        var rootVariables = {};
        Object.keys(fragments).forEach(function(key) {
          var _selector$selectors$, _selector$selectors$2, _selector$owner$varia;
          var fragmentNode = fragments[key];
          var fragmentRef = props[key];
          var selector2 = getSelector(fragmentNode, fragmentRef);
          var fragmentOwnerVariables = selector2 != null && selector2.kind === "PluralReaderSelector" ? (_selector$selectors$ = (_selector$selectors$2 = selector2.selectors[0]) === null || _selector$selectors$2 === void 0 ? void 0 : _selector$selectors$2.owner.variables) !== null && _selector$selectors$ !== void 0 ? _selector$selectors$ : {} : (_selector$owner$varia = selector2 === null || selector2 === void 0 ? void 0 : selector2.owner.variables) !== null && _selector$owner$varia !== void 0 ? _selector$owner$varia : {};
          rootVariables = (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, rootVariables), fragmentOwnerVariables);
        });
        return rootVariables;
      }
      module2.exports = getRootVariablesForFragments;
    }
  });

  // node_modules/react-relay/lib/ReactRelayQueryFetcher.js
  var require_ReactRelayQueryFetcher = __commonJS({
    "node_modules/react-relay/lib/ReactRelayQueryFetcher.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _defineProperty210 = _interopRequireDefault(require_defineProperty());
      var invariant5 = require_browser();
      var _require = require_relay_runtime();
      var fetchQuery = _require.__internal.fetchQuery;
      var createOperationDescriptor = _require.createOperationDescriptor;
      var isRelayModernEnvironment = _require.isRelayModernEnvironment;
      var ReactRelayQueryFetcher = /* @__PURE__ */ function() {
        function ReactRelayQueryFetcher2(args) {
          (0, _defineProperty210["default"])(this, "_selectionReferences", []);
          (0, _defineProperty210["default"])(this, "_callOnDataChangeWhenSet", false);
          if (args != null) {
            this._cacheSelectionReference = args.cacheSelectionReference;
            this._selectionReferences = args.selectionReferences;
          }
        }
        var _proto = ReactRelayQueryFetcher2.prototype;
        _proto.getSelectionReferences = function getSelectionReferences() {
          return {
            cacheSelectionReference: this._cacheSelectionReference,
            selectionReferences: this._selectionReferences
          };
        };
        _proto.lookupInStore = function lookupInStore(environment, operation, fetchPolicy) {
          if (fetchPolicy === "store-and-network" || fetchPolicy === "store-or-network") {
            if (environment.check(operation).status === "available") {
              this._retainCachedOperation(environment, operation);
              return environment.lookup(operation.fragment);
            }
          }
          return null;
        };
        _proto.execute = function execute(_ref2) {
          var _this = this;
          var environment = _ref2.environment, operation = _ref2.operation, _ref$preservePrevious = _ref2.preservePreviousReferences, preservePreviousReferences = _ref$preservePrevious === void 0 ? false : _ref$preservePrevious;
          var reference = environment.retain(operation);
          var error = function error2() {
            _this._selectionReferences = _this._selectionReferences.concat(reference);
          };
          var complete = function complete2() {
            if (!preservePreviousReferences) {
              _this.disposeSelectionReferences();
            }
            _this._selectionReferences = _this._selectionReferences.concat(reference);
          };
          var unsubscribe = function unsubscribe2() {
            _this._selectionReferences = _this._selectionReferences.concat(reference);
          };
          if (!isRelayModernEnvironment(environment)) {
            return environment.execute({
              operation
            })["do"]({
              error,
              complete,
              unsubscribe
            });
          }
          return fetchQuery(environment, operation)["do"]({
            error,
            complete,
            unsubscribe
          });
        };
        _proto.setOnDataChange = function setOnDataChange(onDataChange) {
          !this._fetchOptions ? true ? invariant5(false, "ReactRelayQueryFetcher: `setOnDataChange` should have been called after having called `fetch`") : invariant5(false) : void 0;
          if (typeof onDataChange === "function") {
            this._fetchOptions.onDataChangeCallbacks = this._fetchOptions.onDataChangeCallbacks || [];
            this._fetchOptions.onDataChangeCallbacks.push(onDataChange);
            if (this._callOnDataChangeWhenSet) {
              if (this._error != null) {
                onDataChange({
                  error: this._error
                });
              } else if (this._snapshot != null) {
                onDataChange({
                  snapshot: this._snapshot
                });
              }
            }
          }
        };
        _proto.fetch = function fetch2(fetchOptions, cacheConfigOverride) {
          var _this2 = this;
          var environment = fetchOptions.environment, operation = fetchOptions.operation, onDataChange = fetchOptions.onDataChange;
          var fetchHasReturned = false;
          var _error;
          this.disposeRequest();
          var oldOnDataChangeCallbacks = this._fetchOptions && this._fetchOptions.onDataChangeCallbacks;
          this._fetchOptions = {
            environment,
            onDataChangeCallbacks: oldOnDataChangeCallbacks || [],
            operation
          };
          if (onDataChange && this._fetchOptions.onDataChangeCallbacks.indexOf(onDataChange) === -1) {
            this._fetchOptions.onDataChangeCallbacks.push(onDataChange);
          }
          var operationOverride = cacheConfigOverride ? createOperationDescriptor(operation.request.node, operation.request.variables, cacheConfigOverride) : operation;
          var request = this.execute({
            environment,
            operation: operationOverride
          })["finally"](function() {
            _this2._pendingRequest = null;
          }).subscribe({
            next: function next() {
              _this2._callOnDataChangeWhenSet = true;
              _this2._error = null;
              _this2._onQueryDataAvailable({
                notifyFirstResult: fetchHasReturned
              });
            },
            error: function error(err2) {
              _this2._callOnDataChangeWhenSet = true;
              _this2._error = err2;
              _this2._snapshot = null;
              var onDataChangeCallbacks = _this2._fetchOptions && _this2._fetchOptions.onDataChangeCallbacks;
              if (fetchHasReturned) {
                if (onDataChangeCallbacks) {
                  onDataChangeCallbacks.forEach(function(onDataChange2) {
                    onDataChange2({
                      error: err2
                    });
                  });
                }
              } else {
                _error = err2;
              }
            }
          });
          this._pendingRequest = {
            dispose: function dispose() {
              request.unsubscribe();
            }
          };
          fetchHasReturned = true;
          if (_error) {
            throw _error;
          }
          return this._snapshot;
        };
        _proto.retry = function retry(cacheConfigOverride) {
          !this._fetchOptions ? true ? invariant5(false, "ReactRelayQueryFetcher: `retry` should be called after having called `fetch`") : invariant5(false) : void 0;
          return this.fetch({
            environment: this._fetchOptions.environment,
            operation: this._fetchOptions.operation,
            onDataChange: null
          }, cacheConfigOverride);
        };
        _proto.dispose = function dispose() {
          this.disposeRequest();
          this.disposeSelectionReferences();
        };
        _proto.disposeRequest = function disposeRequest() {
          this._error = null;
          this._snapshot = null;
          if (this._pendingRequest) {
            this._pendingRequest.dispose();
          }
          if (this._rootSubscription) {
            this._rootSubscription.dispose();
            this._rootSubscription = null;
          }
        };
        _proto._retainCachedOperation = function _retainCachedOperation(environment, operation) {
          this._disposeCacheSelectionReference();
          this._cacheSelectionReference = environment.retain(operation);
        };
        _proto._disposeCacheSelectionReference = function _disposeCacheSelectionReference() {
          this._cacheSelectionReference && this._cacheSelectionReference.dispose();
          this._cacheSelectionReference = null;
        };
        _proto.disposeSelectionReferences = function disposeSelectionReferences() {
          this._disposeCacheSelectionReference();
          this._selectionReferences.forEach(function(r) {
            return r.dispose();
          });
          this._selectionReferences = [];
        };
        _proto._onQueryDataAvailable = function _onQueryDataAvailable(_ref2) {
          var _this3 = this;
          var notifyFirstResult = _ref2.notifyFirstResult;
          !this._fetchOptions ? true ? invariant5(false, "ReactRelayQueryFetcher: `_onQueryDataAvailable` should have been called after having called `fetch`") : invariant5(false) : void 0;
          var _this$_fetchOptions = this._fetchOptions, environment = _this$_fetchOptions.environment, onDataChangeCallbacks = _this$_fetchOptions.onDataChangeCallbacks, operation = _this$_fetchOptions.operation;
          if (this._snapshot) {
            return;
          }
          this._snapshot = environment.lookup(operation.fragment);
          this._rootSubscription = environment.subscribe(this._snapshot, function(snapshot2) {
            if (_this3._fetchOptions != null) {
              var maybeNewOnDataChangeCallbacks = _this3._fetchOptions.onDataChangeCallbacks;
              if (Array.isArray(maybeNewOnDataChangeCallbacks)) {
                maybeNewOnDataChangeCallbacks.forEach(function(onDataChange) {
                  return onDataChange({
                    snapshot: snapshot2
                  });
                });
              }
            }
          });
          if (this._snapshot && notifyFirstResult && Array.isArray(onDataChangeCallbacks)) {
            var snapshot = this._snapshot;
            onDataChangeCallbacks.forEach(function(onDataChange) {
              return onDataChange({
                snapshot
              });
            });
          }
        };
        return ReactRelayQueryFetcher2;
      }();
      module2.exports = ReactRelayQueryFetcher;
    }
  });

  // node_modules/react-relay/lib/ReactRelayPaginationContainer.js
  var require_ReactRelayPaginationContainer = __commonJS({
    "node_modules/react-relay/lib/ReactRelayPaginationContainer.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _extends210 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose210 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _assertThisInitialized22 = _interopRequireDefault(require_assertThisInitialized());
      var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
      var _defineProperty210 = _interopRequireDefault(require_defineProperty());
      var _objectSpread32 = _interopRequireDefault(require_objectSpread2());
      var _excluded36 = ["componentRef"];
      var _excluded211 = ["componentRef", "__relayContext", "__rootIsQueryRenderer"];
      var _excluded37 = ["componentRef", "__relayContext", "__rootIsQueryRenderer"];
      var buildReactRelayContainer = require_buildReactRelayContainer();
      var getRootVariablesForFragments = require_getRootVariablesForFragments();
      var _require = require_ReactRelayContainerUtils();
      var getComponentName = _require.getComponentName;
      var getContainerName = _require.getContainerName;
      var ReactRelayContext = require_ReactRelayContext();
      var ReactRelayQueryFetcher = require_ReactRelayQueryFetcher();
      var _require2 = require_RelayContext();
      var assertRelayContext = _require2.assertRelayContext;
      var areEqual = require_areEqual();
      var invariant5 = require_browser();
      var React112 = require_react();
      var _require3 = require_relay_runtime();
      var ConnectionInterface = _require3.ConnectionInterface;
      var Observable = _require3.Observable;
      var RelayFeatureFlags = _require3.RelayFeatureFlags;
      var createFragmentSpecResolver = _require3.createFragmentSpecResolver;
      var createOperationDescriptor = _require3.createOperationDescriptor;
      var getDataIDsFromObject = _require3.getDataIDsFromObject;
      var getRequest = _require3.getRequest;
      var getVariablesFromObject = _require3.getVariablesFromObject;
      var isScalarAndEqual = _require3.isScalarAndEqual;
      var warning6 = require_warning();
      var FORWARD = "forward";
      function createGetConnectionFromProps(metadata) {
        var path = metadata.path;
        !path ? true ? invariant5(false, "ReactRelayPaginationContainer: Unable to synthesize a getConnectionFromProps function.") : invariant5(false) : void 0;
        return function(props) {
          var data = props[metadata.fragmentName];
          for (var i = 0; i < path.length; i++) {
            if (!data || typeof data !== "object") {
              return null;
            }
            data = data[path[i]];
          }
          return data;
        };
      }
      function createGetFragmentVariables(metadata) {
        var countVariable = metadata.count;
        !countVariable ? true ? invariant5(false, "ReactRelayPaginationContainer: Unable to synthesize a getFragmentVariables function.") : invariant5(false) : void 0;
        return function(prevVars, totalCount) {
          return (0, _objectSpread32["default"])((0, _objectSpread32["default"])({}, prevVars), {}, (0, _defineProperty210["default"])({}, countVariable, totalCount));
        };
      }
      function findConnectionMetadata(fragments) {
        var foundConnectionMetadata = null;
        var isRelayModern = false;
        for (var fragmentName in fragments) {
          var fragment = fragments[fragmentName];
          var connectionMetadata = fragment.metadata && fragment.metadata.connection;
          if (fragment.metadata !== void 0) {
            isRelayModern = true;
          }
          if (connectionMetadata) {
            !(connectionMetadata.length === 1) ? true ? invariant5(false, "ReactRelayPaginationContainer: Only a single @connection is supported, `%s` has %s.", fragmentName, connectionMetadata.length) : invariant5(false) : void 0;
            !!foundConnectionMetadata ? true ? invariant5(false, "ReactRelayPaginationContainer: Only a single fragment with @connection is supported.") : invariant5(false) : void 0;
            foundConnectionMetadata = (0, _objectSpread32["default"])((0, _objectSpread32["default"])({}, connectionMetadata[0]), {}, {
              fragmentName
            });
          }
        }
        !(!isRelayModern || foundConnectionMetadata !== null) ? true ? invariant5(false, "ReactRelayPaginationContainer: A @connection directive must be present.") : invariant5(false) : void 0;
        return foundConnectionMetadata || {};
      }
      function toObserver(observerOrCallback) {
        return typeof observerOrCallback === "function" ? {
          error: observerOrCallback,
          complete: observerOrCallback,
          unsubscribe: function unsubscribe(subscription) {
            typeof observerOrCallback === "function" && observerOrCallback();
          }
        } : observerOrCallback || {};
      }
      function createContainerWithFragments(Component15, fragments, connectionConfig) {
        var _class;
        var componentName2 = getComponentName(Component15);
        var containerName = getContainerName(Component15);
        var metadata = findConnectionMetadata(fragments);
        var getConnectionFromProps = connectionConfig.getConnectionFromProps || createGetConnectionFromProps(metadata);
        var direction = connectionConfig.direction || metadata.direction;
        !direction ? true ? invariant5(false, "ReactRelayPaginationContainer: Unable to infer direction of the connection, possibly because both first and last are provided.") : invariant5(false) : void 0;
        var getFragmentVariables = connectionConfig.getFragmentVariables || createGetFragmentVariables(metadata);
        return _class = /* @__PURE__ */ function(_React$Component) {
          (0, _inheritsLoose2["default"])(_class2, _React$Component);
          function _class2(props) {
            var _props$__rootIsQueryR, _this;
            _this = _React$Component.call(this, props) || this;
            (0, _defineProperty210["default"])((0, _assertThisInitialized22["default"])(_this), "_handleFragmentDataUpdate", function() {
              _this.setState({
                data: _this._resolver.resolve()
              });
            });
            (0, _defineProperty210["default"])((0, _assertThisInitialized22["default"])(_this), "_hasMore", function() {
              var connectionData = _this._getConnectionData();
              return !!(connectionData && connectionData.hasMore && connectionData.cursor);
            });
            (0, _defineProperty210["default"])((0, _assertThisInitialized22["default"])(_this), "_isLoading", function() {
              return !!_this._refetchSubscription;
            });
            (0, _defineProperty210["default"])((0, _assertThisInitialized22["default"])(_this), "_refetchConnection", function(totalCount, observerOrCallback, refetchVariables) {
              if (!_this._canFetchPage("refetchConnection")) {
                return {
                  dispose: function dispose() {
                  }
                };
              }
              _this._refetchVariables = refetchVariables;
              var paginatingVariables = {
                count: totalCount,
                cursor: null,
                totalCount
              };
              var fetch2 = _this._fetchPage(paginatingVariables, toObserver(observerOrCallback), {
                force: true
              });
              return {
                dispose: fetch2.unsubscribe
              };
            });
            (0, _defineProperty210["default"])((0, _assertThisInitialized22["default"])(_this), "_loadMore", function(pageSize, observerOrCallback, options) {
              if (!_this._canFetchPage("loadMore")) {
                return {
                  dispose: function dispose() {
                  }
                };
              }
              var observer = toObserver(observerOrCallback);
              var connectionData = _this._getConnectionData();
              if (!connectionData) {
                Observable.create(function(sink) {
                  return sink.complete();
                }).subscribe(observer);
                return null;
              }
              var totalCount = connectionData.edgeCount + pageSize;
              if (options && options.force) {
                return _this._refetchConnection(totalCount, observerOrCallback);
              }
              var _ConnectionInterface$ = ConnectionInterface.get(), END_CURSOR = _ConnectionInterface$.END_CURSOR, START_CURSOR = _ConnectionInterface$.START_CURSOR;
              var cursor2 = connectionData.cursor;
              true ? warning6(cursor2 != null && cursor2 !== "", "ReactRelayPaginationContainer: Cannot `loadMore` without valid `%s` (got `%s`)", direction === FORWARD ? END_CURSOR : START_CURSOR, cursor2) : void 0;
              var paginatingVariables = {
                count: pageSize,
                cursor: cursor2,
                totalCount
              };
              var fetch2 = _this._fetchPage(paginatingVariables, observer, options);
              return {
                dispose: fetch2.unsubscribe
              };
            });
            var relayContext = assertRelayContext(props.__relayContext);
            var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== void 0 ? _props$__rootIsQueryR : false;
            _this._isARequestInFlight = false;
            _this._refetchSubscription = null;
            _this._refetchVariables = null;
            if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
              _this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);
            } else {
              _this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer, _this._handleFragmentDataUpdate);
            }
            _this.state = {
              data: _this._resolver.resolve(),
              prevContext: relayContext,
              contextForChildren: relayContext,
              relayProp: _this._buildRelayProp(relayContext),
              resolverGeneration: 0
            };
            _this._isUnmounted = false;
            _this._hasFetched = false;
            return _this;
          }
          var _proto = _class2.prototype;
          _proto.componentDidMount = function componentDidMount() {
            this._isUnmounted = false;
            if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
              this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
            }
          };
          _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
            if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
              if (prevState.resolverGeneration !== this.state.resolverGeneration) {
                this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
              } else {
                this._rerenderIfStoreHasChanged();
              }
            }
          };
          _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
            var _this2 = this;
            var _nextProps$__rootIsQu;
            var relayContext = assertRelayContext(nextProps.__relayContext);
            var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== void 0 ? _nextProps$__rootIsQu : false;
            var prevIDs = getDataIDsFromObject(fragments, this.props);
            var nextIDs = getDataIDsFromObject(fragments, nextProps);
            var prevRootVariables = getRootVariablesForFragments(fragments, this.props);
            var nextRootVariables = getRootVariablesForFragments(fragments, nextProps);
            if (relayContext.environment !== this.state.prevContext.environment || !areEqual(prevRootVariables, nextRootVariables) || !areEqual(prevIDs, nextIDs)) {
              this._cleanup();
              if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
                this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);
              } else {
                this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer, this._handleFragmentDataUpdate);
              }
              this.setState(function(prevState) {
                return {
                  prevContext: relayContext,
                  contextForChildren: relayContext,
                  relayProp: _this2._buildRelayProp(relayContext),
                  resolverGeneration: prevState.resolverGeneration + 1
                };
              });
            } else if (!this._hasFetched) {
              this._resolver.setProps(nextProps);
            }
            var data = this._resolver.resolve();
            if (data !== this.state.data) {
              this.setState({
                data
              });
            }
          };
          _proto.componentWillUnmount = function componentWillUnmount() {
            this._isUnmounted = true;
            this._cleanup();
          };
          _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
            if (nextState.data !== this.state.data || nextState.relayProp !== this.state.relayProp || nextState.resolverGeneration !== this.state.resolverGeneration) {
              return true;
            }
            var keys2 = Object.keys(nextProps);
            for (var ii = 0; ii < keys2.length; ii++) {
              var key = keys2[ii];
              if (key === "__relayContext") {
                if (nextState.prevContext.environment !== this.state.prevContext.environment) {
                  return true;
                }
              } else {
                if (!fragments.hasOwnProperty(key) && !isScalarAndEqual(nextProps[key], this.props[key])) {
                  return true;
                }
              }
            }
            return false;
          };
          _proto._buildRelayProp = function _buildRelayProp(relayContext) {
            return {
              hasMore: this._hasMore,
              isLoading: this._isLoading,
              loadMore: this._loadMore,
              refetchConnection: this._refetchConnection,
              environment: relayContext.environment
            };
          };
          _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {
            var data = this.state.data;
            var maybeNewData = this._resolver.resolve();
            if (data !== maybeNewData) {
              this.setState({
                data: maybeNewData
              });
            }
          };
          _proto._subscribeToNewResolverAndRerenderIfStoreHasChanged = function _subscribeToNewResolverAndRerenderIfStoreHasChanged() {
            var data = this.state.data;
            var maybeNewData = this._resolver.resolve();
            this._resolver.setCallback(this.props, this._handleFragmentDataUpdate);
            if (data !== maybeNewData) {
              this.setState({
                data: maybeNewData
              });
            }
          };
          _proto._getConnectionData = function _getConnectionData() {
            var _this$props = this.props, _ = _this$props.componentRef, restProps = (0, _objectWithoutPropertiesLoose210["default"])(_this$props, _excluded36);
            var props = (0, _objectSpread32["default"])((0, _objectSpread32["default"])({}, restProps), this.state.data);
            var connectionData = getConnectionFromProps(props);
            if (connectionData == null) {
              return null;
            }
            var _ConnectionInterface$2 = ConnectionInterface.get(), EDGES = _ConnectionInterface$2.EDGES, PAGE_INFO = _ConnectionInterface$2.PAGE_INFO, HAS_NEXT_PAGE = _ConnectionInterface$2.HAS_NEXT_PAGE, HAS_PREV_PAGE = _ConnectionInterface$2.HAS_PREV_PAGE, END_CURSOR = _ConnectionInterface$2.END_CURSOR, START_CURSOR = _ConnectionInterface$2.START_CURSOR;
            !(typeof connectionData === "object") ? true ? invariant5(false, "ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`to return `null` or a plain object with %s and %s properties, got `%s`.", componentName2, EDGES, PAGE_INFO, connectionData) : invariant5(false) : void 0;
            var edges = connectionData[EDGES];
            var pageInfo = connectionData[PAGE_INFO];
            if (edges == null || pageInfo == null) {
              return null;
            }
            !Array.isArray(edges) ? true ? invariant5(false, "ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`to return an object with %s: Array, got `%s`.", componentName2, EDGES, edges) : invariant5(false) : void 0;
            !(typeof pageInfo === "object") ? true ? invariant5(false, "ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`to return an object with %s: Object, got `%s`.", componentName2, PAGE_INFO, pageInfo) : invariant5(false) : void 0;
            var hasMore = direction === FORWARD ? pageInfo[HAS_NEXT_PAGE] : pageInfo[HAS_PREV_PAGE];
            var cursor2 = direction === FORWARD ? pageInfo[END_CURSOR] : pageInfo[START_CURSOR];
            if (typeof hasMore !== "boolean" || edges.length !== 0 && typeof cursor2 === "undefined") {
              true ? warning6(false, "ReactRelayPaginationContainer: Cannot paginate without %s fields in `%s`. Be sure to fetch %s (got `%s`) and %s (got `%s`).", PAGE_INFO, componentName2, direction === FORWARD ? HAS_NEXT_PAGE : HAS_PREV_PAGE, hasMore, direction === FORWARD ? END_CURSOR : START_CURSOR, cursor2) : void 0;
              return null;
            }
            return {
              cursor: cursor2,
              edgeCount: edges.length,
              hasMore
            };
          };
          _proto._getQueryFetcher = function _getQueryFetcher() {
            if (!this._queryFetcher) {
              this._queryFetcher = new ReactRelayQueryFetcher();
            }
            return this._queryFetcher;
          };
          _proto._canFetchPage = function _canFetchPage(method) {
            if (this._isUnmounted) {
              true ? warning6(false, "ReactRelayPaginationContainer: Unexpected call of `%s` on unmounted container `%s`. It looks like some instances of your container still trying to fetch data but they already unmounted. Please make sure you clear all timers, intervals, async calls, etc that may trigger `%s` call.", method, containerName, method) : void 0;
              return false;
            }
            return true;
          };
          _proto._fetchPage = function _fetchPage(paginatingVariables, observer, options) {
            var _this3 = this;
            var _assertRelayContext = assertRelayContext(this.props.__relayContext), environment = _assertRelayContext.environment;
            var _this$props2 = this.props, _ = _this$props2.componentRef, __relayContext = _this$props2.__relayContext, __rootIsQueryRenderer = _this$props2.__rootIsQueryRenderer, restProps = (0, _objectWithoutPropertiesLoose210["default"])(_this$props2, _excluded211);
            var props = (0, _objectSpread32["default"])((0, _objectSpread32["default"])({}, restProps), this.state.data);
            var fragmentVariables;
            var rootVariables = getRootVariablesForFragments(fragments, restProps);
            fragmentVariables = getVariablesFromObject(fragments, restProps);
            fragmentVariables = (0, _objectSpread32["default"])((0, _objectSpread32["default"])((0, _objectSpread32["default"])({}, rootVariables), fragmentVariables), this._refetchVariables);
            var fetchVariables = connectionConfig.getVariables(props, {
              count: paginatingVariables.count,
              cursor: paginatingVariables.cursor
            }, fragmentVariables);
            !(typeof fetchVariables === "object" && fetchVariables !== null) ? true ? invariant5(false, "ReactRelayPaginationContainer: Expected `getVariables()` to return an object, got `%s` in `%s`.", fetchVariables, componentName2) : invariant5(false) : void 0;
            fetchVariables = (0, _objectSpread32["default"])((0, _objectSpread32["default"])({}, fetchVariables), this._refetchVariables);
            fragmentVariables = (0, _objectSpread32["default"])((0, _objectSpread32["default"])({}, fetchVariables), fragmentVariables);
            var cacheConfig = options ? {
              force: !!options.force
            } : void 0;
            if (cacheConfig != null && (options === null || options === void 0 ? void 0 : options.metadata) != null) {
              cacheConfig.metadata = options === null || options === void 0 ? void 0 : options.metadata;
            }
            var request = getRequest(connectionConfig.query);
            var operation = createOperationDescriptor(request, fetchVariables, cacheConfig);
            var refetchSubscription = null;
            if (this._refetchSubscription) {
              this._refetchSubscription.unsubscribe();
            }
            this._hasFetched = true;
            var onNext = function onNext2(payload, complete) {
              var prevData = _this3._resolver.resolve();
              _this3._resolver.setVariables(getFragmentVariables(fragmentVariables, paginatingVariables.totalCount), operation.request.node);
              var nextData = _this3._resolver.resolve();
              if (!areEqual(prevData, nextData)) {
                _this3.setState({
                  data: nextData,
                  contextForChildren: {
                    environment: _this3.props.__relayContext.environment
                  }
                }, complete);
              } else {
                complete();
              }
            };
            var cleanup = function cleanup2() {
              if (_this3._refetchSubscription === refetchSubscription) {
                _this3._refetchSubscription = null;
                _this3._isARequestInFlight = false;
              }
            };
            this._isARequestInFlight = true;
            refetchSubscription = this._getQueryFetcher().execute({
              environment,
              operation,
              preservePreviousReferences: true
            }).mergeMap(function(payload) {
              return Observable.create(function(sink) {
                onNext(payload, function() {
                  sink.next();
                  sink.complete();
                });
              });
            })["do"]({
              error: cleanup,
              complete: cleanup,
              unsubscribe: cleanup
            }).subscribe(observer || {});
            this._refetchSubscription = this._isARequestInFlight ? refetchSubscription : null;
            return refetchSubscription;
          };
          _proto._cleanup = function _cleanup() {
            this._resolver.dispose();
            this._refetchVariables = null;
            this._hasFetched = false;
            if (this._refetchSubscription) {
              this._refetchSubscription.unsubscribe();
              this._refetchSubscription = null;
              this._isARequestInFlight = false;
            }
            if (this._queryFetcher) {
              this._queryFetcher.dispose();
            }
          };
          _proto.render = function render() {
            var _this$props3 = this.props, componentRef = _this$props3.componentRef, __relayContext = _this$props3.__relayContext, __rootIsQueryRenderer = _this$props3.__rootIsQueryRenderer, props = (0, _objectWithoutPropertiesLoose210["default"])(_this$props3, _excluded37);
            return /* @__PURE__ */ React112.createElement(ReactRelayContext.Provider, {
              value: this.state.contextForChildren
            }, /* @__PURE__ */ React112.createElement(Component15, (0, _extends210["default"])({}, props, this.state.data, {
              ref: componentRef,
              relay: this.state.relayProp
            })));
          };
          return _class2;
        }(React112.Component), (0, _defineProperty210["default"])(_class, "displayName", containerName), _class;
      }
      function createContainer(Component15, fragmentSpec, connectionConfig) {
        return buildReactRelayContainer(Component15, fragmentSpec, function(ComponentClass, fragments) {
          return createContainerWithFragments(ComponentClass, fragments, connectionConfig);
        });
      }
      module2.exports = {
        createContainer
      };
    }
  });

  // node_modules/react-relay/lib/ReactRelayQueryRenderer.js
  var require_ReactRelayQueryRenderer = __commonJS({
    "node_modules/react-relay/lib/ReactRelayQueryRenderer.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var _assertThisInitialized22 = _interopRequireDefault(require_assertThisInitialized());
      var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
      var _defineProperty210 = _interopRequireDefault(require_defineProperty());
      var ReactRelayContext = require_ReactRelayContext();
      var ReactRelayQueryFetcher = require_ReactRelayQueryFetcher();
      var ReactRelayQueryRendererContext = require_ReactRelayQueryRendererContext();
      var areEqual = require_areEqual();
      var React112 = require_react();
      var _require = require_relay_runtime();
      var createOperationDescriptor = _require.createOperationDescriptor;
      var deepFreeze = _require.deepFreeze;
      var getRequest = _require.getRequest;
      var requestCache = {};
      var queryRendererContext = {
        rootIsQueryRenderer: true
      };
      var ReactRelayQueryRenderer = /* @__PURE__ */ function(_React$Component) {
        (0, _inheritsLoose2["default"])(ReactRelayQueryRenderer2, _React$Component);
        function ReactRelayQueryRenderer2(props) {
          var _this;
          _this = _React$Component.call(this, props) || this;
          (0, _defineProperty210["default"])((0, _assertThisInitialized22["default"])(_this), "_handleDataChange", function(params) {
            var error = params.error == null ? null : params.error;
            var snapshot = params.snapshot == null ? null : params.snapshot;
            _this.setState(function(prevState) {
              var prevRequestCacheKey = prevState.requestCacheKey;
              if (prevRequestCacheKey) {
                delete requestCache[prevRequestCacheKey];
              }
              if (snapshot === prevState.snapshot && error === prevState.error) {
                return null;
              }
              return {
                renderProps: getRenderProps(error, snapshot, prevState.queryFetcher, prevState.retryCallbacks),
                snapshot,
                requestCacheKey: null
              };
            });
          });
          var retryCallbacks = {
            handleDataChange: null,
            handleRetryAfterError: null
          };
          var queryFetcher;
          var requestCacheKey;
          if (props.query) {
            var query = props.query;
            var request = getRequest(query);
            requestCacheKey = getRequestCacheKey(request.params, props.variables);
            queryFetcher = requestCache[requestCacheKey] ? requestCache[requestCacheKey].queryFetcher : new ReactRelayQueryFetcher();
          } else {
            queryFetcher = new ReactRelayQueryFetcher();
          }
          _this._maybeHiddenOrFastRefresh = false;
          _this.state = (0, _objectSpread28["default"])({
            prevPropsEnvironment: props.environment,
            prevPropsVariables: props.variables,
            prevQuery: props.query,
            queryFetcher,
            retryCallbacks
          }, fetchQueryAndComputeStateFromProps(props, queryFetcher, retryCallbacks, requestCacheKey));
          return _this;
        }
        ReactRelayQueryRenderer2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
          if (prevState.prevQuery !== nextProps.query || prevState.prevPropsEnvironment !== nextProps.environment || !areEqual(prevState.prevPropsVariables, nextProps.variables)) {
            return resetQueryStateForUpdate(nextProps, prevState);
          }
          return null;
        };
        var _proto = ReactRelayQueryRenderer2.prototype;
        _proto.componentDidMount = function componentDidMount() {
          var _this2 = this;
          if (this._maybeHiddenOrFastRefresh === true) {
            this._maybeHiddenOrFastRefresh = false;
            this.setState(function(prevState) {
              return resetQueryStateForUpdate(_this2.props, prevState);
            });
            return;
          }
          var _this$state = this.state, retryCallbacks = _this$state.retryCallbacks, queryFetcher = _this$state.queryFetcher, requestCacheKey = _this$state.requestCacheKey;
          if (requestCacheKey) {
            delete requestCache[requestCacheKey];
          }
          retryCallbacks.handleDataChange = this._handleDataChange;
          retryCallbacks.handleRetryAfterError = function(error) {
            return _this2.setState(function(prevState) {
              var prevRequestCacheKey = prevState.requestCacheKey;
              if (prevRequestCacheKey) {
                delete requestCache[prevRequestCacheKey];
              }
              return {
                renderProps: getLoadingRenderProps(),
                requestCacheKey: null
              };
            });
          };
          if (this.props.query) {
            queryFetcher.setOnDataChange(this._handleDataChange);
          }
        };
        _proto.componentDidUpdate = function componentDidUpdate(_prevProps, prevState) {
          var _this$state2 = this.state, queryFetcher = _this$state2.queryFetcher, requestCacheKey = _this$state2.requestCacheKey;
          if (requestCacheKey) {
            delete requestCache[requestCacheKey];
            delete this.state.requestCacheKey;
          }
          if (this.props.query && queryFetcher !== prevState.queryFetcher) {
            queryFetcher.setOnDataChange(this._handleDataChange);
          }
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
          this.state.queryFetcher.dispose();
          this._maybeHiddenOrFastRefresh = true;
        };
        _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
          return nextProps.render !== this.props.render || nextState.renderProps !== this.state.renderProps;
        };
        _proto.render = function render() {
          var _this$state3 = this.state, renderProps = _this$state3.renderProps, relayContext = _this$state3.relayContext;
          if (true) {
            deepFreeze(renderProps);
          }
          return /* @__PURE__ */ React112.createElement(ReactRelayContext.Provider, {
            value: relayContext
          }, /* @__PURE__ */ React112.createElement(ReactRelayQueryRendererContext.Provider, {
            value: queryRendererContext
          }, this.props.render(renderProps)));
        };
        return ReactRelayQueryRenderer2;
      }(React112.Component);
      function getLoadingRenderProps() {
        return {
          error: null,
          props: null,
          retry: null
        };
      }
      function getEmptyRenderProps() {
        return {
          error: null,
          props: {},
          retry: null
        };
      }
      function getRenderProps(error, snapshot, queryFetcher, retryCallbacks) {
        return {
          error: error ? error : null,
          props: snapshot ? snapshot.data : null,
          retry: function retry(cacheConfigOverride) {
            var syncSnapshot = queryFetcher.retry(cacheConfigOverride);
            if (syncSnapshot && typeof retryCallbacks.handleDataChange === "function") {
              retryCallbacks.handleDataChange({
                snapshot: syncSnapshot
              });
            } else if (error && typeof retryCallbacks.handleRetryAfterError === "function") {
              retryCallbacks.handleRetryAfterError(error);
            }
          }
        };
      }
      function getRequestCacheKey(request, variables) {
        return JSON.stringify({
          id: request.cacheID ? request.cacheID : request.id,
          variables
        });
      }
      function resetQueryStateForUpdate(props, prevState) {
        var query = props.query;
        var prevSelectionReferences = prevState.queryFetcher.getSelectionReferences();
        prevState.queryFetcher.disposeRequest();
        var queryFetcher;
        if (query) {
          var request = getRequest(query);
          var requestCacheKey = getRequestCacheKey(request.params, props.variables);
          queryFetcher = requestCache[requestCacheKey] ? requestCache[requestCacheKey].queryFetcher : new ReactRelayQueryFetcher(prevSelectionReferences);
        } else {
          queryFetcher = new ReactRelayQueryFetcher(prevSelectionReferences);
        }
        return (0, _objectSpread28["default"])({
          prevQuery: props.query,
          prevPropsEnvironment: props.environment,
          prevPropsVariables: props.variables,
          queryFetcher
        }, fetchQueryAndComputeStateFromProps(
          props,
          queryFetcher,
          prevState.retryCallbacks
        ));
      }
      function fetchQueryAndComputeStateFromProps(props, queryFetcher, retryCallbacks, requestCacheKey) {
        var environment = props.environment, query = props.query, variables = props.variables, cacheConfig = props.cacheConfig;
        var genericEnvironment = environment;
        if (query) {
          var request = getRequest(query);
          var operation = createOperationDescriptor(request, variables, cacheConfig);
          var relayContext = {
            environment: genericEnvironment
          };
          if (typeof requestCacheKey === "string" && requestCache[requestCacheKey]) {
            var snapshot = requestCache[requestCacheKey].snapshot;
            if (snapshot) {
              return {
                error: null,
                relayContext,
                renderProps: getRenderProps(null, snapshot, queryFetcher, retryCallbacks),
                snapshot,
                requestCacheKey
              };
            } else {
              return {
                error: null,
                relayContext,
                renderProps: getLoadingRenderProps(),
                snapshot: null,
                requestCacheKey
              };
            }
          }
          try {
            var storeSnapshot = queryFetcher.lookupInStore(genericEnvironment, operation, props.fetchPolicy);
            var querySnapshot = queryFetcher.fetch({
              environment: genericEnvironment,
              onDataChange: null,
              operation
            });
            var _snapshot = querySnapshot || storeSnapshot;
            requestCacheKey = requestCacheKey || getRequestCacheKey(request.params, props.variables);
            requestCache[requestCacheKey] = {
              queryFetcher,
              snapshot: _snapshot
            };
            if (!_snapshot) {
              return {
                error: null,
                relayContext,
                renderProps: getLoadingRenderProps(),
                snapshot: null,
                requestCacheKey
              };
            }
            return {
              error: null,
              relayContext,
              renderProps: getRenderProps(null, _snapshot, queryFetcher, retryCallbacks),
              snapshot: _snapshot,
              requestCacheKey
            };
          } catch (error) {
            return {
              error,
              relayContext,
              renderProps: getRenderProps(error, null, queryFetcher, retryCallbacks),
              snapshot: null,
              requestCacheKey
            };
          }
        } else {
          queryFetcher.dispose();
          var _relayContext = {
            environment: genericEnvironment
          };
          return {
            error: null,
            relayContext: _relayContext,
            renderProps: getEmptyRenderProps(),
            requestCacheKey: null
          };
        }
      }
      module2.exports = ReactRelayQueryRenderer;
    }
  });

  // node_modules/react-relay/lib/ReactRelayRefetchContainer.js
  var require_ReactRelayRefetchContainer = __commonJS({
    "node_modules/react-relay/lib/ReactRelayRefetchContainer.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _extends210 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose210 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var _assertThisInitialized22 = _interopRequireDefault(require_assertThisInitialized());
      var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
      var _defineProperty210 = _interopRequireDefault(require_defineProperty());
      var _excluded36 = ["componentRef", "__relayContext", "__rootIsQueryRenderer"];
      var buildReactRelayContainer = require_buildReactRelayContainer();
      var getRootVariablesForFragments = require_getRootVariablesForFragments();
      var _require = require_ReactRelayContainerUtils();
      var getContainerName = _require.getContainerName;
      var ReactRelayContext = require_ReactRelayContext();
      var ReactRelayQueryFetcher = require_ReactRelayQueryFetcher();
      var _require2 = require_RelayContext();
      var assertRelayContext = _require2.assertRelayContext;
      var areEqual = require_areEqual();
      var React112 = require_react();
      var _require3 = require_relay_runtime();
      var Observable = _require3.Observable;
      var createFragmentSpecResolver = _require3.createFragmentSpecResolver;
      var createOperationDescriptor = _require3.createOperationDescriptor;
      var getDataIDsFromObject = _require3.getDataIDsFromObject;
      var getRequest = _require3.getRequest;
      var getVariablesFromObject = _require3.getVariablesFromObject;
      var isScalarAndEqual = _require3.isScalarAndEqual;
      var warning6 = require_warning();
      function createContainerWithFragments(Component15, fragments, taggedNode) {
        var _class;
        var containerName = getContainerName(Component15);
        return _class = /* @__PURE__ */ function(_React$Component) {
          (0, _inheritsLoose2["default"])(_class2, _React$Component);
          function _class2(props) {
            var _props$__rootIsQueryR, _this;
            _this = _React$Component.call(this, props) || this;
            (0, _defineProperty210["default"])((0, _assertThisInitialized22["default"])(_this), "_handleFragmentDataUpdate", function() {
              var resolverFromThisUpdate = _this.state.resolver;
              _this.setState(function(updatedState) {
                return resolverFromThisUpdate === updatedState.resolver ? {
                  data: updatedState.resolver.resolve()
                } : null;
              });
            });
            (0, _defineProperty210["default"])((0, _assertThisInitialized22["default"])(_this), "_refetch", function(refetchVariables, renderVariables, observerOrCallback, options) {
              if (_this._isUnmounted) {
                true ? warning6(false, "ReactRelayRefetchContainer: Unexpected call of `refetch` on unmounted container `%s`. It looks like some instances of your container still trying to refetch the data but they already unmounted. Please make sure you clear all timers, intervals, async calls, etc that may trigger `refetch`.", containerName) : void 0;
                return {
                  dispose: function dispose() {
                  }
                };
              }
              var _assertRelayContext = assertRelayContext(_this.props.__relayContext), environment = _assertRelayContext.environment;
              var rootVariables = getRootVariablesForFragments(fragments, _this.props);
              var fetchVariables = typeof refetchVariables === "function" ? refetchVariables(_this._getFragmentVariables()) : refetchVariables;
              fetchVariables = (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, rootVariables), fetchVariables);
              var fragmentVariables = renderVariables ? (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, fetchVariables), renderVariables) : fetchVariables;
              var cacheConfig = options ? {
                force: !!options.force
              } : void 0;
              if (cacheConfig != null && (options === null || options === void 0 ? void 0 : options.metadata) != null) {
                cacheConfig.metadata = options === null || options === void 0 ? void 0 : options.metadata;
              }
              var observer = typeof observerOrCallback === "function" ? {
                next: observerOrCallback,
                error: observerOrCallback
              } : observerOrCallback || {};
              var query = getRequest(taggedNode);
              var operation = createOperationDescriptor(query, fetchVariables, cacheConfig);
              _this.state.localVariables = fetchVariables;
              _this._refetchSubscription && _this._refetchSubscription.unsubscribe();
              var refetchSubscription;
              var storeSnapshot = _this._getQueryFetcher().lookupInStore(environment, operation, options === null || options === void 0 ? void 0 : options.fetchPolicy);
              if (storeSnapshot != null) {
                _this.state.resolver.setVariables(fragmentVariables, operation.request.node);
                _this.setState(function(latestState) {
                  return {
                    data: latestState.resolver.resolve(),
                    contextForChildren: {
                      environment: _this.props.__relayContext.environment
                    }
                  };
                }, function() {
                  observer.next && observer.next();
                  observer.complete && observer.complete();
                });
                return {
                  dispose: function dispose() {
                  }
                };
              }
              _this._getQueryFetcher().execute({
                environment,
                operation,
                preservePreviousReferences: true
              }).mergeMap(function(response) {
                _this.state.resolver.setVariables(fragmentVariables, operation.request.node);
                return Observable.create(function(sink) {
                  return _this.setState(function(latestState) {
                    return {
                      data: latestState.resolver.resolve(),
                      contextForChildren: {
                        environment: _this.props.__relayContext.environment
                      }
                    };
                  }, function() {
                    sink.next();
                    sink.complete();
                  });
                });
              })["finally"](function() {
                if (_this._refetchSubscription === refetchSubscription) {
                  _this._refetchSubscription = null;
                }
              }).subscribe((0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, observer), {}, {
                start: function start(subscription) {
                  _this._refetchSubscription = refetchSubscription = subscription;
                  observer.start && observer.start(subscription);
                }
              }));
              return {
                dispose: function dispose() {
                  refetchSubscription && refetchSubscription.unsubscribe();
                }
              };
            });
            var relayContext = assertRelayContext(props.__relayContext);
            var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== void 0 ? _props$__rootIsQueryR : false;
            _this._refetchSubscription = null;
            var resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);
            _this.state = {
              data: resolver.resolve(),
              localVariables: null,
              prevProps: props,
              prevPropsContext: relayContext,
              contextForChildren: relayContext,
              relayProp: getRelayProp(relayContext.environment, _this._refetch),
              resolver
            };
            _this._isUnmounted = false;
            return _this;
          }
          var _proto = _class2.prototype;
          _proto.componentDidMount = function componentDidMount() {
            this._isUnmounted = false;
            this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
          };
          _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
            if (this.state.resolver !== prevState.resolver) {
              prevState.resolver.dispose();
              this._queryFetcher && this._queryFetcher.dispose();
              this._refetchSubscription && this._refetchSubscription.unsubscribe();
              this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
            } else {
              this._rerenderIfStoreHasChanged();
            }
          };
          _class2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
            var _nextProps$__rootIsQu;
            var prevProps = prevState.prevProps;
            var relayContext = assertRelayContext(nextProps.__relayContext);
            var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== void 0 ? _nextProps$__rootIsQu : false;
            var prevIDs = getDataIDsFromObject(fragments, prevProps);
            var nextIDs = getDataIDsFromObject(fragments, nextProps);
            var prevRootVariables = getRootVariablesForFragments(fragments, prevProps);
            var nextRootVariables = getRootVariablesForFragments(fragments, nextProps);
            var resolver = prevState.resolver;
            if (prevState.prevPropsContext.environment !== relayContext.environment || !areEqual(prevRootVariables, nextRootVariables) || !areEqual(prevIDs, nextIDs)) {
              resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);
              return {
                data: resolver.resolve(),
                localVariables: null,
                prevProps: nextProps,
                prevPropsContext: relayContext,
                contextForChildren: relayContext,
                relayProp: getRelayProp(relayContext.environment, prevState.relayProp.refetch),
                resolver
              };
            } else if (!prevState.localVariables) {
              resolver.setProps(nextProps);
            }
            var data = resolver.resolve();
            if (data !== prevState.data) {
              return {
                data,
                prevProps: nextProps
              };
            }
            return null;
          };
          _proto.componentWillUnmount = function componentWillUnmount() {
            this._isUnmounted = true;
            this.state.resolver.dispose();
            this._queryFetcher && this._queryFetcher.dispose();
            this._refetchSubscription && this._refetchSubscription.unsubscribe();
          };
          _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
            if (nextState.data !== this.state.data || nextState.relayProp !== this.state.relayProp) {
              return true;
            }
            var keys2 = Object.keys(nextProps);
            for (var ii = 0; ii < keys2.length; ii++) {
              var key = keys2[ii];
              if (key === "__relayContext") {
                if (this.state.prevPropsContext.environment !== nextState.prevPropsContext.environment) {
                  return true;
                }
              } else {
                if (!fragments.hasOwnProperty(key) && !isScalarAndEqual(nextProps[key], this.props[key])) {
                  return true;
                }
              }
            }
            return false;
          };
          _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {
            var _this$state = this.state, data = _this$state.data, resolver = _this$state.resolver;
            var maybeNewData = resolver.resolve();
            if (data !== maybeNewData) {
              this.setState({
                data: maybeNewData
              });
            }
          };
          _proto._subscribeToNewResolverAndRerenderIfStoreHasChanged = function _subscribeToNewResolverAndRerenderIfStoreHasChanged() {
            var _this$state2 = this.state, data = _this$state2.data, resolver = _this$state2.resolver;
            var maybeNewData = resolver.resolve();
            resolver.setCallback(this.props, this._handleFragmentDataUpdate);
            if (data !== maybeNewData) {
              this.setState({
                data: maybeNewData
              });
            }
          };
          _proto._getFragmentVariables = function _getFragmentVariables() {
            return getVariablesFromObject(fragments, this.props);
          };
          _proto._getQueryFetcher = function _getQueryFetcher() {
            if (!this._queryFetcher) {
              this._queryFetcher = new ReactRelayQueryFetcher();
            }
            return this._queryFetcher;
          };
          _proto.render = function render() {
            var _this$props = this.props, componentRef = _this$props.componentRef, __relayContext = _this$props.__relayContext, __rootIsQueryRenderer = _this$props.__rootIsQueryRenderer, props = (0, _objectWithoutPropertiesLoose210["default"])(_this$props, _excluded36);
            var _this$state3 = this.state, relayProp = _this$state3.relayProp, contextForChildren = _this$state3.contextForChildren;
            return /* @__PURE__ */ React112.createElement(ReactRelayContext.Provider, {
              value: contextForChildren
            }, /* @__PURE__ */ React112.createElement(Component15, (0, _extends210["default"])({}, props, this.state.data, {
              ref: componentRef,
              relay: relayProp
            })));
          };
          return _class2;
        }(React112.Component), (0, _defineProperty210["default"])(_class, "displayName", containerName), _class;
      }
      function getRelayProp(environment, refetch) {
        return {
          environment,
          refetch
        };
      }
      function createContainer(Component15, fragmentSpec, taggedNode) {
        return buildReactRelayContainer(Component15, fragmentSpec, function(ComponentClass, fragments) {
          return createContainerWithFragments(ComponentClass, fragments, taggedNode);
        });
      }
      module2.exports = {
        createContainer
      };
    }
  });

  // node_modules/react-relay/lib/relay-hooks/useClientQuery.js
  var require_useClientQuery = __commonJS({
    "node_modules/react-relay/lib/relay-hooks/useClientQuery.js"(exports2, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault()["default"];
      var _objectSpread28 = _interopRequireDefault(require_objectSpread2());
      var useLazyLoadQuery3 = require_useLazyLoadQuery();
      function useClientQuery(gqlQuery, variables, options) {
        var query = gqlQuery;
        return useLazyLoadQuery3(query, variables, (0, _objectSpread28["default"])((0, _objectSpread28["default"])({}, options), {}, {
          fetchPolicy: "store-only"
        }));
      }
      module2.exports = useClientQuery;
    }
  });

  // node_modules/react-relay/lib/index.js
  var require_lib2 = __commonJS({
    "node_modules/react-relay/lib/index.js"(exports2, module2) {
      "use strict";
      var ReactRelayContext = require_ReactRelayContext();
      var ReactRelayFragmentContainer = require_ReactRelayFragmentContainer();
      var ReactRelayLocalQueryRenderer = require_ReactRelayLocalQueryRenderer();
      var ReactRelayPaginationContainer = require_ReactRelayPaginationContainer();
      var ReactRelayQueryRenderer = require_ReactRelayQueryRenderer();
      var ReactRelayRefetchContainer = require_ReactRelayRefetchContainer();
      var EntryPointContainer = require_EntryPointContainer_react();
      var loadEntryPoint = require_loadEntryPoint();
      var _require = require_loadQuery();
      var loadQuery = _require.loadQuery;
      var RelayEnvironmentProvider2 = require_RelayEnvironmentProvider();
      var useClientQuery = require_useClientQuery();
      var useEntryPointLoader = require_useEntryPointLoader();
      var useFragment = require_useFragment();
      var useLazyLoadQuery3 = require_useLazyLoadQuery();
      var useMutation2 = require_useMutation();
      var usePaginationFragment = require_usePaginationFragment();
      var usePreloadedQuery = require_usePreloadedQuery();
      var useQueryLoader = require_useQueryLoader();
      var useRefetchableFragment = require_useRefetchableFragment();
      var useRelayEnvironment = require_useRelayEnvironment();
      var useSubscribeToInvalidationState = require_useSubscribeToInvalidationState();
      var useSubscription = require_useSubscription();
      var RelayRuntime = require_relay_runtime();
      module2.exports = {
        ConnectionHandler: RelayRuntime.ConnectionHandler,
        QueryRenderer: ReactRelayQueryRenderer,
        LocalQueryRenderer: ReactRelayLocalQueryRenderer,
        MutationTypes: RelayRuntime.MutationTypes,
        RangeOperations: RelayRuntime.RangeOperations,
        ReactRelayContext,
        applyOptimisticMutation: RelayRuntime.applyOptimisticMutation,
        commitLocalUpdate: RelayRuntime.commitLocalUpdate,
        commitMutation: RelayRuntime.commitMutation,
        createFragmentContainer: ReactRelayFragmentContainer.createContainer,
        createPaginationContainer: ReactRelayPaginationContainer.createContainer,
        createRefetchContainer: ReactRelayRefetchContainer.createContainer,
        fetchQuery_DEPRECATED: RelayRuntime.fetchQuery_DEPRECATED,
        graphql: RelayRuntime.graphql,
        readInlineData: RelayRuntime.readInlineData,
        requestSubscription: RelayRuntime.requestSubscription,
        EntryPointContainer,
        RelayEnvironmentProvider: RelayEnvironmentProvider2,
        fetchQuery: RelayRuntime.fetchQuery,
        loadQuery,
        loadEntryPoint,
        useClientQuery,
        useFragment,
        useLazyLoadQuery: useLazyLoadQuery3,
        useEntryPointLoader,
        useQueryLoader,
        useMutation: useMutation2,
        usePaginationFragment,
        usePreloadedQuery,
        useRefetchableFragment,
        useRelayEnvironment,
        useSubscribeToInvalidationState,
        useSubscription
      };
    }
  });

  // node_modules/react-relay/index.js
  var require_react_relay = __commonJS({
    "node_modules/react-relay/index.js"(exports2, module2) {
      module2.exports = require_lib2();
    }
  });

  // node_modules/jsonpointer/jsonpointer.js
  var require_jsonpointer = __commonJS({
    "node_modules/jsonpointer/jsonpointer.js"(exports2) {
      var hasExcape = /~/;
      var escapeMatcher = /~[01]/g;
      function escapeReplacer(m2) {
        switch (m2) {
          case "~1":
            return "/";
          case "~0":
            return "~";
        }
        throw new Error("Invalid tilde escape: " + m2);
      }
      function untilde(str) {
        if (!hasExcape.test(str))
          return str;
        return str.replace(escapeMatcher, escapeReplacer);
      }
      function setter(obj, pointer, value) {
        var part;
        var hasNextPart;
        for (var p = 1, len = pointer.length; p < len; ) {
          if (pointer[p] === "constructor" || pointer[p] === "prototype" || pointer[p] === "__proto__")
            return obj;
          part = untilde(pointer[p++]);
          hasNextPart = len > p;
          if (typeof obj[part] === "undefined") {
            if (Array.isArray(obj) && part === "-") {
              part = obj.length;
            }
            if (hasNextPart) {
              if (pointer[p] !== "" && pointer[p] < Infinity || pointer[p] === "-")
                obj[part] = [];
              else
                obj[part] = {};
            }
          }
          if (!hasNextPart)
            break;
          obj = obj[part];
        }
        var oldValue = obj[part];
        if (value === void 0)
          delete obj[part];
        else
          obj[part] = value;
        return oldValue;
      }
      function compilePointer(pointer) {
        if (typeof pointer === "string") {
          pointer = pointer.split("/");
          if (pointer[0] === "")
            return pointer;
          throw new Error("Invalid JSON pointer.");
        } else if (Array.isArray(pointer)) {
          for (const part of pointer) {
            if (typeof part !== "string" && typeof part !== "number") {
              throw new Error("Invalid JSON pointer. Must be of type string or number.");
            }
          }
          return pointer;
        }
        throw new Error("Invalid JSON pointer.");
      }
      function get2(obj, pointer) {
        if (typeof obj !== "object")
          throw new Error("Invalid input object.");
        pointer = compilePointer(pointer);
        var len = pointer.length;
        if (len === 1)
          return obj;
        for (var p = 1; p < len; ) {
          obj = obj[untilde(pointer[p++])];
          if (len === p)
            return obj;
          if (typeof obj !== "object" || obj === null)
            return void 0;
        }
      }
      function set2(obj, pointer, value) {
        if (typeof obj !== "object")
          throw new Error("Invalid input object.");
        pointer = compilePointer(pointer);
        if (pointer.length === 0)
          throw new Error("Invalid JSON pointer for set.");
        return setter(obj, pointer, value);
      }
      function compile(pointer) {
        var compiled = compilePointer(pointer);
        return {
          get: function(object2) {
            return get2(object2, compiled);
          },
          set: function(object2, value) {
            return set2(object2, compiled, value);
          }
        };
      }
      exports2.get = get2;
      exports2.set = set2;
      exports2.compile = compile;
    }
  });

  // node_modules/lodash/_listCacheClear.js
  var require_listCacheClear = __commonJS({
    "node_modules/lodash/_listCacheClear.js"(exports2, module2) {
      function listCacheClear2() {
        this.__data__ = [];
        this.size = 0;
      }
      module2.exports = listCacheClear2;
    }
  });

  // node_modules/lodash/eq.js
  var require_eq = __commonJS({
    "node_modules/lodash/eq.js"(exports2, module2) {
      function eq2(value, other) {
        return value === other || value !== value && other !== other;
      }
      module2.exports = eq2;
    }
  });

  // node_modules/lodash/_assocIndexOf.js
  var require_assocIndexOf = __commonJS({
    "node_modules/lodash/_assocIndexOf.js"(exports2, module2) {
      var eq2 = require_eq();
      function assocIndexOf2(array, key) {
        var length = array.length;
        while (length--) {
          if (eq2(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      module2.exports = assocIndexOf2;
    }
  });

  // node_modules/lodash/_listCacheDelete.js
  var require_listCacheDelete = __commonJS({
    "node_modules/lodash/_listCacheDelete.js"(exports2, module2) {
      var assocIndexOf2 = require_assocIndexOf();
      var arrayProto2 = Array.prototype;
      var splice2 = arrayProto2.splice;
      function listCacheDelete2(key) {
        var data = this.__data__, index2 = assocIndexOf2(data, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index2 == lastIndex) {
          data.pop();
        } else {
          splice2.call(data, index2, 1);
        }
        --this.size;
        return true;
      }
      module2.exports = listCacheDelete2;
    }
  });

  // node_modules/lodash/_listCacheGet.js
  var require_listCacheGet = __commonJS({
    "node_modules/lodash/_listCacheGet.js"(exports2, module2) {
      var assocIndexOf2 = require_assocIndexOf();
      function listCacheGet2(key) {
        var data = this.__data__, index2 = assocIndexOf2(data, key);
        return index2 < 0 ? void 0 : data[index2][1];
      }
      module2.exports = listCacheGet2;
    }
  });

  // node_modules/lodash/_listCacheHas.js
  var require_listCacheHas = __commonJS({
    "node_modules/lodash/_listCacheHas.js"(exports2, module2) {
      var assocIndexOf2 = require_assocIndexOf();
      function listCacheHas2(key) {
        return assocIndexOf2(this.__data__, key) > -1;
      }
      module2.exports = listCacheHas2;
    }
  });

  // node_modules/lodash/_listCacheSet.js
  var require_listCacheSet = __commonJS({
    "node_modules/lodash/_listCacheSet.js"(exports2, module2) {
      var assocIndexOf2 = require_assocIndexOf();
      function listCacheSet2(key, value) {
        var data = this.__data__, index2 = assocIndexOf2(data, key);
        if (index2 < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index2][1] = value;
        }
        return this;
      }
      module2.exports = listCacheSet2;
    }
  });

  // node_modules/lodash/_ListCache.js
  var require_ListCache = __commonJS({
    "node_modules/lodash/_ListCache.js"(exports2, module2) {
      var listCacheClear2 = require_listCacheClear();
      var listCacheDelete2 = require_listCacheDelete();
      var listCacheGet2 = require_listCacheGet();
      var listCacheHas2 = require_listCacheHas();
      var listCacheSet2 = require_listCacheSet();
      function ListCache2(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache2.prototype.clear = listCacheClear2;
      ListCache2.prototype["delete"] = listCacheDelete2;
      ListCache2.prototype.get = listCacheGet2;
      ListCache2.prototype.has = listCacheHas2;
      ListCache2.prototype.set = listCacheSet2;
      module2.exports = ListCache2;
    }
  });

  // node_modules/lodash/_stackClear.js
  var require_stackClear = __commonJS({
    "node_modules/lodash/_stackClear.js"(exports2, module2) {
      var ListCache2 = require_ListCache();
      function stackClear2() {
        this.__data__ = new ListCache2();
        this.size = 0;
      }
      module2.exports = stackClear2;
    }
  });

  // node_modules/lodash/_stackDelete.js
  var require_stackDelete = __commonJS({
    "node_modules/lodash/_stackDelete.js"(exports2, module2) {
      function stackDelete2(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      module2.exports = stackDelete2;
    }
  });

  // node_modules/lodash/_stackGet.js
  var require_stackGet = __commonJS({
    "node_modules/lodash/_stackGet.js"(exports2, module2) {
      function stackGet2(key) {
        return this.__data__.get(key);
      }
      module2.exports = stackGet2;
    }
  });

  // node_modules/lodash/_stackHas.js
  var require_stackHas = __commonJS({
    "node_modules/lodash/_stackHas.js"(exports2, module2) {
      function stackHas2(key) {
        return this.__data__.has(key);
      }
      module2.exports = stackHas2;
    }
  });

  // node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS({
    "node_modules/lodash/_freeGlobal.js"(exports2, module2) {
      var freeGlobal2 = typeof window == "object" && window && window.Object === Object && window;
      module2.exports = freeGlobal2;
    }
  });

  // node_modules/lodash/_root.js
  var require_root = __commonJS({
    "node_modules/lodash/_root.js"(exports2, module2) {
      var freeGlobal2 = require_freeGlobal();
      var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
      var root3 = freeGlobal2 || freeSelf2 || Function("return this")();
      module2.exports = root3;
    }
  });

  // node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS({
    "node_modules/lodash/_Symbol.js"(exports2, module2) {
      var root3 = require_root();
      var Symbol3 = root3.Symbol;
      module2.exports = Symbol3;
    }
  });

  // node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS({
    "node_modules/lodash/_getRawTag.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      var nativeObjectToString3 = objectProto19.toString;
      var symToStringTag3 = Symbol3 ? Symbol3.toStringTag : void 0;
      function getRawTag2(value) {
        var isOwn = hasOwnProperty16.call(value, symToStringTag3), tag = value[symToStringTag3];
        try {
          value[symToStringTag3] = void 0;
          var unmasked = true;
        } catch (e) {
        }
        var result = nativeObjectToString3.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag3] = tag;
          } else {
            delete value[symToStringTag3];
          }
        }
        return result;
      }
      module2.exports = getRawTag2;
    }
  });

  // node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS({
    "node_modules/lodash/_objectToString.js"(exports2, module2) {
      var objectProto19 = Object.prototype;
      var nativeObjectToString3 = objectProto19.toString;
      function objectToString2(value) {
        return nativeObjectToString3.call(value);
      }
      module2.exports = objectToString2;
    }
  });

  // node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS({
    "node_modules/lodash/_baseGetTag.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var getRawTag2 = require_getRawTag();
      var objectToString2 = require_objectToString();
      var nullTag2 = "[object Null]";
      var undefinedTag2 = "[object Undefined]";
      var symToStringTag3 = Symbol3 ? Symbol3.toStringTag : void 0;
      function baseGetTag2(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag2 : nullTag2;
        }
        return symToStringTag3 && symToStringTag3 in Object(value) ? getRawTag2(value) : objectToString2(value);
      }
      module2.exports = baseGetTag2;
    }
  });

  // node_modules/lodash/isObject.js
  var require_isObject = __commonJS({
    "node_modules/lodash/isObject.js"(exports2, module2) {
      function isObject5(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      module2.exports = isObject5;
    }
  });

  // node_modules/lodash/isFunction.js
  var require_isFunction = __commonJS({
    "node_modules/lodash/isFunction.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObject5 = require_isObject();
      var asyncTag2 = "[object AsyncFunction]";
      var funcTag4 = "[object Function]";
      var genTag3 = "[object GeneratorFunction]";
      var proxyTag2 = "[object Proxy]";
      function isFunction3(value) {
        if (!isObject5(value)) {
          return false;
        }
        var tag = baseGetTag2(value);
        return tag == funcTag4 || tag == genTag3 || tag == asyncTag2 || tag == proxyTag2;
      }
      module2.exports = isFunction3;
    }
  });

  // node_modules/lodash/_coreJsData.js
  var require_coreJsData = __commonJS({
    "node_modules/lodash/_coreJsData.js"(exports2, module2) {
      var root3 = require_root();
      var coreJsData2 = root3["__core-js_shared__"];
      module2.exports = coreJsData2;
    }
  });

  // node_modules/lodash/_isMasked.js
  var require_isMasked = __commonJS({
    "node_modules/lodash/_isMasked.js"(exports2, module2) {
      var coreJsData2 = require_coreJsData();
      var maskSrcKey2 = function() {
        var uid2 = /[^.]+$/.exec(coreJsData2 && coreJsData2.keys && coreJsData2.keys.IE_PROTO || "");
        return uid2 ? "Symbol(src)_1." + uid2 : "";
      }();
      function isMasked2(func2) {
        return !!maskSrcKey2 && maskSrcKey2 in func2;
      }
      module2.exports = isMasked2;
    }
  });

  // node_modules/lodash/_toSource.js
  var require_toSource = __commonJS({
    "node_modules/lodash/_toSource.js"(exports2, module2) {
      var funcProto4 = Function.prototype;
      var funcToString4 = funcProto4.toString;
      function toSource2(func2) {
        if (func2 != null) {
          try {
            return funcToString4.call(func2);
          } catch (e) {
          }
          try {
            return func2 + "";
          } catch (e) {
          }
        }
        return "";
      }
      module2.exports = toSource2;
    }
  });

  // node_modules/lodash/_baseIsNative.js
  var require_baseIsNative = __commonJS({
    "node_modules/lodash/_baseIsNative.js"(exports2, module2) {
      var isFunction3 = require_isFunction();
      var isMasked2 = require_isMasked();
      var isObject5 = require_isObject();
      var toSource2 = require_toSource();
      var reRegExpChar2 = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor2 = /^\[object .+?Constructor\]$/;
      var funcProto4 = Function.prototype;
      var objectProto19 = Object.prototype;
      var funcToString4 = funcProto4.toString;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      var reIsNative2 = RegExp(
        "^" + funcToString4.call(hasOwnProperty16).replace(reRegExpChar2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      function baseIsNative2(value) {
        if (!isObject5(value) || isMasked2(value)) {
          return false;
        }
        var pattern = isFunction3(value) ? reIsNative2 : reIsHostCtor2;
        return pattern.test(toSource2(value));
      }
      module2.exports = baseIsNative2;
    }
  });

  // node_modules/lodash/_getValue.js
  var require_getValue = __commonJS({
    "node_modules/lodash/_getValue.js"(exports2, module2) {
      function getValue3(object2, key) {
        return object2 == null ? void 0 : object2[key];
      }
      module2.exports = getValue3;
    }
  });

  // node_modules/lodash/_getNative.js
  var require_getNative = __commonJS({
    "node_modules/lodash/_getNative.js"(exports2, module2) {
      var baseIsNative2 = require_baseIsNative();
      var getValue3 = require_getValue();
      function getNative2(object2, key) {
        var value = getValue3(object2, key);
        return baseIsNative2(value) ? value : void 0;
      }
      module2.exports = getNative2;
    }
  });

  // node_modules/lodash/_Map.js
  var require_Map = __commonJS({
    "node_modules/lodash/_Map.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root3 = require_root();
      var Map3 = getNative2(root3, "Map");
      module2.exports = Map3;
    }
  });

  // node_modules/lodash/_nativeCreate.js
  var require_nativeCreate = __commonJS({
    "node_modules/lodash/_nativeCreate.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var nativeCreate2 = getNative2(Object, "create");
      module2.exports = nativeCreate2;
    }
  });

  // node_modules/lodash/_hashClear.js
  var require_hashClear = __commonJS({
    "node_modules/lodash/_hashClear.js"(exports2, module2) {
      var nativeCreate2 = require_nativeCreate();
      function hashClear2() {
        this.__data__ = nativeCreate2 ? nativeCreate2(null) : {};
        this.size = 0;
      }
      module2.exports = hashClear2;
    }
  });

  // node_modules/lodash/_hashDelete.js
  var require_hashDelete = __commonJS({
    "node_modules/lodash/_hashDelete.js"(exports2, module2) {
      function hashDelete2(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      module2.exports = hashDelete2;
    }
  });

  // node_modules/lodash/_hashGet.js
  var require_hashGet = __commonJS({
    "node_modules/lodash/_hashGet.js"(exports2, module2) {
      var nativeCreate2 = require_nativeCreate();
      var HASH_UNDEFINED4 = "__lodash_hash_undefined__";
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function hashGet2(key) {
        var data = this.__data__;
        if (nativeCreate2) {
          var result = data[key];
          return result === HASH_UNDEFINED4 ? void 0 : result;
        }
        return hasOwnProperty16.call(data, key) ? data[key] : void 0;
      }
      module2.exports = hashGet2;
    }
  });

  // node_modules/lodash/_hashHas.js
  var require_hashHas = __commonJS({
    "node_modules/lodash/_hashHas.js"(exports2, module2) {
      var nativeCreate2 = require_nativeCreate();
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function hashHas2(key) {
        var data = this.__data__;
        return nativeCreate2 ? data[key] !== void 0 : hasOwnProperty16.call(data, key);
      }
      module2.exports = hashHas2;
    }
  });

  // node_modules/lodash/_hashSet.js
  var require_hashSet = __commonJS({
    "node_modules/lodash/_hashSet.js"(exports2, module2) {
      var nativeCreate2 = require_nativeCreate();
      var HASH_UNDEFINED4 = "__lodash_hash_undefined__";
      function hashSet2(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate2 && value === void 0 ? HASH_UNDEFINED4 : value;
        return this;
      }
      module2.exports = hashSet2;
    }
  });

  // node_modules/lodash/_Hash.js
  var require_Hash = __commonJS({
    "node_modules/lodash/_Hash.js"(exports2, module2) {
      var hashClear2 = require_hashClear();
      var hashDelete2 = require_hashDelete();
      var hashGet2 = require_hashGet();
      var hashHas2 = require_hashHas();
      var hashSet2 = require_hashSet();
      function Hash2(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      Hash2.prototype.clear = hashClear2;
      Hash2.prototype["delete"] = hashDelete2;
      Hash2.prototype.get = hashGet2;
      Hash2.prototype.has = hashHas2;
      Hash2.prototype.set = hashSet2;
      module2.exports = Hash2;
    }
  });

  // node_modules/lodash/_mapCacheClear.js
  var require_mapCacheClear = __commonJS({
    "node_modules/lodash/_mapCacheClear.js"(exports2, module2) {
      var Hash2 = require_Hash();
      var ListCache2 = require_ListCache();
      var Map3 = require_Map();
      function mapCacheClear2() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash2(),
          "map": new (Map3 || ListCache2)(),
          "string": new Hash2()
        };
      }
      module2.exports = mapCacheClear2;
    }
  });

  // node_modules/lodash/_isKeyable.js
  var require_isKeyable = __commonJS({
    "node_modules/lodash/_isKeyable.js"(exports2, module2) {
      function isKeyable2(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      module2.exports = isKeyable2;
    }
  });

  // node_modules/lodash/_getMapData.js
  var require_getMapData = __commonJS({
    "node_modules/lodash/_getMapData.js"(exports2, module2) {
      var isKeyable2 = require_isKeyable();
      function getMapData2(map, key) {
        var data = map.__data__;
        return isKeyable2(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      module2.exports = getMapData2;
    }
  });

  // node_modules/lodash/_mapCacheDelete.js
  var require_mapCacheDelete = __commonJS({
    "node_modules/lodash/_mapCacheDelete.js"(exports2, module2) {
      var getMapData2 = require_getMapData();
      function mapCacheDelete2(key) {
        var result = getMapData2(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      module2.exports = mapCacheDelete2;
    }
  });

  // node_modules/lodash/_mapCacheGet.js
  var require_mapCacheGet = __commonJS({
    "node_modules/lodash/_mapCacheGet.js"(exports2, module2) {
      var getMapData2 = require_getMapData();
      function mapCacheGet2(key) {
        return getMapData2(this, key).get(key);
      }
      module2.exports = mapCacheGet2;
    }
  });

  // node_modules/lodash/_mapCacheHas.js
  var require_mapCacheHas = __commonJS({
    "node_modules/lodash/_mapCacheHas.js"(exports2, module2) {
      var getMapData2 = require_getMapData();
      function mapCacheHas2(key) {
        return getMapData2(this, key).has(key);
      }
      module2.exports = mapCacheHas2;
    }
  });

  // node_modules/lodash/_mapCacheSet.js
  var require_mapCacheSet = __commonJS({
    "node_modules/lodash/_mapCacheSet.js"(exports2, module2) {
      var getMapData2 = require_getMapData();
      function mapCacheSet2(key, value) {
        var data = getMapData2(this, key), size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      module2.exports = mapCacheSet2;
    }
  });

  // node_modules/lodash/_MapCache.js
  var require_MapCache = __commonJS({
    "node_modules/lodash/_MapCache.js"(exports2, module2) {
      var mapCacheClear2 = require_mapCacheClear();
      var mapCacheDelete2 = require_mapCacheDelete();
      var mapCacheGet2 = require_mapCacheGet();
      var mapCacheHas2 = require_mapCacheHas();
      var mapCacheSet2 = require_mapCacheSet();
      function MapCache3(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache3.prototype.clear = mapCacheClear2;
      MapCache3.prototype["delete"] = mapCacheDelete2;
      MapCache3.prototype.get = mapCacheGet2;
      MapCache3.prototype.has = mapCacheHas2;
      MapCache3.prototype.set = mapCacheSet2;
      module2.exports = MapCache3;
    }
  });

  // node_modules/lodash/_stackSet.js
  var require_stackSet = __commonJS({
    "node_modules/lodash/_stackSet.js"(exports2, module2) {
      var ListCache2 = require_ListCache();
      var Map3 = require_Map();
      var MapCache3 = require_MapCache();
      var LARGE_ARRAY_SIZE3 = 200;
      function stackSet2(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache2) {
          var pairs = data.__data__;
          if (!Map3 || pairs.length < LARGE_ARRAY_SIZE3 - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache3(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      module2.exports = stackSet2;
    }
  });

  // node_modules/lodash/_Stack.js
  var require_Stack = __commonJS({
    "node_modules/lodash/_Stack.js"(exports2, module2) {
      var ListCache2 = require_ListCache();
      var stackClear2 = require_stackClear();
      var stackDelete2 = require_stackDelete();
      var stackGet2 = require_stackGet();
      var stackHas2 = require_stackHas();
      var stackSet2 = require_stackSet();
      function Stack2(entries) {
        var data = this.__data__ = new ListCache2(entries);
        this.size = data.size;
      }
      Stack2.prototype.clear = stackClear2;
      Stack2.prototype["delete"] = stackDelete2;
      Stack2.prototype.get = stackGet2;
      Stack2.prototype.has = stackHas2;
      Stack2.prototype.set = stackSet2;
      module2.exports = Stack2;
    }
  });

  // node_modules/lodash/_arrayEach.js
  var require_arrayEach = __commonJS({
    "node_modules/lodash/_arrayEach.js"(exports2, module2) {
      function arrayEach2(array, iteratee) {
        var index2 = -1, length = array == null ? 0 : array.length;
        while (++index2 < length) {
          if (iteratee(array[index2], index2, array) === false) {
            break;
          }
        }
        return array;
      }
      module2.exports = arrayEach2;
    }
  });

  // node_modules/lodash/_defineProperty.js
  var require_defineProperty2 = __commonJS({
    "node_modules/lodash/_defineProperty.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var defineProperty3 = function() {
        try {
          var func2 = getNative2(Object, "defineProperty");
          func2({}, "", {});
          return func2;
        } catch (e) {
        }
      }();
      module2.exports = defineProperty3;
    }
  });

  // node_modules/lodash/_baseAssignValue.js
  var require_baseAssignValue = __commonJS({
    "node_modules/lodash/_baseAssignValue.js"(exports2, module2) {
      var defineProperty3 = require_defineProperty2();
      function baseAssignValue2(object2, key, value) {
        if (key == "__proto__" && defineProperty3) {
          defineProperty3(object2, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object2[key] = value;
        }
      }
      module2.exports = baseAssignValue2;
    }
  });

  // node_modules/lodash/_assignValue.js
  var require_assignValue = __commonJS({
    "node_modules/lodash/_assignValue.js"(exports2, module2) {
      var baseAssignValue2 = require_baseAssignValue();
      var eq2 = require_eq();
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function assignValue2(object2, key, value) {
        var objValue = object2[key];
        if (!(hasOwnProperty16.call(object2, key) && eq2(objValue, value)) || value === void 0 && !(key in object2)) {
          baseAssignValue2(object2, key, value);
        }
      }
      module2.exports = assignValue2;
    }
  });

  // node_modules/lodash/_copyObject.js
  var require_copyObject = __commonJS({
    "node_modules/lodash/_copyObject.js"(exports2, module2) {
      var assignValue2 = require_assignValue();
      var baseAssignValue2 = require_baseAssignValue();
      function copyObject2(source2, props, object2, customizer) {
        var isNew = !object2;
        object2 || (object2 = {});
        var index2 = -1, length = props.length;
        while (++index2 < length) {
          var key = props[index2];
          var newValue = customizer ? customizer(object2[key], source2[key], key, object2, source2) : void 0;
          if (newValue === void 0) {
            newValue = source2[key];
          }
          if (isNew) {
            baseAssignValue2(object2, key, newValue);
          } else {
            assignValue2(object2, key, newValue);
          }
        }
        return object2;
      }
      module2.exports = copyObject2;
    }
  });

  // node_modules/lodash/_baseTimes.js
  var require_baseTimes = __commonJS({
    "node_modules/lodash/_baseTimes.js"(exports2, module2) {
      function baseTimes2(n, iteratee) {
        var index2 = -1, result = Array(n);
        while (++index2 < n) {
          result[index2] = iteratee(index2);
        }
        return result;
      }
      module2.exports = baseTimes2;
    }
  });

  // node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "node_modules/lodash/isObjectLike.js"(exports2, module2) {
      function isObjectLike2(value) {
        return value != null && typeof value == "object";
      }
      module2.exports = isObjectLike2;
    }
  });

  // node_modules/lodash/_baseIsArguments.js
  var require_baseIsArguments = __commonJS({
    "node_modules/lodash/_baseIsArguments.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObjectLike2 = require_isObjectLike();
      var argsTag5 = "[object Arguments]";
      function baseIsArguments2(value) {
        return isObjectLike2(value) && baseGetTag2(value) == argsTag5;
      }
      module2.exports = baseIsArguments2;
    }
  });

  // node_modules/lodash/isArguments.js
  var require_isArguments = __commonJS({
    "node_modules/lodash/isArguments.js"(exports2, module2) {
      var baseIsArguments2 = require_baseIsArguments();
      var isObjectLike2 = require_isObjectLike();
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      var propertyIsEnumerable3 = objectProto19.propertyIsEnumerable;
      var isArguments2 = baseIsArguments2(function() {
        return arguments;
      }()) ? baseIsArguments2 : function(value) {
        return isObjectLike2(value) && hasOwnProperty16.call(value, "callee") && !propertyIsEnumerable3.call(value, "callee");
      };
      module2.exports = isArguments2;
    }
  });

  // node_modules/lodash/isArray.js
  var require_isArray = __commonJS({
    "node_modules/lodash/isArray.js"(exports2, module2) {
      var isArray2 = Array.isArray;
      module2.exports = isArray2;
    }
  });

  // node_modules/lodash/stubFalse.js
  var require_stubFalse = __commonJS({
    "node_modules/lodash/stubFalse.js"(exports2, module2) {
      function stubFalse2() {
        return false;
      }
      module2.exports = stubFalse2;
    }
  });

  // node_modules/lodash/isBuffer.js
  var require_isBuffer = __commonJS({
    "node_modules/lodash/isBuffer.js"(exports2, module2) {
      var root3 = require_root();
      var stubFalse2 = require_stubFalse();
      var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
      var Buffer4 = moduleExports4 ? root3.Buffer : void 0;
      var nativeIsBuffer2 = Buffer4 ? Buffer4.isBuffer : void 0;
      var isBuffer2 = nativeIsBuffer2 || stubFalse2;
      module2.exports = isBuffer2;
    }
  });

  // node_modules/lodash/_isIndex.js
  var require_isIndex = __commonJS({
    "node_modules/lodash/_isIndex.js"(exports2, module2) {
      var MAX_SAFE_INTEGER3 = 9007199254740991;
      var reIsUint2 = /^(?:0|[1-9]\d*)$/;
      function isIndex2(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER3 : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint2.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      module2.exports = isIndex2;
    }
  });

  // node_modules/lodash/isLength.js
  var require_isLength = __commonJS({
    "node_modules/lodash/isLength.js"(exports2, module2) {
      var MAX_SAFE_INTEGER3 = 9007199254740991;
      function isLength2(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER3;
      }
      module2.exports = isLength2;
    }
  });

  // node_modules/lodash/_baseIsTypedArray.js
  var require_baseIsTypedArray = __commonJS({
    "node_modules/lodash/_baseIsTypedArray.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isLength2 = require_isLength();
      var isObjectLike2 = require_isObjectLike();
      var argsTag5 = "[object Arguments]";
      var arrayTag4 = "[object Array]";
      var boolTag5 = "[object Boolean]";
      var dateTag5 = "[object Date]";
      var errorTag4 = "[object Error]";
      var funcTag4 = "[object Function]";
      var mapTag8 = "[object Map]";
      var numberTag5 = "[object Number]";
      var objectTag6 = "[object Object]";
      var regexpTag5 = "[object RegExp]";
      var setTag8 = "[object Set]";
      var stringTag5 = "[object String]";
      var weakMapTag4 = "[object WeakMap]";
      var arrayBufferTag5 = "[object ArrayBuffer]";
      var dataViewTag6 = "[object DataView]";
      var float32Tag4 = "[object Float32Array]";
      var float64Tag4 = "[object Float64Array]";
      var int8Tag4 = "[object Int8Array]";
      var int16Tag4 = "[object Int16Array]";
      var int32Tag4 = "[object Int32Array]";
      var uint8Tag4 = "[object Uint8Array]";
      var uint8ClampedTag4 = "[object Uint8ClampedArray]";
      var uint16Tag4 = "[object Uint16Array]";
      var uint32Tag4 = "[object Uint32Array]";
      var typedArrayTags2 = {};
      typedArrayTags2[float32Tag4] = typedArrayTags2[float64Tag4] = typedArrayTags2[int8Tag4] = typedArrayTags2[int16Tag4] = typedArrayTags2[int32Tag4] = typedArrayTags2[uint8Tag4] = typedArrayTags2[uint8ClampedTag4] = typedArrayTags2[uint16Tag4] = typedArrayTags2[uint32Tag4] = true;
      typedArrayTags2[argsTag5] = typedArrayTags2[arrayTag4] = typedArrayTags2[arrayBufferTag5] = typedArrayTags2[boolTag5] = typedArrayTags2[dataViewTag6] = typedArrayTags2[dateTag5] = typedArrayTags2[errorTag4] = typedArrayTags2[funcTag4] = typedArrayTags2[mapTag8] = typedArrayTags2[numberTag5] = typedArrayTags2[objectTag6] = typedArrayTags2[regexpTag5] = typedArrayTags2[setTag8] = typedArrayTags2[stringTag5] = typedArrayTags2[weakMapTag4] = false;
      function baseIsTypedArray2(value) {
        return isObjectLike2(value) && isLength2(value.length) && !!typedArrayTags2[baseGetTag2(value)];
      }
      module2.exports = baseIsTypedArray2;
    }
  });

  // node_modules/lodash/_baseUnary.js
  var require_baseUnary = __commonJS({
    "node_modules/lodash/_baseUnary.js"(exports2, module2) {
      function baseUnary2(func2) {
        return function(value) {
          return func2(value);
        };
      }
      module2.exports = baseUnary2;
    }
  });

  // node_modules/lodash/_nodeUtil.js
  var require_nodeUtil = __commonJS({
    "node_modules/lodash/_nodeUtil.js"(exports2, module2) {
      var freeGlobal2 = require_freeGlobal();
      var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
      var freeProcess2 = moduleExports4 && freeGlobal2.process;
      var nodeUtil2 = function() {
        try {
          var types = freeModule4 && freeModule4.require && freeModule4.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess2 && freeProcess2.binding && freeProcess2.binding("util");
        } catch (e) {
        }
      }();
      module2.exports = nodeUtil2;
    }
  });

  // node_modules/lodash/isTypedArray.js
  var require_isTypedArray = __commonJS({
    "node_modules/lodash/isTypedArray.js"(exports2, module2) {
      var baseIsTypedArray2 = require_baseIsTypedArray();
      var baseUnary2 = require_baseUnary();
      var nodeUtil2 = require_nodeUtil();
      var nodeIsTypedArray2 = nodeUtil2 && nodeUtil2.isTypedArray;
      var isTypedArray2 = nodeIsTypedArray2 ? baseUnary2(nodeIsTypedArray2) : baseIsTypedArray2;
      module2.exports = isTypedArray2;
    }
  });

  // node_modules/lodash/_arrayLikeKeys.js
  var require_arrayLikeKeys = __commonJS({
    "node_modules/lodash/_arrayLikeKeys.js"(exports2, module2) {
      var baseTimes2 = require_baseTimes();
      var isArguments2 = require_isArguments();
      var isArray2 = require_isArray();
      var isBuffer2 = require_isBuffer();
      var isIndex2 = require_isIndex();
      var isTypedArray2 = require_isTypedArray();
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function arrayLikeKeys2(value, inherited) {
        var isArr = isArray2(value), isArg = !isArr && isArguments2(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray2(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes2(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty16.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex2(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      module2.exports = arrayLikeKeys2;
    }
  });

  // node_modules/lodash/_isPrototype.js
  var require_isPrototype = __commonJS({
    "node_modules/lodash/_isPrototype.js"(exports2, module2) {
      var objectProto19 = Object.prototype;
      function isPrototype2(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto19;
        return value === proto;
      }
      module2.exports = isPrototype2;
    }
  });

  // node_modules/lodash/_overArg.js
  var require_overArg = __commonJS({
    "node_modules/lodash/_overArg.js"(exports2, module2) {
      function overArg2(func2, transform) {
        return function(arg) {
          return func2(transform(arg));
        };
      }
      module2.exports = overArg2;
    }
  });

  // node_modules/lodash/_nativeKeys.js
  var require_nativeKeys = __commonJS({
    "node_modules/lodash/_nativeKeys.js"(exports2, module2) {
      var overArg2 = require_overArg();
      var nativeKeys2 = overArg2(Object.keys, Object);
      module2.exports = nativeKeys2;
    }
  });

  // node_modules/lodash/_baseKeys.js
  var require_baseKeys = __commonJS({
    "node_modules/lodash/_baseKeys.js"(exports2, module2) {
      var isPrototype2 = require_isPrototype();
      var nativeKeys2 = require_nativeKeys();
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function baseKeys2(object2) {
        if (!isPrototype2(object2)) {
          return nativeKeys2(object2);
        }
        var result = [];
        for (var key in Object(object2)) {
          if (hasOwnProperty16.call(object2, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      module2.exports = baseKeys2;
    }
  });

  // node_modules/lodash/isArrayLike.js
  var require_isArrayLike = __commonJS({
    "node_modules/lodash/isArrayLike.js"(exports2, module2) {
      var isFunction3 = require_isFunction();
      var isLength2 = require_isLength();
      function isArrayLike2(value) {
        return value != null && isLength2(value.length) && !isFunction3(value);
      }
      module2.exports = isArrayLike2;
    }
  });

  // node_modules/lodash/keys.js
  var require_keys = __commonJS({
    "node_modules/lodash/keys.js"(exports2, module2) {
      var arrayLikeKeys2 = require_arrayLikeKeys();
      var baseKeys2 = require_baseKeys();
      var isArrayLike2 = require_isArrayLike();
      function keys2(object2) {
        return isArrayLike2(object2) ? arrayLikeKeys2(object2) : baseKeys2(object2);
      }
      module2.exports = keys2;
    }
  });

  // node_modules/lodash/_baseAssign.js
  var require_baseAssign = __commonJS({
    "node_modules/lodash/_baseAssign.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var keys2 = require_keys();
      function baseAssign2(object2, source2) {
        return object2 && copyObject2(source2, keys2(source2), object2);
      }
      module2.exports = baseAssign2;
    }
  });

  // node_modules/lodash/_nativeKeysIn.js
  var require_nativeKeysIn = __commonJS({
    "node_modules/lodash/_nativeKeysIn.js"(exports2, module2) {
      function nativeKeysIn2(object2) {
        var result = [];
        if (object2 != null) {
          for (var key in Object(object2)) {
            result.push(key);
          }
        }
        return result;
      }
      module2.exports = nativeKeysIn2;
    }
  });

  // node_modules/lodash/_baseKeysIn.js
  var require_baseKeysIn = __commonJS({
    "node_modules/lodash/_baseKeysIn.js"(exports2, module2) {
      var isObject5 = require_isObject();
      var isPrototype2 = require_isPrototype();
      var nativeKeysIn2 = require_nativeKeysIn();
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function baseKeysIn2(object2) {
        if (!isObject5(object2)) {
          return nativeKeysIn2(object2);
        }
        var isProto = isPrototype2(object2), result = [];
        for (var key in object2) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty16.call(object2, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      module2.exports = baseKeysIn2;
    }
  });

  // node_modules/lodash/keysIn.js
  var require_keysIn = __commonJS({
    "node_modules/lodash/keysIn.js"(exports2, module2) {
      var arrayLikeKeys2 = require_arrayLikeKeys();
      var baseKeysIn2 = require_baseKeysIn();
      var isArrayLike2 = require_isArrayLike();
      function keysIn2(object2) {
        return isArrayLike2(object2) ? arrayLikeKeys2(object2, true) : baseKeysIn2(object2);
      }
      module2.exports = keysIn2;
    }
  });

  // node_modules/lodash/_baseAssignIn.js
  var require_baseAssignIn = __commonJS({
    "node_modules/lodash/_baseAssignIn.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var keysIn2 = require_keysIn();
      function baseAssignIn2(object2, source2) {
        return object2 && copyObject2(source2, keysIn2(source2), object2);
      }
      module2.exports = baseAssignIn2;
    }
  });

  // node_modules/lodash/_cloneBuffer.js
  var require_cloneBuffer = __commonJS({
    "node_modules/lodash/_cloneBuffer.js"(exports2, module2) {
      var root3 = require_root();
      var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
      var Buffer4 = moduleExports4 ? root3.Buffer : void 0;
      var allocUnsafe2 = Buffer4 ? Buffer4.allocUnsafe : void 0;
      function cloneBuffer2(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length, result = allocUnsafe2 ? allocUnsafe2(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }
      module2.exports = cloneBuffer2;
    }
  });

  // node_modules/lodash/_copyArray.js
  var require_copyArray = __commonJS({
    "node_modules/lodash/_copyArray.js"(exports2, module2) {
      function copyArray2(source2, array) {
        var index2 = -1, length = source2.length;
        array || (array = Array(length));
        while (++index2 < length) {
          array[index2] = source2[index2];
        }
        return array;
      }
      module2.exports = copyArray2;
    }
  });

  // node_modules/lodash/_arrayFilter.js
  var require_arrayFilter = __commonJS({
    "node_modules/lodash/_arrayFilter.js"(exports2, module2) {
      function arrayFilter2(array, predicate) {
        var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index2 < length) {
          var value = array[index2];
          if (predicate(value, index2, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      module2.exports = arrayFilter2;
    }
  });

  // node_modules/lodash/stubArray.js
  var require_stubArray = __commonJS({
    "node_modules/lodash/stubArray.js"(exports2, module2) {
      function stubArray2() {
        return [];
      }
      module2.exports = stubArray2;
    }
  });

  // node_modules/lodash/_getSymbols.js
  var require_getSymbols = __commonJS({
    "node_modules/lodash/_getSymbols.js"(exports2, module2) {
      var arrayFilter2 = require_arrayFilter();
      var stubArray2 = require_stubArray();
      var objectProto19 = Object.prototype;
      var propertyIsEnumerable3 = objectProto19.propertyIsEnumerable;
      var nativeGetSymbols3 = Object.getOwnPropertySymbols;
      var getSymbols2 = !nativeGetSymbols3 ? stubArray2 : function(object2) {
        if (object2 == null) {
          return [];
        }
        object2 = Object(object2);
        return arrayFilter2(nativeGetSymbols3(object2), function(symbol) {
          return propertyIsEnumerable3.call(object2, symbol);
        });
      };
      module2.exports = getSymbols2;
    }
  });

  // node_modules/lodash/_copySymbols.js
  var require_copySymbols = __commonJS({
    "node_modules/lodash/_copySymbols.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var getSymbols2 = require_getSymbols();
      function copySymbols2(source2, object2) {
        return copyObject2(source2, getSymbols2(source2), object2);
      }
      module2.exports = copySymbols2;
    }
  });

  // node_modules/lodash/_arrayPush.js
  var require_arrayPush = __commonJS({
    "node_modules/lodash/_arrayPush.js"(exports2, module2) {
      function arrayPush2(array, values5) {
        var index2 = -1, length = values5.length, offset2 = array.length;
        while (++index2 < length) {
          array[offset2 + index2] = values5[index2];
        }
        return array;
      }
      module2.exports = arrayPush2;
    }
  });

  // node_modules/lodash/_getPrototype.js
  var require_getPrototype = __commonJS({
    "node_modules/lodash/_getPrototype.js"(exports2, module2) {
      var overArg2 = require_overArg();
      var getPrototype2 = overArg2(Object.getPrototypeOf, Object);
      module2.exports = getPrototype2;
    }
  });

  // node_modules/lodash/_getSymbolsIn.js
  var require_getSymbolsIn = __commonJS({
    "node_modules/lodash/_getSymbolsIn.js"(exports2, module2) {
      var arrayPush2 = require_arrayPush();
      var getPrototype2 = require_getPrototype();
      var getSymbols2 = require_getSymbols();
      var stubArray2 = require_stubArray();
      var nativeGetSymbols3 = Object.getOwnPropertySymbols;
      var getSymbolsIn2 = !nativeGetSymbols3 ? stubArray2 : function(object2) {
        var result = [];
        while (object2) {
          arrayPush2(result, getSymbols2(object2));
          object2 = getPrototype2(object2);
        }
        return result;
      };
      module2.exports = getSymbolsIn2;
    }
  });

  // node_modules/lodash/_copySymbolsIn.js
  var require_copySymbolsIn = __commonJS({
    "node_modules/lodash/_copySymbolsIn.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var getSymbolsIn2 = require_getSymbolsIn();
      function copySymbolsIn2(source2, object2) {
        return copyObject2(source2, getSymbolsIn2(source2), object2);
      }
      module2.exports = copySymbolsIn2;
    }
  });

  // node_modules/lodash/_baseGetAllKeys.js
  var require_baseGetAllKeys = __commonJS({
    "node_modules/lodash/_baseGetAllKeys.js"(exports2, module2) {
      var arrayPush2 = require_arrayPush();
      var isArray2 = require_isArray();
      function baseGetAllKeys2(object2, keysFunc, symbolsFunc) {
        var result = keysFunc(object2);
        return isArray2(object2) ? result : arrayPush2(result, symbolsFunc(object2));
      }
      module2.exports = baseGetAllKeys2;
    }
  });

  // node_modules/lodash/_getAllKeys.js
  var require_getAllKeys = __commonJS({
    "node_modules/lodash/_getAllKeys.js"(exports2, module2) {
      var baseGetAllKeys2 = require_baseGetAllKeys();
      var getSymbols2 = require_getSymbols();
      var keys2 = require_keys();
      function getAllKeys2(object2) {
        return baseGetAllKeys2(object2, keys2, getSymbols2);
      }
      module2.exports = getAllKeys2;
    }
  });

  // node_modules/lodash/_getAllKeysIn.js
  var require_getAllKeysIn = __commonJS({
    "node_modules/lodash/_getAllKeysIn.js"(exports2, module2) {
      var baseGetAllKeys2 = require_baseGetAllKeys();
      var getSymbolsIn2 = require_getSymbolsIn();
      var keysIn2 = require_keysIn();
      function getAllKeysIn2(object2) {
        return baseGetAllKeys2(object2, keysIn2, getSymbolsIn2);
      }
      module2.exports = getAllKeysIn2;
    }
  });

  // node_modules/lodash/_DataView.js
  var require_DataView = __commonJS({
    "node_modules/lodash/_DataView.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root3 = require_root();
      var DataView2 = getNative2(root3, "DataView");
      module2.exports = DataView2;
    }
  });

  // node_modules/lodash/_Promise.js
  var require_Promise = __commonJS({
    "node_modules/lodash/_Promise.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root3 = require_root();
      var Promise3 = getNative2(root3, "Promise");
      module2.exports = Promise3;
    }
  });

  // node_modules/lodash/_Set.js
  var require_Set = __commonJS({
    "node_modules/lodash/_Set.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root3 = require_root();
      var Set3 = getNative2(root3, "Set");
      module2.exports = Set3;
    }
  });

  // node_modules/lodash/_WeakMap.js
  var require_WeakMap = __commonJS({
    "node_modules/lodash/_WeakMap.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root3 = require_root();
      var WeakMap3 = getNative2(root3, "WeakMap");
      module2.exports = WeakMap3;
    }
  });

  // node_modules/lodash/_getTag.js
  var require_getTag = __commonJS({
    "node_modules/lodash/_getTag.js"(exports2, module2) {
      var DataView2 = require_DataView();
      var Map3 = require_Map();
      var Promise3 = require_Promise();
      var Set3 = require_Set();
      var WeakMap3 = require_WeakMap();
      var baseGetTag2 = require_baseGetTag();
      var toSource2 = require_toSource();
      var mapTag8 = "[object Map]";
      var objectTag6 = "[object Object]";
      var promiseTag2 = "[object Promise]";
      var setTag8 = "[object Set]";
      var weakMapTag4 = "[object WeakMap]";
      var dataViewTag6 = "[object DataView]";
      var dataViewCtorString2 = toSource2(DataView2);
      var mapCtorString2 = toSource2(Map3);
      var promiseCtorString2 = toSource2(Promise3);
      var setCtorString2 = toSource2(Set3);
      var weakMapCtorString2 = toSource2(WeakMap3);
      var getTag2 = baseGetTag2;
      if (DataView2 && getTag2(new DataView2(new ArrayBuffer(1))) != dataViewTag6 || Map3 && getTag2(new Map3()) != mapTag8 || Promise3 && getTag2(Promise3.resolve()) != promiseTag2 || Set3 && getTag2(new Set3()) != setTag8 || WeakMap3 && getTag2(new WeakMap3()) != weakMapTag4) {
        getTag2 = function(value) {
          var result = baseGetTag2(value), Ctor = result == objectTag6 ? value.constructor : void 0, ctorString = Ctor ? toSource2(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString2:
                return dataViewTag6;
              case mapCtorString2:
                return mapTag8;
              case promiseCtorString2:
                return promiseTag2;
              case setCtorString2:
                return setTag8;
              case weakMapCtorString2:
                return weakMapTag4;
            }
          }
          return result;
        };
      }
      module2.exports = getTag2;
    }
  });

  // node_modules/lodash/_initCloneArray.js
  var require_initCloneArray = __commonJS({
    "node_modules/lodash/_initCloneArray.js"(exports2, module2) {
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function initCloneArray2(array) {
        var length = array.length, result = new array.constructor(length);
        if (length && typeof array[0] == "string" && hasOwnProperty16.call(array, "index")) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }
      module2.exports = initCloneArray2;
    }
  });

  // node_modules/lodash/_Uint8Array.js
  var require_Uint8Array = __commonJS({
    "node_modules/lodash/_Uint8Array.js"(exports2, module2) {
      var root3 = require_root();
      var Uint8Array3 = root3.Uint8Array;
      module2.exports = Uint8Array3;
    }
  });

  // node_modules/lodash/_cloneArrayBuffer.js
  var require_cloneArrayBuffer = __commonJS({
    "node_modules/lodash/_cloneArrayBuffer.js"(exports2, module2) {
      var Uint8Array3 = require_Uint8Array();
      function cloneArrayBuffer2(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array3(result).set(new Uint8Array3(arrayBuffer));
        return result;
      }
      module2.exports = cloneArrayBuffer2;
    }
  });

  // node_modules/lodash/_cloneDataView.js
  var require_cloneDataView = __commonJS({
    "node_modules/lodash/_cloneDataView.js"(exports2, module2) {
      var cloneArrayBuffer2 = require_cloneArrayBuffer();
      function cloneDataView2(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer2(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }
      module2.exports = cloneDataView2;
    }
  });

  // node_modules/lodash/_cloneRegExp.js
  var require_cloneRegExp = __commonJS({
    "node_modules/lodash/_cloneRegExp.js"(exports2, module2) {
      var reFlags2 = /\w*$/;
      function cloneRegExp2(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags2.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }
      module2.exports = cloneRegExp2;
    }
  });

  // node_modules/lodash/_cloneSymbol.js
  var require_cloneSymbol = __commonJS({
    "node_modules/lodash/_cloneSymbol.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var symbolProto4 = Symbol3 ? Symbol3.prototype : void 0;
      var symbolValueOf3 = symbolProto4 ? symbolProto4.valueOf : void 0;
      function cloneSymbol2(symbol) {
        return symbolValueOf3 ? Object(symbolValueOf3.call(symbol)) : {};
      }
      module2.exports = cloneSymbol2;
    }
  });

  // node_modules/lodash/_cloneTypedArray.js
  var require_cloneTypedArray = __commonJS({
    "node_modules/lodash/_cloneTypedArray.js"(exports2, module2) {
      var cloneArrayBuffer2 = require_cloneArrayBuffer();
      function cloneTypedArray2(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer2(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      module2.exports = cloneTypedArray2;
    }
  });

  // node_modules/lodash/_initCloneByTag.js
  var require_initCloneByTag = __commonJS({
    "node_modules/lodash/_initCloneByTag.js"(exports2, module2) {
      var cloneArrayBuffer2 = require_cloneArrayBuffer();
      var cloneDataView2 = require_cloneDataView();
      var cloneRegExp2 = require_cloneRegExp();
      var cloneSymbol2 = require_cloneSymbol();
      var cloneTypedArray2 = require_cloneTypedArray();
      var boolTag5 = "[object Boolean]";
      var dateTag5 = "[object Date]";
      var mapTag8 = "[object Map]";
      var numberTag5 = "[object Number]";
      var regexpTag5 = "[object RegExp]";
      var setTag8 = "[object Set]";
      var stringTag5 = "[object String]";
      var symbolTag5 = "[object Symbol]";
      var arrayBufferTag5 = "[object ArrayBuffer]";
      var dataViewTag6 = "[object DataView]";
      var float32Tag4 = "[object Float32Array]";
      var float64Tag4 = "[object Float64Array]";
      var int8Tag4 = "[object Int8Array]";
      var int16Tag4 = "[object Int16Array]";
      var int32Tag4 = "[object Int32Array]";
      var uint8Tag4 = "[object Uint8Array]";
      var uint8ClampedTag4 = "[object Uint8ClampedArray]";
      var uint16Tag4 = "[object Uint16Array]";
      var uint32Tag4 = "[object Uint32Array]";
      function initCloneByTag2(object2, tag, isDeep) {
        var Ctor = object2.constructor;
        switch (tag) {
          case arrayBufferTag5:
            return cloneArrayBuffer2(object2);
          case boolTag5:
          case dateTag5:
            return new Ctor(+object2);
          case dataViewTag6:
            return cloneDataView2(object2, isDeep);
          case float32Tag4:
          case float64Tag4:
          case int8Tag4:
          case int16Tag4:
          case int32Tag4:
          case uint8Tag4:
          case uint8ClampedTag4:
          case uint16Tag4:
          case uint32Tag4:
            return cloneTypedArray2(object2, isDeep);
          case mapTag8:
            return new Ctor();
          case numberTag5:
          case stringTag5:
            return new Ctor(object2);
          case regexpTag5:
            return cloneRegExp2(object2);
          case setTag8:
            return new Ctor();
          case symbolTag5:
            return cloneSymbol2(object2);
        }
      }
      module2.exports = initCloneByTag2;
    }
  });

  // node_modules/lodash/_baseCreate.js
  var require_baseCreate = __commonJS({
    "node_modules/lodash/_baseCreate.js"(exports2, module2) {
      var isObject5 = require_isObject();
      var objectCreate2 = Object.create;
      var baseCreate2 = function() {
        function object2() {
        }
        return function(proto) {
          if (!isObject5(proto)) {
            return {};
          }
          if (objectCreate2) {
            return objectCreate2(proto);
          }
          object2.prototype = proto;
          var result = new object2();
          object2.prototype = void 0;
          return result;
        };
      }();
      module2.exports = baseCreate2;
    }
  });

  // node_modules/lodash/_initCloneObject.js
  var require_initCloneObject = __commonJS({
    "node_modules/lodash/_initCloneObject.js"(exports2, module2) {
      var baseCreate2 = require_baseCreate();
      var getPrototype2 = require_getPrototype();
      var isPrototype2 = require_isPrototype();
      function initCloneObject2(object2) {
        return typeof object2.constructor == "function" && !isPrototype2(object2) ? baseCreate2(getPrototype2(object2)) : {};
      }
      module2.exports = initCloneObject2;
    }
  });

  // node_modules/lodash/_baseIsMap.js
  var require_baseIsMap = __commonJS({
    "node_modules/lodash/_baseIsMap.js"(exports2, module2) {
      var getTag2 = require_getTag();
      var isObjectLike2 = require_isObjectLike();
      var mapTag8 = "[object Map]";
      function baseIsMap2(value) {
        return isObjectLike2(value) && getTag2(value) == mapTag8;
      }
      module2.exports = baseIsMap2;
    }
  });

  // node_modules/lodash/isMap.js
  var require_isMap = __commonJS({
    "node_modules/lodash/isMap.js"(exports2, module2) {
      var baseIsMap2 = require_baseIsMap();
      var baseUnary2 = require_baseUnary();
      var nodeUtil2 = require_nodeUtil();
      var nodeIsMap2 = nodeUtil2 && nodeUtil2.isMap;
      var isMap2 = nodeIsMap2 ? baseUnary2(nodeIsMap2) : baseIsMap2;
      module2.exports = isMap2;
    }
  });

  // node_modules/lodash/_baseIsSet.js
  var require_baseIsSet = __commonJS({
    "node_modules/lodash/_baseIsSet.js"(exports2, module2) {
      var getTag2 = require_getTag();
      var isObjectLike2 = require_isObjectLike();
      var setTag8 = "[object Set]";
      function baseIsSet2(value) {
        return isObjectLike2(value) && getTag2(value) == setTag8;
      }
      module2.exports = baseIsSet2;
    }
  });

  // node_modules/lodash/isSet.js
  var require_isSet = __commonJS({
    "node_modules/lodash/isSet.js"(exports2, module2) {
      var baseIsSet2 = require_baseIsSet();
      var baseUnary2 = require_baseUnary();
      var nodeUtil2 = require_nodeUtil();
      var nodeIsSet2 = nodeUtil2 && nodeUtil2.isSet;
      var isSet2 = nodeIsSet2 ? baseUnary2(nodeIsSet2) : baseIsSet2;
      module2.exports = isSet2;
    }
  });

  // node_modules/lodash/_baseClone.js
  var require_baseClone = __commonJS({
    "node_modules/lodash/_baseClone.js"(exports2, module2) {
      var Stack2 = require_Stack();
      var arrayEach2 = require_arrayEach();
      var assignValue2 = require_assignValue();
      var baseAssign2 = require_baseAssign();
      var baseAssignIn2 = require_baseAssignIn();
      var cloneBuffer2 = require_cloneBuffer();
      var copyArray2 = require_copyArray();
      var copySymbols2 = require_copySymbols();
      var copySymbolsIn2 = require_copySymbolsIn();
      var getAllKeys2 = require_getAllKeys();
      var getAllKeysIn2 = require_getAllKeysIn();
      var getTag2 = require_getTag();
      var initCloneArray2 = require_initCloneArray();
      var initCloneByTag2 = require_initCloneByTag();
      var initCloneObject2 = require_initCloneObject();
      var isArray2 = require_isArray();
      var isBuffer2 = require_isBuffer();
      var isMap2 = require_isMap();
      var isObject5 = require_isObject();
      var isSet2 = require_isSet();
      var keys2 = require_keys();
      var keysIn2 = require_keysIn();
      var CLONE_DEEP_FLAG3 = 1;
      var CLONE_FLAT_FLAG3 = 2;
      var CLONE_SYMBOLS_FLAG3 = 4;
      var argsTag5 = "[object Arguments]";
      var arrayTag4 = "[object Array]";
      var boolTag5 = "[object Boolean]";
      var dateTag5 = "[object Date]";
      var errorTag4 = "[object Error]";
      var funcTag4 = "[object Function]";
      var genTag3 = "[object GeneratorFunction]";
      var mapTag8 = "[object Map]";
      var numberTag5 = "[object Number]";
      var objectTag6 = "[object Object]";
      var regexpTag5 = "[object RegExp]";
      var setTag8 = "[object Set]";
      var stringTag5 = "[object String]";
      var symbolTag5 = "[object Symbol]";
      var weakMapTag4 = "[object WeakMap]";
      var arrayBufferTag5 = "[object ArrayBuffer]";
      var dataViewTag6 = "[object DataView]";
      var float32Tag4 = "[object Float32Array]";
      var float64Tag4 = "[object Float64Array]";
      var int8Tag4 = "[object Int8Array]";
      var int16Tag4 = "[object Int16Array]";
      var int32Tag4 = "[object Int32Array]";
      var uint8Tag4 = "[object Uint8Array]";
      var uint8ClampedTag4 = "[object Uint8ClampedArray]";
      var uint16Tag4 = "[object Uint16Array]";
      var uint32Tag4 = "[object Uint32Array]";
      var cloneableTags2 = {};
      cloneableTags2[argsTag5] = cloneableTags2[arrayTag4] = cloneableTags2[arrayBufferTag5] = cloneableTags2[dataViewTag6] = cloneableTags2[boolTag5] = cloneableTags2[dateTag5] = cloneableTags2[float32Tag4] = cloneableTags2[float64Tag4] = cloneableTags2[int8Tag4] = cloneableTags2[int16Tag4] = cloneableTags2[int32Tag4] = cloneableTags2[mapTag8] = cloneableTags2[numberTag5] = cloneableTags2[objectTag6] = cloneableTags2[regexpTag5] = cloneableTags2[setTag8] = cloneableTags2[stringTag5] = cloneableTags2[symbolTag5] = cloneableTags2[uint8Tag4] = cloneableTags2[uint8ClampedTag4] = cloneableTags2[uint16Tag4] = cloneableTags2[uint32Tag4] = true;
      cloneableTags2[errorTag4] = cloneableTags2[funcTag4] = cloneableTags2[weakMapTag4] = false;
      function baseClone2(value, bitmask, customizer, key, object2, stack) {
        var result, isDeep = bitmask & CLONE_DEEP_FLAG3, isFlat = bitmask & CLONE_FLAT_FLAG3, isFull = bitmask & CLONE_SYMBOLS_FLAG3;
        if (customizer) {
          result = object2 ? customizer(value, key, object2, stack) : customizer(value);
        }
        if (result !== void 0) {
          return result;
        }
        if (!isObject5(value)) {
          return value;
        }
        var isArr = isArray2(value);
        if (isArr) {
          result = initCloneArray2(value);
          if (!isDeep) {
            return copyArray2(value, result);
          }
        } else {
          var tag = getTag2(value), isFunc = tag == funcTag4 || tag == genTag3;
          if (isBuffer2(value)) {
            return cloneBuffer2(value, isDeep);
          }
          if (tag == objectTag6 || tag == argsTag5 || isFunc && !object2) {
            result = isFlat || isFunc ? {} : initCloneObject2(value);
            if (!isDeep) {
              return isFlat ? copySymbolsIn2(value, baseAssignIn2(result, value)) : copySymbols2(value, baseAssign2(result, value));
            }
          } else {
            if (!cloneableTags2[tag]) {
              return object2 ? value : {};
            }
            result = initCloneByTag2(value, tag, isDeep);
          }
        }
        stack || (stack = new Stack2());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);
        if (isSet2(value)) {
          value.forEach(function(subValue) {
            result.add(baseClone2(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap2(value)) {
          value.forEach(function(subValue, key2) {
            result.set(key2, baseClone2(subValue, bitmask, customizer, key2, value, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? getAllKeysIn2 : getAllKeys2 : isFlat ? keysIn2 : keys2;
        var props = isArr ? void 0 : keysFunc(value);
        arrayEach2(props || value, function(subValue, key2) {
          if (props) {
            key2 = subValue;
            subValue = value[key2];
          }
          assignValue2(result, key2, baseClone2(subValue, bitmask, customizer, key2, value, stack));
        });
        return result;
      }
      module2.exports = baseClone2;
    }
  });

  // node_modules/lodash/cloneDeep.js
  var require_cloneDeep = __commonJS({
    "node_modules/lodash/cloneDeep.js"(exports2, module2) {
      var baseClone2 = require_baseClone();
      var CLONE_DEEP_FLAG3 = 1;
      var CLONE_SYMBOLS_FLAG3 = 4;
      function cloneDeep(value) {
        return baseClone2(value, CLONE_DEEP_FLAG3 | CLONE_SYMBOLS_FLAG3);
      }
      module2.exports = cloneDeep;
    }
  });

  // node_modules/lodash/_setCacheAdd.js
  var require_setCacheAdd = __commonJS({
    "node_modules/lodash/_setCacheAdd.js"(exports2, module2) {
      var HASH_UNDEFINED4 = "__lodash_hash_undefined__";
      function setCacheAdd2(value) {
        this.__data__.set(value, HASH_UNDEFINED4);
        return this;
      }
      module2.exports = setCacheAdd2;
    }
  });

  // node_modules/lodash/_setCacheHas.js
  var require_setCacheHas = __commonJS({
    "node_modules/lodash/_setCacheHas.js"(exports2, module2) {
      function setCacheHas2(value) {
        return this.__data__.has(value);
      }
      module2.exports = setCacheHas2;
    }
  });

  // node_modules/lodash/_SetCache.js
  var require_SetCache = __commonJS({
    "node_modules/lodash/_SetCache.js"(exports2, module2) {
      var MapCache3 = require_MapCache();
      var setCacheAdd2 = require_setCacheAdd();
      var setCacheHas2 = require_setCacheHas();
      function SetCache2(values5) {
        var index2 = -1, length = values5 == null ? 0 : values5.length;
        this.__data__ = new MapCache3();
        while (++index2 < length) {
          this.add(values5[index2]);
        }
      }
      SetCache2.prototype.add = SetCache2.prototype.push = setCacheAdd2;
      SetCache2.prototype.has = setCacheHas2;
      module2.exports = SetCache2;
    }
  });

  // node_modules/lodash/_arraySome.js
  var require_arraySome = __commonJS({
    "node_modules/lodash/_arraySome.js"(exports2, module2) {
      function arraySome2(array, predicate) {
        var index2 = -1, length = array == null ? 0 : array.length;
        while (++index2 < length) {
          if (predicate(array[index2], index2, array)) {
            return true;
          }
        }
        return false;
      }
      module2.exports = arraySome2;
    }
  });

  // node_modules/lodash/_cacheHas.js
  var require_cacheHas = __commonJS({
    "node_modules/lodash/_cacheHas.js"(exports2, module2) {
      function cacheHas2(cache2, key) {
        return cache2.has(key);
      }
      module2.exports = cacheHas2;
    }
  });

  // node_modules/lodash/_equalArrays.js
  var require_equalArrays = __commonJS({
    "node_modules/lodash/_equalArrays.js"(exports2, module2) {
      var SetCache2 = require_SetCache();
      var arraySome2 = require_arraySome();
      var cacheHas2 = require_cacheHas();
      var COMPARE_PARTIAL_FLAG5 = 1;
      var COMPARE_UNORDERED_FLAG3 = 2;
      function equalArrays2(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG5, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG3 ? new SetCache2() : void 0;
        stack.set(array, other);
        stack.set(other, array);
        while (++index2 < arrLength) {
          var arrValue = array[index2], othValue = other[index2];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index2, other, array, stack) : customizer(arrValue, othValue, index2, array, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome2(other, function(othValue2, othIndex) {
              if (!cacheHas2(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result;
      }
      module2.exports = equalArrays2;
    }
  });

  // node_modules/lodash/_mapToArray.js
  var require_mapToArray = __commonJS({
    "node_modules/lodash/_mapToArray.js"(exports2, module2) {
      function mapToArray2(map) {
        var index2 = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index2] = [key, value];
        });
        return result;
      }
      module2.exports = mapToArray2;
    }
  });

  // node_modules/lodash/_setToArray.js
  var require_setToArray = __commonJS({
    "node_modules/lodash/_setToArray.js"(exports2, module2) {
      function setToArray2(set2) {
        var index2 = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index2] = value;
        });
        return result;
      }
      module2.exports = setToArray2;
    }
  });

  // node_modules/lodash/_equalByTag.js
  var require_equalByTag = __commonJS({
    "node_modules/lodash/_equalByTag.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var Uint8Array3 = require_Uint8Array();
      var eq2 = require_eq();
      var equalArrays2 = require_equalArrays();
      var mapToArray2 = require_mapToArray();
      var setToArray2 = require_setToArray();
      var COMPARE_PARTIAL_FLAG5 = 1;
      var COMPARE_UNORDERED_FLAG3 = 2;
      var boolTag5 = "[object Boolean]";
      var dateTag5 = "[object Date]";
      var errorTag4 = "[object Error]";
      var mapTag8 = "[object Map]";
      var numberTag5 = "[object Number]";
      var regexpTag5 = "[object RegExp]";
      var setTag8 = "[object Set]";
      var stringTag5 = "[object String]";
      var symbolTag5 = "[object Symbol]";
      var arrayBufferTag5 = "[object ArrayBuffer]";
      var dataViewTag6 = "[object DataView]";
      var symbolProto4 = Symbol3 ? Symbol3.prototype : void 0;
      var symbolValueOf3 = symbolProto4 ? symbolProto4.valueOf : void 0;
      function equalByTag2(object2, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag6:
            if (object2.byteLength != other.byteLength || object2.byteOffset != other.byteOffset) {
              return false;
            }
            object2 = object2.buffer;
            other = other.buffer;
          case arrayBufferTag5:
            if (object2.byteLength != other.byteLength || !equalFunc(new Uint8Array3(object2), new Uint8Array3(other))) {
              return false;
            }
            return true;
          case boolTag5:
          case dateTag5:
          case numberTag5:
            return eq2(+object2, +other);
          case errorTag4:
            return object2.name == other.name && object2.message == other.message;
          case regexpTag5:
          case stringTag5:
            return object2 == other + "";
          case mapTag8:
            var convert = mapToArray2;
          case setTag8:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG5;
            convert || (convert = setToArray2);
            if (object2.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object2);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG3;
            stack.set(object2, other);
            var result = equalArrays2(convert(object2), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object2);
            return result;
          case symbolTag5:
            if (symbolValueOf3) {
              return symbolValueOf3.call(object2) == symbolValueOf3.call(other);
            }
        }
        return false;
      }
      module2.exports = equalByTag2;
    }
  });

  // node_modules/lodash/_equalObjects.js
  var require_equalObjects = __commonJS({
    "node_modules/lodash/_equalObjects.js"(exports2, module2) {
      var getAllKeys2 = require_getAllKeys();
      var COMPARE_PARTIAL_FLAG5 = 1;
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function equalObjects2(object2, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG5, objProps = getAllKeys2(object2), objLength = objProps.length, othProps = getAllKeys2(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index2 = objLength;
        while (index2--) {
          var key = objProps[index2];
          if (!(isPartial ? key in other : hasOwnProperty16.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object2);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object2;
        }
        var result = true;
        stack.set(object2, other);
        stack.set(other, object2);
        var skipCtor = isPartial;
        while (++index2 < objLength) {
          key = objProps[index2];
          var objValue = object2[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object2, stack) : customizer(objValue, othValue, key, object2, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object2.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object2 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack["delete"](object2);
        stack["delete"](other);
        return result;
      }
      module2.exports = equalObjects2;
    }
  });

  // node_modules/lodash/_baseIsEqualDeep.js
  var require_baseIsEqualDeep = __commonJS({
    "node_modules/lodash/_baseIsEqualDeep.js"(exports2, module2) {
      var Stack2 = require_Stack();
      var equalArrays2 = require_equalArrays();
      var equalByTag2 = require_equalByTag();
      var equalObjects2 = require_equalObjects();
      var getTag2 = require_getTag();
      var isArray2 = require_isArray();
      var isBuffer2 = require_isBuffer();
      var isTypedArray2 = require_isTypedArray();
      var COMPARE_PARTIAL_FLAG5 = 1;
      var argsTag5 = "[object Arguments]";
      var arrayTag4 = "[object Array]";
      var objectTag6 = "[object Object]";
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function baseIsEqualDeep2(object2, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray2(object2), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag4 : getTag2(object2), othTag = othIsArr ? arrayTag4 : getTag2(other);
        objTag = objTag == argsTag5 ? objectTag6 : objTag;
        othTag = othTag == argsTag5 ? objectTag6 : othTag;
        var objIsObj = objTag == objectTag6, othIsObj = othTag == objectTag6, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer2(object2)) {
          if (!isBuffer2(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack2());
          return objIsArr || isTypedArray2(object2) ? equalArrays2(object2, other, bitmask, customizer, equalFunc, stack) : equalByTag2(object2, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG5)) {
          var objIsWrapped = objIsObj && hasOwnProperty16.call(object2, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty16.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object2.value() : object2, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack2());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack2());
        return equalObjects2(object2, other, bitmask, customizer, equalFunc, stack);
      }
      module2.exports = baseIsEqualDeep2;
    }
  });

  // node_modules/lodash/_baseIsEqual.js
  var require_baseIsEqual = __commonJS({
    "node_modules/lodash/_baseIsEqual.js"(exports2, module2) {
      var baseIsEqualDeep2 = require_baseIsEqualDeep();
      var isObjectLike2 = require_isObjectLike();
      function baseIsEqual2(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike2(value) && !isObjectLike2(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep2(value, other, bitmask, customizer, baseIsEqual2, stack);
      }
      module2.exports = baseIsEqual2;
    }
  });

  // node_modules/lodash/isEqual.js
  var require_isEqual = __commonJS({
    "node_modules/lodash/isEqual.js"(exports2, module2) {
      var baseIsEqual2 = require_baseIsEqual();
      function isEqual(value, other) {
        return baseIsEqual2(value, other);
      }
      module2.exports = isEqual;
    }
  });

  // node_modules/lodash/_isFlattenable.js
  var require_isFlattenable = __commonJS({
    "node_modules/lodash/_isFlattenable.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var isArguments2 = require_isArguments();
      var isArray2 = require_isArray();
      var spreadableSymbol2 = Symbol3 ? Symbol3.isConcatSpreadable : void 0;
      function isFlattenable2(value) {
        return isArray2(value) || isArguments2(value) || !!(spreadableSymbol2 && value && value[spreadableSymbol2]);
      }
      module2.exports = isFlattenable2;
    }
  });

  // node_modules/lodash/_baseFlatten.js
  var require_baseFlatten = __commonJS({
    "node_modules/lodash/_baseFlatten.js"(exports2, module2) {
      var arrayPush2 = require_arrayPush();
      var isFlattenable2 = require_isFlattenable();
      function baseFlatten2(array, depth, predicate, isStrict, result) {
        var index2 = -1, length = array.length;
        predicate || (predicate = isFlattenable2);
        result || (result = []);
        while (++index2 < length) {
          var value = array[index2];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten2(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush2(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }
      module2.exports = baseFlatten2;
    }
  });

  // node_modules/lodash/_arrayMap.js
  var require_arrayMap = __commonJS({
    "node_modules/lodash/_arrayMap.js"(exports2, module2) {
      function arrayMap2(array, iteratee) {
        var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index2 < length) {
          result[index2] = iteratee(array[index2], index2, array);
        }
        return result;
      }
      module2.exports = arrayMap2;
    }
  });

  // node_modules/lodash/isSymbol.js
  var require_isSymbol = __commonJS({
    "node_modules/lodash/isSymbol.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObjectLike2 = require_isObjectLike();
      var symbolTag5 = "[object Symbol]";
      function isSymbol2(value) {
        return typeof value == "symbol" || isObjectLike2(value) && baseGetTag2(value) == symbolTag5;
      }
      module2.exports = isSymbol2;
    }
  });

  // node_modules/lodash/_isKey.js
  var require_isKey = __commonJS({
    "node_modules/lodash/_isKey.js"(exports2, module2) {
      var isArray2 = require_isArray();
      var isSymbol2 = require_isSymbol();
      var reIsDeepProp2 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var reIsPlainProp2 = /^\w*$/;
      function isKey2(value, object2) {
        if (isArray2(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol2(value)) {
          return true;
        }
        return reIsPlainProp2.test(value) || !reIsDeepProp2.test(value) || object2 != null && value in Object(object2);
      }
      module2.exports = isKey2;
    }
  });

  // node_modules/lodash/memoize.js
  var require_memoize = __commonJS({
    "node_modules/lodash/memoize.js"(exports2, module2) {
      var MapCache3 = require_MapCache();
      var FUNC_ERROR_TEXT2 = "Expected a function";
      function memoize2(func2, resolver) {
        if (typeof func2 != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT2);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
          if (cache2.has(key)) {
            return cache2.get(key);
          }
          var result = func2.apply(this, args);
          memoized.cache = cache2.set(key, result) || cache2;
          return result;
        };
        memoized.cache = new (memoize2.Cache || MapCache3)();
        return memoized;
      }
      memoize2.Cache = MapCache3;
      module2.exports = memoize2;
    }
  });

  // node_modules/lodash/_memoizeCapped.js
  var require_memoizeCapped = __commonJS({
    "node_modules/lodash/_memoizeCapped.js"(exports2, module2) {
      var memoize2 = require_memoize();
      var MAX_MEMOIZE_SIZE2 = 500;
      function memoizeCapped2(func2) {
        var result = memoize2(func2, function(key) {
          if (cache2.size === MAX_MEMOIZE_SIZE2) {
            cache2.clear();
          }
          return key;
        });
        var cache2 = result.cache;
        return result;
      }
      module2.exports = memoizeCapped2;
    }
  });

  // node_modules/lodash/_stringToPath.js
  var require_stringToPath = __commonJS({
    "node_modules/lodash/_stringToPath.js"(exports2, module2) {
      var memoizeCapped2 = require_memoizeCapped();
      var rePropName2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar2 = /\\(\\)?/g;
      var stringToPath2 = memoizeCapped2(function(string2) {
        var result = [];
        if (string2.charCodeAt(0) === 46) {
          result.push("");
        }
        string2.replace(rePropName2, function(match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar2, "$1") : number || match);
        });
        return result;
      });
      module2.exports = stringToPath2;
    }
  });

  // node_modules/lodash/_baseToString.js
  var require_baseToString = __commonJS({
    "node_modules/lodash/_baseToString.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var arrayMap2 = require_arrayMap();
      var isArray2 = require_isArray();
      var isSymbol2 = require_isSymbol();
      var INFINITY4 = 1 / 0;
      var symbolProto4 = Symbol3 ? Symbol3.prototype : void 0;
      var symbolToString2 = symbolProto4 ? symbolProto4.toString : void 0;
      function baseToString2(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray2(value)) {
          return arrayMap2(value, baseToString2) + "";
        }
        if (isSymbol2(value)) {
          return symbolToString2 ? symbolToString2.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY4 ? "-0" : result;
      }
      module2.exports = baseToString2;
    }
  });

  // node_modules/lodash/toString.js
  var require_toString = __commonJS({
    "node_modules/lodash/toString.js"(exports2, module2) {
      var baseToString2 = require_baseToString();
      function toString2(value) {
        return value == null ? "" : baseToString2(value);
      }
      module2.exports = toString2;
    }
  });

  // node_modules/lodash/_castPath.js
  var require_castPath = __commonJS({
    "node_modules/lodash/_castPath.js"(exports2, module2) {
      var isArray2 = require_isArray();
      var isKey2 = require_isKey();
      var stringToPath2 = require_stringToPath();
      var toString2 = require_toString();
      function castPath2(value, object2) {
        if (isArray2(value)) {
          return value;
        }
        return isKey2(value, object2) ? [value] : stringToPath2(toString2(value));
      }
      module2.exports = castPath2;
    }
  });

  // node_modules/lodash/_toKey.js
  var require_toKey = __commonJS({
    "node_modules/lodash/_toKey.js"(exports2, module2) {
      var isSymbol2 = require_isSymbol();
      var INFINITY4 = 1 / 0;
      function toKey2(value) {
        if (typeof value == "string" || isSymbol2(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY4 ? "-0" : result;
      }
      module2.exports = toKey2;
    }
  });

  // node_modules/lodash/_baseGet.js
  var require_baseGet = __commonJS({
    "node_modules/lodash/_baseGet.js"(exports2, module2) {
      var castPath2 = require_castPath();
      var toKey2 = require_toKey();
      function baseGet2(object2, path) {
        path = castPath2(path, object2);
        var index2 = 0, length = path.length;
        while (object2 != null && index2 < length) {
          object2 = object2[toKey2(path[index2++])];
        }
        return index2 && index2 == length ? object2 : void 0;
      }
      module2.exports = baseGet2;
    }
  });

  // node_modules/lodash/_baseIsMatch.js
  var require_baseIsMatch = __commonJS({
    "node_modules/lodash/_baseIsMatch.js"(exports2, module2) {
      var Stack2 = require_Stack();
      var baseIsEqual2 = require_baseIsEqual();
      var COMPARE_PARTIAL_FLAG5 = 1;
      var COMPARE_UNORDERED_FLAG3 = 2;
      function baseIsMatch(object2, source2, matchData, customizer) {
        var index2 = matchData.length, length = index2, noCustomizer = !customizer;
        if (object2 == null) {
          return !length;
        }
        object2 = Object(object2);
        while (index2--) {
          var data = matchData[index2];
          if (noCustomizer && data[2] ? data[1] !== object2[data[0]] : !(data[0] in object2)) {
            return false;
          }
        }
        while (++index2 < length) {
          data = matchData[index2];
          var key = data[0], objValue = object2[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === void 0 && !(key in object2)) {
              return false;
            }
          } else {
            var stack = new Stack2();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object2, source2, stack);
            }
            if (!(result === void 0 ? baseIsEqual2(srcValue, objValue, COMPARE_PARTIAL_FLAG5 | COMPARE_UNORDERED_FLAG3, customizer, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }
      module2.exports = baseIsMatch;
    }
  });

  // node_modules/lodash/_isStrictComparable.js
  var require_isStrictComparable = __commonJS({
    "node_modules/lodash/_isStrictComparable.js"(exports2, module2) {
      var isObject5 = require_isObject();
      function isStrictComparable(value) {
        return value === value && !isObject5(value);
      }
      module2.exports = isStrictComparable;
    }
  });

  // node_modules/lodash/_getMatchData.js
  var require_getMatchData = __commonJS({
    "node_modules/lodash/_getMatchData.js"(exports2, module2) {
      var isStrictComparable = require_isStrictComparable();
      var keys2 = require_keys();
      function getMatchData(object2) {
        var result = keys2(object2), length = result.length;
        while (length--) {
          var key = result[length], value = object2[key];
          result[length] = [key, value, isStrictComparable(value)];
        }
        return result;
      }
      module2.exports = getMatchData;
    }
  });

  // node_modules/lodash/_matchesStrictComparable.js
  var require_matchesStrictComparable = __commonJS({
    "node_modules/lodash/_matchesStrictComparable.js"(exports2, module2) {
      function matchesStrictComparable(key, srcValue) {
        return function(object2) {
          if (object2 == null) {
            return false;
          }
          return object2[key] === srcValue && (srcValue !== void 0 || key in Object(object2));
        };
      }
      module2.exports = matchesStrictComparable;
    }
  });

  // node_modules/lodash/_baseMatches.js
  var require_baseMatches = __commonJS({
    "node_modules/lodash/_baseMatches.js"(exports2, module2) {
      var baseIsMatch = require_baseIsMatch();
      var getMatchData = require_getMatchData();
      var matchesStrictComparable = require_matchesStrictComparable();
      function baseMatches(source2) {
        var matchData = getMatchData(source2);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object2) {
          return object2 === source2 || baseIsMatch(object2, source2, matchData);
        };
      }
      module2.exports = baseMatches;
    }
  });

  // node_modules/lodash/get.js
  var require_get = __commonJS({
    "node_modules/lodash/get.js"(exports2, module2) {
      var baseGet2 = require_baseGet();
      function get2(object2, path, defaultValue) {
        var result = object2 == null ? void 0 : baseGet2(object2, path);
        return result === void 0 ? defaultValue : result;
      }
      module2.exports = get2;
    }
  });

  // node_modules/lodash/_baseHasIn.js
  var require_baseHasIn = __commonJS({
    "node_modules/lodash/_baseHasIn.js"(exports2, module2) {
      function baseHasIn2(object2, key) {
        return object2 != null && key in Object(object2);
      }
      module2.exports = baseHasIn2;
    }
  });

  // node_modules/lodash/_hasPath.js
  var require_hasPath = __commonJS({
    "node_modules/lodash/_hasPath.js"(exports2, module2) {
      var castPath2 = require_castPath();
      var isArguments2 = require_isArguments();
      var isArray2 = require_isArray();
      var isIndex2 = require_isIndex();
      var isLength2 = require_isLength();
      var toKey2 = require_toKey();
      function hasPath2(object2, path, hasFunc) {
        path = castPath2(path, object2);
        var index2 = -1, length = path.length, result = false;
        while (++index2 < length) {
          var key = toKey2(path[index2]);
          if (!(result = object2 != null && hasFunc(object2, key))) {
            break;
          }
          object2 = object2[key];
        }
        if (result || ++index2 != length) {
          return result;
        }
        length = object2 == null ? 0 : object2.length;
        return !!length && isLength2(length) && isIndex2(key, length) && (isArray2(object2) || isArguments2(object2));
      }
      module2.exports = hasPath2;
    }
  });

  // node_modules/lodash/hasIn.js
  var require_hasIn = __commonJS({
    "node_modules/lodash/hasIn.js"(exports2, module2) {
      var baseHasIn2 = require_baseHasIn();
      var hasPath2 = require_hasPath();
      function hasIn2(object2, path) {
        return object2 != null && hasPath2(object2, path, baseHasIn2);
      }
      module2.exports = hasIn2;
    }
  });

  // node_modules/lodash/_baseMatchesProperty.js
  var require_baseMatchesProperty = __commonJS({
    "node_modules/lodash/_baseMatchesProperty.js"(exports2, module2) {
      var baseIsEqual2 = require_baseIsEqual();
      var get2 = require_get();
      var hasIn2 = require_hasIn();
      var isKey2 = require_isKey();
      var isStrictComparable = require_isStrictComparable();
      var matchesStrictComparable = require_matchesStrictComparable();
      var toKey2 = require_toKey();
      var COMPARE_PARTIAL_FLAG5 = 1;
      var COMPARE_UNORDERED_FLAG3 = 2;
      function baseMatchesProperty(path, srcValue) {
        if (isKey2(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey2(path), srcValue);
        }
        return function(object2) {
          var objValue = get2(object2, path);
          return objValue === void 0 && objValue === srcValue ? hasIn2(object2, path) : baseIsEqual2(srcValue, objValue, COMPARE_PARTIAL_FLAG5 | COMPARE_UNORDERED_FLAG3);
        };
      }
      module2.exports = baseMatchesProperty;
    }
  });

  // node_modules/lodash/identity.js
  var require_identity = __commonJS({
    "node_modules/lodash/identity.js"(exports2, module2) {
      function identity2(value) {
        return value;
      }
      module2.exports = identity2;
    }
  });

  // node_modules/lodash/_baseProperty.js
  var require_baseProperty = __commonJS({
    "node_modules/lodash/_baseProperty.js"(exports2, module2) {
      function baseProperty(key) {
        return function(object2) {
          return object2 == null ? void 0 : object2[key];
        };
      }
      module2.exports = baseProperty;
    }
  });

  // node_modules/lodash/_basePropertyDeep.js
  var require_basePropertyDeep = __commonJS({
    "node_modules/lodash/_basePropertyDeep.js"(exports2, module2) {
      var baseGet2 = require_baseGet();
      function basePropertyDeep(path) {
        return function(object2) {
          return baseGet2(object2, path);
        };
      }
      module2.exports = basePropertyDeep;
    }
  });

  // node_modules/lodash/property.js
  var require_property = __commonJS({
    "node_modules/lodash/property.js"(exports2, module2) {
      var baseProperty = require_baseProperty();
      var basePropertyDeep = require_basePropertyDeep();
      var isKey2 = require_isKey();
      var toKey2 = require_toKey();
      function property(path) {
        return isKey2(path) ? baseProperty(toKey2(path)) : basePropertyDeep(path);
      }
      module2.exports = property;
    }
  });

  // node_modules/lodash/_baseIteratee.js
  var require_baseIteratee = __commonJS({
    "node_modules/lodash/_baseIteratee.js"(exports2, module2) {
      var baseMatches = require_baseMatches();
      var baseMatchesProperty = require_baseMatchesProperty();
      var identity2 = require_identity();
      var isArray2 = require_isArray();
      var property = require_property();
      function baseIteratee(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity2;
        }
        if (typeof value == "object") {
          return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }
        return property(value);
      }
      module2.exports = baseIteratee;
    }
  });

  // node_modules/lodash/_createBaseFor.js
  var require_createBaseFor = __commonJS({
    "node_modules/lodash/_createBaseFor.js"(exports2, module2) {
      function createBaseFor(fromRight) {
        return function(object2, iteratee, keysFunc) {
          var index2 = -1, iterable = Object(object2), props = keysFunc(object2), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index2];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object2;
        };
      }
      module2.exports = createBaseFor;
    }
  });

  // node_modules/lodash/_baseFor.js
  var require_baseFor = __commonJS({
    "node_modules/lodash/_baseFor.js"(exports2, module2) {
      var createBaseFor = require_createBaseFor();
      var baseFor = createBaseFor();
      module2.exports = baseFor;
    }
  });

  // node_modules/lodash/_baseForOwn.js
  var require_baseForOwn = __commonJS({
    "node_modules/lodash/_baseForOwn.js"(exports2, module2) {
      var baseFor = require_baseFor();
      var keys2 = require_keys();
      function baseForOwn(object2, iteratee) {
        return object2 && baseFor(object2, iteratee, keys2);
      }
      module2.exports = baseForOwn;
    }
  });

  // node_modules/lodash/_createBaseEach.js
  var require_createBaseEach = __commonJS({
    "node_modules/lodash/_createBaseEach.js"(exports2, module2) {
      var isArrayLike2 = require_isArrayLike();
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike2(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length, index2 = fromRight ? length : -1, iterable = Object(collection);
          while (fromRight ? index2-- : ++index2 < length) {
            if (iteratee(iterable[index2], index2, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      module2.exports = createBaseEach;
    }
  });

  // node_modules/lodash/_baseEach.js
  var require_baseEach = __commonJS({
    "node_modules/lodash/_baseEach.js"(exports2, module2) {
      var baseForOwn = require_baseForOwn();
      var createBaseEach = require_createBaseEach();
      var baseEach = createBaseEach(baseForOwn);
      module2.exports = baseEach;
    }
  });

  // node_modules/lodash/_baseMap.js
  var require_baseMap = __commonJS({
    "node_modules/lodash/_baseMap.js"(exports2, module2) {
      var baseEach = require_baseEach();
      var isArrayLike2 = require_isArrayLike();
      function baseMap(collection, iteratee) {
        var index2 = -1, result = isArrayLike2(collection) ? Array(collection.length) : [];
        baseEach(collection, function(value, key, collection2) {
          result[++index2] = iteratee(value, key, collection2);
        });
        return result;
      }
      module2.exports = baseMap;
    }
  });

  // node_modules/lodash/_baseSortBy.js
  var require_baseSortBy = __commonJS({
    "node_modules/lodash/_baseSortBy.js"(exports2, module2) {
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      module2.exports = baseSortBy;
    }
  });

  // node_modules/lodash/_compareAscending.js
  var require_compareAscending = __commonJS({
    "node_modules/lodash/_compareAscending.js"(exports2, module2) {
      var isSymbol2 = require_isSymbol();
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== void 0, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol2(value);
          var othIsDefined = other !== void 0, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol2(other);
          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }
          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }
      module2.exports = compareAscending;
    }
  });

  // node_modules/lodash/_compareMultiple.js
  var require_compareMultiple = __commonJS({
    "node_modules/lodash/_compareMultiple.js"(exports2, module2) {
      var compareAscending = require_compareAscending();
      function compareMultiple(object2, other, orders) {
        var index2 = -1, objCriteria = object2.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
        while (++index2 < length) {
          var result = compareAscending(objCriteria[index2], othCriteria[index2]);
          if (result) {
            if (index2 >= ordersLength) {
              return result;
            }
            var order = orders[index2];
            return result * (order == "desc" ? -1 : 1);
          }
        }
        return object2.index - other.index;
      }
      module2.exports = compareMultiple;
    }
  });

  // node_modules/lodash/_baseOrderBy.js
  var require_baseOrderBy = __commonJS({
    "node_modules/lodash/_baseOrderBy.js"(exports2, module2) {
      var arrayMap2 = require_arrayMap();
      var baseGet2 = require_baseGet();
      var baseIteratee = require_baseIteratee();
      var baseMap = require_baseMap();
      var baseSortBy = require_baseSortBy();
      var baseUnary2 = require_baseUnary();
      var compareMultiple = require_compareMultiple();
      var identity2 = require_identity();
      var isArray2 = require_isArray();
      function baseOrderBy(collection, iteratees, orders) {
        if (iteratees.length) {
          iteratees = arrayMap2(iteratees, function(iteratee) {
            if (isArray2(iteratee)) {
              return function(value) {
                return baseGet2(value, iteratee.length === 1 ? iteratee[0] : iteratee);
              };
            }
            return iteratee;
          });
        } else {
          iteratees = [identity2];
        }
        var index2 = -1;
        iteratees = arrayMap2(iteratees, baseUnary2(baseIteratee));
        var result = baseMap(collection, function(value, key, collection2) {
          var criteria = arrayMap2(iteratees, function(iteratee) {
            return iteratee(value);
          });
          return { "criteria": criteria, "index": ++index2, "value": value };
        });
        return baseSortBy(result, function(object2, other) {
          return compareMultiple(object2, other, orders);
        });
      }
      module2.exports = baseOrderBy;
    }
  });

  // node_modules/lodash/_apply.js
  var require_apply = __commonJS({
    "node_modules/lodash/_apply.js"(exports2, module2) {
      function apply2(func2, thisArg, args) {
        switch (args.length) {
          case 0:
            return func2.call(thisArg);
          case 1:
            return func2.call(thisArg, args[0]);
          case 2:
            return func2.call(thisArg, args[0], args[1]);
          case 3:
            return func2.call(thisArg, args[0], args[1], args[2]);
        }
        return func2.apply(thisArg, args);
      }
      module2.exports = apply2;
    }
  });

  // node_modules/lodash/_overRest.js
  var require_overRest = __commonJS({
    "node_modules/lodash/_overRest.js"(exports2, module2) {
      var apply2 = require_apply();
      var nativeMax2 = Math.max;
      function overRest2(func2, start, transform) {
        start = nativeMax2(start === void 0 ? func2.length - 1 : start, 0);
        return function() {
          var args = arguments, index2 = -1, length = nativeMax2(args.length - start, 0), array = Array(length);
          while (++index2 < length) {
            array[index2] = args[start + index2];
          }
          index2 = -1;
          var otherArgs = Array(start + 1);
          while (++index2 < start) {
            otherArgs[index2] = args[index2];
          }
          otherArgs[start] = transform(array);
          return apply2(func2, this, otherArgs);
        };
      }
      module2.exports = overRest2;
    }
  });

  // node_modules/lodash/constant.js
  var require_constant = __commonJS({
    "node_modules/lodash/constant.js"(exports2, module2) {
      function constant2(value) {
        return function() {
          return value;
        };
      }
      module2.exports = constant2;
    }
  });

  // node_modules/lodash/_baseSetToString.js
  var require_baseSetToString = __commonJS({
    "node_modules/lodash/_baseSetToString.js"(exports2, module2) {
      var constant2 = require_constant();
      var defineProperty3 = require_defineProperty2();
      var identity2 = require_identity();
      var baseSetToString2 = !defineProperty3 ? identity2 : function(func2, string2) {
        return defineProperty3(func2, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant2(string2),
          "writable": true
        });
      };
      module2.exports = baseSetToString2;
    }
  });

  // node_modules/lodash/_shortOut.js
  var require_shortOut = __commonJS({
    "node_modules/lodash/_shortOut.js"(exports2, module2) {
      var HOT_COUNT2 = 800;
      var HOT_SPAN2 = 16;
      var nativeNow2 = Date.now;
      function shortOut2(func2) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow2(), remaining = HOT_SPAN2 - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT2) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func2.apply(void 0, arguments);
        };
      }
      module2.exports = shortOut2;
    }
  });

  // node_modules/lodash/_setToString.js
  var require_setToString = __commonJS({
    "node_modules/lodash/_setToString.js"(exports2, module2) {
      var baseSetToString2 = require_baseSetToString();
      var shortOut2 = require_shortOut();
      var setToString2 = shortOut2(baseSetToString2);
      module2.exports = setToString2;
    }
  });

  // node_modules/lodash/_baseRest.js
  var require_baseRest = __commonJS({
    "node_modules/lodash/_baseRest.js"(exports2, module2) {
      var identity2 = require_identity();
      var overRest2 = require_overRest();
      var setToString2 = require_setToString();
      function baseRest2(func2, start) {
        return setToString2(overRest2(func2, start, identity2), func2 + "");
      }
      module2.exports = baseRest2;
    }
  });

  // node_modules/lodash/_isIterateeCall.js
  var require_isIterateeCall = __commonJS({
    "node_modules/lodash/_isIterateeCall.js"(exports2, module2) {
      var eq2 = require_eq();
      var isArrayLike2 = require_isArrayLike();
      var isIndex2 = require_isIndex();
      var isObject5 = require_isObject();
      function isIterateeCall(value, index2, object2) {
        if (!isObject5(object2)) {
          return false;
        }
        var type = typeof index2;
        if (type == "number" ? isArrayLike2(object2) && isIndex2(index2, object2.length) : type == "string" && index2 in object2) {
          return eq2(object2[index2], value);
        }
        return false;
      }
      module2.exports = isIterateeCall;
    }
  });

  // node_modules/lodash/sortBy.js
  var require_sortBy = __commonJS({
    "node_modules/lodash/sortBy.js"(exports2, module2) {
      var baseFlatten2 = require_baseFlatten();
      var baseOrderBy = require_baseOrderBy();
      var baseRest2 = require_baseRest();
      var isIterateeCall = require_isIterateeCall();
      var sortBy = baseRest2(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length = iteratees.length;
        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten2(iteratees, 1), []);
      });
      module2.exports = sortBy;
    }
  });

  // node_modules/lodash/_baseFindIndex.js
  var require_baseFindIndex = __commonJS({
    "node_modules/lodash/_baseFindIndex.js"(exports2, module2) {
      function baseFindIndex2(array, predicate, fromIndex, fromRight) {
        var length = array.length, index2 = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index2-- : ++index2 < length) {
          if (predicate(array[index2], index2, array)) {
            return index2;
          }
        }
        return -1;
      }
      module2.exports = baseFindIndex2;
    }
  });

  // node_modules/lodash/_baseIsNaN.js
  var require_baseIsNaN = __commonJS({
    "node_modules/lodash/_baseIsNaN.js"(exports2, module2) {
      function baseIsNaN2(value) {
        return value !== value;
      }
      module2.exports = baseIsNaN2;
    }
  });

  // node_modules/lodash/_strictIndexOf.js
  var require_strictIndexOf = __commonJS({
    "node_modules/lodash/_strictIndexOf.js"(exports2, module2) {
      function strictIndexOf2(array, value, fromIndex) {
        var index2 = fromIndex - 1, length = array.length;
        while (++index2 < length) {
          if (array[index2] === value) {
            return index2;
          }
        }
        return -1;
      }
      module2.exports = strictIndexOf2;
    }
  });

  // node_modules/lodash/_baseIndexOf.js
  var require_baseIndexOf = __commonJS({
    "node_modules/lodash/_baseIndexOf.js"(exports2, module2) {
      var baseFindIndex2 = require_baseFindIndex();
      var baseIsNaN2 = require_baseIsNaN();
      var strictIndexOf2 = require_strictIndexOf();
      function baseIndexOf2(array, value, fromIndex) {
        return value === value ? strictIndexOf2(array, value, fromIndex) : baseFindIndex2(array, baseIsNaN2, fromIndex);
      }
      module2.exports = baseIndexOf2;
    }
  });

  // node_modules/lodash/_arrayIncludes.js
  var require_arrayIncludes = __commonJS({
    "node_modules/lodash/_arrayIncludes.js"(exports2, module2) {
      var baseIndexOf2 = require_baseIndexOf();
      function arrayIncludes2(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf2(array, value, 0) > -1;
      }
      module2.exports = arrayIncludes2;
    }
  });

  // node_modules/lodash/_arrayIncludesWith.js
  var require_arrayIncludesWith = __commonJS({
    "node_modules/lodash/_arrayIncludesWith.js"(exports2, module2) {
      function arrayIncludesWith2(array, value, comparator) {
        var index2 = -1, length = array == null ? 0 : array.length;
        while (++index2 < length) {
          if (comparator(value, array[index2])) {
            return true;
          }
        }
        return false;
      }
      module2.exports = arrayIncludesWith2;
    }
  });

  // node_modules/lodash/noop.js
  var require_noop = __commonJS({
    "node_modules/lodash/noop.js"(exports2, module2) {
      function noop3() {
      }
      module2.exports = noop3;
    }
  });

  // node_modules/lodash/_createSet.js
  var require_createSet = __commonJS({
    "node_modules/lodash/_createSet.js"(exports2, module2) {
      var Set3 = require_Set();
      var noop3 = require_noop();
      var setToArray2 = require_setToArray();
      var INFINITY4 = 1 / 0;
      var createSet2 = !(Set3 && 1 / setToArray2(new Set3([, -0]))[1] == INFINITY4) ? noop3 : function(values5) {
        return new Set3(values5);
      };
      module2.exports = createSet2;
    }
  });

  // node_modules/lodash/_baseUniq.js
  var require_baseUniq = __commonJS({
    "node_modules/lodash/_baseUniq.js"(exports2, module2) {
      var SetCache2 = require_SetCache();
      var arrayIncludes2 = require_arrayIncludes();
      var arrayIncludesWith2 = require_arrayIncludesWith();
      var cacheHas2 = require_cacheHas();
      var createSet2 = require_createSet();
      var setToArray2 = require_setToArray();
      var LARGE_ARRAY_SIZE3 = 200;
      function baseUniq2(array, iteratee, comparator) {
        var index2 = -1, includes = arrayIncludes2, length = array.length, isCommon = true, result = [], seen = result;
        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith2;
        } else if (length >= LARGE_ARRAY_SIZE3) {
          var set2 = iteratee ? null : createSet2(array);
          if (set2) {
            return setToArray2(set2);
          }
          isCommon = false;
          includes = cacheHas2;
          seen = new SetCache2();
        } else {
          seen = iteratee ? [] : result;
        }
        outer:
          while (++index2 < length) {
            var value = array[index2], computed = iteratee ? iteratee(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee) {
                seen.push(computed);
              }
              result.push(value);
            } else if (!includes(seen, computed, comparator)) {
              if (seen !== result) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
        return result;
      }
      module2.exports = baseUniq2;
    }
  });

  // node_modules/lodash/uniq.js
  var require_uniq = __commonJS({
    "node_modules/lodash/uniq.js"(exports2, module2) {
      var baseUniq2 = require_baseUniq();
      function uniq(array) {
        return array && array.length ? baseUniq2(array) : [];
      }
      module2.exports = uniq;
    }
  });

  // node_modules/lodash/uniqWith.js
  var require_uniqWith = __commonJS({
    "node_modules/lodash/uniqWith.js"(exports2, module2) {
      var baseUniq2 = require_baseUniq();
      function uniqWith(array, comparator) {
        comparator = typeof comparator == "function" ? comparator : void 0;
        return array && array.length ? baseUniq2(array, void 0, comparator) : [];
      }
      module2.exports = uniqWith;
    }
  });

  // node_modules/lodash/defaults.js
  var require_defaults = __commonJS({
    "node_modules/lodash/defaults.js"(exports2, module2) {
      var baseRest2 = require_baseRest();
      var eq2 = require_eq();
      var isIterateeCall = require_isIterateeCall();
      var keysIn2 = require_keysIn();
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      var defaults = baseRest2(function(object2, sources) {
        object2 = Object(object2);
        var index2 = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }
        while (++index2 < length) {
          var source2 = sources[index2];
          var props = keysIn2(source2);
          var propsIndex = -1;
          var propsLength = props.length;
          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object2[key];
            if (value === void 0 || eq2(value, objectProto19[key]) && !hasOwnProperty16.call(object2, key)) {
              object2[key] = source2[key];
            }
          }
        }
        return object2;
      });
      module2.exports = defaults;
    }
  });

  // node_modules/lodash/_baseIntersection.js
  var require_baseIntersection = __commonJS({
    "node_modules/lodash/_baseIntersection.js"(exports2, module2) {
      var SetCache2 = require_SetCache();
      var arrayIncludes2 = require_arrayIncludes();
      var arrayIncludesWith2 = require_arrayIncludesWith();
      var arrayMap2 = require_arrayMap();
      var baseUnary2 = require_baseUnary();
      var cacheHas2 = require_cacheHas();
      var nativeMin = Math.min;
      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith2 : arrayIncludes2, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
        while (othIndex--) {
          var array = arrays[othIndex];
          if (othIndex && iteratee) {
            array = arrayMap2(array, baseUnary2(iteratee));
          }
          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache2(othIndex && array) : void 0;
        }
        array = arrays[0];
        var index2 = -1, seen = caches[0];
        outer:
          while (++index2 < length && result.length < maxLength) {
            var value = array[index2], computed = iteratee ? iteratee(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (!(seen ? cacheHas2(seen, computed) : includes(result, computed, comparator))) {
              othIndex = othLength;
              while (--othIndex) {
                var cache2 = caches[othIndex];
                if (!(cache2 ? cacheHas2(cache2, computed) : includes(arrays[othIndex], computed, comparator))) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
        return result;
      }
      module2.exports = baseIntersection;
    }
  });

  // node_modules/lodash/isArrayLikeObject.js
  var require_isArrayLikeObject = __commonJS({
    "node_modules/lodash/isArrayLikeObject.js"(exports2, module2) {
      var isArrayLike2 = require_isArrayLike();
      var isObjectLike2 = require_isObjectLike();
      function isArrayLikeObject2(value) {
        return isObjectLike2(value) && isArrayLike2(value);
      }
      module2.exports = isArrayLikeObject2;
    }
  });

  // node_modules/lodash/_castArrayLikeObject.js
  var require_castArrayLikeObject = __commonJS({
    "node_modules/lodash/_castArrayLikeObject.js"(exports2, module2) {
      var isArrayLikeObject2 = require_isArrayLikeObject();
      function castArrayLikeObject(value) {
        return isArrayLikeObject2(value) ? value : [];
      }
      module2.exports = castArrayLikeObject;
    }
  });

  // node_modules/lodash/last.js
  var require_last = __commonJS({
    "node_modules/lodash/last.js"(exports2, module2) {
      function last2(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : void 0;
      }
      module2.exports = last2;
    }
  });

  // node_modules/lodash/intersectionWith.js
  var require_intersectionWith = __commonJS({
    "node_modules/lodash/intersectionWith.js"(exports2, module2) {
      var arrayMap2 = require_arrayMap();
      var baseIntersection = require_baseIntersection();
      var baseRest2 = require_baseRest();
      var castArrayLikeObject = require_castArrayLikeObject();
      var last2 = require_last();
      var intersectionWith = baseRest2(function(arrays) {
        var comparator = last2(arrays), mapped = arrayMap2(arrays, castArrayLikeObject);
        comparator = typeof comparator == "function" ? comparator : void 0;
        if (comparator) {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, void 0, comparator) : [];
      });
      module2.exports = intersectionWith;
    }
  });

  // node_modules/lodash/isPlainObject.js
  var require_isPlainObject = __commonJS({
    "node_modules/lodash/isPlainObject.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var getPrototype2 = require_getPrototype();
      var isObjectLike2 = require_isObjectLike();
      var objectTag6 = "[object Object]";
      var funcProto4 = Function.prototype;
      var objectProto19 = Object.prototype;
      var funcToString4 = funcProto4.toString;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      var objectCtorString2 = funcToString4.call(Object);
      function isPlainObject2(value) {
        if (!isObjectLike2(value) || baseGetTag2(value) != objectTag6) {
          return false;
        }
        var proto = getPrototype2(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty16.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString4.call(Ctor) == objectCtorString2;
      }
      module2.exports = isPlainObject2;
    }
  });

  // node_modules/lodash/isBoolean.js
  var require_isBoolean = __commonJS({
    "node_modules/lodash/isBoolean.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObjectLike2 = require_isObjectLike();
      var boolTag5 = "[object Boolean]";
      function isBoolean(value) {
        return value === true || value === false || isObjectLike2(value) && baseGetTag2(value) == boolTag5;
      }
      module2.exports = isBoolean;
    }
  });

  // node_modules/json-schema-compare/src/index.js
  var require_src = __commonJS({
    "node_modules/json-schema-compare/src/index.js"(exports2, module2) {
      var isEqual = require_isEqual();
      var sortBy = require_sortBy();
      var uniq = require_uniq();
      var uniqWith = require_uniqWith();
      var defaults = require_defaults();
      var intersectionWith = require_intersectionWith();
      var isPlainObject2 = require_isPlainObject();
      var isBoolean = require_isBoolean();
      var normalizeArray = (val) => Array.isArray(val) ? val : [val];
      var undef = (val) => val === void 0;
      var keys2 = (obj) => isPlainObject2(obj) || Array.isArray(obj) ? Object.keys(obj) : [];
      var has2 = (obj, key) => obj.hasOwnProperty(key);
      var stringArray = (arr) => sortBy(uniq(arr));
      var undefEmpty = (val) => undef(val) || Array.isArray(val) && val.length === 0;
      var keyValEqual = (a, b, key, compare3) => b && has2(b, key) && a && has2(a, key) && compare3(a[key], b[key]);
      var undefAndZero = (a, b) => undef(a) && b === 0 || undef(b) && a === 0 || isEqual(a, b);
      var falseUndefined = (a, b) => undef(a) && b === false || undef(b) && a === false || isEqual(a, b);
      var emptySchema = (schema) => undef(schema) || isEqual(schema, {}) || schema === true;
      var emptyObjUndef = (schema) => undef(schema) || isEqual(schema, {});
      var isSchema = (val) => undef(val) || isPlainObject2(val) || val === true || val === false;
      function undefArrayEqual(a, b) {
        if (undefEmpty(a) && undefEmpty(b)) {
          return true;
        } else {
          return isEqual(stringArray(a), stringArray(b));
        }
      }
      function unsortedNormalizedArray(a, b) {
        a = normalizeArray(a);
        b = normalizeArray(b);
        return isEqual(stringArray(a), stringArray(b));
      }
      function schemaGroup(a, b, key, compare3) {
        var allProps = uniq(keys2(a).concat(keys2(b)));
        if (emptyObjUndef(a) && emptyObjUndef(b)) {
          return true;
        } else if (emptyObjUndef(a) && keys2(b).length) {
          return false;
        } else if (emptyObjUndef(b) && keys2(a).length) {
          return false;
        }
        return allProps.every(function(key2) {
          var aVal = a[key2];
          var bVal = b[key2];
          if (Array.isArray(aVal) && Array.isArray(bVal)) {
            return isEqual(stringArray(a), stringArray(b));
          } else if (Array.isArray(aVal) && !Array.isArray(bVal)) {
            return false;
          } else if (Array.isArray(bVal) && !Array.isArray(aVal)) {
            return false;
          }
          return keyValEqual(a, b, key2, compare3);
        });
      }
      function items(a, b, key, compare3) {
        if (isPlainObject2(a) && isPlainObject2(b)) {
          return compare3(a, b);
        } else if (Array.isArray(a) && Array.isArray(b)) {
          return schemaGroup(a, b, key, compare3);
        } else {
          return isEqual(a, b);
        }
      }
      function unsortedArray(a, b, key, compare3) {
        var uniqueA = uniqWith(a, compare3);
        var uniqueB = uniqWith(b, compare3);
        var inter = intersectionWith(uniqueA, uniqueB, compare3);
        return inter.length === Math.max(uniqueA.length, uniqueB.length);
      }
      var comparers = {
        title: isEqual,
        uniqueItems: falseUndefined,
        minLength: undefAndZero,
        minItems: undefAndZero,
        minProperties: undefAndZero,
        required: undefArrayEqual,
        enum: undefArrayEqual,
        type: unsortedNormalizedArray,
        items,
        anyOf: unsortedArray,
        allOf: unsortedArray,
        oneOf: unsortedArray,
        properties: schemaGroup,
        patternProperties: schemaGroup,
        dependencies: schemaGroup
      };
      var acceptsUndefined = [
        "properties",
        "patternProperties",
        "dependencies",
        "uniqueItems",
        "minLength",
        "minItems",
        "minProperties",
        "required"
      ];
      var schemaProps = ["additionalProperties", "additionalItems", "contains", "propertyNames", "not"];
      function compare2(a, b, options) {
        options = defaults(options, {
          ignore: []
        });
        if (emptySchema(a) && emptySchema(b)) {
          return true;
        }
        if (!isSchema(a) || !isSchema(b)) {
          throw new Error("Either of the values are not a JSON schema.");
        }
        if (a === b) {
          return true;
        }
        if (isBoolean(a) && isBoolean(b)) {
          return a === b;
        }
        if (a === void 0 && b === false || b === void 0 && a === false) {
          return false;
        }
        if (undef(a) && !undef(b) || !undef(a) && undef(b)) {
          return false;
        }
        var allKeys = uniq(Object.keys(a).concat(Object.keys(b)));
        if (options.ignore.length) {
          allKeys = allKeys.filter((k) => options.ignore.indexOf(k) === -1);
        }
        if (!allKeys.length) {
          return true;
        }
        function innerCompare(a2, b2) {
          return compare2(a2, b2, options);
        }
        return allKeys.every(function(key) {
          var aValue = a[key];
          var bValue = b[key];
          if (schemaProps.indexOf(key) !== -1) {
            return compare2(aValue, bValue, options);
          }
          var comparer = comparers[key];
          if (!comparer) {
            comparer = isEqual;
          }
          if (isEqual(aValue, bValue)) {
            return true;
          }
          if (acceptsUndefined.indexOf(key) === -1) {
            if (!has2(a, key) && has2(b, key) || has2(a, key) && !has2(b, key)) {
              return aValue === bValue;
            }
          }
          var result = comparer(aValue, bValue, key, innerCompare);
          if (!isBoolean(result)) {
            throw new Error("Comparer must return true or false");
          }
          return result;
        });
      }
      module2.exports = compare2;
    }
  });

  // node_modules/validate.io-array/lib/index.js
  var require_lib3 = __commonJS({
    "node_modules/validate.io-array/lib/index.js"(exports2, module2) {
      "use strict";
      function isArray2(value) {
        return Object.prototype.toString.call(value) === "[object Array]";
      }
      module2.exports = Array.isArray || isArray2;
    }
  });

  // node_modules/validate.io-number/lib/index.js
  var require_lib4 = __commonJS({
    "node_modules/validate.io-number/lib/index.js"(exports2, module2) {
      "use strict";
      function isNumber(value) {
        return (typeof value === "number" || Object.prototype.toString.call(value) === "[object Number]") && value.valueOf() === value.valueOf();
      }
      module2.exports = isNumber;
    }
  });

  // node_modules/validate.io-integer/lib/index.js
  var require_lib5 = __commonJS({
    "node_modules/validate.io-integer/lib/index.js"(exports2, module2) {
      "use strict";
      var isNumber = require_lib4();
      function isInteger(value) {
        return isNumber(value) && value % 1 === 0;
      }
      module2.exports = isInteger;
    }
  });

  // node_modules/validate.io-integer-array/lib/index.js
  var require_lib6 = __commonJS({
    "node_modules/validate.io-integer-array/lib/index.js"(exports2, module2) {
      "use strict";
      var isArray2 = require_lib3();
      var isInteger = require_lib5();
      function isIntegerArray(value) {
        var len;
        if (!isArray2(value)) {
          return false;
        }
        len = value.length;
        if (!len) {
          return false;
        }
        for (var i = 0; i < len; i++) {
          if (!isInteger(value[i])) {
            return false;
          }
        }
        return true;
      }
      module2.exports = isIntegerArray;
    }
  });

  // node_modules/validate.io-function/lib/index.js
  var require_lib7 = __commonJS({
    "node_modules/validate.io-function/lib/index.js"(exports2, module2) {
      "use strict";
      function isFunction3(value) {
        return typeof value === "function";
      }
      module2.exports = isFunction3;
    }
  });

  // node_modules/compute-gcd/lib/index.js
  var require_lib8 = __commonJS({
    "node_modules/compute-gcd/lib/index.js"(exports2, module2) {
      "use strict";
      var isArray2 = require_lib3();
      var isIntegerArray = require_lib6();
      var isFunction3 = require_lib7();
      var MAXINT = Math.pow(2, 31) - 1;
      function gcd(a, b) {
        var k = 1, t;
        if (a === 0) {
          return b;
        }
        if (b === 0) {
          return a;
        }
        while (a % 2 === 0 && b % 2 === 0) {
          a = a / 2;
          b = b / 2;
          k = k * 2;
        }
        while (a % 2 === 0) {
          a = a / 2;
        }
        while (b) {
          while (b % 2 === 0) {
            b = b / 2;
          }
          if (a > b) {
            t = b;
            b = a;
            a = t;
          }
          b = b - a;
        }
        return k * a;
      }
      function bitwise(a, b) {
        var k = 0, t;
        if (a === 0) {
          return b;
        }
        if (b === 0) {
          return a;
        }
        while ((a & 1) === 0 && (b & 1) === 0) {
          a >>>= 1;
          b >>>= 1;
          k++;
        }
        while ((a & 1) === 0) {
          a >>>= 1;
        }
        while (b) {
          while ((b & 1) === 0) {
            b >>>= 1;
          }
          if (a > b) {
            t = b;
            b = a;
            a = t;
          }
          b = b - a;
        }
        return a << k;
      }
      function compute() {
        var nargs = arguments.length, args, clbk, arr, len, a, b, i;
        args = new Array(nargs);
        for (i = 0; i < nargs; i++) {
          args[i] = arguments[i];
        }
        if (isIntegerArray(args)) {
          if (nargs === 2) {
            a = args[0];
            b = args[1];
            if (a < 0) {
              a = -a;
            }
            if (b < 0) {
              b = -b;
            }
            if (a <= MAXINT && b <= MAXINT) {
              return bitwise(a, b);
            } else {
              return gcd(a, b);
            }
          }
          arr = args;
        } else if (!isArray2(args[0])) {
          throw new TypeError("gcd()::invalid input argument. Must provide an array of integers. Value: `" + args[0] + "`.");
        } else if (nargs > 1) {
          arr = args[0];
          clbk = args[1];
          if (!isFunction3(clbk)) {
            throw new TypeError("gcd()::invalid input argument. Accessor must be a function. Value: `" + clbk + "`.");
          }
        } else {
          arr = args[0];
        }
        len = arr.length;
        if (len < 2) {
          return null;
        }
        if (clbk) {
          a = new Array(len);
          for (i = 0; i < len; i++) {
            a[i] = clbk(arr[i], i);
          }
          arr = a;
        }
        if (nargs < 3) {
          if (!isIntegerArray(arr)) {
            throw new TypeError("gcd()::invalid input argument. Accessed array values must be integers. Value: `" + arr + "`.");
          }
        }
        for (i = 0; i < len; i++) {
          a = arr[i];
          if (a < 0) {
            arr[i] = -a;
          }
        }
        a = arr[0];
        for (i = 1; i < len; i++) {
          b = arr[i];
          if (b <= MAXINT && a <= MAXINT) {
            a = bitwise(a, b);
          } else {
            a = gcd(a, b);
          }
        }
        return a;
      }
      module2.exports = compute;
    }
  });

  // node_modules/compute-lcm/lib/index.js
  var require_lib9 = __commonJS({
    "node_modules/compute-lcm/lib/index.js"(exports2, module2) {
      "use strict";
      var gcd = require_lib8();
      var isArray2 = require_lib3();
      var isIntegerArray = require_lib6();
      var isFunction3 = require_lib7();
      function lcm() {
        var nargs = arguments.length, args, clbk, arr, len, a, b, i;
        args = new Array(nargs);
        for (i = 0; i < nargs; i++) {
          args[i] = arguments[i];
        }
        if (isIntegerArray(args)) {
          if (nargs === 2) {
            a = args[0];
            b = args[1];
            if (a < 0) {
              a = -a;
            }
            if (b < 0) {
              b = -b;
            }
            if (a === 0 || b === 0) {
              return 0;
            }
            return a / gcd(a, b) * b;
          }
          arr = args;
        } else if (!isArray2(args[0])) {
          throw new TypeError("lcm()::invalid input argument. Must provide an array of integers. Value: `" + args[0] + "`.");
        } else if (nargs > 1) {
          arr = args[0];
          clbk = args[1];
          if (!isFunction3(clbk)) {
            throw new TypeError("lcm()::invalid input argument. Accessor must be a function. Value: `" + clbk + "`.");
          }
        } else {
          arr = args[0];
        }
        len = arr.length;
        if (len < 2) {
          return null;
        }
        if (clbk) {
          a = new Array(len);
          for (i = 0; i < len; i++) {
            a[i] = clbk(arr[i], i);
          }
          arr = a;
        }
        if (nargs < 3) {
          if (!isIntegerArray(arr)) {
            throw new TypeError("lcm()::invalid input argument. Accessed array values must be integers. Value: `" + arr + "`.");
          }
        }
        for (i = 0; i < len; i++) {
          a = arr[i];
          if (a < 0) {
            arr[i] = -a;
          }
        }
        a = arr[0];
        for (i = 1; i < len; i++) {
          b = arr[i];
          if (a === 0 || b === 0) {
            return 0;
          }
          a = a / gcd(a, b) * b;
        }
        return a;
      }
      module2.exports = lcm;
    }
  });

  // node_modules/lodash/_assignMergeValue.js
  var require_assignMergeValue = __commonJS({
    "node_modules/lodash/_assignMergeValue.js"(exports2, module2) {
      var baseAssignValue2 = require_baseAssignValue();
      var eq2 = require_eq();
      function assignMergeValue(object2, key, value) {
        if (value !== void 0 && !eq2(object2[key], value) || value === void 0 && !(key in object2)) {
          baseAssignValue2(object2, key, value);
        }
      }
      module2.exports = assignMergeValue;
    }
  });

  // node_modules/lodash/_safeGet.js
  var require_safeGet = __commonJS({
    "node_modules/lodash/_safeGet.js"(exports2, module2) {
      function safeGet(object2, key) {
        if (key === "constructor" && typeof object2[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object2[key];
      }
      module2.exports = safeGet;
    }
  });

  // node_modules/lodash/toPlainObject.js
  var require_toPlainObject = __commonJS({
    "node_modules/lodash/toPlainObject.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var keysIn2 = require_keysIn();
      function toPlainObject(value) {
        return copyObject2(value, keysIn2(value));
      }
      module2.exports = toPlainObject;
    }
  });

  // node_modules/lodash/_baseMergeDeep.js
  var require_baseMergeDeep = __commonJS({
    "node_modules/lodash/_baseMergeDeep.js"(exports2, module2) {
      var assignMergeValue = require_assignMergeValue();
      var cloneBuffer2 = require_cloneBuffer();
      var cloneTypedArray2 = require_cloneTypedArray();
      var copyArray2 = require_copyArray();
      var initCloneObject2 = require_initCloneObject();
      var isArguments2 = require_isArguments();
      var isArray2 = require_isArray();
      var isArrayLikeObject2 = require_isArrayLikeObject();
      var isBuffer2 = require_isBuffer();
      var isFunction3 = require_isFunction();
      var isObject5 = require_isObject();
      var isPlainObject2 = require_isPlainObject();
      var isTypedArray2 = require_isTypedArray();
      var safeGet = require_safeGet();
      var toPlainObject = require_toPlainObject();
      function baseMergeDeep(object2, source2, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object2, key), srcValue = safeGet(source2, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object2, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object2, source2, stack) : void 0;
        var isCommon = newValue === void 0;
        if (isCommon) {
          var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray2(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray2(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject2(objValue)) {
              newValue = copyArray2(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer2(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray2(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject2(srcValue) || isArguments2(srcValue)) {
            newValue = objValue;
            if (isArguments2(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject5(objValue) || isFunction3(objValue)) {
              newValue = initCloneObject2(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object2, key, newValue);
      }
      module2.exports = baseMergeDeep;
    }
  });

  // node_modules/lodash/_baseMerge.js
  var require_baseMerge = __commonJS({
    "node_modules/lodash/_baseMerge.js"(exports2, module2) {
      var Stack2 = require_Stack();
      var assignMergeValue = require_assignMergeValue();
      var baseFor = require_baseFor();
      var baseMergeDeep = require_baseMergeDeep();
      var isObject5 = require_isObject();
      var keysIn2 = require_keysIn();
      var safeGet = require_safeGet();
      function baseMerge(object2, source2, srcIndex, customizer, stack) {
        if (object2 === source2) {
          return;
        }
        baseFor(source2, function(srcValue, key) {
          stack || (stack = new Stack2());
          if (isObject5(srcValue)) {
            baseMergeDeep(object2, source2, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object2, key), srcValue, key + "", object2, source2, stack) : void 0;
            if (newValue === void 0) {
              newValue = srcValue;
            }
            assignMergeValue(object2, key, newValue);
          }
        }, keysIn2);
      }
      module2.exports = baseMerge;
    }
  });

  // node_modules/lodash/_customDefaultsMerge.js
  var require_customDefaultsMerge = __commonJS({
    "node_modules/lodash/_customDefaultsMerge.js"(exports2, module2) {
      var baseMerge = require_baseMerge();
      var isObject5 = require_isObject();
      function customDefaultsMerge(objValue, srcValue, key, object2, source2, stack) {
        if (isObject5(objValue) && isObject5(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, void 0, customDefaultsMerge, stack);
          stack["delete"](srcValue);
        }
        return objValue;
      }
      module2.exports = customDefaultsMerge;
    }
  });

  // node_modules/lodash/_createAssigner.js
  var require_createAssigner = __commonJS({
    "node_modules/lodash/_createAssigner.js"(exports2, module2) {
      var baseRest2 = require_baseRest();
      var isIterateeCall = require_isIterateeCall();
      function createAssigner(assigner) {
        return baseRest2(function(object2, sources) {
          var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? void 0 : customizer;
            length = 1;
          }
          object2 = Object(object2);
          while (++index2 < length) {
            var source2 = sources[index2];
            if (source2) {
              assigner(object2, source2, index2, customizer);
            }
          }
          return object2;
        });
      }
      module2.exports = createAssigner;
    }
  });

  // node_modules/lodash/mergeWith.js
  var require_mergeWith = __commonJS({
    "node_modules/lodash/mergeWith.js"(exports2, module2) {
      var baseMerge = require_baseMerge();
      var createAssigner = require_createAssigner();
      var mergeWith = createAssigner(function(object2, source2, srcIndex, customizer) {
        baseMerge(object2, source2, srcIndex, customizer);
      });
      module2.exports = mergeWith;
    }
  });

  // node_modules/lodash/defaultsDeep.js
  var require_defaultsDeep = __commonJS({
    "node_modules/lodash/defaultsDeep.js"(exports2, module2) {
      var apply2 = require_apply();
      var baseRest2 = require_baseRest();
      var customDefaultsMerge = require_customDefaultsMerge();
      var mergeWith = require_mergeWith();
      var defaultsDeep = baseRest2(function(args) {
        args.push(void 0, customDefaultsMerge);
        return apply2(mergeWith, void 0, args);
      });
      module2.exports = defaultsDeep;
    }
  });

  // node_modules/lodash/flatten.js
  var require_flatten = __commonJS({
    "node_modules/lodash/flatten.js"(exports2, module2) {
      var baseFlatten2 = require_baseFlatten();
      function flatten2(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten2(array, 1) : [];
      }
      module2.exports = flatten2;
    }
  });

  // node_modules/lodash/flattenDeep.js
  var require_flattenDeep = __commonJS({
    "node_modules/lodash/flattenDeep.js"(exports2, module2) {
      var baseFlatten2 = require_baseFlatten();
      var INFINITY4 = 1 / 0;
      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten2(array, INFINITY4) : [];
      }
      module2.exports = flattenDeep;
    }
  });

  // node_modules/lodash/intersection.js
  var require_intersection = __commonJS({
    "node_modules/lodash/intersection.js"(exports2, module2) {
      var arrayMap2 = require_arrayMap();
      var baseIntersection = require_baseIntersection();
      var baseRest2 = require_baseRest();
      var castArrayLikeObject = require_castArrayLikeObject();
      var intersection = baseRest2(function(arrays) {
        var mapped = arrayMap2(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      module2.exports = intersection;
    }
  });

  // node_modules/lodash/_baseIndexOfWith.js
  var require_baseIndexOfWith = __commonJS({
    "node_modules/lodash/_baseIndexOfWith.js"(exports2, module2) {
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index2 = fromIndex - 1, length = array.length;
        while (++index2 < length) {
          if (comparator(array[index2], value)) {
            return index2;
          }
        }
        return -1;
      }
      module2.exports = baseIndexOfWith;
    }
  });

  // node_modules/lodash/_basePullAll.js
  var require_basePullAll = __commonJS({
    "node_modules/lodash/_basePullAll.js"(exports2, module2) {
      var arrayMap2 = require_arrayMap();
      var baseIndexOf2 = require_baseIndexOf();
      var baseIndexOfWith = require_baseIndexOfWith();
      var baseUnary2 = require_baseUnary();
      var copyArray2 = require_copyArray();
      var arrayProto2 = Array.prototype;
      var splice2 = arrayProto2.splice;
      function basePullAll(array, values5, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf2, index2 = -1, length = values5.length, seen = array;
        if (array === values5) {
          values5 = copyArray2(values5);
        }
        if (iteratee) {
          seen = arrayMap2(array, baseUnary2(iteratee));
        }
        while (++index2 < length) {
          var fromIndex = 0, value = values5[index2], computed = iteratee ? iteratee(value) : value;
          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice2.call(seen, fromIndex, 1);
            }
            splice2.call(array, fromIndex, 1);
          }
        }
        return array;
      }
      module2.exports = basePullAll;
    }
  });

  // node_modules/lodash/pullAll.js
  var require_pullAll = __commonJS({
    "node_modules/lodash/pullAll.js"(exports2, module2) {
      var basePullAll = require_basePullAll();
      function pullAll(array, values5) {
        return array && array.length && values5 && values5.length ? basePullAll(array, values5) : array;
      }
      module2.exports = pullAll;
    }
  });

  // node_modules/lodash/_castFunction.js
  var require_castFunction = __commonJS({
    "node_modules/lodash/_castFunction.js"(exports2, module2) {
      var identity2 = require_identity();
      function castFunction(value) {
        return typeof value == "function" ? value : identity2;
      }
      module2.exports = castFunction;
    }
  });

  // node_modules/lodash/forEach.js
  var require_forEach = __commonJS({
    "node_modules/lodash/forEach.js"(exports2, module2) {
      var arrayEach2 = require_arrayEach();
      var baseEach = require_baseEach();
      var castFunction = require_castFunction();
      var isArray2 = require_isArray();
      function forEach(collection, iteratee) {
        var func2 = isArray2(collection) ? arrayEach2 : baseEach;
        return func2(collection, castFunction(iteratee));
      }
      module2.exports = forEach;
    }
  });

  // node_modules/lodash/_baseDifference.js
  var require_baseDifference = __commonJS({
    "node_modules/lodash/_baseDifference.js"(exports2, module2) {
      var SetCache2 = require_SetCache();
      var arrayIncludes2 = require_arrayIncludes();
      var arrayIncludesWith2 = require_arrayIncludesWith();
      var arrayMap2 = require_arrayMap();
      var baseUnary2 = require_baseUnary();
      var cacheHas2 = require_cacheHas();
      var LARGE_ARRAY_SIZE3 = 200;
      function baseDifference(array, values5, iteratee, comparator) {
        var index2 = -1, includes = arrayIncludes2, isCommon = true, length = array.length, result = [], valuesLength = values5.length;
        if (!length) {
          return result;
        }
        if (iteratee) {
          values5 = arrayMap2(values5, baseUnary2(iteratee));
        }
        if (comparator) {
          includes = arrayIncludesWith2;
          isCommon = false;
        } else if (values5.length >= LARGE_ARRAY_SIZE3) {
          includes = cacheHas2;
          isCommon = false;
          values5 = new SetCache2(values5);
        }
        outer:
          while (++index2 < length) {
            var value = array[index2], computed = iteratee == null ? value : iteratee(value);
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values5[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result.push(value);
            } else if (!includes(values5, computed, comparator)) {
              result.push(value);
            }
          }
        return result;
      }
      module2.exports = baseDifference;
    }
  });

  // node_modules/lodash/without.js
  var require_without = __commonJS({
    "node_modules/lodash/without.js"(exports2, module2) {
      var baseDifference = require_baseDifference();
      var baseRest2 = require_baseRest();
      var isArrayLikeObject2 = require_isArrayLikeObject();
      var without = baseRest2(function(array, values5) {
        return isArrayLikeObject2(array) ? baseDifference(array, values5) : [];
      });
      module2.exports = without;
    }
  });

  // node_modules/json-schema-merge-allof/src/common.js
  var require_common = __commonJS({
    "node_modules/json-schema-merge-allof/src/common.js"(exports2, module2) {
      var flatten2 = require_flatten();
      var flattenDeep = require_flattenDeep();
      var isPlainObject2 = require_isPlainObject();
      var uniq = require_uniq();
      var uniqWith = require_uniqWith();
      var without = require_without();
      function deleteUndefinedProps(returnObject) {
        for (const prop in returnObject) {
          if (has2(returnObject, prop) && isEmptySchema(returnObject[prop])) {
            delete returnObject[prop];
          }
        }
        return returnObject;
      }
      var allUniqueKeys = (arr) => uniq(flattenDeep(arr.map(keys2)));
      var getValues = (schemas, key) => schemas.map((schema) => schema && schema[key]);
      var has2 = (obj, propName) => Object.prototype.hasOwnProperty.call(obj, propName);
      var keys2 = (obj) => {
        if (isPlainObject2(obj) || Array.isArray(obj)) {
          return Object.keys(obj);
        } else {
          return [];
        }
      };
      var notUndefined = (val) => val !== void 0;
      var isSchema = (val) => isPlainObject2(val) || val === true || val === false;
      var isEmptySchema = (obj) => !keys2(obj).length && obj !== false && obj !== true;
      var withoutArr = (arr, ...rest) => without.apply(null, [arr].concat(flatten2(rest)));
      module2.exports = {
        allUniqueKeys,
        deleteUndefinedProps,
        getValues,
        has: has2,
        isEmptySchema,
        isSchema,
        keys: keys2,
        notUndefined,
        uniqWith,
        withoutArr
      };
    }
  });

  // node_modules/json-schema-merge-allof/src/complex-resolvers/properties.js
  var require_properties = __commonJS({
    "node_modules/json-schema-merge-allof/src/complex-resolvers/properties.js"(exports2, module2) {
      var compare2 = require_src();
      var forEach = require_forEach();
      var {
        allUniqueKeys,
        deleteUndefinedProps,
        getValues,
        keys: keys2,
        notUndefined,
        uniqWith,
        withoutArr
      } = require_common();
      function removeFalseSchemas(target) {
        forEach(target, function(schema, prop) {
          if (schema === false) {
            delete target[prop];
          }
        });
      }
      function mergeSchemaGroup(group, mergeSchemas2) {
        const allKeys = allUniqueKeys(group);
        return allKeys.reduce(function(all, key) {
          const schemas = getValues(group, key);
          const compacted = uniqWith(schemas.filter(notUndefined), compare2);
          all[key] = mergeSchemas2(compacted, key);
          return all;
        }, {});
      }
      module2.exports = {
        keywords: ["properties", "patternProperties", "additionalProperties"],
        resolver(values5, parents, mergers, options) {
          if (!options.ignoreAdditionalProperties) {
            values5.forEach(function(subSchema) {
              const otherSubSchemas = values5.filter((s) => s !== subSchema);
              const ownKeys28 = keys2(subSchema.properties);
              const ownPatternKeys = keys2(subSchema.patternProperties);
              const ownPatterns = ownPatternKeys.map((k) => new RegExp(k));
              otherSubSchemas.forEach(function(other) {
                const allOtherKeys = keys2(other.properties);
                const keysMatchingPattern = allOtherKeys.filter((k) => ownPatterns.some((pk) => pk.test(k)));
                const additionalKeys = withoutArr(allOtherKeys, ownKeys28, keysMatchingPattern);
                additionalKeys.forEach(function(key) {
                  other.properties[key] = mergers.properties([
                    other.properties[key],
                    subSchema.additionalProperties
                  ], key);
                });
              });
            });
            values5.forEach(function(subSchema) {
              const otherSubSchemas = values5.filter((s) => s !== subSchema);
              const ownPatternKeys = keys2(subSchema.patternProperties);
              if (subSchema.additionalProperties === false) {
                otherSubSchemas.forEach(function(other) {
                  const allOtherPatterns = keys2(other.patternProperties);
                  const additionalPatternKeys = withoutArr(allOtherPatterns, ownPatternKeys);
                  additionalPatternKeys.forEach((key) => delete other.patternProperties[key]);
                });
              }
            });
          }
          const returnObject = {
            additionalProperties: mergers.additionalProperties(values5.map((s) => s.additionalProperties)),
            patternProperties: mergeSchemaGroup(values5.map((s) => s.patternProperties), mergers.patternProperties),
            properties: mergeSchemaGroup(values5.map((s) => s.properties), mergers.properties)
          };
          if (returnObject.additionalProperties === false) {
            removeFalseSchemas(returnObject.properties);
          }
          return deleteUndefinedProps(returnObject);
        }
      };
    }
  });

  // node_modules/json-schema-merge-allof/src/complex-resolvers/items.js
  var require_items = __commonJS({
    "node_modules/json-schema-merge-allof/src/complex-resolvers/items.js"(exports2, module2) {
      var compare2 = require_src();
      var forEach = require_forEach();
      var {
        allUniqueKeys,
        deleteUndefinedProps,
        has: has2,
        isSchema,
        notUndefined,
        uniqWith
      } = require_common();
      function removeFalseSchemasFromArray(target) {
        forEach(target, function(schema, index2) {
          if (schema === false) {
            target.splice(index2, 1);
          }
        });
      }
      function getItemSchemas(subSchemas, key) {
        return subSchemas.map(function(sub) {
          if (!sub) {
            return void 0;
          }
          if (Array.isArray(sub.items)) {
            const schemaAtPos = sub.items[key];
            if (isSchema(schemaAtPos)) {
              return schemaAtPos;
            } else if (has2(sub, "additionalItems")) {
              return sub.additionalItems;
            }
          } else {
            return sub.items;
          }
          return void 0;
        });
      }
      function getAdditionalSchemas(subSchemas) {
        return subSchemas.map(function(sub) {
          if (!sub) {
            return void 0;
          }
          if (Array.isArray(sub.items)) {
            return sub.additionalItems;
          }
          return sub.items;
        });
      }
      function mergeItems(group, mergeSchemas2, items) {
        const allKeys = allUniqueKeys(items);
        return allKeys.reduce(function(all, key) {
          const schemas = getItemSchemas(group, key);
          const compacted = uniqWith(schemas.filter(notUndefined), compare2);
          all[key] = mergeSchemas2(compacted, key);
          return all;
        }, []);
      }
      module2.exports = {
        keywords: ["items", "additionalItems"],
        resolver(values5, parents, mergers) {
          const items = values5.map((s) => s.items);
          const itemsCompacted = items.filter(notUndefined);
          const returnObject = {};
          if (itemsCompacted.every(isSchema)) {
            returnObject.items = mergers.items(items);
          } else {
            returnObject.items = mergeItems(values5, mergers.items, items);
          }
          let schemasAtLastPos;
          if (itemsCompacted.every(Array.isArray)) {
            schemasAtLastPos = values5.map((s) => s.additionalItems);
          } else if (itemsCompacted.some(Array.isArray)) {
            schemasAtLastPos = getAdditionalSchemas(values5);
          }
          if (schemasAtLastPos) {
            returnObject.additionalItems = mergers.additionalItems(schemasAtLastPos);
          }
          if (returnObject.additionalItems === false && Array.isArray(returnObject.items)) {
            removeFalseSchemasFromArray(returnObject.items);
          }
          return deleteUndefinedProps(returnObject);
        }
      };
    }
  });

  // node_modules/json-schema-merge-allof/src/index.js
  var require_src2 = __commonJS({
    "node_modules/json-schema-merge-allof/src/index.js"(exports2, module2) {
      var cloneDeep = require_cloneDeep();
      var compare2 = require_src();
      var computeLcm = require_lib9();
      var defaultsDeep = require_defaultsDeep();
      var flatten2 = require_flatten();
      var flattenDeep = require_flattenDeep();
      var intersection = require_intersection();
      var intersectionWith = require_intersectionWith();
      var isEqual = require_isEqual();
      var isPlainObject2 = require_isPlainObject();
      var pullAll = require_pullAll();
      var sortBy = require_sortBy();
      var uniq = require_uniq();
      var uniqWith = require_uniqWith();
      var propertiesResolver = require_properties();
      var itemsResolver = require_items();
      var contains2 = (arr, val) => arr.indexOf(val) !== -1;
      var isSchema = (val) => isPlainObject2(val) || val === true || val === false;
      var isFalse = (val) => val === false;
      var isTrue = (val) => val === true;
      var schemaResolver = (compacted, key, mergeSchemas2) => mergeSchemas2(compacted);
      var stringArray = (values5) => sortBy(uniq(flattenDeep(values5)));
      var notUndefined = (val) => val !== void 0;
      var allUniqueKeys = (arr) => uniq(flattenDeep(arr.map(keys2)));
      var first = (compacted) => compacted[0];
      var required = (compacted) => stringArray(compacted);
      var maximumValue = (compacted) => Math.max.apply(Math, compacted);
      var minimumValue = (compacted) => Math.min.apply(Math, compacted);
      var uniqueItems = (compacted) => compacted.some(isTrue);
      var examples = (compacted) => uniqWith(flatten2(compacted), isEqual);
      function compareProp(key) {
        return function(a, b) {
          return compare2({
            [key]: a
          }, { [key]: b });
        };
      }
      function getAllOf(schema) {
        let { allOf = [], ...copy } = schema;
        copy = isPlainObject2(schema) ? copy : schema;
        return [copy, ...allOf.map(getAllOf)];
      }
      function getValues(schemas, key) {
        return schemas.map((schema) => schema && schema[key]);
      }
      function tryMergeSchemaGroups(schemaGroups, mergeSchemas2) {
        return schemaGroups.map(function(schemas, index2) {
          try {
            return mergeSchemas2(schemas, index2);
          } catch (e) {
            return void 0;
          }
        }).filter(notUndefined);
      }
      function keys2(obj) {
        if (isPlainObject2(obj) || Array.isArray(obj)) {
          return Object.keys(obj);
        } else {
          return [];
        }
      }
      function getAnyOfCombinations(arrOfArrays, combinations) {
        combinations = combinations || [];
        if (!arrOfArrays.length) {
          return combinations;
        }
        const values5 = arrOfArrays.slice(0).shift();
        const rest = arrOfArrays.slice(1);
        if (combinations.length) {
          return getAnyOfCombinations(rest, flatten2(combinations.map((combination) => values5.map((item) => [item].concat(combination)))));
        }
        return getAnyOfCombinations(rest, values5.map((item) => item));
      }
      function throwIncompatible(values5, paths) {
        let asJSON;
        try {
          asJSON = values5.map(function(val) {
            return JSON.stringify(val, null, 2);
          }).join("\n");
        } catch (variable) {
          asJSON = values5.join(", ");
        }
        throw new Error('Could not resolve values for path:"' + paths.join(".") + '". They are probably incompatible. Values: \n' + asJSON);
      }
      function callGroupResolver(complexKeywords, resolverName, schemas, mergeSchemas2, options, parents) {
        if (complexKeywords.length) {
          const resolverConfig = options.complexResolvers[resolverName];
          if (!resolverConfig || !resolverConfig.resolver) {
            throw new Error("No resolver found for " + resolverName);
          }
          const extractedKeywordsOnly = schemas.map((schema) => complexKeywords.reduce((all, key) => {
            if (schema[key] !== void 0)
              all[key] = schema[key];
            return all;
          }, {}));
          const unique = uniqWith(extractedKeywordsOnly, compare2);
          const mergers = resolverConfig.keywords.reduce((all, key) => ({
            ...all,
            [key]: (schemas2, extraKey = []) => mergeSchemas2(schemas2, null, parents.concat(key, extraKey))
          }), {});
          const result = resolverConfig.resolver(unique, parents.concat(resolverName), mergers, options);
          if (!isPlainObject2(result)) {
            throwIncompatible(unique, parents.concat(resolverName));
          }
          return result;
        }
      }
      function createRequiredMetaArray(arr) {
        return { required: arr };
      }
      var schemaGroupProps = ["properties", "patternProperties", "definitions", "dependencies"];
      var schemaArrays = ["anyOf", "oneOf"];
      var schemaProps = [
        "additionalProperties",
        "additionalItems",
        "contains",
        "propertyNames",
        "not",
        "items"
      ];
      var defaultResolvers = {
        type(compacted) {
          if (compacted.some(Array.isArray)) {
            const normalized = compacted.map(function(val) {
              return Array.isArray(val) ? val : [val];
            });
            const common = intersection.apply(null, normalized);
            if (common.length === 1) {
              return common[0];
            } else if (common.length > 1) {
              return uniq(common);
            }
          }
        },
        dependencies(compacted, paths, mergeSchemas2) {
          const allChildren = allUniqueKeys(compacted);
          return allChildren.reduce(function(all, childKey) {
            const childSchemas = getValues(compacted, childKey);
            let innerCompacted = uniqWith(childSchemas.filter(notUndefined), isEqual);
            const innerArrays = innerCompacted.filter(Array.isArray);
            if (innerArrays.length) {
              if (innerArrays.length === innerCompacted.length) {
                all[childKey] = stringArray(innerCompacted);
              } else {
                const innerSchemas = innerCompacted.filter(isSchema);
                const arrayMetaScheams = innerArrays.map(createRequiredMetaArray);
                all[childKey] = mergeSchemas2(innerSchemas.concat(arrayMetaScheams), childKey);
              }
              return all;
            }
            innerCompacted = uniqWith(innerCompacted, compare2);
            all[childKey] = mergeSchemas2(innerCompacted, childKey);
            return all;
          }, {});
        },
        oneOf(compacted, paths, mergeSchemas2) {
          const combinations = getAnyOfCombinations(cloneDeep(compacted));
          const result = tryMergeSchemaGroups(combinations, mergeSchemas2);
          const unique = uniqWith(result, compare2);
          if (unique.length) {
            return unique;
          }
        },
        not(compacted) {
          return { anyOf: compacted };
        },
        pattern(compacted) {
          return compacted.map((r) => "(?=" + r + ")").join("");
        },
        multipleOf(compacted) {
          let integers = compacted.slice(0);
          let factor = 1;
          while (integers.some((n) => !Number.isInteger(n))) {
            integers = integers.map((n) => n * 10);
            factor = factor * 10;
          }
          return computeLcm(integers) / factor;
        },
        enum(compacted) {
          const enums = intersectionWith.apply(null, compacted.concat(isEqual));
          if (enums.length) {
            return sortBy(enums);
          }
        }
      };
      defaultResolvers.$id = first;
      defaultResolvers.$ref = first;
      defaultResolvers.$schema = first;
      defaultResolvers.additionalItems = schemaResolver;
      defaultResolvers.additionalProperties = schemaResolver;
      defaultResolvers.anyOf = defaultResolvers.oneOf;
      defaultResolvers.contains = schemaResolver;
      defaultResolvers.default = first;
      defaultResolvers.definitions = defaultResolvers.dependencies;
      defaultResolvers.description = first;
      defaultResolvers.examples = examples;
      defaultResolvers.exclusiveMaximum = minimumValue;
      defaultResolvers.exclusiveMinimum = maximumValue;
      defaultResolvers.items = itemsResolver;
      defaultResolvers.maximum = minimumValue;
      defaultResolvers.maxItems = minimumValue;
      defaultResolvers.maxLength = minimumValue;
      defaultResolvers.maxProperties = minimumValue;
      defaultResolvers.minimum = maximumValue;
      defaultResolvers.minItems = maximumValue;
      defaultResolvers.minLength = maximumValue;
      defaultResolvers.minProperties = maximumValue;
      defaultResolvers.properties = propertiesResolver;
      defaultResolvers.propertyNames = schemaResolver;
      defaultResolvers.required = required;
      defaultResolvers.title = first;
      defaultResolvers.uniqueItems = uniqueItems;
      var defaultComplexResolvers = {
        properties: propertiesResolver,
        items: itemsResolver
      };
      function merger(rootSchema, options, totalSchemas) {
        totalSchemas = totalSchemas || [];
        options = defaultsDeep(options, {
          ignoreAdditionalProperties: false,
          resolvers: defaultResolvers,
          complexResolvers: defaultComplexResolvers,
          deep: true
        });
        const complexResolvers = Object.entries(options.complexResolvers);
        function mergeSchemas2(schemas, base, parents) {
          schemas = cloneDeep(schemas.filter(notUndefined));
          parents = parents || [];
          const merged2 = isPlainObject2(base) ? base : {};
          if (!schemas.length) {
            return;
          }
          if (schemas.some(isFalse)) {
            return false;
          }
          if (schemas.every(isTrue)) {
            return true;
          }
          schemas = schemas.filter(isPlainObject2);
          const allKeys = allUniqueKeys(schemas);
          if (options.deep && contains2(allKeys, "allOf")) {
            return merger({
              allOf: schemas
            }, options, totalSchemas);
          }
          const complexKeysArr = complexResolvers.map(([mainKeyWord, resolverConf]) => allKeys.filter((k) => resolverConf.keywords.includes(k)));
          complexKeysArr.forEach((keys3) => pullAll(allKeys, keys3));
          allKeys.forEach(function(key) {
            const values5 = getValues(schemas, key);
            const compacted = uniqWith(values5.filter(notUndefined), compareProp(key));
            if (compacted.length === 1 && contains2(schemaArrays, key)) {
              merged2[key] = compacted[0].map((schema) => mergeSchemas2([schema], schema));
            } else if (compacted.length === 1 && !contains2(schemaGroupProps, key) && !contains2(schemaProps, key)) {
              merged2[key] = compacted[0];
            } else {
              const resolver = options.resolvers[key] || options.resolvers.defaultResolver;
              if (!resolver)
                throw new Error("No resolver found for key " + key + ". You can provide a resolver for this keyword in the options, or provide a default resolver.");
              const merger2 = (schemas2, extraKey = []) => mergeSchemas2(schemas2, null, parents.concat(key, extraKey));
              merged2[key] = resolver(compacted, parents.concat(key), merger2, options);
              if (merged2[key] === void 0) {
                throwIncompatible(compacted, parents.concat(key));
              } else if (merged2[key] === void 0) {
                delete merged2[key];
              }
            }
          });
          return complexResolvers.reduce((all, [resolverKeyword, config], index2) => ({
            ...all,
            ...callGroupResolver(complexKeysArr[index2], resolverKeyword, schemas, mergeSchemas2, options, parents)
          }), merged2);
        }
        const allSchemas = flattenDeep(getAllOf(rootSchema));
        const merged = mergeSchemas2(allSchemas);
        return merged;
      }
      merger.options = {
        resolvers: defaultResolvers
      };
      module2.exports = merger;
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType3(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object2) {
            if (typeof object2 === "object" && object2 !== null) {
              var $$typeof = object2.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object2.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE:
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment9 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense2 = REACT_SUSPENSE_TYPE;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object2) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object2) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object2) {
            return typeOf(object2) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object2) {
            return typeOf(object2) === REACT_PROVIDER_TYPE;
          }
          function isElement(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object2) {
            return typeOf(object2) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment2(object2) {
            return typeOf(object2) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object2) {
            return typeOf(object2) === REACT_LAZY_TYPE;
          }
          function isMemo(object2) {
            return typeOf(object2) === REACT_MEMO_TYPE;
          }
          function isPortal(object2) {
            return typeOf(object2) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object2) {
            return typeOf(object2) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object2) {
            return typeOf(object2) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object2) {
            return typeOf(object2) === REACT_SUSPENSE_TYPE;
          }
          function isSuspenseList(object2) {
            return typeOf(object2) === REACT_SUSPENSE_LIST_TYPE;
          }
          exports2.ContextConsumer = ContextConsumer;
          exports2.ContextProvider = ContextProvider;
          exports2.Element = Element;
          exports2.ForwardRef = ForwardRef;
          exports2.Fragment = Fragment9;
          exports2.Lazy = Lazy;
          exports2.Memo = Memo;
          exports2.Portal = Portal;
          exports2.Profiler = Profiler;
          exports2.StrictMode = StrictMode;
          exports2.Suspense = Suspense2;
          exports2.SuspenseList = SuspenseList;
          exports2.isAsyncMode = isAsyncMode;
          exports2.isConcurrentMode = isConcurrentMode;
          exports2.isContextConsumer = isContextConsumer;
          exports2.isContextProvider = isContextProvider;
          exports2.isElement = isElement;
          exports2.isForwardRef = isForwardRef;
          exports2.isFragment = isFragment2;
          exports2.isLazy = isLazy;
          exports2.isMemo = isMemo;
          exports2.isPortal = isPortal;
          exports2.isProfiler = isProfiler;
          exports2.isStrictMode = isStrictMode;
          exports2.isSuspense = isSuspense;
          exports2.isSuspenseList = isSuspenseList;
          exports2.isValidElementType = isValidElementType3;
          exports2.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is3 = __commonJS({
    "node_modules/react-is/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development3();
      }
    }
  });

  // node_modules/uri-js/dist/es5/uri.all.js
  var require_uri_all = __commonJS({
    "node_modules/uri-js/dist/es5/uri.all.js"(exports2, module2) {
      (function(global2, factory) {
        typeof exports2 === "object" && typeof module2 !== "undefined" ? factory(exports2) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.URI = global2.URI || {});
      })(exports2, function(exports3) {
        "use strict";
        function merge() {
          for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
            sets[_key] = arguments[_key];
          }
          if (sets.length > 1) {
            sets[0] = sets[0].slice(0, -1);
            var xl = sets.length - 1;
            for (var x = 1; x < xl; ++x) {
              sets[x] = sets[x].slice(1, -1);
            }
            sets[xl] = sets[xl].slice(1);
            return sets.join("");
          } else {
            return sets[0];
          }
        }
        function subexp(str) {
          return "(?:" + str + ")";
        }
        function typeOf(o) {
          return o === void 0 ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
        }
        function toUpperCase(str) {
          return str.toUpperCase();
        }
        function toArray3(obj) {
          return obj !== void 0 && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
        }
        function assign2(target, source2) {
          var obj = target;
          if (source2) {
            for (var key in source2) {
              obj[key] = source2[key];
            }
          }
          return obj;
        }
        function buildExps(isIRI2) {
          var ALPHA$$ = "[A-Za-z]", CR$ = "[\\x0D]", DIGIT$$ = "[0-9]", DQUOTE$$ = "[\\x22]", HEXDIG$$2 = merge(DIGIT$$, "[A-Fa-f]"), LF$$ = "[\\x0A]", SP$$ = "[\\x20]", PCT_ENCODED$2 = subexp(subexp("%[EFef]" + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2) + "|" + subexp("%" + HEXDIG$$2 + HEXDIG$$2)), GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]", SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]", RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$), UCSCHAR$$ = isIRI2 ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]", IPRIVATE$$ = isIRI2 ? "[\\uE000-\\uF8FF]" : "[]", UNRESERVED$$2 = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$), SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"), USERINFO$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:]")) + "*"), DEC_OCTET$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("[1-9]" + DIGIT$$) + "|" + DIGIT$$), DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$), IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$), H16$ = subexp(HEXDIG$$2 + "{1,4}"), LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$), IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$), IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$), IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$), IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$), IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$), IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$), IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$), IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$), IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"), IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")), ZONEID$ = subexp(subexp(UNRESERVED$$2 + "|" + PCT_ENCODED$2) + "+"), IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + "\\%25" + ZONEID$), IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp("\\%25|\\%(?!" + HEXDIG$$2 + "{2})") + ZONEID$), IPVFUTURE$ = subexp("[vV]" + HEXDIG$$2 + "+\\." + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:]") + "+"), IP_LITERAL$ = subexp("\\[" + subexp(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"), REG_NAME$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$)) + "*"), HOST$ = subexp(IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")|" + REG_NAME$), PORT$ = subexp(DIGIT$$ + "*"), AUTHORITY$ = subexp(subexp(USERINFO$ + "@") + "?" + HOST$ + subexp("\\:" + PORT$) + "?"), PCHAR$ = subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@]")), SEGMENT$ = subexp(PCHAR$ + "*"), SEGMENT_NZ$ = subexp(PCHAR$ + "+"), SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\@]")) + "+"), PATH_ABEMPTY$ = subexp(subexp("\\/" + SEGMENT$) + "*"), PATH_ABSOLUTE$ = subexp("\\/" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"), PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$), PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$), PATH_EMPTY$ = "(?!" + PCHAR$ + ")", PATH$ = subexp(PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$), QUERY$ = subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*"), FRAGMENT$ = subexp(subexp(PCHAR$ + "|[\\/\\?]") + "*"), HIER_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$), URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"), RELATIVE_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$), RELATIVE$ = subexp(RELATIVE_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"), URI_REFERENCE$ = subexp(URI$ + "|" + RELATIVE$), ABSOLUTE_URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?"), GENERIC_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", RELATIVE_REF$ = "^(){0}" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", ABSOLUTE_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?$", SAMEDOC_REF$ = "^" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", AUTHORITY_REF$ = "^" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?$";
          return {
            NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
            NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
            NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
            NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
            NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
            NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
            NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
            ESCAPE: new RegExp(merge("[^]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
            UNRESERVED: new RegExp(UNRESERVED$$2, "g"),
            OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$2, RESERVED$$), "g"),
            PCT_ENCODED: new RegExp(PCT_ENCODED$2, "g"),
            IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
            IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$2 + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$")
          };
        }
        var URI_PROTOCOL = buildExps(false);
        var IRI_PROTOCOL = buildExps(true);
        var slicedToArray = function() {
          function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i)
                  break;
              }
            } catch (err2) {
              _d = true;
              _e = err2;
            } finally {
              try {
                if (!_n && _i["return"])
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          return function(arr, i) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i);
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
          };
        }();
        var toConsumableArray = function(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++)
              arr2[i] = arr[i];
            return arr2;
          } else {
            return Array.from(arr);
          }
        };
        var maxInt = 2147483647;
        var base = 36;
        var tMin = 1;
        var tMax = 26;
        var skew = 38;
        var damp = 700;
        var initialBias = 72;
        var initialN = 128;
        var delimiter = "-";
        var regexPunycode = /^xn--/;
        var regexNonASCII = /[^\0-\x7E]/;
        var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
        var errors = {
          "overflow": "Overflow: input needs wider integers to process",
          "not-basic": "Illegal input >= 0x80 (not a basic code point)",
          "invalid-input": "Invalid input"
        };
        var baseMinusTMin = base - tMin;
        var floor = Math.floor;
        var stringFromCharCode = String.fromCharCode;
        function error$1(type) {
          throw new RangeError(errors[type]);
        }
        function map(array, fn) {
          var result = [];
          var length = array.length;
          while (length--) {
            result[length] = fn(array[length]);
          }
          return result;
        }
        function mapDomain(string2, fn) {
          var parts = string2.split("@");
          var result = "";
          if (parts.length > 1) {
            result = parts[0] + "@";
            string2 = parts[1];
          }
          string2 = string2.replace(regexSeparators, ".");
          var labels = string2.split(".");
          var encoded = map(labels, fn).join(".");
          return result + encoded;
        }
        function ucs2decode(string2) {
          var output = [];
          var counter2 = 0;
          var length = string2.length;
          while (counter2 < length) {
            var value = string2.charCodeAt(counter2++);
            if (value >= 55296 && value <= 56319 && counter2 < length) {
              var extra = string2.charCodeAt(counter2++);
              if ((extra & 64512) == 56320) {
                output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
              } else {
                output.push(value);
                counter2--;
              }
            } else {
              output.push(value);
            }
          }
          return output;
        }
        var ucs2encode = function ucs2encode2(array) {
          return String.fromCodePoint.apply(String, toConsumableArray(array));
        };
        var basicToDigit = function basicToDigit2(codePoint) {
          if (codePoint - 48 < 10) {
            return codePoint - 22;
          }
          if (codePoint - 65 < 26) {
            return codePoint - 65;
          }
          if (codePoint - 97 < 26) {
            return codePoint - 97;
          }
          return base;
        };
        var digitToBasic = function digitToBasic2(digit, flag) {
          return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
        };
        var adapt = function adapt2(delta, numPoints, firstTime) {
          var k = 0;
          delta = firstTime ? floor(delta / damp) : delta >> 1;
          delta += floor(delta / numPoints);
          for (; delta > baseMinusTMin * tMax >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
          }
          return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
        };
        var decode = function decode2(input) {
          var output = [];
          var inputLength = input.length;
          var i = 0;
          var n = initialN;
          var bias = initialBias;
          var basic = input.lastIndexOf(delimiter);
          if (basic < 0) {
            basic = 0;
          }
          for (var j = 0; j < basic; ++j) {
            if (input.charCodeAt(j) >= 128) {
              error$1("not-basic");
            }
            output.push(input.charCodeAt(j));
          }
          for (var index2 = basic > 0 ? basic + 1 : 0; index2 < inputLength; ) {
            var oldi = i;
            for (var w2 = 1, k = base; ; k += base) {
              if (index2 >= inputLength) {
                error$1("invalid-input");
              }
              var digit = basicToDigit(input.charCodeAt(index2++));
              if (digit >= base || digit > floor((maxInt - i) / w2)) {
                error$1("overflow");
              }
              i += digit * w2;
              var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
              if (digit < t) {
                break;
              }
              var baseMinusT = base - t;
              if (w2 > floor(maxInt / baseMinusT)) {
                error$1("overflow");
              }
              w2 *= baseMinusT;
            }
            var out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            if (floor(i / out) > maxInt - n) {
              error$1("overflow");
            }
            n += floor(i / out);
            i %= out;
            output.splice(i++, 0, n);
          }
          return String.fromCodePoint.apply(String, output);
        };
        var encode = function encode2(input) {
          var output = [];
          input = ucs2decode(input);
          var inputLength = input.length;
          var n = initialN;
          var delta = 0;
          var bias = initialBias;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _currentValue2 = _step.value;
              if (_currentValue2 < 128) {
                output.push(stringFromCharCode(_currentValue2));
              }
            }
          } catch (err2) {
            _didIteratorError = true;
            _iteratorError = err2;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          var basicLength = output.length;
          var handledCPCount = basicLength;
          if (basicLength) {
            output.push(delimiter);
          }
          while (handledCPCount < inputLength) {
            var m2 = maxInt;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = void 0;
            try {
              for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var currentValue = _step2.value;
                if (currentValue >= n && currentValue < m2) {
                  m2 = currentValue;
                }
              }
            } catch (err2) {
              _didIteratorError2 = true;
              _iteratorError2 = err2;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
            var handledCPCountPlusOne = handledCPCount + 1;
            if (m2 - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
              error$1("overflow");
            }
            delta += (m2 - n) * handledCPCountPlusOne;
            n = m2;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = void 0;
            try {
              for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _currentValue = _step3.value;
                if (_currentValue < n && ++delta > maxInt) {
                  error$1("overflow");
                }
                if (_currentValue == n) {
                  var q = delta;
                  for (var k = base; ; k += base) {
                    var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                    if (q < t) {
                      break;
                    }
                    var qMinusT = q - t;
                    var baseMinusT = base - t;
                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                    q = floor(qMinusT / baseMinusT);
                  }
                  output.push(stringFromCharCode(digitToBasic(q, 0)));
                  bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                  delta = 0;
                  ++handledCPCount;
                }
              }
            } catch (err2) {
              _didIteratorError3 = true;
              _iteratorError3 = err2;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }
            ++delta;
            ++n;
          }
          return output.join("");
        };
        var toUnicode = function toUnicode2(input) {
          return mapDomain(input, function(string2) {
            return regexPunycode.test(string2) ? decode(string2.slice(4).toLowerCase()) : string2;
          });
        };
        var toASCII = function toASCII2(input) {
          return mapDomain(input, function(string2) {
            return regexNonASCII.test(string2) ? "xn--" + encode(string2) : string2;
          });
        };
        var punycode = {
          "version": "2.1.0",
          "ucs2": {
            "decode": ucs2decode,
            "encode": ucs2encode
          },
          "decode": decode,
          "encode": encode,
          "toASCII": toASCII,
          "toUnicode": toUnicode
        };
        var SCHEMES = {};
        function pctEncChar(chr) {
          var c = chr.charCodeAt(0);
          var e = void 0;
          if (c < 16)
            e = "%0" + c.toString(16).toUpperCase();
          else if (c < 128)
            e = "%" + c.toString(16).toUpperCase();
          else if (c < 2048)
            e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
          else
            e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
          return e;
        }
        function pctDecChars(str) {
          var newStr = "";
          var i = 0;
          var il = str.length;
          while (i < il) {
            var c = parseInt(str.substr(i + 1, 2), 16);
            if (c < 128) {
              newStr += String.fromCharCode(c);
              i += 3;
            } else if (c >= 194 && c < 224) {
              if (il - i >= 6) {
                var c2 = parseInt(str.substr(i + 4, 2), 16);
                newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
              } else {
                newStr += str.substr(i, 6);
              }
              i += 6;
            } else if (c >= 224) {
              if (il - i >= 9) {
                var _c = parseInt(str.substr(i + 4, 2), 16);
                var c3 = parseInt(str.substr(i + 7, 2), 16);
                newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
              } else {
                newStr += str.substr(i, 9);
              }
              i += 9;
            } else {
              newStr += str.substr(i, 3);
              i += 3;
            }
          }
          return newStr;
        }
        function _normalizeComponentEncoding(components, protocol) {
          function decodeUnreserved2(str) {
            var decStr = pctDecChars(str);
            return !decStr.match(protocol.UNRESERVED) ? str : decStr;
          }
          if (components.scheme)
            components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_SCHEME, "");
          if (components.userinfo !== void 0)
            components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          if (components.host !== void 0)
            components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          if (components.path !== void 0)
            components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          if (components.query !== void 0)
            components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          if (components.fragment !== void 0)
            components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          return components;
        }
        function _stripLeadingZeros(str) {
          return str.replace(/^0*(.*)/, "$1") || "0";
        }
        function _normalizeIPv4(host, protocol) {
          var matches = host.match(protocol.IPV4ADDRESS) || [];
          var _matches = slicedToArray(matches, 2), address = _matches[1];
          if (address) {
            return address.split(".").map(_stripLeadingZeros).join(".");
          } else {
            return host;
          }
        }
        function _normalizeIPv6(host, protocol) {
          var matches = host.match(protocol.IPV6ADDRESS) || [];
          var _matches2 = slicedToArray(matches, 3), address = _matches2[1], zone = _matches2[2];
          if (address) {
            var _address$toLowerCase$ = address.toLowerCase().split("::").reverse(), _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2), last2 = _address$toLowerCase$2[0], first = _address$toLowerCase$2[1];
            var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
            var lastFields = last2.split(":").map(_stripLeadingZeros);
            var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
            var fieldCount = isLastFieldIPv4Address ? 7 : 8;
            var lastFieldsStart = lastFields.length - fieldCount;
            var fields2 = Array(fieldCount);
            for (var x = 0; x < fieldCount; ++x) {
              fields2[x] = firstFields[x] || lastFields[lastFieldsStart + x] || "";
            }
            if (isLastFieldIPv4Address) {
              fields2[fieldCount - 1] = _normalizeIPv4(fields2[fieldCount - 1], protocol);
            }
            var allZeroFields = fields2.reduce(function(acc, field, index2) {
              if (!field || field === "0") {
                var lastLongest = acc[acc.length - 1];
                if (lastLongest && lastLongest.index + lastLongest.length === index2) {
                  lastLongest.length++;
                } else {
                  acc.push({ index: index2, length: 1 });
                }
              }
              return acc;
            }, []);
            var longestZeroFields = allZeroFields.sort(function(a, b) {
              return b.length - a.length;
            })[0];
            var newHost = void 0;
            if (longestZeroFields && longestZeroFields.length > 1) {
              var newFirst = fields2.slice(0, longestZeroFields.index);
              var newLast = fields2.slice(longestZeroFields.index + longestZeroFields.length);
              newHost = newFirst.join(":") + "::" + newLast.join(":");
            } else {
              newHost = fields2.join(":");
            }
            if (zone) {
              newHost += "%" + zone;
            }
            return newHost;
          } else {
            return host;
          }
        }
        var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
        var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === void 0;
        function parse(uriString) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var components = {};
          var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
          if (options.reference === "suffix")
            uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
          var matches = uriString.match(URI_PARSE);
          if (matches) {
            if (NO_MATCH_IS_UNDEFINED) {
              components.scheme = matches[1];
              components.userinfo = matches[3];
              components.host = matches[4];
              components.port = parseInt(matches[5], 10);
              components.path = matches[6] || "";
              components.query = matches[7];
              components.fragment = matches[8];
              if (isNaN(components.port)) {
                components.port = matches[5];
              }
            } else {
              components.scheme = matches[1] || void 0;
              components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : void 0;
              components.host = uriString.indexOf("//") !== -1 ? matches[4] : void 0;
              components.port = parseInt(matches[5], 10);
              components.path = matches[6] || "";
              components.query = uriString.indexOf("?") !== -1 ? matches[7] : void 0;
              components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : void 0;
              if (isNaN(components.port)) {
                components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : void 0;
              }
            }
            if (components.host) {
              components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
            }
            if (components.scheme === void 0 && components.userinfo === void 0 && components.host === void 0 && components.port === void 0 && !components.path && components.query === void 0) {
              components.reference = "same-document";
            } else if (components.scheme === void 0) {
              components.reference = "relative";
            } else if (components.fragment === void 0) {
              components.reference = "absolute";
            } else {
              components.reference = "uri";
            }
            if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
              components.error = components.error || "URI is not a " + options.reference + " reference.";
            }
            var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
            if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
              if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
                try {
                  components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
                } catch (e) {
                  components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
                }
              }
              _normalizeComponentEncoding(components, URI_PROTOCOL);
            } else {
              _normalizeComponentEncoding(components, protocol);
            }
            if (schemeHandler && schemeHandler.parse) {
              schemeHandler.parse(components, options);
            }
          } else {
            components.error = components.error || "URI can not be parsed.";
          }
          return components;
        }
        function _recomposeAuthority(components, options) {
          var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
          var uriTokens = [];
          if (components.userinfo !== void 0) {
            uriTokens.push(components.userinfo);
            uriTokens.push("@");
          }
          if (components.host !== void 0) {
            uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function(_, $1, $2) {
              return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
            }));
          }
          if (typeof components.port === "number" || typeof components.port === "string") {
            uriTokens.push(":");
            uriTokens.push(String(components.port));
          }
          return uriTokens.length ? uriTokens.join("") : void 0;
        }
        var RDS1 = /^\.\.?\//;
        var RDS2 = /^\/\.(\/|$)/;
        var RDS3 = /^\/\.\.(\/|$)/;
        var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
        function removeDotSegments(input) {
          var output = [];
          while (input.length) {
            if (input.match(RDS1)) {
              input = input.replace(RDS1, "");
            } else if (input.match(RDS2)) {
              input = input.replace(RDS2, "/");
            } else if (input.match(RDS3)) {
              input = input.replace(RDS3, "/");
              output.pop();
            } else if (input === "." || input === "..") {
              input = "";
            } else {
              var im = input.match(RDS5);
              if (im) {
                var s = im[0];
                input = input.slice(s.length);
                output.push(s);
              } else {
                throw new Error("Unexpected dot segment condition");
              }
            }
          }
          return output.join("");
        }
        function serialize(components) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
          var uriTokens = [];
          var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
          if (schemeHandler && schemeHandler.serialize)
            schemeHandler.serialize(components, options);
          if (components.host) {
            if (protocol.IPV6ADDRESS.test(components.host)) {
            } else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
              try {
                components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
              } catch (e) {
                components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
              }
            }
          }
          _normalizeComponentEncoding(components, protocol);
          if (options.reference !== "suffix" && components.scheme) {
            uriTokens.push(components.scheme);
            uriTokens.push(":");
          }
          var authority = _recomposeAuthority(components, options);
          if (authority !== void 0) {
            if (options.reference !== "suffix") {
              uriTokens.push("//");
            }
            uriTokens.push(authority);
            if (components.path && components.path.charAt(0) !== "/") {
              uriTokens.push("/");
            }
          }
          if (components.path !== void 0) {
            var s = components.path;
            if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
              s = removeDotSegments(s);
            }
            if (authority === void 0) {
              s = s.replace(/^\/\//, "/%2F");
            }
            uriTokens.push(s);
          }
          if (components.query !== void 0) {
            uriTokens.push("?");
            uriTokens.push(components.query);
          }
          if (components.fragment !== void 0) {
            uriTokens.push("#");
            uriTokens.push(components.fragment);
          }
          return uriTokens.join("");
        }
        function resolveComponents(base2, relative) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var skipNormalization = arguments[3];
          var target = {};
          if (!skipNormalization) {
            base2 = parse(serialize(base2, options), options);
            relative = parse(serialize(relative, options), options);
          }
          options = options || {};
          if (!options.tolerant && relative.scheme) {
            target.scheme = relative.scheme;
            target.userinfo = relative.userinfo;
            target.host = relative.host;
            target.port = relative.port;
            target.path = removeDotSegments(relative.path || "");
            target.query = relative.query;
          } else {
            if (relative.userinfo !== void 0 || relative.host !== void 0 || relative.port !== void 0) {
              target.userinfo = relative.userinfo;
              target.host = relative.host;
              target.port = relative.port;
              target.path = removeDotSegments(relative.path || "");
              target.query = relative.query;
            } else {
              if (!relative.path) {
                target.path = base2.path;
                if (relative.query !== void 0) {
                  target.query = relative.query;
                } else {
                  target.query = base2.query;
                }
              } else {
                if (relative.path.charAt(0) === "/") {
                  target.path = removeDotSegments(relative.path);
                } else {
                  if ((base2.userinfo !== void 0 || base2.host !== void 0 || base2.port !== void 0) && !base2.path) {
                    target.path = "/" + relative.path;
                  } else if (!base2.path) {
                    target.path = relative.path;
                  } else {
                    target.path = base2.path.slice(0, base2.path.lastIndexOf("/") + 1) + relative.path;
                  }
                  target.path = removeDotSegments(target.path);
                }
                target.query = relative.query;
              }
              target.userinfo = base2.userinfo;
              target.host = base2.host;
              target.port = base2.port;
            }
            target.scheme = base2.scheme;
          }
          target.fragment = relative.fragment;
          return target;
        }
        function resolve(baseURI, relativeURI, options) {
          var schemelessOptions = assign2({ scheme: "null" }, options);
          return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
        }
        function normalize(uri, options) {
          if (typeof uri === "string") {
            uri = serialize(parse(uri, options), options);
          } else if (typeOf(uri) === "object") {
            uri = parse(serialize(uri, options), options);
          }
          return uri;
        }
        function equal(uriA, uriB, options) {
          if (typeof uriA === "string") {
            uriA = serialize(parse(uriA, options), options);
          } else if (typeOf(uriA) === "object") {
            uriA = serialize(uriA, options);
          }
          if (typeof uriB === "string") {
            uriB = serialize(parse(uriB, options), options);
          } else if (typeOf(uriB) === "object") {
            uriB = serialize(uriB, options);
          }
          return uriA === uriB;
        }
        function escapeComponent(str, options) {
          return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
        }
        function unescapeComponent(str, options) {
          return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
        }
        var handler = {
          scheme: "http",
          domainHost: true,
          parse: function parse2(components, options) {
            if (!components.host) {
              components.error = components.error || "HTTP URIs must have a host.";
            }
            return components;
          },
          serialize: function serialize2(components, options) {
            var secure = String(components.scheme).toLowerCase() === "https";
            if (components.port === (secure ? 443 : 80) || components.port === "") {
              components.port = void 0;
            }
            if (!components.path) {
              components.path = "/";
            }
            return components;
          }
        };
        var handler$1 = {
          scheme: "https",
          domainHost: handler.domainHost,
          parse: handler.parse,
          serialize: handler.serialize
        };
        function isSecure(wsComponents) {
          return typeof wsComponents.secure === "boolean" ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
        }
        var handler$2 = {
          scheme: "ws",
          domainHost: true,
          parse: function parse2(components, options) {
            var wsComponents = components;
            wsComponents.secure = isSecure(wsComponents);
            wsComponents.resourceName = (wsComponents.path || "/") + (wsComponents.query ? "?" + wsComponents.query : "");
            wsComponents.path = void 0;
            wsComponents.query = void 0;
            return wsComponents;
          },
          serialize: function serialize2(wsComponents, options) {
            if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
              wsComponents.port = void 0;
            }
            if (typeof wsComponents.secure === "boolean") {
              wsComponents.scheme = wsComponents.secure ? "wss" : "ws";
              wsComponents.secure = void 0;
            }
            if (wsComponents.resourceName) {
              var _wsComponents$resourc = wsComponents.resourceName.split("?"), _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2), path = _wsComponents$resourc2[0], query = _wsComponents$resourc2[1];
              wsComponents.path = path && path !== "/" ? path : void 0;
              wsComponents.query = query;
              wsComponents.resourceName = void 0;
            }
            wsComponents.fragment = void 0;
            return wsComponents;
          }
        };
        var handler$3 = {
          scheme: "wss",
          domainHost: handler$2.domainHost,
          parse: handler$2.parse,
          serialize: handler$2.serialize
        };
        var O = {};
        var isIRI = true;
        var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + (isIRI ? "\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" : "") + "]";
        var HEXDIG$$ = "[0-9A-Fa-f]";
        var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$));
        var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
        var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
        var VCHAR$$ = merge(QTEXT$$, '[\\"\\\\]');
        var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
        var UNRESERVED = new RegExp(UNRESERVED$$, "g");
        var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
        var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
        var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
        var NOT_HFVALUE = NOT_HFNAME;
        function decodeUnreserved(str) {
          var decStr = pctDecChars(str);
          return !decStr.match(UNRESERVED) ? str : decStr;
        }
        var handler$4 = {
          scheme: "mailto",
          parse: function parse$$1(components, options) {
            var mailtoComponents = components;
            var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
            mailtoComponents.path = void 0;
            if (mailtoComponents.query) {
              var unknownHeaders = false;
              var headers = {};
              var hfields = mailtoComponents.query.split("&");
              for (var x = 0, xl = hfields.length; x < xl; ++x) {
                var hfield = hfields[x].split("=");
                switch (hfield[0]) {
                  case "to":
                    var toAddrs = hfield[1].split(",");
                    for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                      to.push(toAddrs[_x]);
                    }
                    break;
                  case "subject":
                    mailtoComponents.subject = unescapeComponent(hfield[1], options);
                    break;
                  case "body":
                    mailtoComponents.body = unescapeComponent(hfield[1], options);
                    break;
                  default:
                    unknownHeaders = true;
                    headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                    break;
                }
              }
              if (unknownHeaders)
                mailtoComponents.headers = headers;
            }
            mailtoComponents.query = void 0;
            for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
              var addr = to[_x2].split("@");
              addr[0] = unescapeComponent(addr[0]);
              if (!options.unicodeSupport) {
                try {
                  addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
                } catch (e) {
                  mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
                }
              } else {
                addr[1] = unescapeComponent(addr[1], options).toLowerCase();
              }
              to[_x2] = addr.join("@");
            }
            return mailtoComponents;
          },
          serialize: function serialize$$1(mailtoComponents, options) {
            var components = mailtoComponents;
            var to = toArray3(mailtoComponents.to);
            if (to) {
              for (var x = 0, xl = to.length; x < xl; ++x) {
                var toAddr = String(to[x]);
                var atIdx = toAddr.lastIndexOf("@");
                var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
                var domain = toAddr.slice(atIdx + 1);
                try {
                  domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
                } catch (e) {
                  components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                }
                to[x] = localPart + "@" + domain;
              }
              components.path = to.join(",");
            }
            var headers = mailtoComponents.headers = mailtoComponents.headers || {};
            if (mailtoComponents.subject)
              headers["subject"] = mailtoComponents.subject;
            if (mailtoComponents.body)
              headers["body"] = mailtoComponents.body;
            var fields2 = [];
            for (var name in headers) {
              if (headers[name] !== O[name]) {
                fields2.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
              }
            }
            if (fields2.length) {
              components.query = fields2.join("&");
            }
            return components;
          }
        };
        var URN_PARSE = /^([^\:]+)\:(.*)/;
        var handler$5 = {
          scheme: "urn",
          parse: function parse$$1(components, options) {
            var matches = components.path && components.path.match(URN_PARSE);
            var urnComponents = components;
            if (matches) {
              var scheme = options.scheme || urnComponents.scheme || "urn";
              var nid = matches[1].toLowerCase();
              var nss = matches[2];
              var urnScheme = scheme + ":" + (options.nid || nid);
              var schemeHandler = SCHEMES[urnScheme];
              urnComponents.nid = nid;
              urnComponents.nss = nss;
              urnComponents.path = void 0;
              if (schemeHandler) {
                urnComponents = schemeHandler.parse(urnComponents, options);
              }
            } else {
              urnComponents.error = urnComponents.error || "URN can not be parsed.";
            }
            return urnComponents;
          },
          serialize: function serialize$$1(urnComponents, options) {
            var scheme = options.scheme || urnComponents.scheme || "urn";
            var nid = urnComponents.nid;
            var urnScheme = scheme + ":" + (options.nid || nid);
            var schemeHandler = SCHEMES[urnScheme];
            if (schemeHandler) {
              urnComponents = schemeHandler.serialize(urnComponents, options);
            }
            var uriComponents = urnComponents;
            var nss = urnComponents.nss;
            uriComponents.path = (nid || options.nid) + ":" + nss;
            return uriComponents;
          }
        };
        var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
        var handler$6 = {
          scheme: "urn:uuid",
          parse: function parse2(urnComponents, options) {
            var uuidComponents = urnComponents;
            uuidComponents.uuid = uuidComponents.nss;
            uuidComponents.nss = void 0;
            if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
              uuidComponents.error = uuidComponents.error || "UUID is not valid.";
            }
            return uuidComponents;
          },
          serialize: function serialize2(uuidComponents, options) {
            var urnComponents = uuidComponents;
            urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
            return urnComponents;
          }
        };
        SCHEMES[handler.scheme] = handler;
        SCHEMES[handler$1.scheme] = handler$1;
        SCHEMES[handler$2.scheme] = handler$2;
        SCHEMES[handler$3.scheme] = handler$3;
        SCHEMES[handler$4.scheme] = handler$4;
        SCHEMES[handler$5.scheme] = handler$5;
        SCHEMES[handler$6.scheme] = handler$6;
        exports3.SCHEMES = SCHEMES;
        exports3.pctEncChar = pctEncChar;
        exports3.pctDecChars = pctDecChars;
        exports3.parse = parse;
        exports3.removeDotSegments = removeDotSegments;
        exports3.serialize = serialize;
        exports3.resolveComponents = resolveComponents;
        exports3.resolve = resolve;
        exports3.normalize = normalize;
        exports3.equal = equal;
        exports3.escapeComponent = escapeComponent;
        exports3.unescapeComponent = unescapeComponent;
        Object.defineProperty(exports3, "__esModule", { value: true });
      });
    }
  });

  // node_modules/fast-deep-equal/index.js
  var require_fast_deep_equal = __commonJS({
    "node_modules/fast-deep-equal/index.js"(exports2, module2) {
      "use strict";
      module2.exports = function equal(a, b) {
        if (a === b)
          return true;
        if (a && b && typeof a == "object" && typeof b == "object") {
          if (a.constructor !== b.constructor)
            return false;
          var length, i, keys2;
          if (Array.isArray(a)) {
            length = a.length;
            if (length != b.length)
              return false;
            for (i = length; i-- !== 0; )
              if (!equal(a[i], b[i]))
                return false;
            return true;
          }
          if (a.constructor === RegExp)
            return a.source === b.source && a.flags === b.flags;
          if (a.valueOf !== Object.prototype.valueOf)
            return a.valueOf() === b.valueOf();
          if (a.toString !== Object.prototype.toString)
            return a.toString() === b.toString();
          keys2 = Object.keys(a);
          length = keys2.length;
          if (length !== Object.keys(b).length)
            return false;
          for (i = length; i-- !== 0; )
            if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
              return false;
          for (i = length; i-- !== 0; ) {
            var key = keys2[i];
            if (!equal(a[key], b[key]))
              return false;
          }
          return true;
        }
        return a !== a && b !== b;
      };
    }
  });

  // node_modules/ajv/lib/compile/ucs2length.js
  var require_ucs2length = __commonJS({
    "node_modules/ajv/lib/compile/ucs2length.js"(exports2, module2) {
      "use strict";
      module2.exports = function ucs2length(str) {
        var length = 0, len = str.length, pos = 0, value;
        while (pos < len) {
          length++;
          value = str.charCodeAt(pos++);
          if (value >= 55296 && value <= 56319 && pos < len) {
            value = str.charCodeAt(pos);
            if ((value & 64512) == 56320)
              pos++;
          }
        }
        return length;
      };
    }
  });

  // node_modules/ajv/lib/compile/util.js
  var require_util = __commonJS({
    "node_modules/ajv/lib/compile/util.js"(exports2, module2) {
      "use strict";
      module2.exports = {
        copy,
        checkDataType,
        checkDataTypes,
        coerceToTypes,
        toHash,
        getProperty,
        escapeQuotes,
        equal: require_fast_deep_equal(),
        ucs2length: require_ucs2length(),
        varOccurences,
        varReplace,
        schemaHasRules,
        schemaHasRulesExcept,
        schemaUnknownRules,
        toQuotedString,
        getPathExpr,
        getPath,
        getData,
        unescapeFragment,
        unescapeJsonPointer,
        escapeFragment,
        escapeJsonPointer
      };
      function copy(o, to) {
        to = to || {};
        for (var key in o)
          to[key] = o[key];
        return to;
      }
      function checkDataType(dataType, data, strictNumbers, negate) {
        var EQUAL = negate ? " !== " : " === ", AND = negate ? " || " : " && ", OK = negate ? "!" : "", NOT = negate ? "" : "!";
        switch (dataType) {
          case "null":
            return data + EQUAL + "null";
          case "array":
            return OK + "Array.isArray(" + data + ")";
          case "object":
            return "(" + OK + data + AND + "typeof " + data + EQUAL + '"object"' + AND + NOT + "Array.isArray(" + data + "))";
          case "integer":
            return "(typeof " + data + EQUAL + '"number"' + AND + NOT + "(" + data + " % 1)" + AND + data + EQUAL + data + (strictNumbers ? AND + OK + "isFinite(" + data + ")" : "") + ")";
          case "number":
            return "(typeof " + data + EQUAL + '"' + dataType + '"' + (strictNumbers ? AND + OK + "isFinite(" + data + ")" : "") + ")";
          default:
            return "typeof " + data + EQUAL + '"' + dataType + '"';
        }
      }
      function checkDataTypes(dataTypes, data, strictNumbers) {
        switch (dataTypes.length) {
          case 1:
            return checkDataType(dataTypes[0], data, strictNumbers, true);
          default:
            var code = "";
            var types = toHash(dataTypes);
            if (types.array && types.object) {
              code = types.null ? "(" : "(!" + data + " || ";
              code += "typeof " + data + ' !== "object")';
              delete types.null;
              delete types.array;
              delete types.object;
            }
            if (types.number)
              delete types.integer;
            for (var t in types)
              code += (code ? " && " : "") + checkDataType(t, data, strictNumbers, true);
            return code;
        }
      }
      var COERCE_TO_TYPES = toHash(["string", "number", "integer", "boolean", "null"]);
      function coerceToTypes(optionCoerceTypes, dataTypes) {
        if (Array.isArray(dataTypes)) {
          var types = [];
          for (var i = 0; i < dataTypes.length; i++) {
            var t = dataTypes[i];
            if (COERCE_TO_TYPES[t])
              types[types.length] = t;
            else if (optionCoerceTypes === "array" && t === "array")
              types[types.length] = t;
          }
          if (types.length)
            return types;
        } else if (COERCE_TO_TYPES[dataTypes]) {
          return [dataTypes];
        } else if (optionCoerceTypes === "array" && dataTypes === "array") {
          return ["array"];
        }
      }
      function toHash(arr) {
        var hash = {};
        for (var i = 0; i < arr.length; i++)
          hash[arr[i]] = true;
        return hash;
      }
      var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
      var SINGLE_QUOTE = /'|\\/g;
      function getProperty(key) {
        return typeof key == "number" ? "[" + key + "]" : IDENTIFIER.test(key) ? "." + key : "['" + escapeQuotes(key) + "']";
      }
      function escapeQuotes(str) {
        return str.replace(SINGLE_QUOTE, "\\$&").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\f/g, "\\f").replace(/\t/g, "\\t");
      }
      function varOccurences(str, dataVar) {
        dataVar += "[^0-9]";
        var matches = str.match(new RegExp(dataVar, "g"));
        return matches ? matches.length : 0;
      }
      function varReplace(str, dataVar, expr) {
        dataVar += "([^0-9])";
        expr = expr.replace(/\$/g, "$$$$");
        return str.replace(new RegExp(dataVar, "g"), expr + "$1");
      }
      function schemaHasRules(schema, rules) {
        if (typeof schema == "boolean")
          return !schema;
        for (var key in schema)
          if (rules[key])
            return true;
      }
      function schemaHasRulesExcept(schema, rules, exceptKeyword) {
        if (typeof schema == "boolean")
          return !schema && exceptKeyword != "not";
        for (var key in schema)
          if (key != exceptKeyword && rules[key])
            return true;
      }
      function schemaUnknownRules(schema, rules) {
        if (typeof schema == "boolean")
          return;
        for (var key in schema)
          if (!rules[key])
            return key;
      }
      function toQuotedString(str) {
        return "'" + escapeQuotes(str) + "'";
      }
      function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
        var path = jsonPointers ? "'/' + " + expr + (isNumber ? "" : ".replace(/~/g, '~0').replace(/\\//g, '~1')") : isNumber ? "'[' + " + expr + " + ']'" : "'[\\'' + " + expr + " + '\\']'";
        return joinPaths2(currentPath, path);
      }
      function getPath(currentPath, prop, jsonPointers) {
        var path = jsonPointers ? toQuotedString("/" + escapeJsonPointer(prop)) : toQuotedString(getProperty(prop));
        return joinPaths2(currentPath, path);
      }
      var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
      var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
      function getData($data, lvl, paths) {
        var up, jsonPointer, data, matches;
        if ($data === "")
          return "rootData";
        if ($data[0] == "/") {
          if (!JSON_POINTER.test($data))
            throw new Error("Invalid JSON-pointer: " + $data);
          jsonPointer = $data;
          data = "rootData";
        } else {
          matches = $data.match(RELATIVE_JSON_POINTER);
          if (!matches)
            throw new Error("Invalid JSON-pointer: " + $data);
          up = +matches[1];
          jsonPointer = matches[2];
          if (jsonPointer == "#") {
            if (up >= lvl)
              throw new Error("Cannot access property/index " + up + " levels up, current level is " + lvl);
            return paths[lvl - up];
          }
          if (up > lvl)
            throw new Error("Cannot access data " + up + " levels up, current level is " + lvl);
          data = "data" + (lvl - up || "");
          if (!jsonPointer)
            return data;
        }
        var expr = data;
        var segments = jsonPointer.split("/");
        for (var i = 0; i < segments.length; i++) {
          var segment = segments[i];
          if (segment) {
            data += getProperty(unescapeJsonPointer(segment));
            expr += " && " + data;
          }
        }
        return expr;
      }
      function joinPaths2(a, b) {
        if (a == '""')
          return b;
        return (a + " + " + b).replace(/([^\\])' \+ '/g, "$1");
      }
      function unescapeFragment(str) {
        return unescapeJsonPointer(decodeURIComponent(str));
      }
      function escapeFragment(str) {
        return encodeURIComponent(escapeJsonPointer(str));
      }
      function escapeJsonPointer(str) {
        return str.replace(/~/g, "~0").replace(/\//g, "~1");
      }
      function unescapeJsonPointer(str) {
        return str.replace(/~1/g, "/").replace(/~0/g, "~");
      }
    }
  });

  // node_modules/ajv/lib/compile/schema_obj.js
  var require_schema_obj = __commonJS({
    "node_modules/ajv/lib/compile/schema_obj.js"(exports2, module2) {
      "use strict";
      var util = require_util();
      module2.exports = SchemaObject;
      function SchemaObject(obj) {
        util.copy(obj, this);
      }
    }
  });

  // node_modules/ajv/node_modules/json-schema-traverse/index.js
  var require_json_schema_traverse = __commonJS({
    "node_modules/ajv/node_modules/json-schema-traverse/index.js"(exports2, module2) {
      "use strict";
      var traverse = module2.exports = function(schema, opts, cb) {
        if (typeof opts == "function") {
          cb = opts;
          opts = {};
        }
        cb = opts.cb || cb;
        var pre = typeof cb == "function" ? cb : cb.pre || function() {
        };
        var post = cb.post || function() {
        };
        _traverse(opts, pre, post, schema, "", schema);
      };
      traverse.keywords = {
        additionalItems: true,
        items: true,
        contains: true,
        additionalProperties: true,
        propertyNames: true,
        not: true
      };
      traverse.arrayKeywords = {
        items: true,
        allOf: true,
        anyOf: true,
        oneOf: true
      };
      traverse.propsKeywords = {
        definitions: true,
        properties: true,
        patternProperties: true,
        dependencies: true
      };
      traverse.skipKeywords = {
        default: true,
        enum: true,
        const: true,
        required: true,
        maximum: true,
        minimum: true,
        exclusiveMaximum: true,
        exclusiveMinimum: true,
        multipleOf: true,
        maxLength: true,
        minLength: true,
        pattern: true,
        format: true,
        maxItems: true,
        minItems: true,
        uniqueItems: true,
        maxProperties: true,
        minProperties: true
      };
      function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
        if (schema && typeof schema == "object" && !Array.isArray(schema)) {
          pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
          for (var key in schema) {
            var sch = schema[key];
            if (Array.isArray(sch)) {
              if (key in traverse.arrayKeywords) {
                for (var i = 0; i < sch.length; i++)
                  _traverse(opts, pre, post, sch[i], jsonPtr + "/" + key + "/" + i, rootSchema, jsonPtr, key, schema, i);
              }
            } else if (key in traverse.propsKeywords) {
              if (sch && typeof sch == "object") {
                for (var prop in sch)
                  _traverse(opts, pre, post, sch[prop], jsonPtr + "/" + key + "/" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
              }
            } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {
              _traverse(opts, pre, post, sch, jsonPtr + "/" + key, rootSchema, jsonPtr, key, schema);
            }
          }
          post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
        }
      }
      function escapeJsonPtr(str) {
        return str.replace(/~/g, "~0").replace(/\//g, "~1");
      }
    }
  });

  // node_modules/ajv/lib/compile/resolve.js
  var require_resolve = __commonJS({
    "node_modules/ajv/lib/compile/resolve.js"(exports2, module2) {
      "use strict";
      var URI = require_uri_all();
      var equal = require_fast_deep_equal();
      var util = require_util();
      var SchemaObject = require_schema_obj();
      var traverse = require_json_schema_traverse();
      module2.exports = resolve;
      resolve.normalizeId = normalizeId;
      resolve.fullPath = getFullPath;
      resolve.url = resolveUrl;
      resolve.ids = resolveIds;
      resolve.inlineRef = inlineRef;
      resolve.schema = resolveSchema2;
      function resolve(compile, root3, ref) {
        var refVal = this._refs[ref];
        if (typeof refVal == "string") {
          if (this._refs[refVal])
            refVal = this._refs[refVal];
          else
            return resolve.call(this, compile, root3, refVal);
        }
        refVal = refVal || this._schemas[ref];
        if (refVal instanceof SchemaObject) {
          return inlineRef(refVal.schema, this._opts.inlineRefs) ? refVal.schema : refVal.validate || this._compile(refVal);
        }
        var res = resolveSchema2.call(this, root3, ref);
        var schema, v, baseId;
        if (res) {
          schema = res.schema;
          root3 = res.root;
          baseId = res.baseId;
        }
        if (schema instanceof SchemaObject) {
          v = schema.validate || compile.call(this, schema.schema, root3, void 0, baseId);
        } else if (schema !== void 0) {
          v = inlineRef(schema, this._opts.inlineRefs) ? schema : compile.call(this, schema, root3, void 0, baseId);
        }
        return v;
      }
      function resolveSchema2(root3, ref) {
        var p = URI.parse(ref), refPath = _getFullPath(p), baseId = getFullPath(this._getId(root3.schema));
        if (Object.keys(root3.schema).length === 0 || refPath !== baseId) {
          var id = normalizeId(refPath);
          var refVal = this._refs[id];
          if (typeof refVal == "string") {
            return resolveRecursive.call(this, root3, refVal, p);
          } else if (refVal instanceof SchemaObject) {
            if (!refVal.validate)
              this._compile(refVal);
            root3 = refVal;
          } else {
            refVal = this._schemas[id];
            if (refVal instanceof SchemaObject) {
              if (!refVal.validate)
                this._compile(refVal);
              if (id == normalizeId(ref))
                return { schema: refVal, root: root3, baseId };
              root3 = refVal;
            } else {
              return;
            }
          }
          if (!root3.schema)
            return;
          baseId = getFullPath(this._getId(root3.schema));
        }
        return getJsonPointer.call(this, p, baseId, root3.schema, root3);
      }
      function resolveRecursive(root3, ref, parsedRef) {
        var res = resolveSchema2.call(this, root3, ref);
        if (res) {
          var schema = res.schema;
          var baseId = res.baseId;
          root3 = res.root;
          var id = this._getId(schema);
          if (id)
            baseId = resolveUrl(baseId, id);
          return getJsonPointer.call(this, parsedRef, baseId, schema, root3);
        }
      }
      var PREVENT_SCOPE_CHANGE = util.toHash(["properties", "patternProperties", "enum", "dependencies", "definitions"]);
      function getJsonPointer(parsedRef, baseId, schema, root3) {
        parsedRef.fragment = parsedRef.fragment || "";
        if (parsedRef.fragment.slice(0, 1) != "/")
          return;
        var parts = parsedRef.fragment.split("/");
        for (var i = 1; i < parts.length; i++) {
          var part = parts[i];
          if (part) {
            part = util.unescapeFragment(part);
            schema = schema[part];
            if (schema === void 0)
              break;
            var id;
            if (!PREVENT_SCOPE_CHANGE[part]) {
              id = this._getId(schema);
              if (id)
                baseId = resolveUrl(baseId, id);
              if (schema.$ref) {
                var $ref = resolveUrl(baseId, schema.$ref);
                var res = resolveSchema2.call(this, root3, $ref);
                if (res) {
                  schema = res.schema;
                  root3 = res.root;
                  baseId = res.baseId;
                }
              }
            }
          }
        }
        if (schema !== void 0 && schema !== root3.schema)
          return { schema, root: root3, baseId };
      }
      var SIMPLE_INLINED = util.toHash([
        "type",
        "format",
        "pattern",
        "maxLength",
        "minLength",
        "maxProperties",
        "minProperties",
        "maxItems",
        "minItems",
        "maximum",
        "minimum",
        "uniqueItems",
        "multipleOf",
        "required",
        "enum"
      ]);
      function inlineRef(schema, limit) {
        if (limit === false)
          return false;
        if (limit === void 0 || limit === true)
          return checkNoRef(schema);
        else if (limit)
          return countKeys(schema) <= limit;
      }
      function checkNoRef(schema) {
        var item;
        if (Array.isArray(schema)) {
          for (var i = 0; i < schema.length; i++) {
            item = schema[i];
            if (typeof item == "object" && !checkNoRef(item))
              return false;
          }
        } else {
          for (var key in schema) {
            if (key == "$ref")
              return false;
            item = schema[key];
            if (typeof item == "object" && !checkNoRef(item))
              return false;
          }
        }
        return true;
      }
      function countKeys(schema) {
        var count = 0, item;
        if (Array.isArray(schema)) {
          for (var i = 0; i < schema.length; i++) {
            item = schema[i];
            if (typeof item == "object")
              count += countKeys(item);
            if (count == Infinity)
              return Infinity;
          }
        } else {
          for (var key in schema) {
            if (key == "$ref")
              return Infinity;
            if (SIMPLE_INLINED[key]) {
              count++;
            } else {
              item = schema[key];
              if (typeof item == "object")
                count += countKeys(item) + 1;
              if (count == Infinity)
                return Infinity;
            }
          }
        }
        return count;
      }
      function getFullPath(id, normalize) {
        if (normalize !== false)
          id = normalizeId(id);
        var p = URI.parse(id);
        return _getFullPath(p);
      }
      function _getFullPath(p) {
        return URI.serialize(p).split("#")[0] + "#";
      }
      var TRAILING_SLASH_HASH = /#\/?$/;
      function normalizeId(id) {
        return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
      }
      function resolveUrl(baseId, id) {
        id = normalizeId(id);
        return URI.resolve(baseId, id);
      }
      function resolveIds(schema) {
        var schemaId = normalizeId(this._getId(schema));
        var baseIds = { "": schemaId };
        var fullPaths = { "": getFullPath(schemaId, false) };
        var localRefs = {};
        var self2 = this;
        traverse(schema, { allKeys: true }, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
          if (jsonPtr === "")
            return;
          var id = self2._getId(sch);
          var baseId = baseIds[parentJsonPtr];
          var fullPath = fullPaths[parentJsonPtr] + "/" + parentKeyword;
          if (keyIndex !== void 0)
            fullPath += "/" + (typeof keyIndex == "number" ? keyIndex : util.escapeFragment(keyIndex));
          if (typeof id == "string") {
            id = baseId = normalizeId(baseId ? URI.resolve(baseId, id) : id);
            var refVal = self2._refs[id];
            if (typeof refVal == "string")
              refVal = self2._refs[refVal];
            if (refVal && refVal.schema) {
              if (!equal(sch, refVal.schema))
                throw new Error('id "' + id + '" resolves to more than one schema');
            } else if (id != normalizeId(fullPath)) {
              if (id[0] == "#") {
                if (localRefs[id] && !equal(sch, localRefs[id]))
                  throw new Error('id "' + id + '" resolves to more than one schema');
                localRefs[id] = sch;
              } else {
                self2._refs[id] = fullPath;
              }
            }
          }
          baseIds[jsonPtr] = baseId;
          fullPaths[jsonPtr] = fullPath;
        });
        return localRefs;
      }
    }
  });

  // node_modules/ajv/lib/compile/error_classes.js
  var require_error_classes = __commonJS({
    "node_modules/ajv/lib/compile/error_classes.js"(exports2, module2) {
      "use strict";
      var resolve = require_resolve();
      module2.exports = {
        Validation: errorSubclass(ValidationError),
        MissingRef: errorSubclass(MissingRefError)
      };
      function ValidationError(errors) {
        this.message = "validation failed";
        this.errors = errors;
        this.ajv = this.validation = true;
      }
      MissingRefError.message = function(baseId, ref) {
        return "can't resolve reference " + ref + " from id " + baseId;
      };
      function MissingRefError(baseId, ref, message) {
        this.message = message || MissingRefError.message(baseId, ref);
        this.missingRef = resolve.url(baseId, ref);
        this.missingSchema = resolve.normalizeId(resolve.fullPath(this.missingRef));
      }
      function errorSubclass(Subclass) {
        Subclass.prototype = Object.create(Error.prototype);
        Subclass.prototype.constructor = Subclass;
        return Subclass;
      }
    }
  });

  // node_modules/fast-json-stable-stringify/index.js
  var require_fast_json_stable_stringify = __commonJS({
    "node_modules/fast-json-stable-stringify/index.js"(exports2, module2) {
      "use strict";
      module2.exports = function(data, opts) {
        if (!opts)
          opts = {};
        if (typeof opts === "function")
          opts = { cmp: opts };
        var cycles = typeof opts.cycles === "boolean" ? opts.cycles : false;
        var cmp = opts.cmp && function(f) {
          return function(node5) {
            return function(a, b) {
              var aobj = { key: a, value: node5[a] };
              var bobj = { key: b, value: node5[b] };
              return f(aobj, bobj);
            };
          };
        }(opts.cmp);
        var seen = [];
        return function stringify2(node5) {
          if (node5 && node5.toJSON && typeof node5.toJSON === "function") {
            node5 = node5.toJSON();
          }
          if (node5 === void 0)
            return;
          if (typeof node5 == "number")
            return isFinite(node5) ? "" + node5 : "null";
          if (typeof node5 !== "object")
            return JSON.stringify(node5);
          var i, out;
          if (Array.isArray(node5)) {
            out = "[";
            for (i = 0; i < node5.length; i++) {
              if (i)
                out += ",";
              out += stringify2(node5[i]) || "null";
            }
            return out + "]";
          }
          if (node5 === null)
            return "null";
          if (seen.indexOf(node5) !== -1) {
            if (cycles)
              return JSON.stringify("__cycle__");
            throw new TypeError("Converting circular structure to JSON");
          }
          var seenIndex = seen.push(node5) - 1;
          var keys2 = Object.keys(node5).sort(cmp && cmp(node5));
          out = "";
          for (i = 0; i < keys2.length; i++) {
            var key = keys2[i];
            var value = stringify2(node5[key]);
            if (!value)
              continue;
            if (out)
              out += ",";
            out += JSON.stringify(key) + ":" + value;
          }
          seen.splice(seenIndex, 1);
          return "{" + out + "}";
        }(data);
      };
    }
  });

  // node_modules/ajv/lib/dotjs/validate.js
  var require_validate = __commonJS({
    "node_modules/ajv/lib/dotjs/validate.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_validate(it, $keyword, $ruleType) {
        var out = "";
        var $async = it.schema.$async === true, $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, "$ref"), $id = it.self._getId(it.schema);
        if (it.opts.strictKeywords) {
          var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);
          if ($unknownKwd) {
            var $keywordsMsg = "unknown keyword: " + $unknownKwd;
            if (it.opts.strictKeywords === "log")
              it.logger.warn($keywordsMsg);
            else
              throw new Error($keywordsMsg);
          }
        }
        if (it.isTop) {
          out += " var validate = ";
          if ($async) {
            it.async = true;
            out += "async ";
          }
          out += "function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; ";
          if ($id && (it.opts.sourceCode || it.opts.processCode)) {
            out += " " + ("/*# sourceURL=" + $id + " */") + " ";
          }
        }
        if (typeof it.schema == "boolean" || !($refKeywords || it.schema.$ref)) {
          var $keyword = "false schema";
          var $lvl = it.level;
          var $dataLvl = it.dataLevel;
          var $schema = it.schema[$keyword];
          var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
          var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
          var $breakOnError = !it.opts.allErrors;
          var $errorKeyword;
          var $data = "data" + ($dataLvl || "");
          var $valid = "valid" + $lvl;
          if (it.schema === false) {
            if (it.isTop) {
              $breakOnError = true;
            } else {
              out += " var " + $valid + " = false; ";
            }
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = "";
            if (it.createErrors !== false) {
              out += " { keyword: '" + ($errorKeyword || "false schema") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
              if (it.opts.messages !== false) {
                out += " , message: 'boolean schema is false' ";
              }
              if (it.opts.verbose) {
                out += " , schema: false , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
              }
              out += " } ";
            } else {
              out += " {} ";
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              if (it.async) {
                out += " throw new ValidationError([" + __err + "]); ";
              } else {
                out += " validate.errors = [" + __err + "]; return false; ";
              }
            } else {
              out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
            }
          } else {
            if (it.isTop) {
              if ($async) {
                out += " return data; ";
              } else {
                out += " validate.errors = null; return true; ";
              }
            } else {
              out += " var " + $valid + " = true; ";
            }
          }
          if (it.isTop) {
            out += " }; return validate; ";
          }
          return out;
        }
        if (it.isTop) {
          var $top = it.isTop, $lvl = it.level = 0, $dataLvl = it.dataLevel = 0, $data = "data";
          it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
          it.baseId = it.baseId || it.rootId;
          delete it.isTop;
          it.dataPathArr = [""];
          if (it.schema.default !== void 0 && it.opts.useDefaults && it.opts.strictDefaults) {
            var $defaultMsg = "default is ignored in the schema root";
            if (it.opts.strictDefaults === "log")
              it.logger.warn($defaultMsg);
            else
              throw new Error($defaultMsg);
          }
          out += " var vErrors = null; ";
          out += " var errors = 0;     ";
          out += " if (rootData === undefined) rootData = data; ";
        } else {
          var $lvl = it.level, $dataLvl = it.dataLevel, $data = "data" + ($dataLvl || "");
          if ($id)
            it.baseId = it.resolve.url(it.baseId, $id);
          if ($async && !it.async)
            throw new Error("async schema in sync schema");
          out += " var errs_" + $lvl + " = errors;";
        }
        var $valid = "valid" + $lvl, $breakOnError = !it.opts.allErrors, $closingBraces1 = "", $closingBraces2 = "";
        var $errorKeyword;
        var $typeSchema = it.schema.type, $typeIsArray = Array.isArray($typeSchema);
        if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {
          if ($typeIsArray) {
            if ($typeSchema.indexOf("null") == -1)
              $typeSchema = $typeSchema.concat("null");
          } else if ($typeSchema != "null") {
            $typeSchema = [$typeSchema, "null"];
            $typeIsArray = true;
          }
        }
        if ($typeIsArray && $typeSchema.length == 1) {
          $typeSchema = $typeSchema[0];
          $typeIsArray = false;
        }
        if (it.schema.$ref && $refKeywords) {
          if (it.opts.extendRefs == "fail") {
            throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)');
          } else if (it.opts.extendRefs !== true) {
            $refKeywords = false;
            it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
          }
        }
        if (it.schema.$comment && it.opts.$comment) {
          out += " " + it.RULES.all.$comment.code(it, "$comment");
        }
        if ($typeSchema) {
          if (it.opts.coerceTypes) {
            var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
          }
          var $rulesGroup = it.RULES.types[$typeSchema];
          if ($coerceToTypes || $typeIsArray || $rulesGroup === true || $rulesGroup && !$shouldUseGroup($rulesGroup)) {
            var $schemaPath = it.schemaPath + ".type", $errSchemaPath = it.errSchemaPath + "/type";
            var $schemaPath = it.schemaPath + ".type", $errSchemaPath = it.errSchemaPath + "/type", $method = $typeIsArray ? "checkDataTypes" : "checkDataType";
            out += " if (" + it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true) + ") { ";
            if ($coerceToTypes) {
              var $dataType = "dataType" + $lvl, $coerced = "coerced" + $lvl;
              out += " var " + $dataType + " = typeof " + $data + "; var " + $coerced + " = undefined; ";
              if (it.opts.coerceTypes == "array") {
                out += " if (" + $dataType + " == 'object' && Array.isArray(" + $data + ") && " + $data + ".length == 1) { " + $data + " = " + $data + "[0]; " + $dataType + " = typeof " + $data + "; if (" + it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers) + ") " + $coerced + " = " + $data + "; } ";
              }
              out += " if (" + $coerced + " !== undefined) ; ";
              var arr1 = $coerceToTypes;
              if (arr1) {
                var $type, $i = -1, l1 = arr1.length - 1;
                while ($i < l1) {
                  $type = arr1[$i += 1];
                  if ($type == "string") {
                    out += " else if (" + $dataType + " == 'number' || " + $dataType + " == 'boolean') " + $coerced + " = '' + " + $data + "; else if (" + $data + " === null) " + $coerced + " = ''; ";
                  } else if ($type == "number" || $type == "integer") {
                    out += " else if (" + $dataType + " == 'boolean' || " + $data + " === null || (" + $dataType + " == 'string' && " + $data + " && " + $data + " == +" + $data + " ";
                    if ($type == "integer") {
                      out += " && !(" + $data + " % 1)";
                    }
                    out += ")) " + $coerced + " = +" + $data + "; ";
                  } else if ($type == "boolean") {
                    out += " else if (" + $data + " === 'false' || " + $data + " === 0 || " + $data + " === null) " + $coerced + " = false; else if (" + $data + " === 'true' || " + $data + " === 1) " + $coerced + " = true; ";
                  } else if ($type == "null") {
                    out += " else if (" + $data + " === '' || " + $data + " === 0 || " + $data + " === false) " + $coerced + " = null; ";
                  } else if (it.opts.coerceTypes == "array" && $type == "array") {
                    out += " else if (" + $dataType + " == 'string' || " + $dataType + " == 'number' || " + $dataType + " == 'boolean' || " + $data + " == null) " + $coerced + " = [" + $data + "]; ";
                  }
                }
              }
              out += " else {   ";
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = "";
              if (it.createErrors !== false) {
                out += " { keyword: '" + ($errorKeyword || "type") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { type: '";
                if ($typeIsArray) {
                  out += "" + $typeSchema.join(",");
                } else {
                  out += "" + $typeSchema;
                }
                out += "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: 'should be ";
                  if ($typeIsArray) {
                    out += "" + $typeSchema.join(",");
                  } else {
                    out += "" + $typeSchema;
                  }
                  out += "' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); ";
                } else {
                  out += " validate.errors = [" + __err + "]; return false; ";
                }
              } else {
                out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
              }
              out += " } if (" + $coerced + " !== undefined) {  ";
              var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty";
              out += " " + $data + " = " + $coerced + "; ";
              if (!$dataLvl) {
                out += "if (" + $parentData + " !== undefined)";
              }
              out += " " + $parentData + "[" + $parentDataProperty + "] = " + $coerced + "; } ";
            } else {
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = "";
              if (it.createErrors !== false) {
                out += " { keyword: '" + ($errorKeyword || "type") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { type: '";
                if ($typeIsArray) {
                  out += "" + $typeSchema.join(",");
                } else {
                  out += "" + $typeSchema;
                }
                out += "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: 'should be ";
                  if ($typeIsArray) {
                    out += "" + $typeSchema.join(",");
                  } else {
                    out += "" + $typeSchema;
                  }
                  out += "' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); ";
                } else {
                  out += " validate.errors = [" + __err + "]; return false; ";
                }
              } else {
                out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
              }
            }
            out += " } ";
          }
        }
        if (it.schema.$ref && !$refKeywords) {
          out += " " + it.RULES.all.$ref.code(it, "$ref") + " ";
          if ($breakOnError) {
            out += " } if (errors === ";
            if ($top) {
              out += "0";
            } else {
              out += "errs_" + $lvl;
            }
            out += ") { ";
            $closingBraces2 += "}";
          }
        } else {
          var arr2 = it.RULES;
          if (arr2) {
            var $rulesGroup, i2 = -1, l2 = arr2.length - 1;
            while (i2 < l2) {
              $rulesGroup = arr2[i2 += 1];
              if ($shouldUseGroup($rulesGroup)) {
                if ($rulesGroup.type) {
                  out += " if (" + it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers) + ") { ";
                }
                if (it.opts.useDefaults) {
                  if ($rulesGroup.type == "object" && it.schema.properties) {
                    var $schema = it.schema.properties, $schemaKeys = Object.keys($schema);
                    var arr3 = $schemaKeys;
                    if (arr3) {
                      var $propertyKey, i3 = -1, l3 = arr3.length - 1;
                      while (i3 < l3) {
                        $propertyKey = arr3[i3 += 1];
                        var $sch = $schema[$propertyKey];
                        if ($sch.default !== void 0) {
                          var $passData = $data + it.util.getProperty($propertyKey);
                          if (it.compositeRule) {
                            if (it.opts.strictDefaults) {
                              var $defaultMsg = "default is ignored for: " + $passData;
                              if (it.opts.strictDefaults === "log")
                                it.logger.warn($defaultMsg);
                              else
                                throw new Error($defaultMsg);
                            }
                          } else {
                            out += " if (" + $passData + " === undefined ";
                            if (it.opts.useDefaults == "empty") {
                              out += " || " + $passData + " === null || " + $passData + " === '' ";
                            }
                            out += " ) " + $passData + " = ";
                            if (it.opts.useDefaults == "shared") {
                              out += " " + it.useDefault($sch.default) + " ";
                            } else {
                              out += " " + JSON.stringify($sch.default) + " ";
                            }
                            out += "; ";
                          }
                        }
                      }
                    }
                  } else if ($rulesGroup.type == "array" && Array.isArray(it.schema.items)) {
                    var arr4 = it.schema.items;
                    if (arr4) {
                      var $sch, $i = -1, l4 = arr4.length - 1;
                      while ($i < l4) {
                        $sch = arr4[$i += 1];
                        if ($sch.default !== void 0) {
                          var $passData = $data + "[" + $i + "]";
                          if (it.compositeRule) {
                            if (it.opts.strictDefaults) {
                              var $defaultMsg = "default is ignored for: " + $passData;
                              if (it.opts.strictDefaults === "log")
                                it.logger.warn($defaultMsg);
                              else
                                throw new Error($defaultMsg);
                            }
                          } else {
                            out += " if (" + $passData + " === undefined ";
                            if (it.opts.useDefaults == "empty") {
                              out += " || " + $passData + " === null || " + $passData + " === '' ";
                            }
                            out += " ) " + $passData + " = ";
                            if (it.opts.useDefaults == "shared") {
                              out += " " + it.useDefault($sch.default) + " ";
                            } else {
                              out += " " + JSON.stringify($sch.default) + " ";
                            }
                            out += "; ";
                          }
                        }
                      }
                    }
                  }
                }
                var arr5 = $rulesGroup.rules;
                if (arr5) {
                  var $rule, i5 = -1, l5 = arr5.length - 1;
                  while (i5 < l5) {
                    $rule = arr5[i5 += 1];
                    if ($shouldUseRule($rule)) {
                      var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);
                      if ($code) {
                        out += " " + $code + " ";
                        if ($breakOnError) {
                          $closingBraces1 += "}";
                        }
                      }
                    }
                  }
                }
                if ($breakOnError) {
                  out += " " + $closingBraces1 + " ";
                  $closingBraces1 = "";
                }
                if ($rulesGroup.type) {
                  out += " } ";
                  if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
                    out += " else { ";
                    var $schemaPath = it.schemaPath + ".type", $errSchemaPath = it.errSchemaPath + "/type";
                    var $$outStack = $$outStack || [];
                    $$outStack.push(out);
                    out = "";
                    if (it.createErrors !== false) {
                      out += " { keyword: '" + ($errorKeyword || "type") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { type: '";
                      if ($typeIsArray) {
                        out += "" + $typeSchema.join(",");
                      } else {
                        out += "" + $typeSchema;
                      }
                      out += "' } ";
                      if (it.opts.messages !== false) {
                        out += " , message: 'should be ";
                        if ($typeIsArray) {
                          out += "" + $typeSchema.join(",");
                        } else {
                          out += "" + $typeSchema;
                        }
                        out += "' ";
                      }
                      if (it.opts.verbose) {
                        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                      }
                      out += " } ";
                    } else {
                      out += " {} ";
                    }
                    var __err = out;
                    out = $$outStack.pop();
                    if (!it.compositeRule && $breakOnError) {
                      if (it.async) {
                        out += " throw new ValidationError([" + __err + "]); ";
                      } else {
                        out += " validate.errors = [" + __err + "]; return false; ";
                      }
                    } else {
                      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
                    }
                    out += " } ";
                  }
                }
                if ($breakOnError) {
                  out += " if (errors === ";
                  if ($top) {
                    out += "0";
                  } else {
                    out += "errs_" + $lvl;
                  }
                  out += ") { ";
                  $closingBraces2 += "}";
                }
              }
            }
          }
        }
        if ($breakOnError) {
          out += " " + $closingBraces2 + " ";
        }
        if ($top) {
          if ($async) {
            out += " if (errors === 0) return data;           ";
            out += " else throw new ValidationError(vErrors); ";
          } else {
            out += " validate.errors = vErrors; ";
            out += " return errors === 0;       ";
          }
          out += " }; return validate;";
        } else {
          out += " var " + $valid + " = errors === errs_" + $lvl + ";";
        }
        function $shouldUseGroup($rulesGroup2) {
          var rules = $rulesGroup2.rules;
          for (var i = 0; i < rules.length; i++)
            if ($shouldUseRule(rules[i]))
              return true;
        }
        function $shouldUseRule($rule2) {
          return it.schema[$rule2.keyword] !== void 0 || $rule2.implements && $ruleImplementsSomeKeyword($rule2);
        }
        function $ruleImplementsSomeKeyword($rule2) {
          var impl = $rule2.implements;
          for (var i = 0; i < impl.length; i++)
            if (it.schema[impl[i]] !== void 0)
              return true;
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/compile/index.js
  var require_compile = __commonJS({
    "node_modules/ajv/lib/compile/index.js"(exports2, module2) {
      "use strict";
      var resolve = require_resolve();
      var util = require_util();
      var errorClasses = require_error_classes();
      var stableStringify2 = require_fast_json_stable_stringify();
      var validateGenerator = require_validate();
      var ucs2length = util.ucs2length;
      var equal = require_fast_deep_equal();
      var ValidationError = errorClasses.Validation;
      module2.exports = compile;
      function compile(schema, root3, localRefs, baseId) {
        var self2 = this, opts = this._opts, refVal = [void 0], refs = {}, patterns = [], patternsHash = {}, defaults = [], defaultsHash = {}, customRules = [];
        root3 = root3 || { schema, refVal, refs };
        var c = checkCompiling.call(this, schema, root3, baseId);
        var compilation = this._compilations[c.index];
        if (c.compiling)
          return compilation.callValidate = callValidate;
        var formats = this._formats;
        var RULES = this.RULES;
        try {
          var v = localCompile(schema, root3, localRefs, baseId);
          compilation.validate = v;
          var cv = compilation.callValidate;
          if (cv) {
            cv.schema = v.schema;
            cv.errors = null;
            cv.refs = v.refs;
            cv.refVal = v.refVal;
            cv.root = v.root;
            cv.$async = v.$async;
            if (opts.sourceCode)
              cv.source = v.source;
          }
          return v;
        } finally {
          endCompiling.call(this, schema, root3, baseId);
        }
        function callValidate() {
          var validate = compilation.validate;
          var result = validate.apply(this, arguments);
          callValidate.errors = validate.errors;
          return result;
        }
        function localCompile(_schema, _root, localRefs2, baseId2) {
          var isRoot = !_root || _root && _root.schema == _schema;
          if (_root.schema != root3.schema)
            return compile.call(self2, _schema, _root, localRefs2, baseId2);
          var $async = _schema.$async === true;
          var sourceCode = validateGenerator({
            isTop: true,
            schema: _schema,
            isRoot,
            baseId: baseId2,
            root: _root,
            schemaPath: "",
            errSchemaPath: "#",
            errorPath: '""',
            MissingRefError: errorClasses.MissingRef,
            RULES,
            validate: validateGenerator,
            util,
            resolve,
            resolveRef,
            usePattern,
            useDefault,
            useCustomRule,
            opts,
            formats,
            logger: self2.logger,
            self: self2
          });
          sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode) + vars(defaults, defaultCode) + vars(customRules, customRuleCode) + sourceCode;
          if (opts.processCode)
            sourceCode = opts.processCode(sourceCode, _schema);
          var validate;
          try {
            var makeValidate = new Function(
              "self",
              "RULES",
              "formats",
              "root",
              "refVal",
              "defaults",
              "customRules",
              "equal",
              "ucs2length",
              "ValidationError",
              sourceCode
            );
            validate = makeValidate(
              self2,
              RULES,
              formats,
              root3,
              refVal,
              defaults,
              customRules,
              equal,
              ucs2length,
              ValidationError
            );
            refVal[0] = validate;
          } catch (e) {
            self2.logger.error("Error compiling schema, function code:", sourceCode);
            throw e;
          }
          validate.schema = _schema;
          validate.errors = null;
          validate.refs = refs;
          validate.refVal = refVal;
          validate.root = isRoot ? validate : _root;
          if ($async)
            validate.$async = true;
          if (opts.sourceCode === true) {
            validate.source = {
              code: sourceCode,
              patterns,
              defaults
            };
          }
          return validate;
        }
        function resolveRef(baseId2, ref, isRoot) {
          ref = resolve.url(baseId2, ref);
          var refIndex = refs[ref];
          var _refVal, refCode;
          if (refIndex !== void 0) {
            _refVal = refVal[refIndex];
            refCode = "refVal[" + refIndex + "]";
            return resolvedRef(_refVal, refCode);
          }
          if (!isRoot && root3.refs) {
            var rootRefId = root3.refs[ref];
            if (rootRefId !== void 0) {
              _refVal = root3.refVal[rootRefId];
              refCode = addLocalRef(ref, _refVal);
              return resolvedRef(_refVal, refCode);
            }
          }
          refCode = addLocalRef(ref);
          var v2 = resolve.call(self2, localCompile, root3, ref);
          if (v2 === void 0) {
            var localSchema = localRefs && localRefs[ref];
            if (localSchema) {
              v2 = resolve.inlineRef(localSchema, opts.inlineRefs) ? localSchema : compile.call(self2, localSchema, root3, localRefs, baseId2);
            }
          }
          if (v2 === void 0) {
            removeLocalRef(ref);
          } else {
            replaceLocalRef(ref, v2);
            return resolvedRef(v2, refCode);
          }
        }
        function addLocalRef(ref, v2) {
          var refId = refVal.length;
          refVal[refId] = v2;
          refs[ref] = refId;
          return "refVal" + refId;
        }
        function removeLocalRef(ref) {
          delete refs[ref];
        }
        function replaceLocalRef(ref, v2) {
          var refId = refs[ref];
          refVal[refId] = v2;
        }
        function resolvedRef(refVal2, code) {
          return typeof refVal2 == "object" || typeof refVal2 == "boolean" ? { code, schema: refVal2, inline: true } : { code, $async: refVal2 && !!refVal2.$async };
        }
        function usePattern(regexStr) {
          var index2 = patternsHash[regexStr];
          if (index2 === void 0) {
            index2 = patternsHash[regexStr] = patterns.length;
            patterns[index2] = regexStr;
          }
          return "pattern" + index2;
        }
        function useDefault(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
              return "" + value;
            case "string":
              return util.toQuotedString(value);
            case "object":
              if (value === null)
                return "null";
              var valueStr = stableStringify2(value);
              var index2 = defaultsHash[valueStr];
              if (index2 === void 0) {
                index2 = defaultsHash[valueStr] = defaults.length;
                defaults[index2] = value;
              }
              return "default" + index2;
          }
        }
        function useCustomRule(rule, schema2, parentSchema, it) {
          if (self2._opts.validateSchema !== false) {
            var deps = rule.definition.dependencies;
            if (deps && !deps.every(function(keyword) {
              return Object.prototype.hasOwnProperty.call(parentSchema, keyword);
            }))
              throw new Error("parent schema must have all required keywords: " + deps.join(","));
            var validateSchema = rule.definition.validateSchema;
            if (validateSchema) {
              var valid = validateSchema(schema2);
              if (!valid) {
                var message = "keyword schema is invalid: " + self2.errorsText(validateSchema.errors);
                if (self2._opts.validateSchema == "log")
                  self2.logger.error(message);
                else
                  throw new Error(message);
              }
            }
          }
          var compile2 = rule.definition.compile, inline = rule.definition.inline, macro = rule.definition.macro;
          var validate;
          if (compile2) {
            validate = compile2.call(self2, schema2, parentSchema, it);
          } else if (macro) {
            validate = macro.call(self2, schema2, parentSchema, it);
            if (opts.validateSchema !== false)
              self2.validateSchema(validate, true);
          } else if (inline) {
            validate = inline.call(self2, it, rule.keyword, schema2, parentSchema);
          } else {
            validate = rule.definition.validate;
            if (!validate)
              return;
          }
          if (validate === void 0)
            throw new Error('custom keyword "' + rule.keyword + '"failed to compile');
          var index2 = customRules.length;
          customRules[index2] = validate;
          return {
            code: "customRule" + index2,
            validate
          };
        }
      }
      function checkCompiling(schema, root3, baseId) {
        var index2 = compIndex.call(this, schema, root3, baseId);
        if (index2 >= 0)
          return { index: index2, compiling: true };
        index2 = this._compilations.length;
        this._compilations[index2] = {
          schema,
          root: root3,
          baseId
        };
        return { index: index2, compiling: false };
      }
      function endCompiling(schema, root3, baseId) {
        var i = compIndex.call(this, schema, root3, baseId);
        if (i >= 0)
          this._compilations.splice(i, 1);
      }
      function compIndex(schema, root3, baseId) {
        for (var i = 0; i < this._compilations.length; i++) {
          var c = this._compilations[i];
          if (c.schema == schema && c.root == root3 && c.baseId == baseId)
            return i;
        }
        return -1;
      }
      function patternCode(i, patterns) {
        return "var pattern" + i + " = new RegExp(" + util.toQuotedString(patterns[i]) + ");";
      }
      function defaultCode(i) {
        return "var default" + i + " = defaults[" + i + "];";
      }
      function refValCode(i, refVal) {
        return refVal[i] === void 0 ? "" : "var refVal" + i + " = refVal[" + i + "];";
      }
      function customRuleCode(i) {
        return "var customRule" + i + " = customRules[" + i + "];";
      }
      function vars(arr, statement) {
        if (!arr.length)
          return "";
        var code = "";
        for (var i = 0; i < arr.length; i++)
          code += statement(i, arr);
        return code;
      }
    }
  });

  // node_modules/ajv/lib/cache.js
  var require_cache = __commonJS({
    "node_modules/ajv/lib/cache.js"(exports2, module2) {
      "use strict";
      var Cache2 = module2.exports = function Cache3() {
        this._cache = {};
      };
      Cache2.prototype.put = function Cache_put(key, value) {
        this._cache[key] = value;
      };
      Cache2.prototype.get = function Cache_get(key) {
        return this._cache[key];
      };
      Cache2.prototype.del = function Cache_del(key) {
        delete this._cache[key];
      };
      Cache2.prototype.clear = function Cache_clear() {
        this._cache = {};
      };
    }
  });

  // node_modules/ajv/lib/compile/formats.js
  var require_formats = __commonJS({
    "node_modules/ajv/lib/compile/formats.js"(exports2, module2) {
      "use strict";
      var util = require_util();
      var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
      var DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
      var HOSTNAME = /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i;
      var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
      var URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
      var URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
      var URL2 = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
      var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
      var JSON_POINTER = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
      var JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
      var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;
      module2.exports = formats;
      function formats(mode) {
        mode = mode == "full" ? "full" : "fast";
        return util.copy(formats[mode]);
      }
      formats.fast = {
        date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
        time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,
        "date-time": /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,
        uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
        "uri-reference": /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
        "uri-template": URITEMPLATE,
        url: URL2,
        email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
        hostname: HOSTNAME,
        ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
        ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
        regex,
        uuid: UUID,
        "json-pointer": JSON_POINTER,
        "json-pointer-uri-fragment": JSON_POINTER_URI_FRAGMENT,
        "relative-json-pointer": RELATIVE_JSON_POINTER
      };
      formats.full = {
        date,
        time,
        "date-time": date_time,
        uri,
        "uri-reference": URIREF,
        "uri-template": URITEMPLATE,
        url: URL2,
        email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
        hostname: HOSTNAME,
        ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
        ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
        regex,
        uuid: UUID,
        "json-pointer": JSON_POINTER,
        "json-pointer-uri-fragment": JSON_POINTER_URI_FRAGMENT,
        "relative-json-pointer": RELATIVE_JSON_POINTER
      };
      function isLeapYear(year) {
        return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
      }
      function date(str) {
        var matches = str.match(DATE);
        if (!matches)
          return false;
        var year = +matches[1];
        var month = +matches[2];
        var day = +matches[3];
        return month >= 1 && month <= 12 && day >= 1 && day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);
      }
      function time(str, full) {
        var matches = str.match(TIME);
        if (!matches)
          return false;
        var hour = matches[1];
        var minute = matches[2];
        var second = matches[3];
        var timeZone = matches[5];
        return (hour <= 23 && minute <= 59 && second <= 59 || hour == 23 && minute == 59 && second == 60) && (!full || timeZone);
      }
      var DATE_TIME_SEPARATOR = /t|\s/i;
      function date_time(str) {
        var dateTime = str.split(DATE_TIME_SEPARATOR);
        return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
      }
      var NOT_URI_FRAGMENT = /\/|:/;
      function uri(str) {
        return NOT_URI_FRAGMENT.test(str) && URI.test(str);
      }
      var Z_ANCHOR = /[^\\]\\Z/;
      function regex(str) {
        if (Z_ANCHOR.test(str))
          return false;
        try {
          new RegExp(str);
          return true;
        } catch (e) {
          return false;
        }
      }
    }
  });

  // node_modules/ajv/lib/dotjs/ref.js
  var require_ref = __commonJS({
    "node_modules/ajv/lib/dotjs/ref.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_ref(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $async, $refCode;
        if ($schema == "#" || $schema == "#/") {
          if (it.isRoot) {
            $async = it.async;
            $refCode = "validate";
          } else {
            $async = it.root.schema.$async === true;
            $refCode = "root.refVal[0]";
          }
        } else {
          var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
          if ($refVal === void 0) {
            var $message = it.MissingRefError.message(it.baseId, $schema);
            if (it.opts.missingRefs == "fail") {
              it.logger.error($message);
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = "";
              if (it.createErrors !== false) {
                out += " { keyword: '$ref' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { ref: '" + it.util.escapeQuotes($schema) + "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: 'can\\'t resolve reference " + it.util.escapeQuotes($schema) + "' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: " + it.util.toQuotedString($schema) + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); ";
                } else {
                  out += " validate.errors = [" + __err + "]; return false; ";
                }
              } else {
                out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
              }
              if ($breakOnError) {
                out += " if (false) { ";
              }
            } else if (it.opts.missingRefs == "ignore") {
              it.logger.warn($message);
              if ($breakOnError) {
                out += " if (true) { ";
              }
            } else {
              throw new it.MissingRefError(it.baseId, $schema, $message);
            }
          } else if ($refVal.inline) {
            var $it = it.util.copy(it);
            $it.level++;
            var $nextValid = "valid" + $it.level;
            $it.schema = $refVal.schema;
            $it.schemaPath = "";
            $it.errSchemaPath = $schema;
            var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
            out += " " + $code + " ";
            if ($breakOnError) {
              out += " if (" + $nextValid + ") { ";
            }
          } else {
            $async = $refVal.$async === true || it.async && $refVal.$async !== false;
            $refCode = $refVal.code;
          }
        }
        if ($refCode) {
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.opts.passContext) {
            out += " " + $refCode + ".call(this, ";
          } else {
            out += " " + $refCode + "( ";
          }
          out += " " + $data + ", (dataPath || '')";
          if (it.errorPath != '""') {
            out += " + " + it.errorPath;
          }
          var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty";
          out += " , " + $parentData + " , " + $parentDataProperty + ", rootData)  ";
          var __callValidate = out;
          out = $$outStack.pop();
          if ($async) {
            if (!it.async)
              throw new Error("async schema referenced by sync schema");
            if ($breakOnError) {
              out += " var " + $valid + "; ";
            }
            out += " try { await " + __callValidate + "; ";
            if ($breakOnError) {
              out += " " + $valid + " = true; ";
            }
            out += " } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ";
            if ($breakOnError) {
              out += " " + $valid + " = false; ";
            }
            out += " } ";
            if ($breakOnError) {
              out += " if (" + $valid + ") { ";
            }
          } else {
            out += " if (!" + __callValidate + ") { if (vErrors === null) vErrors = " + $refCode + ".errors; else vErrors = vErrors.concat(" + $refCode + ".errors); errors = vErrors.length; } ";
            if ($breakOnError) {
              out += " else { ";
            }
          }
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/allOf.js
  var require_allOf = __commonJS({
    "node_modules/ajv/lib/dotjs/allOf.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_allOf(it, $keyword, $ruleType) {
        var out = " ";
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $it = it.util.copy(it);
        var $closingBraces = "";
        $it.level++;
        var $nextValid = "valid" + $it.level;
        var $currentBaseId = $it.baseId, $allSchemasEmpty = true;
        var arr1 = $schema;
        if (arr1) {
          var $sch, $i = -1, l1 = arr1.length - 1;
          while ($i < l1) {
            $sch = arr1[$i += 1];
            if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
              $allSchemasEmpty = false;
              $it.schema = $sch;
              $it.schemaPath = $schemaPath + "[" + $i + "]";
              $it.errSchemaPath = $errSchemaPath + "/" + $i;
              out += "  " + it.validate($it) + " ";
              $it.baseId = $currentBaseId;
              if ($breakOnError) {
                out += " if (" + $nextValid + ") { ";
                $closingBraces += "}";
              }
            }
          }
        }
        if ($breakOnError) {
          if ($allSchemasEmpty) {
            out += " if (true) { ";
          } else {
            out += " " + $closingBraces.slice(0, -1) + " ";
          }
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/anyOf.js
  var require_anyOf = __commonJS({
    "node_modules/ajv/lib/dotjs/anyOf.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_anyOf(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        var $closingBraces = "";
        $it.level++;
        var $nextValid = "valid" + $it.level;
        var $noEmptySchema = $schema.every(function($sch2) {
          return it.opts.strictKeywords ? typeof $sch2 == "object" && Object.keys($sch2).length > 0 || $sch2 === false : it.util.schemaHasRules($sch2, it.RULES.all);
        });
        if ($noEmptySchema) {
          var $currentBaseId = $it.baseId;
          out += " var " + $errs + " = errors; var " + $valid + " = false;  ";
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          var arr1 = $schema;
          if (arr1) {
            var $sch, $i = -1, l1 = arr1.length - 1;
            while ($i < l1) {
              $sch = arr1[$i += 1];
              $it.schema = $sch;
              $it.schemaPath = $schemaPath + "[" + $i + "]";
              $it.errSchemaPath = $errSchemaPath + "/" + $i;
              out += "  " + it.validate($it) + " ";
              $it.baseId = $currentBaseId;
              out += " " + $valid + " = " + $valid + " || " + $nextValid + "; if (!" + $valid + ") { ";
              $closingBraces += "}";
            }
          }
          it.compositeRule = $it.compositeRule = $wasComposite;
          out += " " + $closingBraces + " if (!" + $valid + ") {   var err =   ";
          if (it.createErrors !== false) {
            out += " { keyword: 'anyOf' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
            if (it.opts.messages !== false) {
              out += " , message: 'should match some schema in anyOf' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError(vErrors); ";
            } else {
              out += " validate.errors = vErrors; return false; ";
            }
          }
          out += " } else {  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; } ";
          if (it.opts.allErrors) {
            out += " } ";
          }
        } else {
          if ($breakOnError) {
            out += " if (true) { ";
          }
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/comment.js
  var require_comment = __commonJS({
    "node_modules/ajv/lib/dotjs/comment.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_comment(it, $keyword, $ruleType) {
        var out = " ";
        var $schema = it.schema[$keyword];
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $comment = it.util.toQuotedString($schema);
        if (it.opts.$comment === true) {
          out += " console.log(" + $comment + ");";
        } else if (typeof it.opts.$comment == "function") {
          out += " self._opts.$comment(" + $comment + ", " + it.util.toQuotedString($errSchemaPath) + ", validate.root.schema);";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/const.js
  var require_const = __commonJS({
    "node_modules/ajv/lib/dotjs/const.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_const(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        if (!$isData) {
          out += " var schema" + $lvl + " = validate.schema" + $schemaPath + ";";
        }
        out += "var " + $valid + " = equal(" + $data + ", schema" + $lvl + "); if (!" + $valid + ") {   ";
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: 'const' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { allowedValue: schema" + $lvl + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should be equal to constant' ";
          }
          if (it.opts.verbose) {
            out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += " }";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/contains.js
  var require_contains = __commonJS({
    "node_modules/ajv/lib/dotjs/contains.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_contains(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        var $closingBraces = "";
        $it.level++;
        var $nextValid = "valid" + $it.level;
        var $idx = "i" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $currentBaseId = it.baseId, $nonEmptySchema = it.opts.strictKeywords ? typeof $schema == "object" && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all);
        out += "var " + $errs + " = errors;var " + $valid + ";";
        if ($nonEmptySchema) {
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          $it.schema = $schema;
          $it.schemaPath = $schemaPath;
          $it.errSchemaPath = $errSchemaPath;
          out += " var " + $nextValid + " = false; for (var " + $idx + " = 0; " + $idx + " < " + $data + ".length; " + $idx + "++) { ";
          $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
          var $passData = $data + "[" + $idx + "]";
          $it.dataPathArr[$dataNxt] = $idx;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
          } else {
            out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
          }
          out += " if (" + $nextValid + ") break; }  ";
          it.compositeRule = $it.compositeRule = $wasComposite;
          out += " " + $closingBraces + " if (!" + $nextValid + ") {";
        } else {
          out += " if (" + $data + ".length == 0) {";
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: 'contains' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
          if (it.opts.messages !== false) {
            out += " , message: 'should contain a valid item' ";
          }
          if (it.opts.verbose) {
            out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += " } else { ";
        if ($nonEmptySchema) {
          out += "  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; } ";
        }
        if (it.opts.allErrors) {
          out += " } ";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/dependencies.js
  var require_dependencies = __commonJS({
    "node_modules/ajv/lib/dotjs/dependencies.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_dependencies(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        var $closingBraces = "";
        $it.level++;
        var $nextValid = "valid" + $it.level;
        var $schemaDeps = {}, $propertyDeps = {}, $ownProperties = it.opts.ownProperties;
        for ($property in $schema) {
          if ($property == "__proto__")
            continue;
          var $sch = $schema[$property];
          var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
          $deps[$property] = $sch;
        }
        out += "var " + $errs + " = errors;";
        var $currentErrorPath = it.errorPath;
        out += "var missing" + $lvl + ";";
        for (var $property in $propertyDeps) {
          $deps = $propertyDeps[$property];
          if ($deps.length) {
            out += " if ( " + $data + it.util.getProperty($property) + " !== undefined ";
            if ($ownProperties) {
              out += " && Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($property) + "') ";
            }
            if ($breakOnError) {
              out += " && ( ";
              var arr1 = $deps;
              if (arr1) {
                var $propertyKey, $i = -1, l1 = arr1.length - 1;
                while ($i < l1) {
                  $propertyKey = arr1[$i += 1];
                  if ($i) {
                    out += " || ";
                  }
                  var $prop = it.util.getProperty($propertyKey), $useData = $data + $prop;
                  out += " ( ( " + $useData + " === undefined ";
                  if ($ownProperties) {
                    out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                  }
                  out += ") && (missing" + $lvl + " = " + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ") ) ";
                }
              }
              out += ")) {  ";
              var $propertyPath = "missing" + $lvl, $missingProperty = "' + " + $propertyPath + " + '";
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + " + " + $propertyPath;
              }
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = "";
              if (it.createErrors !== false) {
                out += " { keyword: 'dependencies' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { property: '" + it.util.escapeQuotes($property) + "', missingProperty: '" + $missingProperty + "', depsCount: " + $deps.length + ", deps: '" + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: 'should have ";
                  if ($deps.length == 1) {
                    out += "property " + it.util.escapeQuotes($deps[0]);
                  } else {
                    out += "properties " + it.util.escapeQuotes($deps.join(", "));
                  }
                  out += " when property " + it.util.escapeQuotes($property) + " is present' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); ";
                } else {
                  out += " validate.errors = [" + __err + "]; return false; ";
                }
              } else {
                out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
              }
            } else {
              out += " ) { ";
              var arr2 = $deps;
              if (arr2) {
                var $propertyKey, i2 = -1, l2 = arr2.length - 1;
                while (i2 < l2) {
                  $propertyKey = arr2[i2 += 1];
                  var $prop = it.util.getProperty($propertyKey), $missingProperty = it.util.escapeQuotes($propertyKey), $useData = $data + $prop;
                  if (it.opts._errorDataPathProperty) {
                    it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                  }
                  out += " if ( " + $useData + " === undefined ";
                  if ($ownProperties) {
                    out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                  }
                  out += ") {  var err =   ";
                  if (it.createErrors !== false) {
                    out += " { keyword: 'dependencies' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { property: '" + it.util.escapeQuotes($property) + "', missingProperty: '" + $missingProperty + "', depsCount: " + $deps.length + ", deps: '" + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + "' } ";
                    if (it.opts.messages !== false) {
                      out += " , message: 'should have ";
                      if ($deps.length == 1) {
                        out += "property " + it.util.escapeQuotes($deps[0]);
                      } else {
                        out += "properties " + it.util.escapeQuotes($deps.join(", "));
                      }
                      out += " when property " + it.util.escapeQuotes($property) + " is present' ";
                    }
                    if (it.opts.verbose) {
                      out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                    }
                    out += " } ";
                  } else {
                    out += " {} ";
                  }
                  out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";
                }
              }
            }
            out += " }   ";
            if ($breakOnError) {
              $closingBraces += "}";
              out += " else { ";
            }
          }
        }
        it.errorPath = $currentErrorPath;
        var $currentBaseId = $it.baseId;
        for (var $property in $schemaDeps) {
          var $sch = $schemaDeps[$property];
          if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
            out += " " + $nextValid + " = true; if ( " + $data + it.util.getProperty($property) + " !== undefined ";
            if ($ownProperties) {
              out += " && Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($property) + "') ";
            }
            out += ") { ";
            $it.schema = $sch;
            $it.schemaPath = $schemaPath + it.util.getProperty($property);
            $it.errSchemaPath = $errSchemaPath + "/" + it.util.escapeFragment($property);
            out += "  " + it.validate($it) + " ";
            $it.baseId = $currentBaseId;
            out += " }  ";
            if ($breakOnError) {
              out += " if (" + $nextValid + ") { ";
              $closingBraces += "}";
            }
          }
        }
        if ($breakOnError) {
          out += "   " + $closingBraces + " if (" + $errs + " == errors) {";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/enum.js
  var require_enum = __commonJS({
    "node_modules/ajv/lib/dotjs/enum.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_enum(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        var $i = "i" + $lvl, $vSchema = "schema" + $lvl;
        if (!$isData) {
          out += " var " + $vSchema + " = validate.schema" + $schemaPath + ";";
        }
        out += "var " + $valid + ";";
        if ($isData) {
          out += " if (schema" + $lvl + " === undefined) " + $valid + " = true; else if (!Array.isArray(schema" + $lvl + ")) " + $valid + " = false; else {";
        }
        out += "" + $valid + " = false;for (var " + $i + "=0; " + $i + "<" + $vSchema + ".length; " + $i + "++) if (equal(" + $data + ", " + $vSchema + "[" + $i + "])) { " + $valid + " = true; break; }";
        if ($isData) {
          out += "  }  ";
        }
        out += " if (!" + $valid + ") {   ";
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: 'enum' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { allowedValues: schema" + $lvl + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should be equal to one of the allowed values' ";
          }
          if (it.opts.verbose) {
            out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += " }";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/format.js
  var require_format = __commonJS({
    "node_modules/ajv/lib/dotjs/format.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_format(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        if (it.opts.format === false) {
          if ($breakOnError) {
            out += " if (true) { ";
          }
          return out;
        }
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        var $unknownFormats = it.opts.unknownFormats, $allowUnknown = Array.isArray($unknownFormats);
        if ($isData) {
          var $format = "format" + $lvl, $isObject = "isObject" + $lvl, $formatType = "formatType" + $lvl;
          out += " var " + $format + " = formats[" + $schemaValue + "]; var " + $isObject + " = typeof " + $format + " == 'object' && !(" + $format + " instanceof RegExp) && " + $format + ".validate; var " + $formatType + " = " + $isObject + " && " + $format + ".type || 'string'; if (" + $isObject + ") { ";
          if (it.async) {
            out += " var async" + $lvl + " = " + $format + ".async; ";
          }
          out += " " + $format + " = " + $format + ".validate; } if (  ";
          if ($isData) {
            out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'string') || ";
          }
          out += " (";
          if ($unknownFormats != "ignore") {
            out += " (" + $schemaValue + " && !" + $format + " ";
            if ($allowUnknown) {
              out += " && self._opts.unknownFormats.indexOf(" + $schemaValue + ") == -1 ";
            }
            out += ") || ";
          }
          out += " (" + $format + " && " + $formatType + " == '" + $ruleType + "' && !(typeof " + $format + " == 'function' ? ";
          if (it.async) {
            out += " (async" + $lvl + " ? await " + $format + "(" + $data + ") : " + $format + "(" + $data + ")) ";
          } else {
            out += " " + $format + "(" + $data + ") ";
          }
          out += " : " + $format + ".test(" + $data + "))))) {";
        } else {
          var $format = it.formats[$schema];
          if (!$format) {
            if ($unknownFormats == "ignore") {
              it.logger.warn('unknown format "' + $schema + '" ignored in schema at path "' + it.errSchemaPath + '"');
              if ($breakOnError) {
                out += " if (true) { ";
              }
              return out;
            } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
              if ($breakOnError) {
                out += " if (true) { ";
              }
              return out;
            } else {
              throw new Error('unknown format "' + $schema + '" is used in schema at path "' + it.errSchemaPath + '"');
            }
          }
          var $isObject = typeof $format == "object" && !($format instanceof RegExp) && $format.validate;
          var $formatType = $isObject && $format.type || "string";
          if ($isObject) {
            var $async = $format.async === true;
            $format = $format.validate;
          }
          if ($formatType != $ruleType) {
            if ($breakOnError) {
              out += " if (true) { ";
            }
            return out;
          }
          if ($async) {
            if (!it.async)
              throw new Error("async format in sync schema");
            var $formatRef = "formats" + it.util.getProperty($schema) + ".validate";
            out += " if (!(await " + $formatRef + "(" + $data + "))) { ";
          } else {
            out += " if (! ";
            var $formatRef = "formats" + it.util.getProperty($schema);
            if ($isObject)
              $formatRef += ".validate";
            if (typeof $format == "function") {
              out += " " + $formatRef + "(" + $data + ") ";
            } else {
              out += " " + $formatRef + ".test(" + $data + ") ";
            }
            out += ") { ";
          }
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: 'format' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { format:  ";
          if ($isData) {
            out += "" + $schemaValue;
          } else {
            out += "" + it.util.toQuotedString($schema);
          }
          out += "  } ";
          if (it.opts.messages !== false) {
            out += ` , message: 'should match format "`;
            if ($isData) {
              out += "' + " + $schemaValue + " + '";
            } else {
              out += "" + it.util.escapeQuotes($schema);
            }
            out += `"' `;
          }
          if (it.opts.verbose) {
            out += " , schema:  ";
            if ($isData) {
              out += "validate.schema" + $schemaPath;
            } else {
              out += "" + it.util.toQuotedString($schema);
            }
            out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += " } ";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/if.js
  var require_if = __commonJS({
    "node_modules/ajv/lib/dotjs/if.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_if(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        $it.level++;
        var $nextValid = "valid" + $it.level;
        var $thenSch = it.schema["then"], $elseSch = it.schema["else"], $thenPresent = $thenSch !== void 0 && (it.opts.strictKeywords ? typeof $thenSch == "object" && Object.keys($thenSch).length > 0 || $thenSch === false : it.util.schemaHasRules($thenSch, it.RULES.all)), $elsePresent = $elseSch !== void 0 && (it.opts.strictKeywords ? typeof $elseSch == "object" && Object.keys($elseSch).length > 0 || $elseSch === false : it.util.schemaHasRules($elseSch, it.RULES.all)), $currentBaseId = $it.baseId;
        if ($thenPresent || $elsePresent) {
          var $ifClause;
          $it.createErrors = false;
          $it.schema = $schema;
          $it.schemaPath = $schemaPath;
          $it.errSchemaPath = $errSchemaPath;
          out += " var " + $errs + " = errors; var " + $valid + " = true;  ";
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          out += "  " + it.validate($it) + " ";
          $it.baseId = $currentBaseId;
          $it.createErrors = true;
          out += "  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; }  ";
          it.compositeRule = $it.compositeRule = $wasComposite;
          if ($thenPresent) {
            out += " if (" + $nextValid + ") {  ";
            $it.schema = it.schema["then"];
            $it.schemaPath = it.schemaPath + ".then";
            $it.errSchemaPath = it.errSchemaPath + "/then";
            out += "  " + it.validate($it) + " ";
            $it.baseId = $currentBaseId;
            out += " " + $valid + " = " + $nextValid + "; ";
            if ($thenPresent && $elsePresent) {
              $ifClause = "ifClause" + $lvl;
              out += " var " + $ifClause + " = 'then'; ";
            } else {
              $ifClause = "'then'";
            }
            out += " } ";
            if ($elsePresent) {
              out += " else { ";
            }
          } else {
            out += " if (!" + $nextValid + ") { ";
          }
          if ($elsePresent) {
            $it.schema = it.schema["else"];
            $it.schemaPath = it.schemaPath + ".else";
            $it.errSchemaPath = it.errSchemaPath + "/else";
            out += "  " + it.validate($it) + " ";
            $it.baseId = $currentBaseId;
            out += " " + $valid + " = " + $nextValid + "; ";
            if ($thenPresent && $elsePresent) {
              $ifClause = "ifClause" + $lvl;
              out += " var " + $ifClause + " = 'else'; ";
            } else {
              $ifClause = "'else'";
            }
            out += " } ";
          }
          out += " if (!" + $valid + ") {   var err =   ";
          if (it.createErrors !== false) {
            out += " { keyword: 'if' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { failingKeyword: " + $ifClause + " } ";
            if (it.opts.messages !== false) {
              out += ` , message: 'should match "' + ` + $ifClause + ` + '" schema' `;
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError(vErrors); ";
            } else {
              out += " validate.errors = vErrors; return false; ";
            }
          }
          out += " }   ";
          if ($breakOnError) {
            out += " else { ";
          }
        } else {
          if ($breakOnError) {
            out += " if (true) { ";
          }
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/items.js
  var require_items2 = __commonJS({
    "node_modules/ajv/lib/dotjs/items.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_items(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        var $closingBraces = "";
        $it.level++;
        var $nextValid = "valid" + $it.level;
        var $idx = "i" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $currentBaseId = it.baseId;
        out += "var " + $errs + " = errors;var " + $valid + ";";
        if (Array.isArray($schema)) {
          var $additionalItems = it.schema.additionalItems;
          if ($additionalItems === false) {
            out += " " + $valid + " = " + $data + ".length <= " + $schema.length + "; ";
            var $currErrSchemaPath = $errSchemaPath;
            $errSchemaPath = it.errSchemaPath + "/additionalItems";
            out += "  if (!" + $valid + ") {   ";
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = "";
            if (it.createErrors !== false) {
              out += " { keyword: 'additionalItems' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schema.length + " } ";
              if (it.opts.messages !== false) {
                out += " , message: 'should NOT have more than " + $schema.length + " items' ";
              }
              if (it.opts.verbose) {
                out += " , schema: false , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
              }
              out += " } ";
            } else {
              out += " {} ";
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              if (it.async) {
                out += " throw new ValidationError([" + __err + "]); ";
              } else {
                out += " validate.errors = [" + __err + "]; return false; ";
              }
            } else {
              out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
            }
            out += " } ";
            $errSchemaPath = $currErrSchemaPath;
            if ($breakOnError) {
              $closingBraces += "}";
              out += " else { ";
            }
          }
          var arr1 = $schema;
          if (arr1) {
            var $sch, $i = -1, l1 = arr1.length - 1;
            while ($i < l1) {
              $sch = arr1[$i += 1];
              if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
                out += " " + $nextValid + " = true; if (" + $data + ".length > " + $i + ") { ";
                var $passData = $data + "[" + $i + "]";
                $it.schema = $sch;
                $it.schemaPath = $schemaPath + "[" + $i + "]";
                $it.errSchemaPath = $errSchemaPath + "/" + $i;
                $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
                $it.dataPathArr[$dataNxt] = $i;
                var $code = it.validate($it);
                $it.baseId = $currentBaseId;
                if (it.util.varOccurences($code, $nextData) < 2) {
                  out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
                } else {
                  out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
                }
                out += " }  ";
                if ($breakOnError) {
                  out += " if (" + $nextValid + ") { ";
                  $closingBraces += "}";
                }
              }
            }
          }
          if (typeof $additionalItems == "object" && (it.opts.strictKeywords ? typeof $additionalItems == "object" && Object.keys($additionalItems).length > 0 || $additionalItems === false : it.util.schemaHasRules($additionalItems, it.RULES.all))) {
            $it.schema = $additionalItems;
            $it.schemaPath = it.schemaPath + ".additionalItems";
            $it.errSchemaPath = it.errSchemaPath + "/additionalItems";
            out += " " + $nextValid + " = true; if (" + $data + ".length > " + $schema.length + ") {  for (var " + $idx + " = " + $schema.length + "; " + $idx + " < " + $data + ".length; " + $idx + "++) { ";
            $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
            var $passData = $data + "[" + $idx + "]";
            $it.dataPathArr[$dataNxt] = $idx;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
            } else {
              out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
            }
            if ($breakOnError) {
              out += " if (!" + $nextValid + ") break; ";
            }
            out += " } }  ";
            if ($breakOnError) {
              out += " if (" + $nextValid + ") { ";
              $closingBraces += "}";
            }
          }
        } else if (it.opts.strictKeywords ? typeof $schema == "object" && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all)) {
          $it.schema = $schema;
          $it.schemaPath = $schemaPath;
          $it.errSchemaPath = $errSchemaPath;
          out += "  for (var " + $idx + " = " + 0 + "; " + $idx + " < " + $data + ".length; " + $idx + "++) { ";
          $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
          var $passData = $data + "[" + $idx + "]";
          $it.dataPathArr[$dataNxt] = $idx;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
          } else {
            out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
          }
          if ($breakOnError) {
            out += " if (!" + $nextValid + ") break; ";
          }
          out += " }";
        }
        if ($breakOnError) {
          out += " " + $closingBraces + " if (" + $errs + " == errors) {";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/_limit.js
  var require_limit = __commonJS({
    "node_modules/ajv/lib/dotjs/_limit.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate__limit(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $errorKeyword;
        var $data = "data" + ($dataLvl || "");
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        var $isMax = $keyword == "maximum", $exclusiveKeyword = $isMax ? "exclusiveMaximum" : "exclusiveMinimum", $schemaExcl = it.schema[$exclusiveKeyword], $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data, $op = $isMax ? "<" : ">", $notOp = $isMax ? ">" : "<", $errorKeyword = void 0;
        if (!($isData || typeof $schema == "number" || $schema === void 0)) {
          throw new Error($keyword + " must be number");
        }
        if (!($isDataExcl || $schemaExcl === void 0 || typeof $schemaExcl == "number" || typeof $schemaExcl == "boolean")) {
          throw new Error($exclusiveKeyword + " must be number or boolean");
        }
        if ($isDataExcl) {
          var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr), $exclusive = "exclusive" + $lvl, $exclType = "exclType" + $lvl, $exclIsNumber = "exclIsNumber" + $lvl, $opExpr = "op" + $lvl, $opStr = "' + " + $opExpr + " + '";
          out += " var schemaExcl" + $lvl + " = " + $schemaValueExcl + "; ";
          $schemaValueExcl = "schemaExcl" + $lvl;
          out += " var " + $exclusive + "; var " + $exclType + " = typeof " + $schemaValueExcl + "; if (" + $exclType + " != 'boolean' && " + $exclType + " != 'undefined' && " + $exclType + " != 'number') { ";
          var $errorKeyword = $exclusiveKeyword;
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: '" + ($errorKeyword || "_exclusiveLimit") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
            if (it.opts.messages !== false) {
              out += " , message: '" + $exclusiveKeyword + " should be boolean' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          out += " } else if ( ";
          if ($isData) {
            out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
          }
          out += " " + $exclType + " == 'number' ? ( (" + $exclusive + " = " + $schemaValue + " === undefined || " + $schemaValueExcl + " " + $op + "= " + $schemaValue + ") ? " + $data + " " + $notOp + "= " + $schemaValueExcl + " : " + $data + " " + $notOp + " " + $schemaValue + " ) : ( (" + $exclusive + " = " + $schemaValueExcl + " === true) ? " + $data + " " + $notOp + "= " + $schemaValue + " : " + $data + " " + $notOp + " " + $schemaValue + " ) || " + $data + " !== " + $data + ") { var op" + $lvl + " = " + $exclusive + " ? '" + $op + "' : '" + $op + "='; ";
          if ($schema === void 0) {
            $errorKeyword = $exclusiveKeyword;
            $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword;
            $schemaValue = $schemaValueExcl;
            $isData = $isDataExcl;
          }
        } else {
          var $exclIsNumber = typeof $schemaExcl == "number", $opStr = $op;
          if ($exclIsNumber && $isData) {
            var $opExpr = "'" + $opStr + "'";
            out += " if ( ";
            if ($isData) {
              out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
            }
            out += " ( " + $schemaValue + " === undefined || " + $schemaExcl + " " + $op + "= " + $schemaValue + " ? " + $data + " " + $notOp + "= " + $schemaExcl + " : " + $data + " " + $notOp + " " + $schemaValue + " ) || " + $data + " !== " + $data + ") { ";
          } else {
            if ($exclIsNumber && $schema === void 0) {
              $exclusive = true;
              $errorKeyword = $exclusiveKeyword;
              $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword;
              $schemaValue = $schemaExcl;
              $notOp += "=";
            } else {
              if ($exclIsNumber)
                $schemaValue = Math[$isMax ? "min" : "max"]($schemaExcl, $schema);
              if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
                $exclusive = true;
                $errorKeyword = $exclusiveKeyword;
                $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword;
                $notOp += "=";
              } else {
                $exclusive = false;
                $opStr += "=";
              }
            }
            var $opExpr = "'" + $opStr + "'";
            out += " if ( ";
            if ($isData) {
              out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
            }
            out += " " + $data + " " + $notOp + " " + $schemaValue + " || " + $data + " !== " + $data + ") { ";
          }
        }
        $errorKeyword = $errorKeyword || $keyword;
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + ($errorKeyword || "_limit") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { comparison: " + $opExpr + ", limit: " + $schemaValue + ", exclusive: " + $exclusive + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should be " + $opStr + " ";
            if ($isData) {
              out += "' + " + $schemaValue;
            } else {
              out += "" + $schemaValue + "'";
            }
          }
          if (it.opts.verbose) {
            out += " , schema:  ";
            if ($isData) {
              out += "validate.schema" + $schemaPath;
            } else {
              out += "" + $schema;
            }
            out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += " } ";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/_limitItems.js
  var require_limitItems = __commonJS({
    "node_modules/ajv/lib/dotjs/_limitItems.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate__limitItems(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $errorKeyword;
        var $data = "data" + ($dataLvl || "");
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        if (!($isData || typeof $schema == "number")) {
          throw new Error($keyword + " must be number");
        }
        var $op = $keyword == "maxItems" ? ">" : "<";
        out += "if ( ";
        if ($isData) {
          out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
        }
        out += " " + $data + ".length " + $op + " " + $schemaValue + ") { ";
        var $errorKeyword = $keyword;
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + ($errorKeyword || "_limitItems") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schemaValue + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should NOT have ";
            if ($keyword == "maxItems") {
              out += "more";
            } else {
              out += "fewer";
            }
            out += " than ";
            if ($isData) {
              out += "' + " + $schemaValue + " + '";
            } else {
              out += "" + $schema;
            }
            out += " items' ";
          }
          if (it.opts.verbose) {
            out += " , schema:  ";
            if ($isData) {
              out += "validate.schema" + $schemaPath;
            } else {
              out += "" + $schema;
            }
            out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += "} ";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/_limitLength.js
  var require_limitLength = __commonJS({
    "node_modules/ajv/lib/dotjs/_limitLength.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate__limitLength(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $errorKeyword;
        var $data = "data" + ($dataLvl || "");
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        if (!($isData || typeof $schema == "number")) {
          throw new Error($keyword + " must be number");
        }
        var $op = $keyword == "maxLength" ? ">" : "<";
        out += "if ( ";
        if ($isData) {
          out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
        }
        if (it.opts.unicode === false) {
          out += " " + $data + ".length ";
        } else {
          out += " ucs2length(" + $data + ") ";
        }
        out += " " + $op + " " + $schemaValue + ") { ";
        var $errorKeyword = $keyword;
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + ($errorKeyword || "_limitLength") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schemaValue + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should NOT be ";
            if ($keyword == "maxLength") {
              out += "longer";
            } else {
              out += "shorter";
            }
            out += " than ";
            if ($isData) {
              out += "' + " + $schemaValue + " + '";
            } else {
              out += "" + $schema;
            }
            out += " characters' ";
          }
          if (it.opts.verbose) {
            out += " , schema:  ";
            if ($isData) {
              out += "validate.schema" + $schemaPath;
            } else {
              out += "" + $schema;
            }
            out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += "} ";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/_limitProperties.js
  var require_limitProperties = __commonJS({
    "node_modules/ajv/lib/dotjs/_limitProperties.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate__limitProperties(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $errorKeyword;
        var $data = "data" + ($dataLvl || "");
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        if (!($isData || typeof $schema == "number")) {
          throw new Error($keyword + " must be number");
        }
        var $op = $keyword == "maxProperties" ? ">" : "<";
        out += "if ( ";
        if ($isData) {
          out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
        }
        out += " Object.keys(" + $data + ").length " + $op + " " + $schemaValue + ") { ";
        var $errorKeyword = $keyword;
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + ($errorKeyword || "_limitProperties") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schemaValue + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should NOT have ";
            if ($keyword == "maxProperties") {
              out += "more";
            } else {
              out += "fewer";
            }
            out += " than ";
            if ($isData) {
              out += "' + " + $schemaValue + " + '";
            } else {
              out += "" + $schema;
            }
            out += " properties' ";
          }
          if (it.opts.verbose) {
            out += " , schema:  ";
            if ($isData) {
              out += "validate.schema" + $schemaPath;
            } else {
              out += "" + $schema;
            }
            out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += "} ";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/multipleOf.js
  var require_multipleOf = __commonJS({
    "node_modules/ajv/lib/dotjs/multipleOf.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_multipleOf(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        if (!($isData || typeof $schema == "number")) {
          throw new Error($keyword + " must be number");
        }
        out += "var division" + $lvl + ";if (";
        if ($isData) {
          out += " " + $schemaValue + " !== undefined && ( typeof " + $schemaValue + " != 'number' || ";
        }
        out += " (division" + $lvl + " = " + $data + " / " + $schemaValue + ", ";
        if (it.opts.multipleOfPrecision) {
          out += " Math.abs(Math.round(division" + $lvl + ") - division" + $lvl + ") > 1e-" + it.opts.multipleOfPrecision + " ";
        } else {
          out += " division" + $lvl + " !== parseInt(division" + $lvl + ") ";
        }
        out += " ) ";
        if ($isData) {
          out += "  )  ";
        }
        out += " ) {   ";
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: 'multipleOf' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { multipleOf: " + $schemaValue + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should be multiple of ";
            if ($isData) {
              out += "' + " + $schemaValue;
            } else {
              out += "" + $schemaValue + "'";
            }
          }
          if (it.opts.verbose) {
            out += " , schema:  ";
            if ($isData) {
              out += "validate.schema" + $schemaPath;
            } else {
              out += "" + $schema;
            }
            out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += "} ";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/not.js
  var require_not = __commonJS({
    "node_modules/ajv/lib/dotjs/not.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_not(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        $it.level++;
        var $nextValid = "valid" + $it.level;
        if (it.opts.strictKeywords ? typeof $schema == "object" && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all)) {
          $it.schema = $schema;
          $it.schemaPath = $schemaPath;
          $it.errSchemaPath = $errSchemaPath;
          out += " var " + $errs + " = errors;  ";
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          $it.createErrors = false;
          var $allErrorsOption;
          if ($it.opts.allErrors) {
            $allErrorsOption = $it.opts.allErrors;
            $it.opts.allErrors = false;
          }
          out += " " + it.validate($it) + " ";
          $it.createErrors = true;
          if ($allErrorsOption)
            $it.opts.allErrors = $allErrorsOption;
          it.compositeRule = $it.compositeRule = $wasComposite;
          out += " if (" + $nextValid + ") {   ";
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: 'not' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
            if (it.opts.messages !== false) {
              out += " , message: 'should NOT be valid' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          out += " } else {  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; } ";
          if (it.opts.allErrors) {
            out += " } ";
          }
        } else {
          out += "  var err =   ";
          if (it.createErrors !== false) {
            out += " { keyword: 'not' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
            if (it.opts.messages !== false) {
              out += " , message: 'should NOT be valid' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          if ($breakOnError) {
            out += " if (false) { ";
          }
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/oneOf.js
  var require_oneOf = __commonJS({
    "node_modules/ajv/lib/dotjs/oneOf.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_oneOf(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        var $closingBraces = "";
        $it.level++;
        var $nextValid = "valid" + $it.level;
        var $currentBaseId = $it.baseId, $prevValid = "prevValid" + $lvl, $passingSchemas = "passingSchemas" + $lvl;
        out += "var " + $errs + " = errors , " + $prevValid + " = false , " + $valid + " = false , " + $passingSchemas + " = null; ";
        var $wasComposite = it.compositeRule;
        it.compositeRule = $it.compositeRule = true;
        var arr1 = $schema;
        if (arr1) {
          var $sch, $i = -1, l1 = arr1.length - 1;
          while ($i < l1) {
            $sch = arr1[$i += 1];
            if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
              $it.schema = $sch;
              $it.schemaPath = $schemaPath + "[" + $i + "]";
              $it.errSchemaPath = $errSchemaPath + "/" + $i;
              out += "  " + it.validate($it) + " ";
              $it.baseId = $currentBaseId;
            } else {
              out += " var " + $nextValid + " = true; ";
            }
            if ($i) {
              out += " if (" + $nextValid + " && " + $prevValid + ") { " + $valid + " = false; " + $passingSchemas + " = [" + $passingSchemas + ", " + $i + "]; } else { ";
              $closingBraces += "}";
            }
            out += " if (" + $nextValid + ") { " + $valid + " = " + $prevValid + " = true; " + $passingSchemas + " = " + $i + "; }";
          }
        }
        it.compositeRule = $it.compositeRule = $wasComposite;
        out += "" + $closingBraces + "if (!" + $valid + ") {   var err =   ";
        if (it.createErrors !== false) {
          out += " { keyword: 'oneOf' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { passingSchemas: " + $passingSchemas + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should match exactly one schema in oneOf' ";
          }
          if (it.opts.verbose) {
            out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError(vErrors); ";
          } else {
            out += " validate.errors = vErrors; return false; ";
          }
        }
        out += "} else {  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; }";
        if (it.opts.allErrors) {
          out += " } ";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/pattern.js
  var require_pattern = __commonJS({
    "node_modules/ajv/lib/dotjs/pattern.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_pattern(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        var $regexp = $isData ? "(new RegExp(" + $schemaValue + "))" : it.usePattern($schema);
        out += "if ( ";
        if ($isData) {
          out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'string') || ";
        }
        out += " !" + $regexp + ".test(" + $data + ") ) {   ";
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: 'pattern' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { pattern:  ";
          if ($isData) {
            out += "" + $schemaValue;
          } else {
            out += "" + it.util.toQuotedString($schema);
          }
          out += "  } ";
          if (it.opts.messages !== false) {
            out += ` , message: 'should match pattern "`;
            if ($isData) {
              out += "' + " + $schemaValue + " + '";
            } else {
              out += "" + it.util.escapeQuotes($schema);
            }
            out += `"' `;
          }
          if (it.opts.verbose) {
            out += " , schema:  ";
            if ($isData) {
              out += "validate.schema" + $schemaPath;
            } else {
              out += "" + it.util.toQuotedString($schema);
            }
            out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += "} ";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/properties.js
  var require_properties2 = __commonJS({
    "node_modules/ajv/lib/dotjs/properties.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_properties(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        var $closingBraces = "";
        $it.level++;
        var $nextValid = "valid" + $it.level;
        var $key = "key" + $lvl, $idx = "idx" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $dataProperties = "dataProperties" + $lvl;
        var $schemaKeys = Object.keys($schema || {}).filter(notProto), $pProperties = it.schema.patternProperties || {}, $pPropertyKeys = Object.keys($pProperties).filter(notProto), $aProperties = it.schema.additionalProperties, $someProperties = $schemaKeys.length || $pPropertyKeys.length, $noAdditional = $aProperties === false, $additionalIsSchema = typeof $aProperties == "object" && Object.keys($aProperties).length, $removeAdditional = it.opts.removeAdditional, $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional, $ownProperties = it.opts.ownProperties, $currentBaseId = it.baseId;
        var $required = it.schema.required;
        if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) {
          var $requiredHash = it.util.toHash($required);
        }
        function notProto(p) {
          return p !== "__proto__";
        }
        out += "var " + $errs + " = errors;var " + $nextValid + " = true;";
        if ($ownProperties) {
          out += " var " + $dataProperties + " = undefined;";
        }
        if ($checkAdditional) {
          if ($ownProperties) {
            out += " " + $dataProperties + " = " + $dataProperties + " || Object.keys(" + $data + "); for (var " + $idx + "=0; " + $idx + "<" + $dataProperties + ".length; " + $idx + "++) { var " + $key + " = " + $dataProperties + "[" + $idx + "]; ";
          } else {
            out += " for (var " + $key + " in " + $data + ") { ";
          }
          if ($someProperties) {
            out += " var isAdditional" + $lvl + " = !(false ";
            if ($schemaKeys.length) {
              if ($schemaKeys.length > 8) {
                out += " || validate.schema" + $schemaPath + ".hasOwnProperty(" + $key + ") ";
              } else {
                var arr1 = $schemaKeys;
                if (arr1) {
                  var $propertyKey, i1 = -1, l1 = arr1.length - 1;
                  while (i1 < l1) {
                    $propertyKey = arr1[i1 += 1];
                    out += " || " + $key + " == " + it.util.toQuotedString($propertyKey) + " ";
                  }
                }
              }
            }
            if ($pPropertyKeys.length) {
              var arr2 = $pPropertyKeys;
              if (arr2) {
                var $pProperty, $i = -1, l2 = arr2.length - 1;
                while ($i < l2) {
                  $pProperty = arr2[$i += 1];
                  out += " || " + it.usePattern($pProperty) + ".test(" + $key + ") ";
                }
              }
            }
            out += " ); if (isAdditional" + $lvl + ") { ";
          }
          if ($removeAdditional == "all") {
            out += " delete " + $data + "[" + $key + "]; ";
          } else {
            var $currentErrorPath = it.errorPath;
            var $additionalProperty = "' + " + $key + " + '";
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
            }
            if ($noAdditional) {
              if ($removeAdditional) {
                out += " delete " + $data + "[" + $key + "]; ";
              } else {
                out += " " + $nextValid + " = false; ";
                var $currErrSchemaPath = $errSchemaPath;
                $errSchemaPath = it.errSchemaPath + "/additionalProperties";
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = "";
                if (it.createErrors !== false) {
                  out += " { keyword: 'additionalProperties' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { additionalProperty: '" + $additionalProperty + "' } ";
                  if (it.opts.messages !== false) {
                    out += " , message: '";
                    if (it.opts._errorDataPathProperty) {
                      out += "is an invalid additional property";
                    } else {
                      out += "should NOT have additional properties";
                    }
                    out += "' ";
                  }
                  if (it.opts.verbose) {
                    out += " , schema: false , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                  }
                  out += " } ";
                } else {
                  out += " {} ";
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  if (it.async) {
                    out += " throw new ValidationError([" + __err + "]); ";
                  } else {
                    out += " validate.errors = [" + __err + "]; return false; ";
                  }
                } else {
                  out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
                }
                $errSchemaPath = $currErrSchemaPath;
                if ($breakOnError) {
                  out += " break; ";
                }
              }
            } else if ($additionalIsSchema) {
              if ($removeAdditional == "failing") {
                out += " var " + $errs + " = errors;  ";
                var $wasComposite = it.compositeRule;
                it.compositeRule = $it.compositeRule = true;
                $it.schema = $aProperties;
                $it.schemaPath = it.schemaPath + ".additionalProperties";
                $it.errSchemaPath = it.errSchemaPath + "/additionalProperties";
                $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                var $passData = $data + "[" + $key + "]";
                $it.dataPathArr[$dataNxt] = $key;
                var $code = it.validate($it);
                $it.baseId = $currentBaseId;
                if (it.util.varOccurences($code, $nextData) < 2) {
                  out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
                } else {
                  out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
                }
                out += " if (!" + $nextValid + ") { errors = " + $errs + "; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete " + $data + "[" + $key + "]; }  ";
                it.compositeRule = $it.compositeRule = $wasComposite;
              } else {
                $it.schema = $aProperties;
                $it.schemaPath = it.schemaPath + ".additionalProperties";
                $it.errSchemaPath = it.errSchemaPath + "/additionalProperties";
                $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                var $passData = $data + "[" + $key + "]";
                $it.dataPathArr[$dataNxt] = $key;
                var $code = it.validate($it);
                $it.baseId = $currentBaseId;
                if (it.util.varOccurences($code, $nextData) < 2) {
                  out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
                } else {
                  out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
                }
                if ($breakOnError) {
                  out += " if (!" + $nextValid + ") break; ";
                }
              }
            }
            it.errorPath = $currentErrorPath;
          }
          if ($someProperties) {
            out += " } ";
          }
          out += " }  ";
          if ($breakOnError) {
            out += " if (" + $nextValid + ") { ";
            $closingBraces += "}";
          }
        }
        var $useDefaults = it.opts.useDefaults && !it.compositeRule;
        if ($schemaKeys.length) {
          var arr3 = $schemaKeys;
          if (arr3) {
            var $propertyKey, i3 = -1, l3 = arr3.length - 1;
            while (i3 < l3) {
              $propertyKey = arr3[i3 += 1];
              var $sch = $schema[$propertyKey];
              if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
                var $prop = it.util.getProperty($propertyKey), $passData = $data + $prop, $hasDefault = $useDefaults && $sch.default !== void 0;
                $it.schema = $sch;
                $it.schemaPath = $schemaPath + $prop;
                $it.errSchemaPath = $errSchemaPath + "/" + it.util.escapeFragment($propertyKey);
                $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
                $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
                var $code = it.validate($it);
                $it.baseId = $currentBaseId;
                if (it.util.varOccurences($code, $nextData) < 2) {
                  $code = it.util.varReplace($code, $nextData, $passData);
                  var $useData = $passData;
                } else {
                  var $useData = $nextData;
                  out += " var " + $nextData + " = " + $passData + "; ";
                }
                if ($hasDefault) {
                  out += " " + $code + " ";
                } else {
                  if ($requiredHash && $requiredHash[$propertyKey]) {
                    out += " if ( " + $useData + " === undefined ";
                    if ($ownProperties) {
                      out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                    }
                    out += ") { " + $nextValid + " = false; ";
                    var $currentErrorPath = it.errorPath, $currErrSchemaPath = $errSchemaPath, $missingProperty = it.util.escapeQuotes($propertyKey);
                    if (it.opts._errorDataPathProperty) {
                      it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                    }
                    $errSchemaPath = it.errSchemaPath + "/required";
                    var $$outStack = $$outStack || [];
                    $$outStack.push(out);
                    out = "";
                    if (it.createErrors !== false) {
                      out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                      if (it.opts.messages !== false) {
                        out += " , message: '";
                        if (it.opts._errorDataPathProperty) {
                          out += "is a required property";
                        } else {
                          out += "should have required property \\'" + $missingProperty + "\\'";
                        }
                        out += "' ";
                      }
                      if (it.opts.verbose) {
                        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                      }
                      out += " } ";
                    } else {
                      out += " {} ";
                    }
                    var __err = out;
                    out = $$outStack.pop();
                    if (!it.compositeRule && $breakOnError) {
                      if (it.async) {
                        out += " throw new ValidationError([" + __err + "]); ";
                      } else {
                        out += " validate.errors = [" + __err + "]; return false; ";
                      }
                    } else {
                      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
                    }
                    $errSchemaPath = $currErrSchemaPath;
                    it.errorPath = $currentErrorPath;
                    out += " } else { ";
                  } else {
                    if ($breakOnError) {
                      out += " if ( " + $useData + " === undefined ";
                      if ($ownProperties) {
                        out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                      }
                      out += ") { " + $nextValid + " = true; } else { ";
                    } else {
                      out += " if (" + $useData + " !== undefined ";
                      if ($ownProperties) {
                        out += " &&   Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                      }
                      out += " ) { ";
                    }
                  }
                  out += " " + $code + " } ";
                }
              }
              if ($breakOnError) {
                out += " if (" + $nextValid + ") { ";
                $closingBraces += "}";
              }
            }
          }
        }
        if ($pPropertyKeys.length) {
          var arr4 = $pPropertyKeys;
          if (arr4) {
            var $pProperty, i4 = -1, l4 = arr4.length - 1;
            while (i4 < l4) {
              $pProperty = arr4[i4 += 1];
              var $sch = $pProperties[$pProperty];
              if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
                $it.schema = $sch;
                $it.schemaPath = it.schemaPath + ".patternProperties" + it.util.getProperty($pProperty);
                $it.errSchemaPath = it.errSchemaPath + "/patternProperties/" + it.util.escapeFragment($pProperty);
                if ($ownProperties) {
                  out += " " + $dataProperties + " = " + $dataProperties + " || Object.keys(" + $data + "); for (var " + $idx + "=0; " + $idx + "<" + $dataProperties + ".length; " + $idx + "++) { var " + $key + " = " + $dataProperties + "[" + $idx + "]; ";
                } else {
                  out += " for (var " + $key + " in " + $data + ") { ";
                }
                out += " if (" + it.usePattern($pProperty) + ".test(" + $key + ")) { ";
                $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                var $passData = $data + "[" + $key + "]";
                $it.dataPathArr[$dataNxt] = $key;
                var $code = it.validate($it);
                $it.baseId = $currentBaseId;
                if (it.util.varOccurences($code, $nextData) < 2) {
                  out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
                } else {
                  out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
                }
                if ($breakOnError) {
                  out += " if (!" + $nextValid + ") break; ";
                }
                out += " } ";
                if ($breakOnError) {
                  out += " else " + $nextValid + " = true; ";
                }
                out += " }  ";
                if ($breakOnError) {
                  out += " if (" + $nextValid + ") { ";
                  $closingBraces += "}";
                }
              }
            }
          }
        }
        if ($breakOnError) {
          out += " " + $closingBraces + " if (" + $errs + " == errors) {";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/propertyNames.js
  var require_propertyNames = __commonJS({
    "node_modules/ajv/lib/dotjs/propertyNames.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_propertyNames(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        var $closingBraces = "";
        $it.level++;
        var $nextValid = "valid" + $it.level;
        out += "var " + $errs + " = errors;";
        if (it.opts.strictKeywords ? typeof $schema == "object" && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all)) {
          $it.schema = $schema;
          $it.schemaPath = $schemaPath;
          $it.errSchemaPath = $errSchemaPath;
          var $key = "key" + $lvl, $idx = "idx" + $lvl, $i = "i" + $lvl, $invalidName = "' + " + $key + " + '", $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $dataProperties = "dataProperties" + $lvl, $ownProperties = it.opts.ownProperties, $currentBaseId = it.baseId;
          if ($ownProperties) {
            out += " var " + $dataProperties + " = undefined; ";
          }
          if ($ownProperties) {
            out += " " + $dataProperties + " = " + $dataProperties + " || Object.keys(" + $data + "); for (var " + $idx + "=0; " + $idx + "<" + $dataProperties + ".length; " + $idx + "++) { var " + $key + " = " + $dataProperties + "[" + $idx + "]; ";
          } else {
            out += " for (var " + $key + " in " + $data + ") { ";
          }
          out += " var startErrs" + $lvl + " = errors; ";
          var $passData = $key;
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
          } else {
            out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
          }
          it.compositeRule = $it.compositeRule = $wasComposite;
          out += " if (!" + $nextValid + ") { for (var " + $i + "=startErrs" + $lvl + "; " + $i + "<errors; " + $i + "++) { vErrors[" + $i + "].propertyName = " + $key + "; }   var err =   ";
          if (it.createErrors !== false) {
            out += " { keyword: 'propertyNames' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { propertyName: '" + $invalidName + "' } ";
            if (it.opts.messages !== false) {
              out += " , message: 'property name \\'" + $invalidName + "\\' is invalid' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError(vErrors); ";
            } else {
              out += " validate.errors = vErrors; return false; ";
            }
          }
          if ($breakOnError) {
            out += " break; ";
          }
          out += " } }";
        }
        if ($breakOnError) {
          out += " " + $closingBraces + " if (" + $errs + " == errors) {";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/required.js
  var require_required = __commonJS({
    "node_modules/ajv/lib/dotjs/required.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_required(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        var $vSchema = "schema" + $lvl;
        if (!$isData) {
          if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
            var $required = [];
            var arr1 = $schema;
            if (arr1) {
              var $property, i1 = -1, l1 = arr1.length - 1;
              while (i1 < l1) {
                $property = arr1[i1 += 1];
                var $propertySch = it.schema.properties[$property];
                if (!($propertySch && (it.opts.strictKeywords ? typeof $propertySch == "object" && Object.keys($propertySch).length > 0 || $propertySch === false : it.util.schemaHasRules($propertySch, it.RULES.all)))) {
                  $required[$required.length] = $property;
                }
              }
            }
          } else {
            var $required = $schema;
          }
        }
        if ($isData || $required.length) {
          var $currentErrorPath = it.errorPath, $loopRequired = $isData || $required.length >= it.opts.loopRequired, $ownProperties = it.opts.ownProperties;
          if ($breakOnError) {
            out += " var missing" + $lvl + "; ";
            if ($loopRequired) {
              if (!$isData) {
                out += " var " + $vSchema + " = validate.schema" + $schemaPath + "; ";
              }
              var $i = "i" + $lvl, $propertyPath = "schema" + $lvl + "[" + $i + "]", $missingProperty = "' + " + $propertyPath + " + '";
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
              }
              out += " var " + $valid + " = true; ";
              if ($isData) {
                out += " if (schema" + $lvl + " === undefined) " + $valid + " = true; else if (!Array.isArray(schema" + $lvl + ")) " + $valid + " = false; else {";
              }
              out += " for (var " + $i + " = 0; " + $i + " < " + $vSchema + ".length; " + $i + "++) { " + $valid + " = " + $data + "[" + $vSchema + "[" + $i + "]] !== undefined ";
              if ($ownProperties) {
                out += " &&   Object.prototype.hasOwnProperty.call(" + $data + ", " + $vSchema + "[" + $i + "]) ";
              }
              out += "; if (!" + $valid + ") break; } ";
              if ($isData) {
                out += "  }  ";
              }
              out += "  if (!" + $valid + ") {   ";
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = "";
              if (it.createErrors !== false) {
                out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: '";
                  if (it.opts._errorDataPathProperty) {
                    out += "is a required property";
                  } else {
                    out += "should have required property \\'" + $missingProperty + "\\'";
                  }
                  out += "' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); ";
                } else {
                  out += " validate.errors = [" + __err + "]; return false; ";
                }
              } else {
                out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
              }
              out += " } else { ";
            } else {
              out += " if ( ";
              var arr2 = $required;
              if (arr2) {
                var $propertyKey, $i = -1, l2 = arr2.length - 1;
                while ($i < l2) {
                  $propertyKey = arr2[$i += 1];
                  if ($i) {
                    out += " || ";
                  }
                  var $prop = it.util.getProperty($propertyKey), $useData = $data + $prop;
                  out += " ( ( " + $useData + " === undefined ";
                  if ($ownProperties) {
                    out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                  }
                  out += ") && (missing" + $lvl + " = " + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ") ) ";
                }
              }
              out += ") {  ";
              var $propertyPath = "missing" + $lvl, $missingProperty = "' + " + $propertyPath + " + '";
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + " + " + $propertyPath;
              }
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = "";
              if (it.createErrors !== false) {
                out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: '";
                  if (it.opts._errorDataPathProperty) {
                    out += "is a required property";
                  } else {
                    out += "should have required property \\'" + $missingProperty + "\\'";
                  }
                  out += "' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); ";
                } else {
                  out += " validate.errors = [" + __err + "]; return false; ";
                }
              } else {
                out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
              }
              out += " } else { ";
            }
          } else {
            if ($loopRequired) {
              if (!$isData) {
                out += " var " + $vSchema + " = validate.schema" + $schemaPath + "; ";
              }
              var $i = "i" + $lvl, $propertyPath = "schema" + $lvl + "[" + $i + "]", $missingProperty = "' + " + $propertyPath + " + '";
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
              }
              if ($isData) {
                out += " if (" + $vSchema + " && !Array.isArray(" + $vSchema + ")) {  var err =   ";
                if (it.createErrors !== false) {
                  out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                  if (it.opts.messages !== false) {
                    out += " , message: '";
                    if (it.opts._errorDataPathProperty) {
                      out += "is a required property";
                    } else {
                      out += "should have required property \\'" + $missingProperty + "\\'";
                    }
                    out += "' ";
                  }
                  if (it.opts.verbose) {
                    out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                  }
                  out += " } ";
                } else {
                  out += " {} ";
                }
                out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (" + $vSchema + " !== undefined) { ";
              }
              out += " for (var " + $i + " = 0; " + $i + " < " + $vSchema + ".length; " + $i + "++) { if (" + $data + "[" + $vSchema + "[" + $i + "]] === undefined ";
              if ($ownProperties) {
                out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", " + $vSchema + "[" + $i + "]) ";
              }
              out += ") {  var err =   ";
              if (it.createErrors !== false) {
                out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: '";
                  if (it.opts._errorDataPathProperty) {
                    out += "is a required property";
                  } else {
                    out += "should have required property \\'" + $missingProperty + "\\'";
                  }
                  out += "' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ";
              if ($isData) {
                out += "  }  ";
              }
            } else {
              var arr3 = $required;
              if (arr3) {
                var $propertyKey, i3 = -1, l3 = arr3.length - 1;
                while (i3 < l3) {
                  $propertyKey = arr3[i3 += 1];
                  var $prop = it.util.getProperty($propertyKey), $missingProperty = it.util.escapeQuotes($propertyKey), $useData = $data + $prop;
                  if (it.opts._errorDataPathProperty) {
                    it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                  }
                  out += " if ( " + $useData + " === undefined ";
                  if ($ownProperties) {
                    out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                  }
                  out += ") {  var err =   ";
                  if (it.createErrors !== false) {
                    out += " { keyword: 'required' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                    if (it.opts.messages !== false) {
                      out += " , message: '";
                      if (it.opts._errorDataPathProperty) {
                        out += "is a required property";
                      } else {
                        out += "should have required property \\'" + $missingProperty + "\\'";
                      }
                      out += "' ";
                    }
                    if (it.opts.verbose) {
                      out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                    }
                    out += " } ";
                  } else {
                    out += " {} ";
                  }
                  out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";
                }
              }
            }
          }
          it.errorPath = $currentErrorPath;
        } else if ($breakOnError) {
          out += " if (true) {";
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/uniqueItems.js
  var require_uniqueItems = __commonJS({
    "node_modules/ajv/lib/dotjs/uniqueItems.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_uniqueItems(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        if (($schema || $isData) && it.opts.uniqueItems !== false) {
          if ($isData) {
            out += " var " + $valid + "; if (" + $schemaValue + " === false || " + $schemaValue + " === undefined) " + $valid + " = true; else if (typeof " + $schemaValue + " != 'boolean') " + $valid + " = false; else { ";
          }
          out += " var i = " + $data + ".length , " + $valid + " = true , j; if (i > 1) { ";
          var $itemType = it.schema.items && it.schema.items.type, $typeIsArray = Array.isArray($itemType);
          if (!$itemType || $itemType == "object" || $itemType == "array" || $typeIsArray && ($itemType.indexOf("object") >= 0 || $itemType.indexOf("array") >= 0)) {
            out += " outer: for (;i--;) { for (j = i; j--;) { if (equal(" + $data + "[i], " + $data + "[j])) { " + $valid + " = false; break outer; } } } ";
          } else {
            out += " var itemIndices = {}, item; for (;i--;) { var item = " + $data + "[i]; ";
            var $method = "checkDataType" + ($typeIsArray ? "s" : "");
            out += " if (" + it.util[$method]($itemType, "item", it.opts.strictNumbers, true) + ") continue; ";
            if ($typeIsArray) {
              out += ` if (typeof item == 'string') item = '"' + item; `;
            }
            out += " if (typeof itemIndices[item] == 'number') { " + $valid + " = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ";
          }
          out += " } ";
          if ($isData) {
            out += "  }  ";
          }
          out += " if (!" + $valid + ") {   ";
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: 'uniqueItems' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { i: i, j: j } ";
            if (it.opts.messages !== false) {
              out += " , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' ";
            }
            if (it.opts.verbose) {
              out += " , schema:  ";
              if ($isData) {
                out += "validate.schema" + $schemaPath;
              } else {
                out += "" + $schema;
              }
              out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          out += " } ";
          if ($breakOnError) {
            out += " else { ";
          }
        } else {
          if ($breakOnError) {
            out += " if (true) { ";
          }
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/dotjs/index.js
  var require_dotjs = __commonJS({
    "node_modules/ajv/lib/dotjs/index.js"(exports2, module2) {
      "use strict";
      module2.exports = {
        "$ref": require_ref(),
        allOf: require_allOf(),
        anyOf: require_anyOf(),
        "$comment": require_comment(),
        const: require_const(),
        contains: require_contains(),
        dependencies: require_dependencies(),
        "enum": require_enum(),
        format: require_format(),
        "if": require_if(),
        items: require_items2(),
        maximum: require_limit(),
        minimum: require_limit(),
        maxItems: require_limitItems(),
        minItems: require_limitItems(),
        maxLength: require_limitLength(),
        minLength: require_limitLength(),
        maxProperties: require_limitProperties(),
        minProperties: require_limitProperties(),
        multipleOf: require_multipleOf(),
        not: require_not(),
        oneOf: require_oneOf(),
        pattern: require_pattern(),
        properties: require_properties2(),
        propertyNames: require_propertyNames(),
        required: require_required(),
        uniqueItems: require_uniqueItems(),
        validate: require_validate()
      };
    }
  });

  // node_modules/ajv/lib/compile/rules.js
  var require_rules = __commonJS({
    "node_modules/ajv/lib/compile/rules.js"(exports2, module2) {
      "use strict";
      var ruleModules = require_dotjs();
      var toHash = require_util().toHash;
      module2.exports = function rules() {
        var RULES = [
          {
            type: "number",
            rules: [
              { "maximum": ["exclusiveMaximum"] },
              { "minimum": ["exclusiveMinimum"] },
              "multipleOf",
              "format"
            ]
          },
          {
            type: "string",
            rules: ["maxLength", "minLength", "pattern", "format"]
          },
          {
            type: "array",
            rules: ["maxItems", "minItems", "items", "contains", "uniqueItems"]
          },
          {
            type: "object",
            rules: [
              "maxProperties",
              "minProperties",
              "required",
              "dependencies",
              "propertyNames",
              { "properties": ["additionalProperties", "patternProperties"] }
            ]
          },
          { rules: ["$ref", "const", "enum", "not", "anyOf", "oneOf", "allOf", "if"] }
        ];
        var ALL = ["type", "$comment"];
        var KEYWORDS = [
          "$schema",
          "$id",
          "id",
          "$data",
          "$async",
          "title",
          "description",
          "default",
          "definitions",
          "examples",
          "readOnly",
          "writeOnly",
          "contentMediaType",
          "contentEncoding",
          "additionalItems",
          "then",
          "else"
        ];
        var TYPES = ["number", "integer", "string", "array", "object", "boolean", "null"];
        RULES.all = toHash(ALL);
        RULES.types = toHash(TYPES);
        RULES.forEach(function(group) {
          group.rules = group.rules.map(function(keyword) {
            var implKeywords;
            if (typeof keyword == "object") {
              var key = Object.keys(keyword)[0];
              implKeywords = keyword[key];
              keyword = key;
              implKeywords.forEach(function(k) {
                ALL.push(k);
                RULES.all[k] = true;
              });
            }
            ALL.push(keyword);
            var rule = RULES.all[keyword] = {
              keyword,
              code: ruleModules[keyword],
              implements: implKeywords
            };
            return rule;
          });
          RULES.all.$comment = {
            keyword: "$comment",
            code: ruleModules.$comment
          };
          if (group.type)
            RULES.types[group.type] = group;
        });
        RULES.keywords = toHash(ALL.concat(KEYWORDS));
        RULES.custom = {};
        return RULES;
      };
    }
  });

  // node_modules/ajv/lib/data.js
  var require_data = __commonJS({
    "node_modules/ajv/lib/data.js"(exports2, module2) {
      "use strict";
      var KEYWORDS = [
        "multipleOf",
        "maximum",
        "exclusiveMaximum",
        "minimum",
        "exclusiveMinimum",
        "maxLength",
        "minLength",
        "pattern",
        "additionalItems",
        "maxItems",
        "minItems",
        "uniqueItems",
        "maxProperties",
        "minProperties",
        "required",
        "additionalProperties",
        "enum",
        "format",
        "const"
      ];
      module2.exports = function(metaSchema, keywordsJsonPointers) {
        for (var i = 0; i < keywordsJsonPointers.length; i++) {
          metaSchema = JSON.parse(JSON.stringify(metaSchema));
          var segments = keywordsJsonPointers[i].split("/");
          var keywords = metaSchema;
          var j;
          for (j = 1; j < segments.length; j++)
            keywords = keywords[segments[j]];
          for (j = 0; j < KEYWORDS.length; j++) {
            var key = KEYWORDS[j];
            var schema = keywords[key];
            if (schema) {
              keywords[key] = {
                anyOf: [
                  schema,
                  { $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#" }
                ]
              };
            }
          }
        }
        return metaSchema;
      };
    }
  });

  // node_modules/ajv/lib/compile/async.js
  var require_async = __commonJS({
    "node_modules/ajv/lib/compile/async.js"(exports2, module2) {
      "use strict";
      var MissingRefError = require_error_classes().MissingRef;
      module2.exports = compileAsync;
      function compileAsync(schema, meta, callback) {
        var self2 = this;
        if (typeof this._opts.loadSchema != "function")
          throw new Error("options.loadSchema should be a function");
        if (typeof meta == "function") {
          callback = meta;
          meta = void 0;
        }
        var p = loadMetaSchemaOf(schema).then(function() {
          var schemaObj = self2._addSchema(schema, void 0, meta);
          return schemaObj.validate || _compileAsync(schemaObj);
        });
        if (callback) {
          p.then(
            function(v) {
              callback(null, v);
            },
            callback
          );
        }
        return p;
        function loadMetaSchemaOf(sch) {
          var $schema = sch.$schema;
          return $schema && !self2.getSchema($schema) ? compileAsync.call(self2, { $ref: $schema }, true) : Promise.resolve();
        }
        function _compileAsync(schemaObj) {
          try {
            return self2._compile(schemaObj);
          } catch (e) {
            if (e instanceof MissingRefError)
              return loadMissingSchema(e);
            throw e;
          }
          function loadMissingSchema(e) {
            var ref = e.missingSchema;
            if (added(ref))
              throw new Error("Schema " + ref + " is loaded but " + e.missingRef + " cannot be resolved");
            var schemaPromise = self2._loadingSchemas[ref];
            if (!schemaPromise) {
              schemaPromise = self2._loadingSchemas[ref] = self2._opts.loadSchema(ref);
              schemaPromise.then(removePromise, removePromise);
            }
            return schemaPromise.then(function(sch) {
              if (!added(ref)) {
                return loadMetaSchemaOf(sch).then(function() {
                  if (!added(ref))
                    self2.addSchema(sch, ref, void 0, meta);
                });
              }
            }).then(function() {
              return _compileAsync(schemaObj);
            });
            function removePromise() {
              delete self2._loadingSchemas[ref];
            }
            function added(ref2) {
              return self2._refs[ref2] || self2._schemas[ref2];
            }
          }
        }
      }
    }
  });

  // node_modules/ajv/lib/dotjs/custom.js
  var require_custom = __commonJS({
    "node_modules/ajv/lib/dotjs/custom.js"(exports2, module2) {
      "use strict";
      module2.exports = function generate_custom(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $errorKeyword;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $errs = "errs__" + $lvl;
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        var $rule = this, $definition = "definition" + $lvl, $rDef = $rule.definition, $closingBraces = "";
        var $compile, $inline, $macro, $ruleValidate, $validateCode;
        if ($isData && $rDef.$data) {
          $validateCode = "keywordValidate" + $lvl;
          var $validateSchema = $rDef.validateSchema;
          out += " var " + $definition + " = RULES.custom['" + $keyword + "'].definition; var " + $validateCode + " = " + $definition + ".validate;";
        } else {
          $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
          if (!$ruleValidate)
            return;
          $schemaValue = "validate.schema" + $schemaPath;
          $validateCode = $ruleValidate.code;
          $compile = $rDef.compile;
          $inline = $rDef.inline;
          $macro = $rDef.macro;
        }
        var $ruleErrs = $validateCode + ".errors", $i = "i" + $lvl, $ruleErr = "ruleErr" + $lvl, $asyncKeyword = $rDef.async;
        if ($asyncKeyword && !it.async)
          throw new Error("async keyword in sync schema");
        if (!($inline || $macro)) {
          out += "" + $ruleErrs + " = null;";
        }
        out += "var " + $errs + " = errors;var " + $valid + ";";
        if ($isData && $rDef.$data) {
          $closingBraces += "}";
          out += " if (" + $schemaValue + " === undefined) { " + $valid + " = true; } else { ";
          if ($validateSchema) {
            $closingBraces += "}";
            out += " " + $valid + " = " + $definition + ".validateSchema(" + $schemaValue + "); if (" + $valid + ") { ";
          }
        }
        if ($inline) {
          if ($rDef.statements) {
            out += " " + $ruleValidate.validate + " ";
          } else {
            out += " " + $valid + " = " + $ruleValidate.validate + "; ";
          }
        } else if ($macro) {
          var $it = it.util.copy(it);
          var $closingBraces = "";
          $it.level++;
          var $nextValid = "valid" + $it.level;
          $it.schema = $ruleValidate.validate;
          $it.schemaPath = "";
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
          it.compositeRule = $it.compositeRule = $wasComposite;
          out += " " + $code;
        } else {
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          out += "  " + $validateCode + ".call( ";
          if (it.opts.passContext) {
            out += "this";
          } else {
            out += "self";
          }
          if ($compile || $rDef.schema === false) {
            out += " , " + $data + " ";
          } else {
            out += " , " + $schemaValue + " , " + $data + " , validate.schema" + it.schemaPath + " ";
          }
          out += " , (dataPath || '')";
          if (it.errorPath != '""') {
            out += " + " + it.errorPath;
          }
          var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty";
          out += " , " + $parentData + " , " + $parentDataProperty + " , rootData )  ";
          var def_callRuleValidate = out;
          out = $$outStack.pop();
          if ($rDef.errors === false) {
            out += " " + $valid + " = ";
            if ($asyncKeyword) {
              out += "await ";
            }
            out += "" + def_callRuleValidate + "; ";
          } else {
            if ($asyncKeyword) {
              $ruleErrs = "customErrors" + $lvl;
              out += " var " + $ruleErrs + " = null; try { " + $valid + " = await " + def_callRuleValidate + "; } catch (e) { " + $valid + " = false; if (e instanceof ValidationError) " + $ruleErrs + " = e.errors; else throw e; } ";
            } else {
              out += " " + $ruleErrs + " = null; " + $valid + " = " + def_callRuleValidate + "; ";
            }
          }
        }
        if ($rDef.modifying) {
          out += " if (" + $parentData + ") " + $data + " = " + $parentData + "[" + $parentDataProperty + "];";
        }
        out += "" + $closingBraces;
        if ($rDef.valid) {
          if ($breakOnError) {
            out += " if (true) { ";
          }
        } else {
          out += " if ( ";
          if ($rDef.valid === void 0) {
            out += " !";
            if ($macro) {
              out += "" + $nextValid;
            } else {
              out += "" + $valid;
            }
          } else {
            out += " " + !$rDef.valid + " ";
          }
          out += ") { ";
          $errorKeyword = $rule.keyword;
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: '" + ($errorKeyword || "custom") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { keyword: '" + $rule.keyword + "' } ";
            if (it.opts.messages !== false) {
              out += ` , message: 'should pass "` + $rule.keyword + `" keyword validation' `;
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          var def_customError = out;
          out = $$outStack.pop();
          if ($inline) {
            if ($rDef.errors) {
              if ($rDef.errors != "full") {
                out += "  for (var " + $i + "=" + $errs + "; " + $i + "<errors; " + $i + "++) { var " + $ruleErr + " = vErrors[" + $i + "]; if (" + $ruleErr + ".dataPath === undefined) " + $ruleErr + ".dataPath = (dataPath || '') + " + it.errorPath + "; if (" + $ruleErr + ".schemaPath === undefined) { " + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';
                if (it.opts.verbose) {
                  out += " " + $ruleErr + ".schema = " + $schemaValue + "; " + $ruleErr + ".data = " + $data + "; ";
                }
                out += " } ";
              }
            } else {
              if ($rDef.errors === false) {
                out += " " + def_customError + " ";
              } else {
                out += " if (" + $errs + " == errors) { " + def_customError + " } else {  for (var " + $i + "=" + $errs + "; " + $i + "<errors; " + $i + "++) { var " + $ruleErr + " = vErrors[" + $i + "]; if (" + $ruleErr + ".dataPath === undefined) " + $ruleErr + ".dataPath = (dataPath || '') + " + it.errorPath + "; if (" + $ruleErr + ".schemaPath === undefined) { " + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';
                if (it.opts.verbose) {
                  out += " " + $ruleErr + ".schema = " + $schemaValue + "; " + $ruleErr + ".data = " + $data + "; ";
                }
                out += " } } ";
              }
            }
          } else if ($macro) {
            out += "   var err =   ";
            if (it.createErrors !== false) {
              out += " { keyword: '" + ($errorKeyword || "custom") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { keyword: '" + $rule.keyword + "' } ";
              if (it.opts.messages !== false) {
                out += ` , message: 'should pass "` + $rule.keyword + `" keyword validation' `;
              }
              if (it.opts.verbose) {
                out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
              }
              out += " } ";
            } else {
              out += " {} ";
            }
            out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
            if (!it.compositeRule && $breakOnError) {
              if (it.async) {
                out += " throw new ValidationError(vErrors); ";
              } else {
                out += " validate.errors = vErrors; return false; ";
              }
            }
          } else {
            if ($rDef.errors === false) {
              out += " " + def_customError + " ";
            } else {
              out += " if (Array.isArray(" + $ruleErrs + ")) { if (vErrors === null) vErrors = " + $ruleErrs + "; else vErrors = vErrors.concat(" + $ruleErrs + "); errors = vErrors.length;  for (var " + $i + "=" + $errs + "; " + $i + "<errors; " + $i + "++) { var " + $ruleErr + " = vErrors[" + $i + "]; if (" + $ruleErr + ".dataPath === undefined) " + $ruleErr + ".dataPath = (dataPath || '') + " + it.errorPath + ";  " + $ruleErr + '.schemaPath = "' + $errSchemaPath + '";  ';
              if (it.opts.verbose) {
                out += " " + $ruleErr + ".schema = " + $schemaValue + "; " + $ruleErr + ".data = " + $data + "; ";
              }
              out += " } } else { " + def_customError + " } ";
            }
          }
          out += " } ";
          if ($breakOnError) {
            out += " else { ";
          }
        }
        return out;
      };
    }
  });

  // node_modules/ajv/lib/refs/json-schema-draft-07.json
  var require_json_schema_draft_07 = __commonJS({
    "node_modules/ajv/lib/refs/json-schema-draft-07.json"(exports2, module2) {
      module2.exports = {
        $schema: "http://json-schema.org/draft-07/schema#",
        $id: "http://json-schema.org/draft-07/schema#",
        title: "Core schema meta-schema",
        definitions: {
          schemaArray: {
            type: "array",
            minItems: 1,
            items: { $ref: "#" }
          },
          nonNegativeInteger: {
            type: "integer",
            minimum: 0
          },
          nonNegativeIntegerDefault0: {
            allOf: [
              { $ref: "#/definitions/nonNegativeInteger" },
              { default: 0 }
            ]
          },
          simpleTypes: {
            enum: [
              "array",
              "boolean",
              "integer",
              "null",
              "number",
              "object",
              "string"
            ]
          },
          stringArray: {
            type: "array",
            items: { type: "string" },
            uniqueItems: true,
            default: []
          }
        },
        type: ["object", "boolean"],
        properties: {
          $id: {
            type: "string",
            format: "uri-reference"
          },
          $schema: {
            type: "string",
            format: "uri"
          },
          $ref: {
            type: "string",
            format: "uri-reference"
          },
          $comment: {
            type: "string"
          },
          title: {
            type: "string"
          },
          description: {
            type: "string"
          },
          default: true,
          readOnly: {
            type: "boolean",
            default: false
          },
          examples: {
            type: "array",
            items: true
          },
          multipleOf: {
            type: "number",
            exclusiveMinimum: 0
          },
          maximum: {
            type: "number"
          },
          exclusiveMaximum: {
            type: "number"
          },
          minimum: {
            type: "number"
          },
          exclusiveMinimum: {
            type: "number"
          },
          maxLength: { $ref: "#/definitions/nonNegativeInteger" },
          minLength: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
          pattern: {
            type: "string",
            format: "regex"
          },
          additionalItems: { $ref: "#" },
          items: {
            anyOf: [
              { $ref: "#" },
              { $ref: "#/definitions/schemaArray" }
            ],
            default: true
          },
          maxItems: { $ref: "#/definitions/nonNegativeInteger" },
          minItems: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
          uniqueItems: {
            type: "boolean",
            default: false
          },
          contains: { $ref: "#" },
          maxProperties: { $ref: "#/definitions/nonNegativeInteger" },
          minProperties: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
          required: { $ref: "#/definitions/stringArray" },
          additionalProperties: { $ref: "#" },
          definitions: {
            type: "object",
            additionalProperties: { $ref: "#" },
            default: {}
          },
          properties: {
            type: "object",
            additionalProperties: { $ref: "#" },
            default: {}
          },
          patternProperties: {
            type: "object",
            additionalProperties: { $ref: "#" },
            propertyNames: { format: "regex" },
            default: {}
          },
          dependencies: {
            type: "object",
            additionalProperties: {
              anyOf: [
                { $ref: "#" },
                { $ref: "#/definitions/stringArray" }
              ]
            }
          },
          propertyNames: { $ref: "#" },
          const: true,
          enum: {
            type: "array",
            items: true,
            minItems: 1,
            uniqueItems: true
          },
          type: {
            anyOf: [
              { $ref: "#/definitions/simpleTypes" },
              {
                type: "array",
                items: { $ref: "#/definitions/simpleTypes" },
                minItems: 1,
                uniqueItems: true
              }
            ]
          },
          format: { type: "string" },
          contentMediaType: { type: "string" },
          contentEncoding: { type: "string" },
          if: { $ref: "#" },
          then: { $ref: "#" },
          else: { $ref: "#" },
          allOf: { $ref: "#/definitions/schemaArray" },
          anyOf: { $ref: "#/definitions/schemaArray" },
          oneOf: { $ref: "#/definitions/schemaArray" },
          not: { $ref: "#" }
        },
        default: true
      };
    }
  });

  // node_modules/ajv/lib/definition_schema.js
  var require_definition_schema = __commonJS({
    "node_modules/ajv/lib/definition_schema.js"(exports2, module2) {
      "use strict";
      var metaSchema = require_json_schema_draft_07();
      module2.exports = {
        $id: "https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js",
        definitions: {
          simpleTypes: metaSchema.definitions.simpleTypes
        },
        type: "object",
        dependencies: {
          schema: ["validate"],
          $data: ["validate"],
          statements: ["inline"],
          valid: { not: { required: ["macro"] } }
        },
        properties: {
          type: metaSchema.properties.type,
          schema: { type: "boolean" },
          statements: { type: "boolean" },
          dependencies: {
            type: "array",
            items: { type: "string" }
          },
          metaSchema: { type: "object" },
          modifying: { type: "boolean" },
          valid: { type: "boolean" },
          $data: { type: "boolean" },
          async: { type: "boolean" },
          errors: {
            anyOf: [
              { type: "boolean" },
              { const: "full" }
            ]
          }
        }
      };
    }
  });

  // node_modules/ajv/lib/keyword.js
  var require_keyword = __commonJS({
    "node_modules/ajv/lib/keyword.js"(exports2, module2) {
      "use strict";
      var IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;
      var customRuleCode = require_custom();
      var definitionSchema = require_definition_schema();
      module2.exports = {
        add: addKeyword,
        get: getKeyword,
        remove: removeKeyword,
        validate: validateKeyword
      };
      function addKeyword(keyword, definition) {
        var RULES = this.RULES;
        if (RULES.keywords[keyword])
          throw new Error("Keyword " + keyword + " is already defined");
        if (!IDENTIFIER.test(keyword))
          throw new Error("Keyword " + keyword + " is not a valid identifier");
        if (definition) {
          this.validateKeyword(definition, true);
          var dataType = definition.type;
          if (Array.isArray(dataType)) {
            for (var i = 0; i < dataType.length; i++)
              _addRule(keyword, dataType[i], definition);
          } else {
            _addRule(keyword, dataType, definition);
          }
          var metaSchema = definition.metaSchema;
          if (metaSchema) {
            if (definition.$data && this._opts.$data) {
              metaSchema = {
                anyOf: [
                  metaSchema,
                  { "$ref": "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#" }
                ]
              };
            }
            definition.validateSchema = this.compile(metaSchema, true);
          }
        }
        RULES.keywords[keyword] = RULES.all[keyword] = true;
        function _addRule(keyword2, dataType2, definition2) {
          var ruleGroup;
          for (var i2 = 0; i2 < RULES.length; i2++) {
            var rg = RULES[i2];
            if (rg.type == dataType2) {
              ruleGroup = rg;
              break;
            }
          }
          if (!ruleGroup) {
            ruleGroup = { type: dataType2, rules: [] };
            RULES.push(ruleGroup);
          }
          var rule = {
            keyword: keyword2,
            definition: definition2,
            custom: true,
            code: customRuleCode,
            implements: definition2.implements
          };
          ruleGroup.rules.push(rule);
          RULES.custom[keyword2] = rule;
        }
        return this;
      }
      function getKeyword(keyword) {
        var rule = this.RULES.custom[keyword];
        return rule ? rule.definition : this.RULES.keywords[keyword] || false;
      }
      function removeKeyword(keyword) {
        var RULES = this.RULES;
        delete RULES.keywords[keyword];
        delete RULES.all[keyword];
        delete RULES.custom[keyword];
        for (var i = 0; i < RULES.length; i++) {
          var rules = RULES[i].rules;
          for (var j = 0; j < rules.length; j++) {
            if (rules[j].keyword == keyword) {
              rules.splice(j, 1);
              break;
            }
          }
        }
        return this;
      }
      function validateKeyword(definition, throwError) {
        validateKeyword.errors = null;
        var v = this._validateKeyword = this._validateKeyword || this.compile(definitionSchema, true);
        if (v(definition))
          return true;
        validateKeyword.errors = v.errors;
        if (throwError)
          throw new Error("custom keyword definition is invalid: " + this.errorsText(v.errors));
        else
          return false;
      }
    }
  });

  // node_modules/ajv/lib/refs/data.json
  var require_data2 = __commonJS({
    "node_modules/ajv/lib/refs/data.json"(exports2, module2) {
      module2.exports = {
        $schema: "http://json-schema.org/draft-07/schema#",
        $id: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
        description: "Meta-schema for $data reference (JSON Schema extension proposal)",
        type: "object",
        required: ["$data"],
        properties: {
          $data: {
            type: "string",
            anyOf: [
              { format: "relative-json-pointer" },
              { format: "json-pointer" }
            ]
          }
        },
        additionalProperties: false
      };
    }
  });

  // node_modules/ajv/lib/ajv.js
  var require_ajv = __commonJS({
    "node_modules/ajv/lib/ajv.js"(exports2, module2) {
      "use strict";
      var compileSchema = require_compile();
      var resolve = require_resolve();
      var Cache2 = require_cache();
      var SchemaObject = require_schema_obj();
      var stableStringify2 = require_fast_json_stable_stringify();
      var formats = require_formats();
      var rules = require_rules();
      var $dataMetaSchema = require_data();
      var util = require_util();
      module2.exports = Ajv2;
      Ajv2.prototype.validate = validate;
      Ajv2.prototype.compile = compile;
      Ajv2.prototype.addSchema = addSchema;
      Ajv2.prototype.addMetaSchema = addMetaSchema;
      Ajv2.prototype.validateSchema = validateSchema;
      Ajv2.prototype.getSchema = getSchema;
      Ajv2.prototype.removeSchema = removeSchema;
      Ajv2.prototype.addFormat = addFormat;
      Ajv2.prototype.errorsText = errorsText;
      Ajv2.prototype._addSchema = _addSchema;
      Ajv2.prototype._compile = _compile;
      Ajv2.prototype.compileAsync = require_async();
      var customKeyword = require_keyword();
      Ajv2.prototype.addKeyword = customKeyword.add;
      Ajv2.prototype.getKeyword = customKeyword.get;
      Ajv2.prototype.removeKeyword = customKeyword.remove;
      Ajv2.prototype.validateKeyword = customKeyword.validate;
      var errorClasses = require_error_classes();
      Ajv2.ValidationError = errorClasses.Validation;
      Ajv2.MissingRefError = errorClasses.MissingRef;
      Ajv2.$dataMetaSchema = $dataMetaSchema;
      var META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
      var META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes", "strictDefaults"];
      var META_SUPPORT_DATA = ["/properties"];
      function Ajv2(opts) {
        if (!(this instanceof Ajv2))
          return new Ajv2(opts);
        opts = this._opts = util.copy(opts) || {};
        setLogger(this);
        this._schemas = {};
        this._refs = {};
        this._fragments = {};
        this._formats = formats(opts.format);
        this._cache = opts.cache || new Cache2();
        this._loadingSchemas = {};
        this._compilations = [];
        this.RULES = rules();
        this._getId = chooseGetId(opts);
        opts.loopRequired = opts.loopRequired || Infinity;
        if (opts.errorDataPath == "property")
          opts._errorDataPathProperty = true;
        if (opts.serialize === void 0)
          opts.serialize = stableStringify2;
        this._metaOpts = getMetaSchemaOptions(this);
        if (opts.formats)
          addInitialFormats(this);
        if (opts.keywords)
          addInitialKeywords(this);
        addDefaultMetaSchema(this);
        if (typeof opts.meta == "object")
          this.addMetaSchema(opts.meta);
        if (opts.nullable)
          this.addKeyword("nullable", { metaSchema: { type: "boolean" } });
        addInitialSchemas(this);
      }
      function validate(schemaKeyRef, data) {
        var v;
        if (typeof schemaKeyRef == "string") {
          v = this.getSchema(schemaKeyRef);
          if (!v)
            throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
        } else {
          var schemaObj = this._addSchema(schemaKeyRef);
          v = schemaObj.validate || this._compile(schemaObj);
        }
        var valid = v(data);
        if (v.$async !== true)
          this.errors = v.errors;
        return valid;
      }
      function compile(schema, _meta) {
        var schemaObj = this._addSchema(schema, void 0, _meta);
        return schemaObj.validate || this._compile(schemaObj);
      }
      function addSchema(schema, key, _skipValidation, _meta) {
        if (Array.isArray(schema)) {
          for (var i = 0; i < schema.length; i++)
            this.addSchema(schema[i], void 0, _skipValidation, _meta);
          return this;
        }
        var id = this._getId(schema);
        if (id !== void 0 && typeof id != "string")
          throw new Error("schema id must be string");
        key = resolve.normalizeId(key || id);
        checkUnique(this, key);
        this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
        return this;
      }
      function addMetaSchema(schema, key, skipValidation) {
        this.addSchema(schema, key, skipValidation, true);
        return this;
      }
      function validateSchema(schema, throwOrLogError) {
        var $schema = schema.$schema;
        if ($schema !== void 0 && typeof $schema != "string")
          throw new Error("$schema must be a string");
        $schema = $schema || this._opts.defaultMeta || defaultMeta(this);
        if (!$schema) {
          this.logger.warn("meta-schema not available");
          this.errors = null;
          return true;
        }
        var valid = this.validate($schema, schema);
        if (!valid && throwOrLogError) {
          var message = "schema is invalid: " + this.errorsText();
          if (this._opts.validateSchema == "log")
            this.logger.error(message);
          else
            throw new Error(message);
        }
        return valid;
      }
      function defaultMeta(self2) {
        var meta = self2._opts.meta;
        self2._opts.defaultMeta = typeof meta == "object" ? self2._getId(meta) || meta : self2.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : void 0;
        return self2._opts.defaultMeta;
      }
      function getSchema(keyRef) {
        var schemaObj = _getSchemaObj(this, keyRef);
        switch (typeof schemaObj) {
          case "object":
            return schemaObj.validate || this._compile(schemaObj);
          case "string":
            return this.getSchema(schemaObj);
          case "undefined":
            return _getSchemaFragment(this, keyRef);
        }
      }
      function _getSchemaFragment(self2, ref) {
        var res = resolve.schema.call(self2, { schema: {} }, ref);
        if (res) {
          var schema = res.schema, root3 = res.root, baseId = res.baseId;
          var v = compileSchema.call(self2, schema, root3, void 0, baseId);
          self2._fragments[ref] = new SchemaObject({
            ref,
            fragment: true,
            schema,
            root: root3,
            baseId,
            validate: v
          });
          return v;
        }
      }
      function _getSchemaObj(self2, keyRef) {
        keyRef = resolve.normalizeId(keyRef);
        return self2._schemas[keyRef] || self2._refs[keyRef] || self2._fragments[keyRef];
      }
      function removeSchema(schemaKeyRef) {
        if (schemaKeyRef instanceof RegExp) {
          _removeAllSchemas(this, this._schemas, schemaKeyRef);
          _removeAllSchemas(this, this._refs, schemaKeyRef);
          return this;
        }
        switch (typeof schemaKeyRef) {
          case "undefined":
            _removeAllSchemas(this, this._schemas);
            _removeAllSchemas(this, this._refs);
            this._cache.clear();
            return this;
          case "string":
            var schemaObj = _getSchemaObj(this, schemaKeyRef);
            if (schemaObj)
              this._cache.del(schemaObj.cacheKey);
            delete this._schemas[schemaKeyRef];
            delete this._refs[schemaKeyRef];
            return this;
          case "object":
            var serialize = this._opts.serialize;
            var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;
            this._cache.del(cacheKey);
            var id = this._getId(schemaKeyRef);
            if (id) {
              id = resolve.normalizeId(id);
              delete this._schemas[id];
              delete this._refs[id];
            }
        }
        return this;
      }
      function _removeAllSchemas(self2, schemas, regex) {
        for (var keyRef in schemas) {
          var schemaObj = schemas[keyRef];
          if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
            self2._cache.del(schemaObj.cacheKey);
            delete schemas[keyRef];
          }
        }
      }
      function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
        if (typeof schema != "object" && typeof schema != "boolean")
          throw new Error("schema should be object or boolean");
        var serialize = this._opts.serialize;
        var cacheKey = serialize ? serialize(schema) : schema;
        var cached = this._cache.get(cacheKey);
        if (cached)
          return cached;
        shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;
        var id = resolve.normalizeId(this._getId(schema));
        if (id && shouldAddSchema)
          checkUnique(this, id);
        var willValidate = this._opts.validateSchema !== false && !skipValidation;
        var recursiveMeta;
        if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))
          this.validateSchema(schema, true);
        var localRefs = resolve.ids.call(this, schema);
        var schemaObj = new SchemaObject({
          id,
          schema,
          localRefs,
          cacheKey,
          meta
        });
        if (id[0] != "#" && shouldAddSchema)
          this._refs[id] = schemaObj;
        this._cache.put(cacheKey, schemaObj);
        if (willValidate && recursiveMeta)
          this.validateSchema(schema, true);
        return schemaObj;
      }
      function _compile(schemaObj, root3) {
        if (schemaObj.compiling) {
          schemaObj.validate = callValidate;
          callValidate.schema = schemaObj.schema;
          callValidate.errors = null;
          callValidate.root = root3 ? root3 : callValidate;
          if (schemaObj.schema.$async === true)
            callValidate.$async = true;
          return callValidate;
        }
        schemaObj.compiling = true;
        var currentOpts;
        if (schemaObj.meta) {
          currentOpts = this._opts;
          this._opts = this._metaOpts;
        }
        var v;
        try {
          v = compileSchema.call(this, schemaObj.schema, root3, schemaObj.localRefs);
        } catch (e) {
          delete schemaObj.validate;
          throw e;
        } finally {
          schemaObj.compiling = false;
          if (schemaObj.meta)
            this._opts = currentOpts;
        }
        schemaObj.validate = v;
        schemaObj.refs = v.refs;
        schemaObj.refVal = v.refVal;
        schemaObj.root = v.root;
        return v;
        function callValidate() {
          var _validate = schemaObj.validate;
          var result = _validate.apply(this, arguments);
          callValidate.errors = _validate.errors;
          return result;
        }
      }
      function chooseGetId(opts) {
        switch (opts.schemaId) {
          case "auto":
            return _get$IdOrId;
          case "id":
            return _getId;
          default:
            return _get$Id;
        }
      }
      function _getId(schema) {
        if (schema.$id)
          this.logger.warn("schema $id ignored", schema.$id);
        return schema.id;
      }
      function _get$Id(schema) {
        if (schema.id)
          this.logger.warn("schema id ignored", schema.id);
        return schema.$id;
      }
      function _get$IdOrId(schema) {
        if (schema.$id && schema.id && schema.$id != schema.id)
          throw new Error("schema $id is different from id");
        return schema.$id || schema.id;
      }
      function errorsText(errors, options) {
        errors = errors || this.errors;
        if (!errors)
          return "No errors";
        options = options || {};
        var separator = options.separator === void 0 ? ", " : options.separator;
        var dataVar = options.dataVar === void 0 ? "data" : options.dataVar;
        var text = "";
        for (var i = 0; i < errors.length; i++) {
          var e = errors[i];
          if (e)
            text += dataVar + e.dataPath + " " + e.message + separator;
        }
        return text.slice(0, -separator.length);
      }
      function addFormat(name, format) {
        if (typeof format == "string")
          format = new RegExp(format);
        this._formats[name] = format;
        return this;
      }
      function addDefaultMetaSchema(self2) {
        var $dataSchema;
        if (self2._opts.$data) {
          $dataSchema = require_data2();
          self2.addMetaSchema($dataSchema, $dataSchema.$id, true);
        }
        if (self2._opts.meta === false)
          return;
        var metaSchema = require_json_schema_draft_07();
        if (self2._opts.$data)
          metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);
        self2.addMetaSchema(metaSchema, META_SCHEMA_ID, true);
        self2._refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
      }
      function addInitialSchemas(self2) {
        var optsSchemas = self2._opts.schemas;
        if (!optsSchemas)
          return;
        if (Array.isArray(optsSchemas))
          self2.addSchema(optsSchemas);
        else
          for (var key in optsSchemas)
            self2.addSchema(optsSchemas[key], key);
      }
      function addInitialFormats(self2) {
        for (var name in self2._opts.formats) {
          var format = self2._opts.formats[name];
          self2.addFormat(name, format);
        }
      }
      function addInitialKeywords(self2) {
        for (var name in self2._opts.keywords) {
          var keyword = self2._opts.keywords[name];
          self2.addKeyword(name, keyword);
        }
      }
      function checkUnique(self2, id) {
        if (self2._schemas[id] || self2._refs[id])
          throw new Error('schema with key or id "' + id + '" already exists');
      }
      function getMetaSchemaOptions(self2) {
        var metaOpts = util.copy(self2._opts);
        for (var i = 0; i < META_IGNORE_OPTIONS.length; i++)
          delete metaOpts[META_IGNORE_OPTIONS[i]];
        return metaOpts;
      }
      function setLogger(self2) {
        var logger = self2._opts.logger;
        if (logger === false) {
          self2.logger = { log: noop3, warn: noop3, error: noop3 };
        } else {
          if (logger === void 0)
            logger = console;
          if (!(typeof logger == "object" && logger.log && logger.warn && logger.error))
            throw new Error("logger must implement log, warn and error methods");
          self2.logger = logger;
        }
      }
      function noop3() {
      }
    }
  });

  // node_modules/classnames/index.js
  var require_classnames = __commonJS({
    "node_modules/classnames/index.js"(exports2, module2) {
      (function() {
        "use strict";
        var hasOwn = {}.hasOwnProperty;
        var nativeCodeString = "[native code]";
        function classNames24() {
          var classes = [];
          for (var i = 0; i < arguments.length; i++) {
            var arg = arguments[i];
            if (!arg)
              continue;
            var argType = typeof arg;
            if (argType === "string" || argType === "number") {
              classes.push(arg);
            } else if (Array.isArray(arg)) {
              if (arg.length) {
                var inner2 = classNames24.apply(null, arg);
                if (inner2) {
                  classes.push(inner2);
                }
              }
            } else if (argType === "object") {
              if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
                classes.push(arg.toString());
                continue;
              }
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            }
          }
          return classes.join(" ");
        }
        if (typeof module2 !== "undefined" && module2.exports) {
          classNames24.default = classNames24;
          module2.exports = classNames24;
        } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
          define("classnames", [], function() {
            return classNames24;
          });
        } else {
          window.classNames = classNames24;
        }
      })();
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React112 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React112.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType3(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context3 = type;
                  return getContextName(context3) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source2, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match && match[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source2, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component15) {
            var prototype = Component15.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source2, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source2, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source2, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty16 = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values5, location, componentName2, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty16);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err2 = Error((componentName2 || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err2.name = "Invariant Violation";
                      throw err2;
                    }
                    error$1 = typeSpecs[typeSpecName](values5, typeSpecName, componentName2, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName2 || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty16.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty16.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName2 = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName2]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName2] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source2, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source2
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source2, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty16.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps6 = type.defaultProps;
                for (propName in defaultProps6) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps6[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source2, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement5(object2) {
            {
              return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source2) {
            {
              if (source2 !== void 0) {
                var fileName = source2.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source2.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node5, parentType) {
            {
              if (typeof node5 !== "object") {
                return;
              }
              if (isArray2(node5)) {
                for (var i = 0; i < node5.length; i++) {
                  var child = node5[i];
                  if (isValidElement5(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement5(node5)) {
                if (node5._store) {
                  node5._store.validated = true;
                }
              } else if (node5) {
                var iteratorFn = getIteratorFn(node5);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node5.entries) {
                    var iterator = iteratorFn.call(node5);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement5(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes4;
              if (typeof type === "function") {
                propTypes4 = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes4 = type.propTypes;
              } else {
                return;
              }
              if (propTypes4) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes4, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source2, self2) {
            {
              var validType = isValidElementType3(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source2);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray2(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source2, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children2 = props.children;
                if (children2 !== void 0) {
                  if (isStaticChildren) {
                    if (isArray2(children2)) {
                      for (var i = 0; i < children2.length; i++) {
                        validateChildKeys(children2[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children2);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children2, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx = jsxWithValidationDynamic;
          var jsxs = jsxWithValidationStatic;
          exports2.Fragment = REACT_FRAGMENT_TYPE;
          exports2.jsx = jsx;
          exports2.jsxs = jsxs;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/@react-icons/all-files/lib/cjs/iconsManifest.js
  var require_iconsManifest = __commonJS({
    "node_modules/@react-icons/all-files/lib/cjs/iconsManifest.js"(exports2, module2) {
      module2.exports.IconsManifest = [
        {
          "id": "fa",
          "name": "Font Awesome",
          "projectUrl": "https://fontawesome.com/",
          "license": "CC BY 4.0 License",
          "licenseUrl": "https://creativecommons.org/licenses/by/4.0/"
        },
        {
          "id": "io",
          "name": "Ionicons 4",
          "projectUrl": "https://ionicons.com/",
          "license": "MIT",
          "licenseUrl": "https://github.com/ionic-team/ionicons/blob/master/LICENSE"
        },
        {
          "id": "io5",
          "name": "Ionicons 5",
          "projectUrl": "https://ionicons.com/",
          "license": "MIT",
          "licenseUrl": "https://github.com/ionic-team/ionicons/blob/master/LICENSE"
        },
        {
          "id": "md",
          "name": "Material Design icons",
          "projectUrl": "http://google.github.io/material-design-icons/",
          "license": "Apache License Version 2.0",
          "licenseUrl": "https://github.com/google/material-design-icons/blob/master/LICENSE"
        },
        {
          "id": "ti",
          "name": "Typicons",
          "projectUrl": "http://s-ings.com/typicons/",
          "license": "CC BY-SA 3.0",
          "licenseUrl": "https://creativecommons.org/licenses/by-sa/3.0/"
        },
        {
          "id": "go",
          "name": "Github Octicons icons",
          "projectUrl": "https://octicons.github.com/",
          "license": "MIT",
          "licenseUrl": "https://github.com/primer/octicons/blob/master/LICENSE"
        },
        {
          "id": "fi",
          "name": "Feather",
          "projectUrl": "https://feathericons.com/",
          "license": "MIT",
          "licenseUrl": "https://github.com/feathericons/feather/blob/master/LICENSE"
        },
        {
          "id": "gi",
          "name": "Game Icons",
          "projectUrl": "https://game-icons.net/",
          "license": "CC BY 3.0",
          "licenseUrl": "https://creativecommons.org/licenses/by/3.0/"
        },
        {
          "id": "wi",
          "name": "Weather Icons",
          "projectUrl": "https://erikflowers.github.io/weather-icons/",
          "license": "SIL OFL 1.1",
          "licenseUrl": "http://scripts.sil.org/OFL"
        },
        {
          "id": "di",
          "name": "Devicons",
          "projectUrl": "https://vorillaz.github.io/devicons/",
          "license": "MIT",
          "licenseUrl": "https://opensource.org/licenses/MIT"
        },
        {
          "id": "ai",
          "name": "Ant Design Icons",
          "projectUrl": "https://github.com/ant-design/ant-design-icons",
          "license": "MIT",
          "licenseUrl": "https://opensource.org/licenses/MIT"
        },
        {
          "id": "bs",
          "name": "Bootstrap Icons",
          "projectUrl": "https://github.com/twbs/icons",
          "license": "MIT",
          "licenseUrl": "https://opensource.org/licenses/MIT"
        },
        {
          "id": "ri",
          "name": "Remix Icon",
          "projectUrl": "https://github.com/Remix-Design/RemixIcon",
          "license": "Apache License Version 2.0",
          "licenseUrl": "http://www.apache.org/licenses/"
        },
        {
          "id": "fc",
          "name": "Flat Color Icons",
          "projectUrl": "https://github.com/icons8/flat-color-icons",
          "license": "MIT",
          "licenseUrl": "https://opensource.org/licenses/MIT"
        },
        {
          "id": "gr",
          "name": "Grommet-Icons",
          "projectUrl": "https://github.com/grommet/grommet-icons",
          "license": "Apache License Version 2.0",
          "licenseUrl": "http://www.apache.org/licenses/"
        },
        {
          "id": "hi",
          "name": "Heroicons",
          "projectUrl": "https://github.com/refactoringui/heroicons",
          "license": "MIT",
          "licenseUrl": "https://opensource.org/licenses/MIT"
        },
        {
          "id": "si",
          "name": "Simple Icons",
          "projectUrl": "https://simpleicons.org/",
          "license": "CC0 1.0 Universal",
          "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/"
        },
        {
          "id": "im",
          "name": "IcoMoon Free",
          "projectUrl": "https://github.com/Keyamoon/IcoMoon-Free",
          "license": "CC BY 4.0 License"
        },
        {
          "id": "bi",
          "name": "BoxIcons",
          "projectUrl": "https://github.com/atisawd/boxicons",
          "license": "CC BY 4.0 License"
        },
        {
          "id": "cg",
          "name": "css.gg",
          "projectUrl": "https://github.com/astrit/css.gg",
          "license": "MIT",
          "licenseUrl": "https://opensource.org/licenses/MIT"
        },
        {
          "id": "vsc",
          "name": "VS Code Icons",
          "projectUrl": "https://github.com/microsoft/vscode-codicons",
          "license": "CC BY 4.0",
          "licenseUrl": "https://creativecommons.org/licenses/by/4.0/"
        }
      ];
    }
  });

  // node_modules/@react-icons/all-files/lib/cjs/iconContext.js
  var require_iconContext = __commonJS({
    "node_modules/@react-icons/all-files/lib/cjs/iconContext.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.IconContext = exports2.DefaultContext = void 0;
      var React112 = require_react();
      exports2.DefaultContext = {
        color: void 0,
        size: void 0,
        className: void 0,
        style: void 0,
        attr: void 0
      };
      exports2.IconContext = React112.createContext && React112.createContext(exports2.DefaultContext);
    }
  });

  // node_modules/@react-icons/all-files/lib/cjs/iconBase.js
  var require_iconBase = __commonJS({
    "node_modules/@react-icons/all-files/lib/cjs/iconBase.js"(exports2) {
      "use strict";
      var __assign2 = exports2 && exports2.__assign || function() {
        __assign2 = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign2.apply(this, arguments);
      };
      var __rest = exports2 && exports2.__rest || function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.IconBase = exports2.GenIcon = void 0;
      var React112 = require_react();
      var iconContext_1 = require_iconContext();
      function Tree2Element(tree) {
        return tree && tree.map(function(node5, i) {
          return React112.createElement(node5.tag, __assign2({ key: i }, node5.attr), Tree2Element(node5.child));
        });
      }
      function GenIcon(data) {
        return function(props) {
          return React112.createElement(IconBase, __assign2({ attr: __assign2({}, data.attr) }, props), Tree2Element(data.child));
        };
      }
      exports2.GenIcon = GenIcon;
      function IconBase(props) {
        var elem = function(conf) {
          var attr = props.attr, size = props.size, title = props.title, svgProps = __rest(props, ["attr", "size", "title"]);
          var computedSize = size || conf.size || "1em";
          var className;
          if (conf.className)
            className = conf.className;
          if (props.className)
            className = (className ? className + " " : "") + props.className;
          return React112.createElement(
            "svg",
            __assign2({ stroke: "currentColor", fill: "currentColor", strokeWidth: "0" }, conf.attr, attr, svgProps, { className, style: __assign2(__assign2({ color: props.color || conf.color }, conf.style), props.style), height: computedSize, width: computedSize, xmlns: "http://www.w3.org/2000/svg" }),
            title && React112.createElement("title", null, title),
            props.children
          );
        };
        return iconContext_1.IconContext !== void 0 ? React112.createElement(iconContext_1.IconContext.Consumer, null, function(conf) {
          return elem(conf);
        }) : elem(iconContext_1.DefaultContext);
      }
      exports2.IconBase = IconBase;
    }
  });

  // node_modules/@react-icons/all-files/lib/cjs/index.js
  var require_cjs = __commonJS({
    "node_modules/@react-icons/all-files/lib/cjs/index.js"(exports2) {
      "use strict";
      var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m2, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m2[k];
        } });
      } : function(o, m2, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m2[k];
      });
      var __exportStar = exports2 && exports2.__exportStar || function(m2, exports3) {
        for (var p in m2)
          if (p !== "default" && !exports3.hasOwnProperty(p))
            __createBinding(exports3, m2, p);
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      __exportStar(require_iconsManifest(), exports2);
      __exportStar(require_iconBase(), exports2);
      __exportStar(require_iconContext(), exports2);
    }
  });

  // node_modules/@react-icons/all-files/bs/BsPlus.js
  var require_BsPlus = __commonJS({
    "node_modules/@react-icons/all-files/bs/BsPlus.js"(exports2, module2) {
      var GenIcon = require_cjs().GenIcon;
      module2.exports.BsPlus = function BsPlus2(props) {
        return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 16 16", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M8 3.5a.5.5 0 01.5.5v4a.5.5 0 01-.5.5H4a.5.5 0 010-1h3.5V4a.5.5 0 01.5-.5z", "clipRule": "evenodd" } }, { "tag": "path", "attr": { "fillRule": "evenodd", "d": "M7.5 8a.5.5 0 01.5-.5h4a.5.5 0 010 1H8.5V12a.5.5 0 01-1 0V8z", "clipRule": "evenodd" } }] })(props);
      };
    }
  });

  // node_modules/warning/warning.js
  var require_warning2 = __commonJS({
    "node_modules/warning/warning.js"(exports2, module2) {
      "use strict";
      var __DEV__ = true;
      var warning6 = function() {
      };
      if (__DEV__) {
        printWarning = function printWarning2(format, args) {
          var len = arguments.length;
          args = new Array(len > 1 ? len - 1 : 0);
          for (var key = 1; key < len; key++) {
            args[key - 1] = arguments[key];
          }
          var argIndex = 0;
          var message = "Warning: " + format.replace(/%s/g, function() {
            return args[argIndex++];
          });
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
        warning6 = function(condition, format, args) {
          var len = arguments.length;
          args = new Array(len > 2 ? len - 2 : 0);
          for (var key = 2; key < len; key++) {
            args[key - 2] = arguments[key];
          }
          if (format === void 0) {
            throw new Error(
              "`warning(condition, format, ...args)` requires a warning message argument"
            );
          }
          if (!condition) {
            printWarning.apply(null, [format].concat(args));
          }
        };
      }
      var printWarning;
      module2.exports = warning6;
    }
  });

  // node_modules/@react-icons/all-files/io/IoIosRemove.js
  var require_IoIosRemove = __commonJS({
    "node_modules/@react-icons/all-files/io/IoIosRemove.js"(exports2, module2) {
      var GenIcon = require_cjs().GenIcon;
      module2.exports.IoIosRemove = function IoIosRemove2(props) {
        return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M368.5 240h-225c-8.8 0-16 7.2-16 16 0 4.4 1.8 8.4 4.7 11.3 2.9 2.9 6.9 4.7 11.3 4.7h225c8.8 0 16-7.2 16-16s-7.2-16-16-16z" } }] })(props);
      };
    }
  });

  // node_modules/@react-icons/all-files/ai/AiOutlineArrowUp.js
  var require_AiOutlineArrowUp = __commonJS({
    "node_modules/@react-icons/all-files/ai/AiOutlineArrowUp.js"(exports2, module2) {
      var GenIcon = require_cjs().GenIcon;
      module2.exports.AiOutlineArrowUp = function AiOutlineArrowUp2(props) {
        return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 1024 1024" }, "child": [{ "tag": "path", "attr": { "d": "M868 545.5L536.1 163a31.96 31.96 0 0 0-48.3 0L156 545.5a7.97 7.97 0 0 0 6 13.2h81c4.6 0 9-2 12.1-5.5L474 300.9V864c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V300.9l218.9 252.3c3 3.5 7.4 5.5 12.1 5.5h81c6.8 0 10.5-8 6-13.2z" } }] })(props);
      };
    }
  });

  // node_modules/@react-icons/all-files/ai/AiOutlineArrowDown.js
  var require_AiOutlineArrowDown = __commonJS({
    "node_modules/@react-icons/all-files/ai/AiOutlineArrowDown.js"(exports2, module2) {
      var GenIcon = require_cjs().GenIcon;
      module2.exports.AiOutlineArrowDown = function AiOutlineArrowDown2(props) {
        return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 1024 1024" }, "child": [{ "tag": "path", "attr": { "d": "M862 465.3h-81c-4.6 0-9 2-12.1 5.5L550 723.1V160c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v563.1L255.1 470.8c-3-3.5-7.4-5.5-12.1-5.5h-81c-6.8 0-10.5 8.1-6 13.2L487.9 861a31.96 31.96 0 0 0 48.3 0L868 478.5c4.5-5.2.8-13.2-6-13.2z" } }] })(props);
      };
    }
  });

  // src/index.tsx
  var import_react38 = __toESM(require_react());
  var import_client2 = __toESM(require_client());

  // src/App.tsx
  var import_react37 = __toESM(require_react());
  var import_hooks2 = __toESM(require_hooks2());

  // src/relay.ts
  var import_relay_runtime = __toESM(require_relay_runtime());

  // src/env.ts
  var env = true ? {
    GRAPHQL_URL: "http://localhost:4455/api/hasura/admin/v1/graphql",
    KRATOS_URL: "http://localhost:4455/api/kratos"
  } : {
    GRAPHQL_URL: "https://recipes.cookwherever.com/api/hasura/v1/graphql",
    KRATOS_URL: "https://recipes.cookwherever.com/api/kratos"
  };

  // src/relay.ts
  async function fetchGraphQL(text, variables) {
    const response = await fetch(env.GRAPHQL_URL, {
      method: "POST",
      headers: {
        "X-Hasura-Admin-Secret": "password",
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        query: text,
        variables
      })
    });
    return response.json();
  }
  async function fetchRelay(params, variables) {
    console.log(`fetching query ${params.name} with ${JSON.stringify(variables)}`);
    return fetchGraphQL(params.text, variables);
  }
  var RelayEnvironment = new import_relay_runtime.Environment({
    network: import_relay_runtime.Network.create(fetchRelay),
    store: new import_relay_runtime.Store(new import_relay_runtime.RecordSource())
  });

  // node_modules/recoil/es/index.js
  var import_react = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());
  function err(message) {
    const error = new Error(message);
    if (error.stack === void 0) {
      try {
        throw error;
      } catch (_) {
      }
    }
    return error;
  }
  var err_1 = err;
  var Recoil_err = err_1;
  function isPromise(p) {
    return !!p && typeof p.then === "function";
  }
  var Recoil_isPromise = isPromise;
  function nullthrows(x, message) {
    if (x != null) {
      return x;
    }
    throw Recoil_err(message !== null && message !== void 0 ? message : "Got unexpected null or undefined");
  }
  var Recoil_nullthrows = nullthrows;
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var BaseLoadable = class {
    getValue() {
      throw Recoil_err("BaseLoadable");
    }
    toPromise() {
      throw Recoil_err("BaseLoadable");
    }
    valueMaybe() {
      throw Recoil_err("BaseLoadable");
    }
    valueOrThrow() {
      throw Recoil_err(`Loadable expected value, but in "${this.state}" state`);
    }
    promiseMaybe() {
      throw Recoil_err("BaseLoadable");
    }
    promiseOrThrow() {
      throw Recoil_err(`Loadable expected promise, but in "${this.state}" state`);
    }
    errorMaybe() {
      throw Recoil_err("BaseLoadable");
    }
    errorOrThrow() {
      throw Recoil_err(`Loadable expected error, but in "${this.state}" state`);
    }
    is(other) {
      return other.state === this.state && other.contents === this.contents;
    }
    map(_map) {
      throw Recoil_err("BaseLoadable");
    }
  };
  var ValueLoadable = class extends BaseLoadable {
    constructor(value) {
      super();
      _defineProperty(this, "state", "hasValue");
      _defineProperty(this, "contents", void 0);
      this.contents = value;
    }
    getValue() {
      return this.contents;
    }
    toPromise() {
      return Promise.resolve(this.contents);
    }
    valueMaybe() {
      return this.contents;
    }
    valueOrThrow() {
      return this.contents;
    }
    promiseMaybe() {
      return void 0;
    }
    errorMaybe() {
      return void 0;
    }
    map(map) {
      try {
        const next = map(this.contents);
        return Recoil_isPromise(next) ? loadableWithPromise(next) : isLoadable(next) ? next : loadableWithValue(next);
      } catch (e) {
        return Recoil_isPromise(e) ? loadableWithPromise(e.next(() => this.map(map))) : loadableWithError(e);
      }
    }
  };
  var ErrorLoadable = class extends BaseLoadable {
    constructor(error) {
      super();
      _defineProperty(this, "state", "hasError");
      _defineProperty(this, "contents", void 0);
      this.contents = error;
    }
    getValue() {
      throw this.contents;
    }
    toPromise() {
      return Promise.reject(this.contents);
    }
    valueMaybe() {
      return void 0;
    }
    promiseMaybe() {
      return void 0;
    }
    errorMaybe() {
      return this.contents;
    }
    errorOrThrow() {
      return this.contents;
    }
    map(_map) {
      return this;
    }
  };
  var LoadingLoadable = class extends BaseLoadable {
    constructor(promise) {
      super();
      _defineProperty(this, "state", "loading");
      _defineProperty(this, "contents", void 0);
      this.contents = promise;
    }
    getValue() {
      throw this.contents;
    }
    toPromise() {
      return this.contents;
    }
    valueMaybe() {
      return void 0;
    }
    promiseMaybe() {
      return this.contents;
    }
    promiseOrThrow() {
      return this.contents;
    }
    errorMaybe() {
      return void 0;
    }
    map(map) {
      return loadableWithPromise(this.contents.then((value) => {
        const next = map(value);
        if (isLoadable(next)) {
          const nextLoadable = next;
          switch (nextLoadable.state) {
            case "hasValue":
              return nextLoadable.contents;
            case "hasError":
              throw nextLoadable.contents;
            case "loading":
              return nextLoadable.contents;
          }
        }
        return next;
      }).catch((e) => {
        if (Recoil_isPromise(e)) {
          return e.then(() => this.map(map).contents);
        }
        throw e;
      }));
    }
  };
  function loadableWithValue(value) {
    return Object.freeze(new ValueLoadable(value));
  }
  function loadableWithError(error) {
    return Object.freeze(new ErrorLoadable(error));
  }
  function loadableWithPromise(promise) {
    return Object.freeze(new LoadingLoadable(promise));
  }
  function loadableLoading() {
    return Object.freeze(new LoadingLoadable(new Promise(() => {
    })));
  }
  function loadableAllArray(inputs) {
    return inputs.every((i) => i.state === "hasValue") ? loadableWithValue(inputs.map((i) => i.contents)) : inputs.some((i) => i.state === "hasError") ? loadableWithError(Recoil_nullthrows(inputs.find((i) => i.state === "hasError"), "Invalid loadable passed to loadableAll").contents) : loadableWithPromise(Promise.all(inputs.map((i) => i.contents)));
  }
  function loadableAll(inputs) {
    const unwrapedInputs = Array.isArray(inputs) ? inputs : Object.getOwnPropertyNames(inputs).map((key) => inputs[key]);
    const normalizedInputs = unwrapedInputs.map((x) => isLoadable(x) ? x : Recoil_isPromise(x) ? loadableWithPromise(x) : loadableWithValue(x));
    const output = loadableAllArray(normalizedInputs);
    return Array.isArray(inputs) ? output : output.map((outputs) => Object.getOwnPropertyNames(inputs).reduce((out, key, idx) => ({
      ...out,
      [key]: outputs[idx]
    }), {}));
  }
  function isLoadable(x) {
    return x instanceof BaseLoadable;
  }
  var LoadableStaticInterface = {
    of: (value) => Recoil_isPromise(value) ? loadableWithPromise(value) : isLoadable(value) ? value : loadableWithValue(value),
    error: (error) => loadableWithError(error),
    loading: () => loadableLoading(),
    all: loadableAll,
    isLoadable
  };
  var Recoil_Loadable = {
    loadableWithValue,
    loadableWithError,
    loadableWithPromise,
    loadableLoading,
    loadableAll,
    isLoadable,
    RecoilLoadable: LoadableStaticInterface
  };
  var Recoil_Loadable_1 = Recoil_Loadable.loadableWithValue;
  var Recoil_Loadable_2 = Recoil_Loadable.loadableWithError;
  var Recoil_Loadable_3 = Recoil_Loadable.loadableWithPromise;
  var Recoil_Loadable_4 = Recoil_Loadable.loadableLoading;
  var Recoil_Loadable_5 = Recoil_Loadable.loadableAll;
  var Recoil_Loadable_6 = Recoil_Loadable.isLoadable;
  var Recoil_Loadable_7 = Recoil_Loadable.RecoilLoadable;
  var Recoil_Loadable$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    loadableWithValue: Recoil_Loadable_1,
    loadableWithError: Recoil_Loadable_2,
    loadableWithPromise: Recoil_Loadable_3,
    loadableLoading: Recoil_Loadable_4,
    loadableAll: Recoil_Loadable_5,
    isLoadable: Recoil_Loadable_6,
    RecoilLoadable: Recoil_Loadable_7
  });
  var gks = (/* @__PURE__ */ new Map()).set("recoil_hamt_2020", true).set("recoil_sync_external_store", true).set("recoil_suppress_rerender_in_callback", true).set("recoil_memory_managament_2020", true);
  function Recoil_gkx_OSS(gk) {
    var _gks$get;
    return (_gks$get = gks.get(gk)) !== null && _gks$get !== void 0 ? _gks$get : false;
  }
  Recoil_gkx_OSS.setPass = (gk) => {
    gks.set(gk, true);
  };
  Recoil_gkx_OSS.setFail = (gk) => {
    gks.set(gk, false);
  };
  Recoil_gkx_OSS.clear = () => {
    gks.clear();
  };
  var Recoil_gkx = Recoil_gkx_OSS;
  function recoverableViolation(message, _projectName, {
    error
  } = {}) {
    if (true) {
      console.error(message, error);
    }
    return null;
  }
  var recoverableViolation_1 = recoverableViolation;
  var Recoil_recoverableViolation = recoverableViolation_1;
  var _createMutableSource;
  var _useMutableSource;
  var _useSyncExternalStore;
  var createMutableSource = (_createMutableSource = import_react.default.createMutableSource) !== null && _createMutableSource !== void 0 ? _createMutableSource : import_react.default.unstable_createMutableSource;
  var useMutableSource = (_useMutableSource = import_react.default.useMutableSource) !== null && _useMutableSource !== void 0 ? _useMutableSource : import_react.default.unstable_useMutableSource;
  var useSyncExternalStore = (_useSyncExternalStore = import_react.default.useSyncExternalStore) !== null && _useSyncExternalStore !== void 0 ? _useSyncExternalStore : import_react.default.unstable_useSyncExternalStore;
  var ReactRendererVersionMismatchWarnOnce = false;
  function currentRendererSupportsUseSyncExternalStore() {
    var _ReactCurrentDispatch;
    const {
      ReactCurrentDispatcher,
      ReactCurrentOwner
    } = import_react.default.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    const dispatcher = (_ReactCurrentDispatch = ReactCurrentDispatcher === null || ReactCurrentDispatcher === void 0 ? void 0 : ReactCurrentDispatcher.current) !== null && _ReactCurrentDispatch !== void 0 ? _ReactCurrentDispatch : ReactCurrentOwner.currentDispatcher;
    const isUseSyncExternalStoreSupported = dispatcher.useSyncExternalStore != null;
    if (useSyncExternalStore && !isUseSyncExternalStoreSupported && !ReactRendererVersionMismatchWarnOnce) {
      ReactRendererVersionMismatchWarnOnce = true;
      Recoil_recoverableViolation("A React renderer without React 18+ API support is being used with React 18+.");
    }
    return isUseSyncExternalStoreSupported;
  }
  function reactMode() {
    if (Recoil_gkx("recoil_transition_support")) {
      return {
        mode: "TRANSITION_SUPPORT",
        early: true,
        concurrent: true
      };
    }
    if (Recoil_gkx("recoil_sync_external_store") && useSyncExternalStore != null) {
      return {
        mode: "SYNC_EXTERNAL_STORE",
        early: true,
        concurrent: false
      };
    }
    if (Recoil_gkx("recoil_mutable_source") && useMutableSource != null && typeof window !== "undefined" && !window.$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE) {
      return Recoil_gkx("recoil_suppress_rerender_in_callback") ? {
        mode: "MUTABLE_SOURCE",
        early: true,
        concurrent: true
      } : {
        mode: "MUTABLE_SOURCE",
        early: false,
        concurrent: false
      };
    }
    return Recoil_gkx("recoil_suppress_rerender_in_callback") ? {
      mode: "LEGACY",
      early: true,
      concurrent: false
    } : {
      mode: "LEGACY",
      early: false,
      concurrent: false
    };
  }
  function isFastRefreshEnabled() {
    return false;
  }
  var Recoil_ReactMode = {
    createMutableSource,
    useMutableSource,
    useSyncExternalStore,
    currentRendererSupportsUseSyncExternalStore,
    reactMode,
    isFastRefreshEnabled
  };
  var env2 = {
    RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED: true
  };
  function applyProcessEnvFlagOverrides() {
    var _process, _process$env$RECOIL_D, _process$env$RECOIL_D2;
    if (typeof process === "undefined") {
      return;
    }
    if (((_process = process) === null || _process === void 0 ? void 0 : _process.env) == null) {
      return;
    }
    const sanitizedValue = (_process$env$RECOIL_D = process.env.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED) === null || _process$env$RECOIL_D === void 0 ? void 0 : (_process$env$RECOIL_D2 = _process$env$RECOIL_D.toLowerCase()) === null || _process$env$RECOIL_D2 === void 0 ? void 0 : _process$env$RECOIL_D2.trim();
    if (sanitizedValue == null || sanitizedValue === "") {
      return;
    }
    const allowedValues = ["true", "false"];
    if (!allowedValues.includes(sanitizedValue)) {
      throw Recoil_err(`process.env.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED value must be 'true', 'false', or empty: ${sanitizedValue}`);
    }
    env2.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED = sanitizedValue === "true";
  }
  applyProcessEnvFlagOverrides();
  var Recoil_RecoilEnv = env2;
  var AbstractRecoilValue = class {
    constructor(newKey) {
      _defineProperty(this, "key", void 0);
      this.key = newKey;
    }
    toJSON() {
      return {
        key: this.key
      };
    }
  };
  var RecoilState = class extends AbstractRecoilValue {
  };
  var RecoilValueReadOnly = class extends AbstractRecoilValue {
  };
  function isRecoilValue(x) {
    return x instanceof RecoilState || x instanceof RecoilValueReadOnly;
  }
  var Recoil_RecoilValue = {
    AbstractRecoilValue,
    RecoilState,
    RecoilValueReadOnly,
    isRecoilValue
  };
  var Recoil_RecoilValue_1 = Recoil_RecoilValue.AbstractRecoilValue;
  var Recoil_RecoilValue_2 = Recoil_RecoilValue.RecoilState;
  var Recoil_RecoilValue_3 = Recoil_RecoilValue.RecoilValueReadOnly;
  var Recoil_RecoilValue_4 = Recoil_RecoilValue.isRecoilValue;
  var Recoil_RecoilValue$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    AbstractRecoilValue: Recoil_RecoilValue_1,
    RecoilState: Recoil_RecoilValue_2,
    RecoilValueReadOnly: Recoil_RecoilValue_3,
    isRecoilValue: Recoil_RecoilValue_4
  });
  function sprintf(format, ...args) {
    let index2 = 0;
    return format.replace(/%s/g, () => String(args[index2++]));
  }
  var sprintf_1 = sprintf;
  function expectationViolation(format, ...args) {
    if (true) {
      const message = sprintf_1.call(null, format, ...args);
      const error = new Error(message);
      error.name = "Expectation Violation";
      console.error(error);
    }
  }
  var expectationViolation_1 = expectationViolation;
  var Recoil_expectationViolation = expectationViolation_1;
  function mapIterable(iterable, callback) {
    return function* () {
      let index2 = 0;
      for (const value of iterable) {
        yield callback(value, index2++);
      }
    }();
  }
  var Recoil_mapIterable = mapIterable;
  var {
    isFastRefreshEnabled: isFastRefreshEnabled$1
  } = Recoil_ReactMode;
  var DefaultValue = class {
  };
  var DEFAULT_VALUE = new DefaultValue();
  var nodes = /* @__PURE__ */ new Map();
  var recoilValues = /* @__PURE__ */ new Map();
  function recoilValuesForKeys(keys2) {
    return Recoil_mapIterable(keys2, (key) => Recoil_nullthrows(recoilValues.get(key)));
  }
  function checkForDuplicateAtomKey(key) {
    if (nodes.has(key)) {
      const message = `Duplicate atom key "${key}". This is a FATAL ERROR in
      production. But it is safe to ignore this warning if it occurred because of
      hot module replacement.`;
      if (true) {
        if (!isFastRefreshEnabled$1()) {
          Recoil_expectationViolation(message, "recoil");
        }
      } else {
        console.warn(message);
      }
    }
  }
  function registerNode(node5) {
    if (Recoil_RecoilEnv.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED) {
      checkForDuplicateAtomKey(node5.key);
    }
    nodes.set(node5.key, node5);
    const recoilValue = node5.set == null ? new Recoil_RecoilValue$1.RecoilValueReadOnly(node5.key) : new Recoil_RecoilValue$1.RecoilState(node5.key);
    recoilValues.set(node5.key, recoilValue);
    return recoilValue;
  }
  var NodeMissingError = class extends Error {
  };
  function getNode(key) {
    const node5 = nodes.get(key);
    if (node5 == null) {
      throw new NodeMissingError(`Missing definition for RecoilValue: "${key}""`);
    }
    return node5;
  }
  function getNodeMaybe(key) {
    return nodes.get(key);
  }
  var configDeletionHandlers = /* @__PURE__ */ new Map();
  function deleteNodeConfigIfPossible(key) {
    var _node$shouldDeleteCon;
    if (!Recoil_gkx("recoil_memory_managament_2020")) {
      return;
    }
    const node5 = nodes.get(key);
    if (node5 !== null && node5 !== void 0 && (_node$shouldDeleteCon = node5.shouldDeleteConfigOnRelease) !== null && _node$shouldDeleteCon !== void 0 && _node$shouldDeleteCon.call(node5)) {
      var _getConfigDeletionHan;
      nodes.delete(key);
      (_getConfigDeletionHan = getConfigDeletionHandler(key)) === null || _getConfigDeletionHan === void 0 ? void 0 : _getConfigDeletionHan();
      configDeletionHandlers.delete(key);
    }
  }
  function setConfigDeletionHandler(key, fn) {
    if (!Recoil_gkx("recoil_memory_managament_2020")) {
      return;
    }
    if (fn === void 0) {
      configDeletionHandlers.delete(key);
    } else {
      configDeletionHandlers.set(key, fn);
    }
  }
  function getConfigDeletionHandler(key) {
    return configDeletionHandlers.get(key);
  }
  var Recoil_Node = {
    nodes,
    recoilValues,
    registerNode,
    getNode,
    getNodeMaybe,
    deleteNodeConfigIfPossible,
    setConfigDeletionHandler,
    getConfigDeletionHandler,
    recoilValuesForKeys,
    NodeMissingError,
    DefaultValue,
    DEFAULT_VALUE
  };
  function enqueueExecution(s, f) {
    f();
  }
  var Recoil_Queue = {
    enqueueExecution
  };
  function createCommonjsModule(fn, module2) {
    return module2 = { exports: {} }, fn(module2, module2.exports), module2.exports;
  }
  var hamt_1 = createCommonjsModule(function(module2) {
    var _typeof15 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    var hamt = {};
    var SIZE5 = 5;
    var BUCKET_SIZE = Math.pow(2, SIZE5);
    var MASK = BUCKET_SIZE - 1;
    var MAX_INDEX_NODE = BUCKET_SIZE / 2;
    var MIN_ARRAY_NODE = BUCKET_SIZE / 4;
    var nothing = {};
    var constant2 = function constant3(x) {
      return function() {
        return x;
      };
    };
    var hash = hamt.hash = function(str) {
      var type = typeof str === "undefined" ? "undefined" : _typeof15(str);
      if (type === "number")
        return str;
      if (type !== "string")
        str += "";
      var hash2 = 0;
      for (var i = 0, len = str.length; i < len; ++i) {
        var c = str.charCodeAt(i);
        hash2 = (hash2 << 5) - hash2 + c | 0;
      }
      return hash2;
    };
    var popcount = function popcount2(x) {
      x -= x >> 1 & 1431655765;
      x = (x & 858993459) + (x >> 2 & 858993459);
      x = x + (x >> 4) & 252645135;
      x += x >> 8;
      x += x >> 16;
      return x & 127;
    };
    var hashFragment = function hashFragment2(shift2, h) {
      return h >>> shift2 & MASK;
    };
    var toBitmap = function toBitmap2(x) {
      return 1 << x;
    };
    var fromBitmap = function fromBitmap2(bitmap, bit) {
      return popcount(bitmap & bit - 1);
    };
    var arrayUpdate = function arrayUpdate2(mutate2, at, v, arr) {
      var out = arr;
      if (!mutate2) {
        var len = arr.length;
        out = new Array(len);
        for (var i = 0; i < len; ++i) {
          out[i] = arr[i];
        }
      }
      out[at] = v;
      return out;
    };
    var arraySpliceOut = function arraySpliceOut2(mutate2, at, arr) {
      var newLen = arr.length - 1;
      var i = 0;
      var g = 0;
      var out = arr;
      if (mutate2) {
        i = g = at;
      } else {
        out = new Array(newLen);
        while (i < at) {
          out[g++] = arr[i++];
        }
      }
      ++i;
      while (i <= newLen) {
        out[g++] = arr[i++];
      }
      if (mutate2) {
        out.length = newLen;
      }
      return out;
    };
    var arraySpliceIn = function arraySpliceIn2(mutate2, at, v, arr) {
      var len = arr.length;
      if (mutate2) {
        var _i = len;
        while (_i >= at) {
          arr[_i--] = arr[_i];
        }
        arr[at] = v;
        return arr;
      }
      var i = 0, g = 0;
      var out = new Array(len + 1);
      while (i < at) {
        out[g++] = arr[i++];
      }
      out[at] = v;
      while (i < len) {
        out[++g] = arr[i++];
      }
      return out;
    };
    var LEAF = 1;
    var COLLISION = 2;
    var INDEX = 3;
    var ARRAY = 4;
    var empty = {
      __hamt_isEmpty: true
    };
    var isEmptyNode = function isEmptyNode2(x) {
      return x === empty || x && x.__hamt_isEmpty;
    };
    var Leaf = function Leaf2(edit, hash2, key, value) {
      return {
        type: LEAF,
        edit,
        hash: hash2,
        key,
        value,
        _modify: Leaf__modify
      };
    };
    var Collision = function Collision2(edit, hash2, children2) {
      return {
        type: COLLISION,
        edit,
        hash: hash2,
        children: children2,
        _modify: Collision__modify
      };
    };
    var IndexedNode = function IndexedNode2(edit, mask, children2) {
      return {
        type: INDEX,
        edit,
        mask,
        children: children2,
        _modify: IndexedNode__modify
      };
    };
    var ArrayNode = function ArrayNode2(edit, size, children2) {
      return {
        type: ARRAY,
        edit,
        size,
        children: children2,
        _modify: ArrayNode__modify
      };
    };
    var isLeaf = function isLeaf2(node5) {
      return node5 === empty || node5.type === LEAF || node5.type === COLLISION;
    };
    var expand = function expand2(edit, frag, child, bitmap, subNodes) {
      var arr = [];
      var bit = bitmap;
      var count2 = 0;
      for (var i = 0; bit; ++i) {
        if (bit & 1)
          arr[i] = subNodes[count2++];
        bit >>>= 1;
      }
      arr[frag] = child;
      return ArrayNode(edit, count2 + 1, arr);
    };
    var pack = function pack2(edit, count2, removed, elements) {
      var children2 = new Array(count2 - 1);
      var g = 0;
      var bitmap = 0;
      for (var i = 0, len = elements.length; i < len; ++i) {
        if (i !== removed) {
          var elem = elements[i];
          if (elem && !isEmptyNode(elem)) {
            children2[g++] = elem;
            bitmap |= 1 << i;
          }
        }
      }
      return IndexedNode(edit, bitmap, children2);
    };
    var mergeLeaves = function mergeLeaves2(edit, shift2, h1, n1, h2, n2) {
      if (h1 === h2)
        return Collision(edit, h1, [n2, n1]);
      var subH1 = hashFragment(shift2, h1);
      var subH2 = hashFragment(shift2, h2);
      return IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), subH1 === subH2 ? [mergeLeaves2(edit, shift2 + SIZE5, h1, n1, h2, n2)] : subH1 < subH2 ? [n1, n2] : [n2, n1]);
    };
    var updateCollisionList = function updateCollisionList2(mutate2, edit, keyEq, h, list, f, k, size) {
      var len = list.length;
      for (var i = 0; i < len; ++i) {
        var child = list[i];
        if (keyEq(k, child.key)) {
          var value = child.value;
          var _newValue = f(value);
          if (_newValue === value)
            return list;
          if (_newValue === nothing) {
            --size.value;
            return arraySpliceOut(mutate2, i, list);
          }
          return arrayUpdate(mutate2, i, Leaf(edit, h, k, _newValue), list);
        }
      }
      var newValue = f();
      if (newValue === nothing)
        return list;
      ++size.value;
      return arrayUpdate(mutate2, len, Leaf(edit, h, k, newValue), list);
    };
    var canEditNode = function canEditNode2(edit, node5) {
      return edit === node5.edit;
    };
    var Leaf__modify = function Leaf__modify2(edit, keyEq, shift2, f, h, k, size) {
      if (keyEq(k, this.key)) {
        var _v = f(this.value);
        if (_v === this.value)
          return this;
        else if (_v === nothing) {
          --size.value;
          return empty;
        }
        if (canEditNode(edit, this)) {
          this.value = _v;
          return this;
        }
        return Leaf(edit, h, k, _v);
      }
      var v = f();
      if (v === nothing)
        return this;
      ++size.value;
      return mergeLeaves(edit, shift2, this.hash, this, h, Leaf(edit, h, k, v));
    };
    var Collision__modify = function Collision__modify2(edit, keyEq, shift2, f, h, k, size) {
      if (h === this.hash) {
        var canEdit = canEditNode(edit, this);
        var list = updateCollisionList(canEdit, edit, keyEq, this.hash, this.children, f, k, size);
        if (list === this.children)
          return this;
        return list.length > 1 ? Collision(edit, this.hash, list) : list[0];
      }
      var v = f();
      if (v === nothing)
        return this;
      ++size.value;
      return mergeLeaves(edit, shift2, this.hash, this, h, Leaf(edit, h, k, v));
    };
    var IndexedNode__modify = function IndexedNode__modify2(edit, keyEq, shift2, f, h, k, size) {
      var mask = this.mask;
      var children2 = this.children;
      var frag = hashFragment(shift2, h);
      var bit = toBitmap(frag);
      var indx = fromBitmap(mask, bit);
      var exists = mask & bit;
      var current = exists ? children2[indx] : empty;
      var child = current._modify(edit, keyEq, shift2 + SIZE5, f, h, k, size);
      if (current === child)
        return this;
      var canEdit = canEditNode(edit, this);
      var bitmap = mask;
      var newChildren = void 0;
      if (exists && isEmptyNode(child)) {
        bitmap &= ~bit;
        if (!bitmap)
          return empty;
        if (children2.length <= 2 && isLeaf(children2[indx ^ 1]))
          return children2[indx ^ 1];
        newChildren = arraySpliceOut(canEdit, indx, children2);
      } else if (!exists && !isEmptyNode(child)) {
        if (children2.length >= MAX_INDEX_NODE)
          return expand(edit, frag, child, mask, children2);
        bitmap |= bit;
        newChildren = arraySpliceIn(canEdit, indx, child, children2);
      } else {
        newChildren = arrayUpdate(canEdit, indx, child, children2);
      }
      if (canEdit) {
        this.mask = bitmap;
        this.children = newChildren;
        return this;
      }
      return IndexedNode(edit, bitmap, newChildren);
    };
    var ArrayNode__modify = function ArrayNode__modify2(edit, keyEq, shift2, f, h, k, size) {
      var count2 = this.size;
      var children2 = this.children;
      var frag = hashFragment(shift2, h);
      var child = children2[frag];
      var newChild = (child || empty)._modify(edit, keyEq, shift2 + SIZE5, f, h, k, size);
      if (child === newChild)
        return this;
      var canEdit = canEditNode(edit, this);
      var newChildren = void 0;
      if (isEmptyNode(child) && !isEmptyNode(newChild)) {
        ++count2;
        newChildren = arrayUpdate(canEdit, frag, newChild, children2);
      } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {
        --count2;
        if (count2 <= MIN_ARRAY_NODE)
          return pack(edit, count2, frag, children2);
        newChildren = arrayUpdate(canEdit, frag, empty, children2);
      } else {
        newChildren = arrayUpdate(canEdit, frag, newChild, children2);
      }
      if (canEdit) {
        this.size = count2;
        this.children = newChildren;
        return this;
      }
      return ArrayNode(edit, count2, newChildren);
    };
    empty._modify = function(edit, keyEq, shift2, f, h, k, size) {
      var v = f();
      if (v === nothing)
        return empty;
      ++size.value;
      return Leaf(edit, h, k, v);
    };
    function Map3(editable, edit, config, root3, size) {
      this._editable = editable;
      this._edit = edit;
      this._config = config;
      this._root = root3;
      this._size = size;
    }
    Map3.prototype.setTree = function(newRoot, newSize) {
      if (this._editable) {
        this._root = newRoot;
        this._size = newSize;
        return this;
      }
      return newRoot === this._root ? this : new Map3(this._editable, this._edit, this._config, newRoot, newSize);
    };
    var tryGetHash = hamt.tryGetHash = function(alt, hash2, key, map) {
      var node5 = map._root;
      var shift2 = 0;
      var keyEq = map._config.keyEq;
      while (true) {
        switch (node5.type) {
          case LEAF: {
            return keyEq(key, node5.key) ? node5.value : alt;
          }
          case COLLISION: {
            if (hash2 === node5.hash) {
              var children2 = node5.children;
              for (var i = 0, len = children2.length; i < len; ++i) {
                var child = children2[i];
                if (keyEq(key, child.key))
                  return child.value;
              }
            }
            return alt;
          }
          case INDEX: {
            var frag = hashFragment(shift2, hash2);
            var bit = toBitmap(frag);
            if (node5.mask & bit) {
              node5 = node5.children[fromBitmap(node5.mask, bit)];
              shift2 += SIZE5;
              break;
            }
            return alt;
          }
          case ARRAY: {
            node5 = node5.children[hashFragment(shift2, hash2)];
            if (node5) {
              shift2 += SIZE5;
              break;
            }
            return alt;
          }
          default:
            return alt;
        }
      }
    };
    Map3.prototype.tryGetHash = function(alt, hash2, key) {
      return tryGetHash(alt, hash2, key, this);
    };
    var tryGet = hamt.tryGet = function(alt, key, map) {
      return tryGetHash(alt, map._config.hash(key), key, map);
    };
    Map3.prototype.tryGet = function(alt, key) {
      return tryGet(alt, key, this);
    };
    var getHash = hamt.getHash = function(hash2, key, map) {
      return tryGetHash(void 0, hash2, key, map);
    };
    Map3.prototype.getHash = function(hash2, key) {
      return getHash(hash2, key, this);
    };
    var get2 = hamt.get = function(key, map) {
      return tryGetHash(void 0, map._config.hash(key), key, map);
    };
    Map3.prototype.get = function(key, alt) {
      return tryGet(alt, key, this);
    };
    var hasHash = hamt.has = function(hash2, key, map) {
      return tryGetHash(nothing, hash2, key, map) !== nothing;
    };
    Map3.prototype.hasHash = function(hash2, key) {
      return hasHash(hash2, key, this);
    };
    var has2 = hamt.has = function(key, map) {
      return hasHash(map._config.hash(key), key, map);
    };
    Map3.prototype.has = function(key) {
      return has2(key, this);
    };
    var defKeyCompare = function defKeyCompare2(x, y) {
      return x === y;
    };
    hamt.make = function(config) {
      return new Map3(0, 0, {
        keyEq: config && config.keyEq || defKeyCompare,
        hash: config && config.hash || hash
      }, empty, 0);
    };
    hamt.empty = hamt.make();
    var isEmpty2 = hamt.isEmpty = function(map) {
      return map && !!isEmptyNode(map._root);
    };
    Map3.prototype.isEmpty = function() {
      return isEmpty2(this);
    };
    var modifyHash = hamt.modifyHash = function(f, hash2, key, map) {
      var size = {
        value: map._size
      };
      var newRoot = map._root._modify(map._editable ? map._edit : NaN, map._config.keyEq, 0, f, hash2, key, size);
      return map.setTree(newRoot, size.value);
    };
    Map3.prototype.modifyHash = function(hash2, key, f) {
      return modifyHash(f, hash2, key, this);
    };
    var modify = hamt.modify = function(f, key, map) {
      return modifyHash(f, map._config.hash(key), key, map);
    };
    Map3.prototype.modify = function(key, f) {
      return modify(f, key, this);
    };
    var setHash = hamt.setHash = function(hash2, key, value, map) {
      return modifyHash(constant2(value), hash2, key, map);
    };
    Map3.prototype.setHash = function(hash2, key, value) {
      return setHash(hash2, key, value, this);
    };
    var set2 = hamt.set = function(key, value, map) {
      return setHash(map._config.hash(key), key, value, map);
    };
    Map3.prototype.set = function(key, value) {
      return set2(key, value, this);
    };
    var del = constant2(nothing);
    var removeHash = hamt.removeHash = function(hash2, key, map) {
      return modifyHash(del, hash2, key, map);
    };
    Map3.prototype.removeHash = Map3.prototype.deleteHash = function(hash2, key) {
      return removeHash(hash2, key, this);
    };
    var remove = hamt.remove = function(key, map) {
      return removeHash(map._config.hash(key), key, map);
    };
    Map3.prototype.remove = Map3.prototype.delete = function(key) {
      return remove(key, this);
    };
    var beginMutation = hamt.beginMutation = function(map) {
      return new Map3(map._editable + 1, map._edit + 1, map._config, map._root, map._size);
    };
    Map3.prototype.beginMutation = function() {
      return beginMutation(this);
    };
    var endMutation = hamt.endMutation = function(map) {
      map._editable = map._editable && map._editable - 1;
      return map;
    };
    Map3.prototype.endMutation = function() {
      return endMutation(this);
    };
    var mutate = hamt.mutate = function(f, map) {
      var transient = beginMutation(map);
      f(transient);
      return endMutation(transient);
    };
    Map3.prototype.mutate = function(f) {
      return mutate(f, this);
    };
    var appk = function appk2(k) {
      return k && lazyVisitChildren(k[0], k[1], k[2], k[3], k[4]);
    };
    var lazyVisitChildren = function lazyVisitChildren2(len, children2, i, f, k) {
      while (i < len) {
        var child = children2[i++];
        if (child && !isEmptyNode(child))
          return lazyVisit(child, f, [len, children2, i, f, k]);
      }
      return appk(k);
    };
    var lazyVisit = function lazyVisit2(node5, f, k) {
      switch (node5.type) {
        case LEAF:
          return {
            value: f(node5),
            rest: k
          };
        case COLLISION:
        case ARRAY:
        case INDEX:
          var children2 = node5.children;
          return lazyVisitChildren(children2.length, children2, 0, f, k);
        default:
          return appk(k);
      }
    };
    var DONE = {
      done: true
    };
    function MapIterator(v) {
      this.v = v;
    }
    MapIterator.prototype.next = function() {
      if (!this.v)
        return DONE;
      var v0 = this.v;
      this.v = appk(v0.rest);
      return v0;
    };
    MapIterator.prototype[Symbol.iterator] = function() {
      return this;
    };
    var visit = function visit2(map, f) {
      return new MapIterator(lazyVisit(map._root, f));
    };
    var buildPairs = function buildPairs2(x) {
      return [x.key, x.value];
    };
    var entries = hamt.entries = function(map) {
      return visit(map, buildPairs);
    };
    Map3.prototype.entries = Map3.prototype[Symbol.iterator] = function() {
      return entries(this);
    };
    var buildKeys = function buildKeys2(x) {
      return x.key;
    };
    var keys2 = hamt.keys = function(map) {
      return visit(map, buildKeys);
    };
    Map3.prototype.keys = function() {
      return keys2(this);
    };
    var buildValues = function buildValues2(x) {
      return x.value;
    };
    var values5 = hamt.values = Map3.prototype.values = function(map) {
      return visit(map, buildValues);
    };
    Map3.prototype.values = function() {
      return values5(this);
    };
    var fold = hamt.fold = function(f, z, m2) {
      var root3 = m2._root;
      if (root3.type === LEAF)
        return f(z, root3.value, root3.key);
      var toVisit = [root3.children];
      var children2 = void 0;
      while (children2 = toVisit.pop()) {
        for (var i = 0, len = children2.length; i < len; ) {
          var child = children2[i++];
          if (child && child.type) {
            if (child.type === LEAF)
              z = f(z, child.value, child.key);
            else
              toVisit.push(child.children);
          }
        }
      }
      return z;
    };
    Map3.prototype.fold = function(f, z) {
      return fold(f, z, this);
    };
    var forEach = hamt.forEach = function(f, map) {
      return fold(function(_, value, key) {
        return f(value, key, map);
      }, null, map);
    };
    Map3.prototype.forEach = function(f) {
      return forEach(f, this);
    };
    var count = hamt.count = function(map) {
      return map._size;
    };
    Map3.prototype.count = function() {
      return count(this);
    };
    Object.defineProperty(Map3.prototype, "size", {
      get: Map3.prototype.count
    });
    if (module2.exports) {
      module2.exports = hamt;
    } else {
      (void 0).hamt = hamt;
    }
  });
  var BuiltInMap = class {
    constructor(existing) {
      _defineProperty(this, "_map", void 0);
      this._map = new Map(existing === null || existing === void 0 ? void 0 : existing.entries());
    }
    keys() {
      return this._map.keys();
    }
    entries() {
      return this._map.entries();
    }
    get(k) {
      return this._map.get(k);
    }
    has(k) {
      return this._map.has(k);
    }
    set(k, v) {
      this._map.set(k, v);
      return this;
    }
    delete(k) {
      this._map.delete(k);
      return this;
    }
    clone() {
      return persistentMap(this);
    }
    toMap() {
      return new Map(this._map);
    }
  };
  var HashArrayMappedTrieMap = class {
    constructor(existing) {
      _defineProperty(this, "_hamt", hamt_1.empty.beginMutation());
      if (existing instanceof HashArrayMappedTrieMap) {
        const h = existing._hamt.endMutation();
        existing._hamt = h.beginMutation();
        this._hamt = h.beginMutation();
      } else if (existing) {
        for (const [k, v] of existing.entries()) {
          this._hamt.set(k, v);
        }
      }
    }
    keys() {
      return this._hamt.keys();
    }
    entries() {
      return this._hamt.entries();
    }
    get(k) {
      return this._hamt.get(k);
    }
    has(k) {
      return this._hamt.has(k);
    }
    set(k, v) {
      this._hamt.set(k, v);
      return this;
    }
    delete(k) {
      this._hamt.delete(k);
      return this;
    }
    clone() {
      return persistentMap(this);
    }
    toMap() {
      return new Map(this._hamt);
    }
  };
  function persistentMap(existing) {
    if (Recoil_gkx("recoil_hamt_2020")) {
      return new HashArrayMappedTrieMap(existing);
    } else {
      return new BuiltInMap(existing);
    }
  }
  var Recoil_PersistentMap = {
    persistentMap
  };
  var Recoil_PersistentMap_1 = Recoil_PersistentMap.persistentMap;
  var Recoil_PersistentMap$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    persistentMap: Recoil_PersistentMap_1
  });
  function differenceSets(set2, ...setsWithValuesToRemove) {
    const ret = /* @__PURE__ */ new Set();
    FIRST:
      for (const value of set2) {
        for (const otherSet of setsWithValuesToRemove) {
          if (otherSet.has(value)) {
            continue FIRST;
          }
        }
        ret.add(value);
      }
    return ret;
  }
  var Recoil_differenceSets = differenceSets;
  function mapMap(map, callback) {
    const result = /* @__PURE__ */ new Map();
    map.forEach((value, key) => {
      result.set(key, callback(value, key));
    });
    return result;
  }
  var Recoil_mapMap = mapMap;
  function makeGraph() {
    return {
      nodeDeps: /* @__PURE__ */ new Map(),
      nodeToNodeSubscriptions: /* @__PURE__ */ new Map()
    };
  }
  function cloneGraph(graph2) {
    return {
      nodeDeps: Recoil_mapMap(graph2.nodeDeps, (s) => new Set(s)),
      nodeToNodeSubscriptions: Recoil_mapMap(graph2.nodeToNodeSubscriptions, (s) => new Set(s))
    };
  }
  function mergeDepsIntoGraph(key, newDeps, graph2, olderGraph) {
    const {
      nodeDeps,
      nodeToNodeSubscriptions
    } = graph2;
    const oldDeps = nodeDeps.get(key);
    if (oldDeps && olderGraph && oldDeps !== olderGraph.nodeDeps.get(key)) {
      return;
    }
    nodeDeps.set(key, newDeps);
    const addedDeps = oldDeps == null ? newDeps : Recoil_differenceSets(newDeps, oldDeps);
    for (const dep of addedDeps) {
      if (!nodeToNodeSubscriptions.has(dep)) {
        nodeToNodeSubscriptions.set(dep, /* @__PURE__ */ new Set());
      }
      const existing = Recoil_nullthrows(nodeToNodeSubscriptions.get(dep));
      existing.add(key);
    }
    if (oldDeps) {
      const removedDeps = Recoil_differenceSets(oldDeps, newDeps);
      for (const dep of removedDeps) {
        if (!nodeToNodeSubscriptions.has(dep)) {
          return;
        }
        const existing = Recoil_nullthrows(nodeToNodeSubscriptions.get(dep));
        existing.delete(key);
        if (existing.size === 0) {
          nodeToNodeSubscriptions.delete(dep);
        }
      }
    }
  }
  function saveDepsToStore(key, deps, store, version) {
    var _storeState$nextTree, _storeState$previousT, _storeState$previousT2, _storeState$previousT3;
    const storeState = store.getState();
    if (!(version === storeState.currentTree.version || version === ((_storeState$nextTree = storeState.nextTree) === null || _storeState$nextTree === void 0 ? void 0 : _storeState$nextTree.version) || version === ((_storeState$previousT = storeState.previousTree) === null || _storeState$previousT === void 0 ? void 0 : _storeState$previousT.version))) {
      Recoil_recoverableViolation("Tried to save dependencies to a discarded tree");
    }
    const graph2 = store.getGraph(version);
    mergeDepsIntoGraph(key, deps, graph2);
    if (version === ((_storeState$previousT2 = storeState.previousTree) === null || _storeState$previousT2 === void 0 ? void 0 : _storeState$previousT2.version)) {
      const currentGraph = store.getGraph(storeState.currentTree.version);
      mergeDepsIntoGraph(key, deps, currentGraph, graph2);
    }
    if (version === ((_storeState$previousT3 = storeState.previousTree) === null || _storeState$previousT3 === void 0 ? void 0 : _storeState$previousT3.version) || version === storeState.currentTree.version) {
      var _storeState$nextTree2;
      const nextVersion = (_storeState$nextTree2 = storeState.nextTree) === null || _storeState$nextTree2 === void 0 ? void 0 : _storeState$nextTree2.version;
      if (nextVersion !== void 0) {
        const nextGraph = store.getGraph(nextVersion);
        mergeDepsIntoGraph(key, deps, nextGraph, graph2);
      }
    }
  }
  var Recoil_Graph = {
    cloneGraph,
    graph: makeGraph,
    saveDepsToStore
  };
  var nextTreeStateVersion = 0;
  var getNextTreeStateVersion = () => nextTreeStateVersion++;
  var nextStoreID = 0;
  var getNextStoreID = () => nextStoreID++;
  var nextComponentID = 0;
  var getNextComponentID = () => nextComponentID++;
  var Recoil_Keys = {
    getNextTreeStateVersion,
    getNextStoreID,
    getNextComponentID
  };
  var {
    persistentMap: persistentMap$1
  } = Recoil_PersistentMap$1;
  var {
    graph
  } = Recoil_Graph;
  var {
    getNextTreeStateVersion: getNextTreeStateVersion$1
  } = Recoil_Keys;
  function makeEmptyTreeState() {
    const version = getNextTreeStateVersion$1();
    return {
      version,
      stateID: version,
      transactionMetadata: {},
      dirtyAtoms: /* @__PURE__ */ new Set(),
      atomValues: persistentMap$1(),
      nonvalidatedAtoms: persistentMap$1()
    };
  }
  function makeEmptyStoreState() {
    const currentTree = makeEmptyTreeState();
    return {
      currentTree,
      nextTree: null,
      previousTree: null,
      commitDepth: 0,
      knownAtoms: /* @__PURE__ */ new Set(),
      knownSelectors: /* @__PURE__ */ new Set(),
      transactionSubscriptions: /* @__PURE__ */ new Map(),
      nodeTransactionSubscriptions: /* @__PURE__ */ new Map(),
      nodeToComponentSubscriptions: /* @__PURE__ */ new Map(),
      queuedComponentCallbacks_DEPRECATED: [],
      suspendedComponentResolvers: /* @__PURE__ */ new Set(),
      graphsByVersion: (/* @__PURE__ */ new Map()).set(currentTree.version, graph()),
      retention: {
        referenceCounts: /* @__PURE__ */ new Map(),
        nodesRetainedByZone: /* @__PURE__ */ new Map(),
        retainablesToCheckForRelease: /* @__PURE__ */ new Set()
      },
      nodeCleanupFunctions: /* @__PURE__ */ new Map()
    };
  }
  var Recoil_State = {
    makeEmptyTreeState,
    makeEmptyStoreState,
    getNextTreeStateVersion: getNextTreeStateVersion$1
  };
  var RetentionZone = class {
  };
  function retentionZone() {
    return new RetentionZone();
  }
  var Recoil_RetentionZone = {
    RetentionZone,
    retentionZone
  };
  function setByAddingToSet(set2, v) {
    const next = new Set(set2);
    next.add(v);
    return next;
  }
  function setByDeletingFromSet(set2, v) {
    const next = new Set(set2);
    next.delete(v);
    return next;
  }
  function mapBySettingInMap(map, k, v) {
    const next = new Map(map);
    next.set(k, v);
    return next;
  }
  function mapByUpdatingInMap(map, k, updater) {
    const next = new Map(map);
    next.set(k, updater(next.get(k)));
    return next;
  }
  function mapByDeletingFromMap(map, k) {
    const next = new Map(map);
    next.delete(k);
    return next;
  }
  function mapByDeletingMultipleFromMap(map, ks) {
    const next = new Map(map);
    ks.forEach((k) => next.delete(k));
    return next;
  }
  var Recoil_CopyOnWrite = {
    setByAddingToSet,
    setByDeletingFromSet,
    mapBySettingInMap,
    mapByUpdatingInMap,
    mapByDeletingFromMap,
    mapByDeletingMultipleFromMap
  };
  function* filterIterable(iterable, predicate) {
    let index2 = 0;
    for (const value of iterable) {
      if (predicate(value, index2++)) {
        yield value;
      }
    }
  }
  var Recoil_filterIterable = filterIterable;
  function lazyProxy(base, factories) {
    const proxy = new Proxy(base, {
      get: (target, prop) => {
        if (!(prop in target) && prop in factories) {
          target[prop] = factories[prop]();
        }
        return target[prop];
      },
      ownKeys: (target) => {
        return Object.keys(target);
      }
    });
    return proxy;
  }
  var Recoil_lazyProxy = lazyProxy;
  var {
    getNode: getNode$1,
    getNodeMaybe: getNodeMaybe$1,
    recoilValuesForKeys: recoilValuesForKeys$1
  } = Recoil_Node;
  var {
    RetentionZone: RetentionZone$1
  } = Recoil_RetentionZone;
  var {
    setByAddingToSet: setByAddingToSet$1
  } = Recoil_CopyOnWrite;
  var emptySet = Object.freeze(/* @__PURE__ */ new Set());
  var ReadOnlyRecoilValueError = class extends Error {
  };
  function initializeRetentionForNode(store, nodeKey, retainedBy) {
    if (!Recoil_gkx("recoil_memory_managament_2020")) {
      return () => void 0;
    }
    const {
      nodesRetainedByZone: nodesRetainedByZone2
    } = store.getState().retention;
    function addToZone(zone) {
      let set2 = nodesRetainedByZone2.get(zone);
      if (!set2) {
        nodesRetainedByZone2.set(zone, set2 = /* @__PURE__ */ new Set());
      }
      set2.add(nodeKey);
    }
    if (retainedBy instanceof RetentionZone$1) {
      addToZone(retainedBy);
    } else if (Array.isArray(retainedBy)) {
      for (const zone of retainedBy) {
        addToZone(zone);
      }
    }
    return () => {
      if (!Recoil_gkx("recoil_memory_managament_2020")) {
        return;
      }
      const {
        retention
      } = store.getState();
      function deleteFromZone(zone) {
        const set2 = retention.nodesRetainedByZone.get(zone);
        set2 === null || set2 === void 0 ? void 0 : set2.delete(nodeKey);
        if (set2 && set2.size === 0) {
          retention.nodesRetainedByZone.delete(zone);
        }
      }
      if (retainedBy instanceof RetentionZone$1) {
        deleteFromZone(retainedBy);
      } else if (Array.isArray(retainedBy)) {
        for (const zone of retainedBy) {
          deleteFromZone(zone);
        }
      }
    };
  }
  function initializeNodeIfNewToStore(store, treeState, key, trigger) {
    const storeState = store.getState();
    if (storeState.nodeCleanupFunctions.has(key)) {
      return;
    }
    const node5 = getNode$1(key);
    const retentionCleanup = initializeRetentionForNode(store, key, node5.retainedBy);
    const nodeCleanup = node5.init(store, treeState, trigger);
    storeState.nodeCleanupFunctions.set(key, () => {
      nodeCleanup();
      retentionCleanup();
    });
  }
  function initializeNode(store, key, trigger) {
    initializeNodeIfNewToStore(store, store.getState().currentTree, key, trigger);
  }
  function cleanUpNode(store, key) {
    var _state$nodeCleanupFun;
    const state = store.getState();
    (_state$nodeCleanupFun = state.nodeCleanupFunctions.get(key)) === null || _state$nodeCleanupFun === void 0 ? void 0 : _state$nodeCleanupFun();
    state.nodeCleanupFunctions.delete(key);
  }
  function getNodeLoadable(store, state, key) {
    initializeNodeIfNewToStore(store, state, key, "get");
    return getNode$1(key).get(store, state);
  }
  function peekNodeLoadable(store, state, key) {
    return getNode$1(key).peek(store, state);
  }
  function setUnvalidatedAtomValue_DEPRECATED(state, key, newValue) {
    var _node$invalidate;
    const node5 = getNodeMaybe$1(key);
    node5 === null || node5 === void 0 ? void 0 : (_node$invalidate = node5.invalidate) === null || _node$invalidate === void 0 ? void 0 : _node$invalidate.call(node5, state);
    return {
      ...state,
      atomValues: state.atomValues.clone().delete(key),
      nonvalidatedAtoms: state.nonvalidatedAtoms.clone().set(key, newValue),
      dirtyAtoms: setByAddingToSet$1(state.dirtyAtoms, key)
    };
  }
  function setNodeValue(store, state, key, newValue) {
    const node5 = getNode$1(key);
    if (node5.set == null) {
      throw new ReadOnlyRecoilValueError(`Attempt to set read-only RecoilValue: ${key}`);
    }
    const set2 = node5.set;
    initializeNodeIfNewToStore(store, state, key, "set");
    return set2(store, state, newValue);
  }
  function peekNodeInfo(store, state, key) {
    const storeState = store.getState();
    const graph2 = store.getGraph(state.version);
    const type = getNode$1(key).nodeType;
    return Recoil_lazyProxy({
      type
    }, {
      loadable: () => peekNodeLoadable(store, state, key),
      isActive: () => storeState.knownAtoms.has(key) || storeState.knownSelectors.has(key),
      isSet: () => type === "selector" ? false : state.atomValues.has(key),
      isModified: () => state.dirtyAtoms.has(key),
      deps: () => {
        var _graph$nodeDeps$get;
        return recoilValuesForKeys$1((_graph$nodeDeps$get = graph2.nodeDeps.get(key)) !== null && _graph$nodeDeps$get !== void 0 ? _graph$nodeDeps$get : []);
      },
      subscribers: () => {
        var _storeState$nodeToCom, _storeState$nodeToCom2;
        return {
          nodes: recoilValuesForKeys$1(Recoil_filterIterable(getDownstreamNodes(store, state, /* @__PURE__ */ new Set([key])), (nodeKey) => nodeKey !== key)),
          components: Recoil_mapIterable((_storeState$nodeToCom = (_storeState$nodeToCom2 = storeState.nodeToComponentSubscriptions.get(key)) === null || _storeState$nodeToCom2 === void 0 ? void 0 : _storeState$nodeToCom2.values()) !== null && _storeState$nodeToCom !== void 0 ? _storeState$nodeToCom : [], ([name]) => ({
            name
          }))
        };
      }
    });
  }
  function getDownstreamNodes(store, state, keys2) {
    const visitedNodes = /* @__PURE__ */ new Set();
    const visitingNodes = Array.from(keys2);
    const graph2 = store.getGraph(state.version);
    for (let key = visitingNodes.pop(); key; key = visitingNodes.pop()) {
      var _graph$nodeToNodeSubs;
      visitedNodes.add(key);
      const subscribedNodes = (_graph$nodeToNodeSubs = graph2.nodeToNodeSubscriptions.get(key)) !== null && _graph$nodeToNodeSubs !== void 0 ? _graph$nodeToNodeSubs : emptySet;
      for (const downstreamNode of subscribedNodes) {
        if (!visitedNodes.has(downstreamNode)) {
          visitingNodes.push(downstreamNode);
        }
      }
    }
    return visitedNodes;
  }
  var Recoil_FunctionalCore = {
    getNodeLoadable,
    peekNodeLoadable,
    setNodeValue,
    initializeNode,
    cleanUpNode,
    setUnvalidatedAtomValue_DEPRECATED,
    peekNodeInfo,
    getDownstreamNodes
  };
  var _invalidateMemoizedSnapshot = null;
  function setInvalidateMemoizedSnapshot(invalidate) {
    _invalidateMemoizedSnapshot = invalidate;
  }
  function invalidateMemoizedSnapshot() {
    var _invalidateMemoizedSn;
    (_invalidateMemoizedSn = _invalidateMemoizedSnapshot) === null || _invalidateMemoizedSn === void 0 ? void 0 : _invalidateMemoizedSn();
  }
  var Recoil_SnapshotCache = {
    setInvalidateMemoizedSnapshot,
    invalidateMemoizedSnapshot
  };
  var {
    getDownstreamNodes: getDownstreamNodes$1,
    getNodeLoadable: getNodeLoadable$1,
    setNodeValue: setNodeValue$1
  } = Recoil_FunctionalCore;
  var {
    getNextComponentID: getNextComponentID$1
  } = Recoil_Keys;
  var {
    getNode: getNode$2,
    getNodeMaybe: getNodeMaybe$2
  } = Recoil_Node;
  var {
    DefaultValue: DefaultValue$1
  } = Recoil_Node;
  var {
    reactMode: reactMode$1
  } = Recoil_ReactMode;
  var {
    AbstractRecoilValue: AbstractRecoilValue$1,
    RecoilState: RecoilState$1,
    RecoilValueReadOnly: RecoilValueReadOnly$1,
    isRecoilValue: isRecoilValue$1
  } = Recoil_RecoilValue$1;
  var {
    invalidateMemoizedSnapshot: invalidateMemoizedSnapshot$1
  } = Recoil_SnapshotCache;
  function getRecoilValueAsLoadable(store, {
    key
  }, treeState = store.getState().currentTree) {
    var _storeState$nextTree, _storeState$previousT;
    const storeState = store.getState();
    if (!(treeState.version === storeState.currentTree.version || treeState.version === ((_storeState$nextTree = storeState.nextTree) === null || _storeState$nextTree === void 0 ? void 0 : _storeState$nextTree.version) || treeState.version === ((_storeState$previousT = storeState.previousTree) === null || _storeState$previousT === void 0 ? void 0 : _storeState$previousT.version))) {
      Recoil_recoverableViolation("Tried to read from a discarded tree");
    }
    const loadable = getNodeLoadable$1(store, treeState, key);
    if (loadable.state === "loading") {
      loadable.contents.catch(() => {
        return;
      });
    }
    return loadable;
  }
  function applyAtomValueWrites(atomValues, writes) {
    const result = atomValues.clone();
    writes.forEach((v, k) => {
      if (v.state === "hasValue" && v.contents instanceof DefaultValue$1) {
        result.delete(k);
      } else {
        result.set(k, v);
      }
    });
    return result;
  }
  function valueFromValueOrUpdater(store, state, {
    key
  }, valueOrUpdater) {
    if (typeof valueOrUpdater === "function") {
      const current = getNodeLoadable$1(store, state, key);
      if (current.state === "loading") {
        const msg = `Tried to set atom or selector "${key}" using an updater function while the current state is pending, this is not currently supported.`;
        Recoil_recoverableViolation(msg);
        throw Recoil_err(msg);
      } else if (current.state === "hasError") {
        throw current.contents;
      }
      return valueOrUpdater(current.contents);
    } else {
      return valueOrUpdater;
    }
  }
  function applyAction(store, state, action) {
    if (action.type === "set") {
      const {
        recoilValue,
        valueOrUpdater
      } = action;
      const newValue = valueFromValueOrUpdater(store, state, recoilValue, valueOrUpdater);
      const writes = setNodeValue$1(store, state, recoilValue.key, newValue);
      for (const [key, loadable] of writes.entries()) {
        writeLoadableToTreeState(state, key, loadable);
      }
    } else if (action.type === "setLoadable") {
      const {
        recoilValue: {
          key
        },
        loadable
      } = action;
      writeLoadableToTreeState(state, key, loadable);
    } else if (action.type === "markModified") {
      const {
        recoilValue: {
          key
        }
      } = action;
      state.dirtyAtoms.add(key);
    } else if (action.type === "setUnvalidated") {
      var _node$invalidate;
      const {
        recoilValue: {
          key
        },
        unvalidatedValue
      } = action;
      const node5 = getNodeMaybe$2(key);
      node5 === null || node5 === void 0 ? void 0 : (_node$invalidate = node5.invalidate) === null || _node$invalidate === void 0 ? void 0 : _node$invalidate.call(node5, state);
      state.atomValues.delete(key);
      state.nonvalidatedAtoms.set(key, unvalidatedValue);
      state.dirtyAtoms.add(key);
    } else {
      Recoil_recoverableViolation(`Unknown action ${action.type}`);
    }
  }
  function writeLoadableToTreeState(state, key, loadable) {
    if (loadable.state === "hasValue" && loadable.contents instanceof DefaultValue$1) {
      state.atomValues.delete(key);
    } else {
      state.atomValues.set(key, loadable);
    }
    state.dirtyAtoms.add(key);
    state.nonvalidatedAtoms.delete(key);
  }
  function applyActionsToStore(store, actions) {
    store.replaceState((state) => {
      const newState = copyTreeState(state);
      for (const action of actions) {
        applyAction(store, newState, action);
      }
      invalidateDownstreams(store, newState);
      invalidateMemoizedSnapshot$1();
      return newState;
    });
  }
  function queueOrPerformStateUpdate(store, action) {
    if (batchStack.length) {
      const actionsByStore = batchStack[batchStack.length - 1];
      let actions = actionsByStore.get(store);
      if (!actions) {
        actionsByStore.set(store, actions = []);
      }
      actions.push(action);
    } else {
      applyActionsToStore(store, [action]);
    }
  }
  var batchStack = [];
  function batchStart() {
    const actionsByStore = /* @__PURE__ */ new Map();
    batchStack.push(actionsByStore);
    return () => {
      for (const [store, actions] of actionsByStore) {
        applyActionsToStore(store, actions);
      }
      const popped = batchStack.pop();
      if (popped !== actionsByStore) {
        Recoil_recoverableViolation("Incorrect order of batch popping");
      }
    };
  }
  function copyTreeState(state) {
    return {
      ...state,
      atomValues: state.atomValues.clone(),
      nonvalidatedAtoms: state.nonvalidatedAtoms.clone(),
      dirtyAtoms: new Set(state.dirtyAtoms)
    };
  }
  function invalidateDownstreams(store, state) {
    const downstreams = getDownstreamNodes$1(store, state, state.dirtyAtoms);
    for (const key of downstreams) {
      var _getNodeMaybe, _getNodeMaybe$invalid;
      (_getNodeMaybe = getNodeMaybe$2(key)) === null || _getNodeMaybe === void 0 ? void 0 : (_getNodeMaybe$invalid = _getNodeMaybe.invalidate) === null || _getNodeMaybe$invalid === void 0 ? void 0 : _getNodeMaybe$invalid.call(_getNodeMaybe, state);
    }
  }
  function setRecoilValue(store, recoilValue, valueOrUpdater) {
    queueOrPerformStateUpdate(store, {
      type: "set",
      recoilValue,
      valueOrUpdater
    });
  }
  function setRecoilValueLoadable(store, recoilValue, loadable) {
    if (loadable instanceof DefaultValue$1) {
      return setRecoilValue(store, recoilValue, loadable);
    }
    queueOrPerformStateUpdate(store, {
      type: "setLoadable",
      recoilValue,
      loadable
    });
  }
  function markRecoilValueModified(store, recoilValue) {
    queueOrPerformStateUpdate(store, {
      type: "markModified",
      recoilValue
    });
  }
  function setUnvalidatedRecoilValue(store, recoilValue, unvalidatedValue) {
    queueOrPerformStateUpdate(store, {
      type: "setUnvalidated",
      recoilValue,
      unvalidatedValue
    });
  }
  function subscribeToRecoilValue(store, {
    key
  }, callback, componentDebugName = null) {
    const subID = getNextComponentID$1();
    const storeState = store.getState();
    if (!storeState.nodeToComponentSubscriptions.has(key)) {
      storeState.nodeToComponentSubscriptions.set(key, /* @__PURE__ */ new Map());
    }
    Recoil_nullthrows(storeState.nodeToComponentSubscriptions.get(key)).set(subID, [componentDebugName !== null && componentDebugName !== void 0 ? componentDebugName : "<not captured>", callback]);
    const mode = reactMode$1();
    if (mode.early && (mode.mode === "LEGACY" || mode.mode === "MUTABLE_SOURCE")) {
      const nextTree = store.getState().nextTree;
      if (nextTree && nextTree.dirtyAtoms.has(key)) {
        callback(nextTree);
      }
    }
    return {
      release: () => {
        const releaseStoreState = store.getState();
        const subs = releaseStoreState.nodeToComponentSubscriptions.get(key);
        if (subs === void 0 || !subs.has(subID)) {
          Recoil_recoverableViolation(`Subscription missing at release time for atom ${key}. This is a bug in Recoil.`);
          return;
        }
        subs.delete(subID);
        if (subs.size === 0) {
          releaseStoreState.nodeToComponentSubscriptions.delete(key);
        }
      }
    };
  }
  function refreshRecoilValue(store, recoilValue) {
    var _node$clearCache;
    const {
      currentTree
    } = store.getState();
    const node5 = getNode$2(recoilValue.key);
    (_node$clearCache = node5.clearCache) === null || _node$clearCache === void 0 ? void 0 : _node$clearCache.call(node5, store, currentTree);
  }
  var Recoil_RecoilValueInterface = {
    RecoilValueReadOnly: RecoilValueReadOnly$1,
    AbstractRecoilValue: AbstractRecoilValue$1,
    RecoilState: RecoilState$1,
    getRecoilValueAsLoadable,
    setRecoilValue,
    setRecoilValueLoadable,
    markRecoilValueModified,
    setUnvalidatedRecoilValue,
    subscribeToRecoilValue,
    isRecoilValue: isRecoilValue$1,
    applyAtomValueWrites,
    batchStart,
    writeLoadableToTreeState,
    invalidateDownstreams,
    copyTreeState,
    refreshRecoilValue
  };
  function someSet(set2, callback, context3) {
    const iterator = set2.entries();
    let current = iterator.next();
    while (!current.done) {
      const entry = current.value;
      if (callback.call(context3, entry[1], entry[0], set2)) {
        return true;
      }
      current = iterator.next();
    }
    return false;
  }
  var Recoil_someSet = someSet;
  var {
    cleanUpNode: cleanUpNode$1
  } = Recoil_FunctionalCore;
  var {
    deleteNodeConfigIfPossible: deleteNodeConfigIfPossible$1,
    getNode: getNode$3
  } = Recoil_Node;
  var {
    RetentionZone: RetentionZone$2
  } = Recoil_RetentionZone;
  var SUSPENSE_TIMEOUT_MS = 12e4;
  var emptySet$1 = /* @__PURE__ */ new Set();
  function releaseRetainablesNowOnCurrentTree(store, retainables) {
    const storeState = store.getState();
    const treeState = storeState.currentTree;
    if (storeState.nextTree) {
      Recoil_recoverableViolation("releaseNodesNowOnCurrentTree should only be called at the end of a batch");
      return;
    }
    const nodes2 = /* @__PURE__ */ new Set();
    for (const r of retainables) {
      if (r instanceof RetentionZone$2) {
        for (const n of nodesRetainedByZone(storeState, r)) {
          nodes2.add(n);
        }
      } else {
        nodes2.add(r);
      }
    }
    const releasableNodes = findReleasableNodes(store, nodes2);
    for (const node5 of releasableNodes) {
      releaseNode(store, treeState, node5);
    }
  }
  function findReleasableNodes(store, searchFromNodes) {
    const storeState = store.getState();
    const treeState = storeState.currentTree;
    const graph2 = store.getGraph(treeState.version);
    const releasableNodes = /* @__PURE__ */ new Set();
    const nonReleasableNodes = /* @__PURE__ */ new Set();
    findReleasableNodesInner(searchFromNodes);
    return releasableNodes;
    function findReleasableNodesInner(searchFromNodes2) {
      const releasableNodesFoundThisIteration = /* @__PURE__ */ new Set();
      const downstreams = getDownstreamNodesInTopologicalOrder(
        store,
        treeState,
        searchFromNodes2,
        releasableNodes,
        nonReleasableNodes
      );
      for (const node5 of downstreams) {
        var _storeState$retention;
        if (getNode$3(node5).retainedBy === "recoilRoot") {
          nonReleasableNodes.add(node5);
          continue;
        }
        if (((_storeState$retention = storeState.retention.referenceCounts.get(node5)) !== null && _storeState$retention !== void 0 ? _storeState$retention : 0) > 0) {
          nonReleasableNodes.add(node5);
          continue;
        }
        if (zonesThatCouldRetainNode(node5).some((z) => storeState.retention.referenceCounts.get(z))) {
          nonReleasableNodes.add(node5);
          continue;
        }
        const nodeChildren = graph2.nodeToNodeSubscriptions.get(node5);
        if (nodeChildren && Recoil_someSet(nodeChildren, (child) => nonReleasableNodes.has(child))) {
          nonReleasableNodes.add(node5);
          continue;
        }
        releasableNodes.add(node5);
        releasableNodesFoundThisIteration.add(node5);
      }
      const parents = /* @__PURE__ */ new Set();
      for (const node5 of releasableNodesFoundThisIteration) {
        for (const parent2 of (_graph$nodeDeps$get = graph2.nodeDeps.get(node5)) !== null && _graph$nodeDeps$get !== void 0 ? _graph$nodeDeps$get : emptySet$1) {
          var _graph$nodeDeps$get;
          if (!releasableNodes.has(parent2)) {
            parents.add(parent2);
          }
        }
      }
      if (parents.size) {
        findReleasableNodesInner(parents);
      }
    }
  }
  function getDownstreamNodesInTopologicalOrder(store, treeState, nodes2, doNotDescendInto1, doNotDescendInto2) {
    const graph2 = store.getGraph(treeState.version);
    const answer = [];
    const visited = /* @__PURE__ */ new Set();
    while (nodes2.size > 0) {
      visit(Recoil_nullthrows(nodes2.values().next().value));
    }
    return answer;
    function visit(node5) {
      if (doNotDescendInto1.has(node5) || doNotDescendInto2.has(node5)) {
        nodes2.delete(node5);
        return;
      }
      if (visited.has(node5)) {
        return;
      }
      const children2 = graph2.nodeToNodeSubscriptions.get(node5);
      if (children2) {
        for (const child of children2) {
          visit(child);
        }
      }
      visited.add(node5);
      nodes2.delete(node5);
      answer.push(node5);
    }
  }
  function releaseNode(store, treeState, node5) {
    if (!Recoil_gkx("recoil_memory_managament_2020")) {
      return;
    }
    cleanUpNode$1(store, node5);
    const storeState = store.getState();
    storeState.knownAtoms.delete(node5);
    storeState.knownSelectors.delete(node5);
    storeState.nodeTransactionSubscriptions.delete(node5);
    storeState.retention.referenceCounts.delete(node5);
    const zones = zonesThatCouldRetainNode(node5);
    for (const zone of zones) {
      var _storeState$retention2;
      (_storeState$retention2 = storeState.retention.nodesRetainedByZone.get(zone)) === null || _storeState$retention2 === void 0 ? void 0 : _storeState$retention2.delete(node5);
    }
    treeState.atomValues.delete(node5);
    treeState.dirtyAtoms.delete(node5);
    treeState.nonvalidatedAtoms.delete(node5);
    const graph2 = storeState.graphsByVersion.get(treeState.version);
    if (graph2) {
      const deps = graph2.nodeDeps.get(node5);
      if (deps !== void 0) {
        graph2.nodeDeps.delete(node5);
        for (const dep of deps) {
          var _graph$nodeToNodeSubs;
          (_graph$nodeToNodeSubs = graph2.nodeToNodeSubscriptions.get(dep)) === null || _graph$nodeToNodeSubs === void 0 ? void 0 : _graph$nodeToNodeSubs.delete(node5);
        }
      }
      graph2.nodeToNodeSubscriptions.delete(node5);
    }
    deleteNodeConfigIfPossible$1(node5);
  }
  function nodesRetainedByZone(storeState, zone) {
    var _storeState$retention3;
    return (_storeState$retention3 = storeState.retention.nodesRetainedByZone.get(zone)) !== null && _storeState$retention3 !== void 0 ? _storeState$retention3 : emptySet$1;
  }
  function zonesThatCouldRetainNode(node5) {
    const retainedBy = getNode$3(node5).retainedBy;
    if (retainedBy === void 0 || retainedBy === "components" || retainedBy === "recoilRoot") {
      return [];
    } else if (retainedBy instanceof RetentionZone$2) {
      return [retainedBy];
    } else {
      return retainedBy;
    }
  }
  function scheduleOrPerformPossibleReleaseOfRetainable(store, retainable) {
    const state = store.getState();
    if (state.nextTree) {
      state.retention.retainablesToCheckForRelease.add(retainable);
    } else {
      releaseRetainablesNowOnCurrentTree(store, /* @__PURE__ */ new Set([retainable]));
    }
  }
  function updateRetainCount(store, retainable, delta) {
    var _map$get;
    if (!Recoil_gkx("recoil_memory_managament_2020")) {
      return;
    }
    const map = store.getState().retention.referenceCounts;
    const newCount = ((_map$get = map.get(retainable)) !== null && _map$get !== void 0 ? _map$get : 0) + delta;
    if (newCount === 0) {
      updateRetainCountToZero(store, retainable);
    } else {
      map.set(retainable, newCount);
    }
  }
  function updateRetainCountToZero(store, retainable) {
    if (!Recoil_gkx("recoil_memory_managament_2020")) {
      return;
    }
    const map = store.getState().retention.referenceCounts;
    map.delete(retainable);
    scheduleOrPerformPossibleReleaseOfRetainable(store, retainable);
  }
  function releaseScheduledRetainablesNow(store) {
    if (!Recoil_gkx("recoil_memory_managament_2020")) {
      return;
    }
    const state = store.getState();
    releaseRetainablesNowOnCurrentTree(store, state.retention.retainablesToCheckForRelease);
    state.retention.retainablesToCheckForRelease.clear();
  }
  function retainedByOptionWithDefault(r) {
    return r === void 0 ? "recoilRoot" : r;
  }
  var Recoil_Retention = {
    SUSPENSE_TIMEOUT_MS,
    updateRetainCount,
    updateRetainCountToZero,
    releaseScheduledRetainablesNow,
    retainedByOptionWithDefault
  };
  var {
    unstable_batchedUpdates
  } = import_react_dom.default;
  var ReactBatchedUpdates = {
    unstable_batchedUpdates
  };
  var {
    unstable_batchedUpdates: unstable_batchedUpdates$1
  } = ReactBatchedUpdates;
  var Recoil_ReactBatchedUpdates = {
    unstable_batchedUpdates: unstable_batchedUpdates$1
  };
  var {
    batchStart: batchStart$1
  } = Recoil_RecoilValueInterface;
  var {
    unstable_batchedUpdates: unstable_batchedUpdates$2
  } = Recoil_ReactBatchedUpdates;
  var batcher = unstable_batchedUpdates$2;
  var setBatcher = (newBatcher) => {
    batcher = newBatcher;
  };
  var getBatcher = () => batcher;
  var batchUpdates = (callback) => {
    batcher(() => {
      let batchEnd = () => void 0;
      try {
        batchEnd = batchStart$1();
        callback();
      } finally {
        batchEnd();
      }
    });
  };
  var Recoil_Batching = {
    getBatcher,
    setBatcher,
    batchUpdates
  };
  function* concatIterables(iters) {
    for (const iter of iters) {
      for (const val of iter) {
        yield val;
      }
    }
  }
  var Recoil_concatIterables = concatIterables;
  var isSSR = typeof Window === "undefined" || typeof window === "undefined";
  var isWindow = (value) => !isSSR && (value === window || value instanceof Window);
  var isReactNative = typeof navigator !== "undefined" && navigator.product === "ReactNative";
  var Recoil_Environment = {
    isSSR,
    isReactNative,
    isWindow
  };
  function memoizeWithArgsHash(fn, hashFunction) {
    let cache2;
    const memoizedFn = (...args) => {
      if (!cache2) {
        cache2 = {};
      }
      const key = hashFunction(...args);
      if (!Object.hasOwnProperty.call(cache2, key)) {
        cache2[key] = fn(...args);
      }
      return cache2[key];
    };
    return memoizedFn;
  }
  function memoizeOneWithArgsHash(fn, hashFunction) {
    let lastKey;
    let lastResult;
    const memoizedFn = (...args) => {
      const key = hashFunction(...args);
      if (lastKey === key) {
        return lastResult;
      }
      lastKey = key;
      lastResult = fn(...args);
      return lastResult;
    };
    return memoizedFn;
  }
  function memoizeOneWithArgsHashAndInvalidation(fn, hashFunction) {
    let lastKey;
    let lastResult;
    const memoizedFn = (...args) => {
      const key = hashFunction(...args);
      if (lastKey === key) {
        return lastResult;
      }
      lastKey = key;
      lastResult = fn(...args);
      return lastResult;
    };
    const invalidate = () => {
      lastKey = null;
    };
    return [memoizedFn, invalidate];
  }
  var Recoil_Memoize = {
    memoizeWithArgsHash,
    memoizeOneWithArgsHash,
    memoizeOneWithArgsHashAndInvalidation
  };
  var {
    batchUpdates: batchUpdates$1
  } = Recoil_Batching;
  var {
    initializeNode: initializeNode$1,
    peekNodeInfo: peekNodeInfo$1
  } = Recoil_FunctionalCore;
  var {
    graph: graph$1
  } = Recoil_Graph;
  var {
    getNextStoreID: getNextStoreID$1
  } = Recoil_Keys;
  var {
    DEFAULT_VALUE: DEFAULT_VALUE$1,
    recoilValues: recoilValues$1,
    recoilValuesForKeys: recoilValuesForKeys$2
  } = Recoil_Node;
  var {
    AbstractRecoilValue: AbstractRecoilValue$2,
    getRecoilValueAsLoadable: getRecoilValueAsLoadable$1,
    setRecoilValue: setRecoilValue$1,
    setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$1
  } = Recoil_RecoilValueInterface;
  var {
    updateRetainCount: updateRetainCount$1
  } = Recoil_Retention;
  var {
    setInvalidateMemoizedSnapshot: setInvalidateMemoizedSnapshot$1
  } = Recoil_SnapshotCache;
  var {
    getNextTreeStateVersion: getNextTreeStateVersion$2,
    makeEmptyStoreState: makeEmptyStoreState$1
  } = Recoil_State;
  var {
    isSSR: isSSR$1
  } = Recoil_Environment;
  var {
    memoizeOneWithArgsHashAndInvalidation: memoizeOneWithArgsHashAndInvalidation$1
  } = Recoil_Memoize;
  var retainWarning = `
Recoil Snapshots only last for the duration of the callback they are provided to. To keep a Snapshot longer, do this:

  const release = snapshot.retain();
  try {
    await doSomethingWithSnapshot(snapshot);
  } finally {
    release();
  }

This is currently a DEV-only warning but will become a thrown exception in the next release of Recoil.
`;
  var Snapshot = class {
    constructor(storeState, parentStoreID) {
      _defineProperty(this, "_store", void 0);
      _defineProperty(this, "_refCount", 1);
      _defineProperty(this, "getLoadable", (recoilValue) => {
        this.checkRefCount_INTERNAL();
        return getRecoilValueAsLoadable$1(this._store, recoilValue);
      });
      _defineProperty(this, "getPromise", (recoilValue) => {
        this.checkRefCount_INTERNAL();
        return this.getLoadable(recoilValue).toPromise();
      });
      _defineProperty(this, "getNodes_UNSTABLE", (opt) => {
        this.checkRefCount_INTERNAL();
        if ((opt === null || opt === void 0 ? void 0 : opt.isModified) === true) {
          if ((opt === null || opt === void 0 ? void 0 : opt.isInitialized) === false) {
            return [];
          }
          const state = this._store.getState().currentTree;
          return recoilValuesForKeys$2(state.dirtyAtoms);
        }
        const knownAtoms = this._store.getState().knownAtoms;
        const knownSelectors = this._store.getState().knownSelectors;
        return (opt === null || opt === void 0 ? void 0 : opt.isInitialized) == null ? recoilValues$1.values() : opt.isInitialized === true ? recoilValuesForKeys$2(Recoil_concatIterables([knownAtoms, knownSelectors])) : Recoil_filterIterable(recoilValues$1.values(), ({
          key
        }) => !knownAtoms.has(key) && !knownSelectors.has(key));
      });
      _defineProperty(this, "getInfo_UNSTABLE", ({
        key
      }) => {
        this.checkRefCount_INTERNAL();
        return peekNodeInfo$1(this._store, this._store.getState().currentTree, key);
      });
      _defineProperty(this, "map", (mapper) => {
        this.checkRefCount_INTERNAL();
        const mutableSnapshot = new MutableSnapshot(this, batchUpdates$1);
        mapper(mutableSnapshot);
        return mutableSnapshot;
      });
      _defineProperty(this, "asyncMap", async (mapper) => {
        this.checkRefCount_INTERNAL();
        const mutableSnapshot = new MutableSnapshot(this, batchUpdates$1);
        mutableSnapshot.retain();
        await mapper(mutableSnapshot);
        mutableSnapshot.autoRelease_INTERNAL();
        return mutableSnapshot;
      });
      this._store = {
        storeID: getNextStoreID$1(),
        parentStoreID,
        getState: () => storeState,
        replaceState: (replacer) => {
          storeState.currentTree = replacer(storeState.currentTree);
        },
        getGraph: (version) => {
          const graphs = storeState.graphsByVersion;
          if (graphs.has(version)) {
            return Recoil_nullthrows(graphs.get(version));
          }
          const newGraph = graph$1();
          graphs.set(version, newGraph);
          return newGraph;
        },
        subscribeToTransactions: () => ({
          release: () => {
          }
        }),
        addTransactionMetadata: () => {
          throw Recoil_err("Cannot subscribe to Snapshots");
        }
      };
      for (const nodeKey of this._store.getState().knownAtoms) {
        initializeNode$1(this._store, nodeKey, "get");
        updateRetainCount$1(this._store, nodeKey, 1);
      }
      this.autoRelease_INTERNAL();
    }
    retain() {
      if (this._refCount <= 0) {
        if (true) {
          throw Recoil_err("Snapshot has already been released.");
        } else {
          Recoil_recoverableViolation("Attempt to retain() Snapshot that was already released.");
        }
      }
      this._refCount++;
      let released = false;
      return () => {
        if (!released) {
          released = true;
          this._release();
        }
      };
    }
    autoRelease_INTERNAL() {
      if (!isSSR$1) {
        window.setTimeout(() => this._release(), 10);
      }
    }
    _release() {
      this._refCount--;
      if (this._refCount === 0) {
        this._store.getState().nodeCleanupFunctions.forEach((cleanup) => cleanup());
        this._store.getState().nodeCleanupFunctions.clear();
        if (!Recoil_gkx("recoil_memory_managament_2020")) {
          return;
        }
      } else if (this._refCount < 0) {
        if (true) {
          Recoil_recoverableViolation("Snapshot released an extra time.");
        }
      }
    }
    isRetained() {
      return this._refCount > 0;
    }
    checkRefCount_INTERNAL() {
      if (Recoil_gkx("recoil_memory_managament_2020") && this._refCount <= 0) {
        if (true) {
          Recoil_recoverableViolation(retainWarning);
        }
      }
    }
    getStore_INTERNAL() {
      this.checkRefCount_INTERNAL();
      return this._store;
    }
    getID() {
      this.checkRefCount_INTERNAL();
      return this._store.getState().currentTree.stateID;
    }
    getStoreID() {
      this.checkRefCount_INTERNAL();
      return this._store.storeID;
    }
  };
  function cloneStoreState(store, treeState, bumpVersion = false) {
    const storeState = store.getState();
    const version = bumpVersion ? getNextTreeStateVersion$2() : treeState.version;
    return {
      currentTree: {
        version: bumpVersion ? version : treeState.version,
        stateID: bumpVersion ? version : treeState.stateID,
        transactionMetadata: {
          ...treeState.transactionMetadata
        },
        dirtyAtoms: new Set(treeState.dirtyAtoms),
        atomValues: treeState.atomValues.clone(),
        nonvalidatedAtoms: treeState.nonvalidatedAtoms.clone()
      },
      commitDepth: 0,
      nextTree: null,
      previousTree: null,
      knownAtoms: new Set(storeState.knownAtoms),
      knownSelectors: new Set(storeState.knownSelectors),
      transactionSubscriptions: /* @__PURE__ */ new Map(),
      nodeTransactionSubscriptions: /* @__PURE__ */ new Map(),
      nodeToComponentSubscriptions: /* @__PURE__ */ new Map(),
      queuedComponentCallbacks_DEPRECATED: [],
      suspendedComponentResolvers: /* @__PURE__ */ new Set(),
      graphsByVersion: (/* @__PURE__ */ new Map()).set(version, store.getGraph(treeState.version)),
      retention: {
        referenceCounts: /* @__PURE__ */ new Map(),
        nodesRetainedByZone: /* @__PURE__ */ new Map(),
        retainablesToCheckForRelease: /* @__PURE__ */ new Set()
      },
      nodeCleanupFunctions: new Map(Recoil_mapIterable(storeState.nodeCleanupFunctions.entries(), ([key]) => [key, () => {
      }]))
    };
  }
  function freshSnapshot(initializeState) {
    const snapshot = new Snapshot(makeEmptyStoreState$1());
    return initializeState != null ? snapshot.map(initializeState) : snapshot;
  }
  var [memoizedCloneSnapshot, invalidateMemoizedSnapshot$2] = memoizeOneWithArgsHashAndInvalidation$1((store, version) => {
    var _storeState$nextTree;
    const storeState = store.getState();
    const treeState = version === "latest" ? (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree : Recoil_nullthrows(storeState.previousTree);
    return new Snapshot(cloneStoreState(store, treeState), store.storeID);
  }, (store, version) => {
    var _store$getState$nextT, _store$getState$previ;
    return String(version) + String(store.storeID) + String((_store$getState$nextT = store.getState().nextTree) === null || _store$getState$nextT === void 0 ? void 0 : _store$getState$nextT.version) + String(store.getState().currentTree.version) + String((_store$getState$previ = store.getState().previousTree) === null || _store$getState$previ === void 0 ? void 0 : _store$getState$previ.version);
  });
  setInvalidateMemoizedSnapshot$1(invalidateMemoizedSnapshot$2);
  function cloneSnapshot(store, version = "latest") {
    const snapshot = memoizedCloneSnapshot(store, version);
    if (!snapshot.isRetained()) {
      invalidateMemoizedSnapshot$2();
      return memoizedCloneSnapshot(store, version);
    }
    return snapshot;
  }
  var MutableSnapshot = class extends Snapshot {
    constructor(snapshot, batch) {
      super(cloneStoreState(snapshot.getStore_INTERNAL(), snapshot.getStore_INTERNAL().getState().currentTree, true), snapshot.getStoreID());
      _defineProperty(this, "_batch", void 0);
      _defineProperty(this, "set", (recoilState, newValueOrUpdater) => {
        this.checkRefCount_INTERNAL();
        const store = this.getStore_INTERNAL();
        this._batch(() => {
          updateRetainCount$1(store, recoilState.key, 1);
          setRecoilValue$1(this.getStore_INTERNAL(), recoilState, newValueOrUpdater);
        });
      });
      _defineProperty(this, "reset", (recoilState) => {
        this.checkRefCount_INTERNAL();
        const store = this.getStore_INTERNAL();
        this._batch(() => {
          updateRetainCount$1(store, recoilState.key, 1);
          setRecoilValue$1(this.getStore_INTERNAL(), recoilState, DEFAULT_VALUE$1);
        });
      });
      _defineProperty(this, "setUnvalidatedAtomValues_DEPRECATED", (values5) => {
        this.checkRefCount_INTERNAL();
        const store = this.getStore_INTERNAL();
        batchUpdates$1(() => {
          for (const [k, v] of values5.entries()) {
            updateRetainCount$1(store, k, 1);
            setUnvalidatedRecoilValue$1(store, new AbstractRecoilValue$2(k), v);
          }
        });
      });
      this._batch = batch;
    }
  };
  var Recoil_Snapshot = {
    Snapshot,
    MutableSnapshot,
    freshSnapshot,
    cloneSnapshot
  };
  var Recoil_Snapshot_1 = Recoil_Snapshot.Snapshot;
  var Recoil_Snapshot_2 = Recoil_Snapshot.MutableSnapshot;
  var Recoil_Snapshot_3 = Recoil_Snapshot.freshSnapshot;
  var Recoil_Snapshot_4 = Recoil_Snapshot.cloneSnapshot;
  var Recoil_Snapshot$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    Snapshot: Recoil_Snapshot_1,
    MutableSnapshot: Recoil_Snapshot_2,
    freshSnapshot: Recoil_Snapshot_3,
    cloneSnapshot: Recoil_Snapshot_4
  });
  function unionSets(...sets) {
    const result = /* @__PURE__ */ new Set();
    for (const set2 of sets) {
      for (const value of set2) {
        result.add(value);
      }
    }
    return result;
  }
  var Recoil_unionSets = unionSets;
  var {
    useRef
  } = import_react.default;
  function useRefInitOnce(initialValue) {
    const ref = useRef(initialValue);
    if (ref.current === initialValue && typeof initialValue === "function") {
      ref.current = initialValue();
    }
    return ref;
  }
  var Recoil_useRefInitOnce = useRefInitOnce;
  var {
    getNextTreeStateVersion: getNextTreeStateVersion$3,
    makeEmptyStoreState: makeEmptyStoreState$2
  } = Recoil_State;
  var {
    cleanUpNode: cleanUpNode$2,
    getDownstreamNodes: getDownstreamNodes$2,
    initializeNode: initializeNode$2,
    setNodeValue: setNodeValue$2,
    setUnvalidatedAtomValue_DEPRECATED: setUnvalidatedAtomValue_DEPRECATED$1
  } = Recoil_FunctionalCore;
  var {
    graph: graph$2
  } = Recoil_Graph;
  var {
    cloneGraph: cloneGraph$1
  } = Recoil_Graph;
  var {
    getNextStoreID: getNextStoreID$2
  } = Recoil_Keys;
  var {
    createMutableSource: createMutableSource$1,
    reactMode: reactMode$2
  } = Recoil_ReactMode;
  var {
    applyAtomValueWrites: applyAtomValueWrites$1
  } = Recoil_RecoilValueInterface;
  var {
    releaseScheduledRetainablesNow: releaseScheduledRetainablesNow$1
  } = Recoil_Retention;
  var {
    freshSnapshot: freshSnapshot$1
  } = Recoil_Snapshot$1;
  var {
    useCallback,
    useContext,
    useEffect,
    useMemo,
    useRef: useRef$1,
    useState
  } = import_react.default;
  function notInAContext() {
    throw Recoil_err("This component must be used inside a <RecoilRoot> component.");
  }
  var defaultStore = Object.freeze({
    storeID: getNextStoreID$2(),
    getState: notInAContext,
    replaceState: notInAContext,
    getGraph: notInAContext,
    subscribeToTransactions: notInAContext,
    addTransactionMetadata: notInAContext
  });
  var stateReplacerIsBeingExecuted = false;
  function startNextTreeIfNeeded(store) {
    if (stateReplacerIsBeingExecuted) {
      throw Recoil_err("An atom update was triggered within the execution of a state updater function. State updater functions provided to Recoil must be pure functions.");
    }
    const storeState = store.getState();
    if (storeState.nextTree === null) {
      if (Recoil_gkx("recoil_memory_managament_2020") && Recoil_gkx("recoil_release_on_cascading_update_killswitch_2021")) {
        if (storeState.commitDepth > 0) {
          releaseScheduledRetainablesNow$1(store);
        }
      }
      const version = storeState.currentTree.version;
      const nextVersion = getNextTreeStateVersion$3();
      storeState.nextTree = {
        ...storeState.currentTree,
        version: nextVersion,
        stateID: nextVersion,
        dirtyAtoms: /* @__PURE__ */ new Set(),
        transactionMetadata: {}
      };
      storeState.graphsByVersion.set(nextVersion, cloneGraph$1(Recoil_nullthrows(storeState.graphsByVersion.get(version))));
    }
  }
  var AppContext = import_react.default.createContext({
    current: defaultStore
  });
  var useStoreRef = () => useContext(AppContext);
  var MutableSourceContext = import_react.default.createContext(null);
  function useRecoilMutableSource() {
    const mutableSource = useContext(MutableSourceContext);
    if (mutableSource == null) {
      Recoil_expectationViolation("Attempted to use a Recoil hook outside of a <RecoilRoot>. <RecoilRoot> must be an ancestor of any component that uses Recoil hooks.");
    }
    return mutableSource;
  }
  function notifyComponents(store, storeState, treeState) {
    const dependentNodes = getDownstreamNodes$2(store, treeState, treeState.dirtyAtoms);
    for (const key of dependentNodes) {
      const comps = storeState.nodeToComponentSubscriptions.get(key);
      if (comps) {
        for (const [_subID, [_debugName, callback]] of comps) {
          callback(treeState);
        }
      }
    }
  }
  function sendEndOfBatchNotifications(store) {
    const storeState = store.getState();
    const treeState = storeState.currentTree;
    const dirtyAtoms = treeState.dirtyAtoms;
    if (dirtyAtoms.size) {
      for (const [key, subscriptions] of storeState.nodeTransactionSubscriptions) {
        if (dirtyAtoms.has(key)) {
          for (const [_, subscription] of subscriptions) {
            subscription(store);
          }
        }
      }
      for (const [_, subscription] of storeState.transactionSubscriptions) {
        subscription(store);
      }
      if (!reactMode$2().early || storeState.suspendedComponentResolvers.size > 0) {
        notifyComponents(store, storeState, treeState);
        storeState.suspendedComponentResolvers.forEach((cb) => cb());
        storeState.suspendedComponentResolvers.clear();
      }
    }
    storeState.queuedComponentCallbacks_DEPRECATED.forEach((cb) => cb(treeState));
    storeState.queuedComponentCallbacks_DEPRECATED.splice(0, storeState.queuedComponentCallbacks_DEPRECATED.length);
  }
  function endBatch(store) {
    const storeState = store.getState();
    storeState.commitDepth++;
    try {
      const {
        nextTree
      } = storeState;
      if (nextTree == null) {
        return;
      }
      storeState.previousTree = storeState.currentTree;
      storeState.currentTree = nextTree;
      storeState.nextTree = null;
      sendEndOfBatchNotifications(store);
      if (storeState.previousTree != null) {
        storeState.graphsByVersion.delete(storeState.previousTree.version);
      } else {
        Recoil_recoverableViolation("Ended batch with no previous state, which is unexpected", "recoil");
      }
      storeState.previousTree = null;
      if (Recoil_gkx("recoil_memory_managament_2020")) {
        if (nextTree == null) {
          releaseScheduledRetainablesNow$1(store);
        }
      }
    } finally {
      storeState.commitDepth--;
    }
  }
  function Batcher({
    setNotifyBatcherOfChange
  }) {
    const storeRef = useStoreRef();
    const [, setState] = useState([]);
    setNotifyBatcherOfChange(() => setState({}));
    useEffect(() => {
      setNotifyBatcherOfChange(() => setState({}));
      return () => {
        setNotifyBatcherOfChange(() => {
        });
      };
    }, [setNotifyBatcherOfChange]);
    useEffect(() => {
      Recoil_Queue.enqueueExecution("Batcher", () => {
        endBatch(storeRef.current);
      });
    });
    return null;
  }
  if (true) {
    if (typeof window !== "undefined" && !window.$recoilDebugStates) {
      window.$recoilDebugStates = [];
    }
  }
  function initialStoreState_DEPRECATED(store, initializeState) {
    const initial = makeEmptyStoreState$2();
    initializeState({
      set: (atom2, value) => {
        const state = initial.currentTree;
        const writes = setNodeValue$2(store, state, atom2.key, value);
        const writtenNodes = new Set(writes.keys());
        const nonvalidatedAtoms = state.nonvalidatedAtoms.clone();
        for (const n of writtenNodes) {
          nonvalidatedAtoms.delete(n);
        }
        initial.currentTree = {
          ...state,
          dirtyAtoms: Recoil_unionSets(state.dirtyAtoms, writtenNodes),
          atomValues: applyAtomValueWrites$1(state.atomValues, writes),
          nonvalidatedAtoms
        };
      },
      setUnvalidatedAtomValues: (atomValues) => {
        atomValues.forEach((v, k) => {
          initial.currentTree = setUnvalidatedAtomValue_DEPRECATED$1(initial.currentTree, k, v);
        });
      }
    });
    return initial;
  }
  function initialStoreState(initializeState) {
    const snapshot = freshSnapshot$1(initializeState);
    const storeState = snapshot.getStore_INTERNAL().getState();
    snapshot.retain();
    storeState.nodeCleanupFunctions.forEach((cleanup) => cleanup());
    storeState.nodeCleanupFunctions.clear();
    return storeState;
  }
  var nextID = 0;
  function RecoilRoot_INTERNAL({
    initializeState_DEPRECATED,
    initializeState,
    store_INTERNAL: storeProp,
    children: children2
  }) {
    let storeStateRef;
    const getGraph = (version) => {
      const graphs = storeStateRef.current.graphsByVersion;
      if (graphs.has(version)) {
        return Recoil_nullthrows(graphs.get(version));
      }
      const newGraph = graph$2();
      graphs.set(version, newGraph);
      return newGraph;
    };
    const subscribeToTransactions = (callback, key) => {
      if (key == null) {
        const {
          transactionSubscriptions
        } = storeRef.current.getState();
        const id = nextID++;
        transactionSubscriptions.set(id, callback);
        return {
          release: () => {
            transactionSubscriptions.delete(id);
          }
        };
      } else {
        const {
          nodeTransactionSubscriptions
        } = storeRef.current.getState();
        if (!nodeTransactionSubscriptions.has(key)) {
          nodeTransactionSubscriptions.set(key, /* @__PURE__ */ new Map());
        }
        const id = nextID++;
        Recoil_nullthrows(nodeTransactionSubscriptions.get(key)).set(id, callback);
        return {
          release: () => {
            const subs = nodeTransactionSubscriptions.get(key);
            if (subs) {
              subs.delete(id);
              if (subs.size === 0) {
                nodeTransactionSubscriptions.delete(key);
              }
            }
          }
        };
      }
    };
    const addTransactionMetadata = (metadata) => {
      startNextTreeIfNeeded(storeRef.current);
      for (const k of Object.keys(metadata)) {
        Recoil_nullthrows(storeRef.current.getState().nextTree).transactionMetadata[k] = metadata[k];
      }
    };
    const replaceState = (replacer) => {
      startNextTreeIfNeeded(storeRef.current);
      const nextTree = Recoil_nullthrows(storeStateRef.current.nextTree);
      let replaced;
      try {
        stateReplacerIsBeingExecuted = true;
        replaced = replacer(nextTree);
      } finally {
        stateReplacerIsBeingExecuted = false;
      }
      if (replaced === nextTree) {
        return;
      }
      if (true) {
        if (typeof window !== "undefined") {
          window.$recoilDebugStates.push(replaced);
        }
      }
      storeStateRef.current.nextTree = replaced;
      if (reactMode$2().early) {
        notifyComponents(storeRef.current, storeStateRef.current, replaced);
      }
      Recoil_nullthrows(notifyBatcherOfChange.current)();
    };
    const notifyBatcherOfChange = useRef$1(null);
    const setNotifyBatcherOfChange = useCallback((x) => {
      notifyBatcherOfChange.current = x;
    }, [notifyBatcherOfChange]);
    const storeRef = Recoil_useRefInitOnce(() => storeProp !== null && storeProp !== void 0 ? storeProp : {
      storeID: getNextStoreID$2(),
      getState: () => storeStateRef.current,
      replaceState,
      getGraph,
      subscribeToTransactions,
      addTransactionMetadata
    });
    if (storeProp != null) {
      storeRef.current = storeProp;
    }
    storeStateRef = Recoil_useRefInitOnce(() => initializeState_DEPRECATED != null ? initialStoreState_DEPRECATED(storeRef.current, initializeState_DEPRECATED) : initializeState != null ? initialStoreState(initializeState) : makeEmptyStoreState$2());
    const mutableSource = useMemo(() => createMutableSource$1 === null || createMutableSource$1 === void 0 ? void 0 : createMutableSource$1(storeStateRef, () => storeStateRef.current.currentTree.version), [storeStateRef]);
    useEffect(() => {
      const store = storeRef.current;
      for (const atomKey of new Set(store.getState().knownAtoms)) {
        initializeNode$2(store, atomKey, "get");
      }
      return () => {
        for (const atomKey of store.getState().knownAtoms) {
          cleanUpNode$2(store, atomKey);
        }
      };
    }, [storeRef]);
    return /* @__PURE__ */ import_react.default.createElement(AppContext.Provider, {
      value: storeRef
    }, /* @__PURE__ */ import_react.default.createElement(MutableSourceContext.Provider, {
      value: mutableSource
    }, /* @__PURE__ */ import_react.default.createElement(Batcher, {
      setNotifyBatcherOfChange
    }), children2));
  }
  function RecoilRoot(props) {
    const {
      override,
      ...propsExceptOverride
    } = props;
    const ancestorStoreRef = useStoreRef();
    if (override === false && ancestorStoreRef.current !== defaultStore) {
      return props.children;
    }
    return /* @__PURE__ */ import_react.default.createElement(RecoilRoot_INTERNAL, propsExceptOverride);
  }
  function useRecoilStoreID() {
    return useStoreRef().current.storeID;
  }
  var Recoil_RecoilRoot = {
    RecoilRoot,
    useStoreRef,
    useRecoilMutableSource,
    useRecoilStoreID,
    notifyComponents_FOR_TESTING: notifyComponents,
    sendEndOfBatchNotifications_FOR_TESTING: sendEndOfBatchNotifications
  };
  function shallowArrayEqual(a, b) {
    if (a === b) {
      return true;
    }
    if (a.length !== b.length) {
      return false;
    }
    for (let i = 0, l = a.length; i < l; i++) {
      if (a[i] !== b[i]) {
        return false;
      }
    }
    return true;
  }
  var Recoil_shallowArrayEqual = shallowArrayEqual;
  var {
    useEffect: useEffect$1,
    useRef: useRef$2
  } = import_react.default;
  function usePrevious(value) {
    const ref = useRef$2();
    useEffect$1(() => {
      ref.current = value;
    });
    return ref.current;
  }
  var Recoil_usePrevious = usePrevious;
  var {
    useStoreRef: useStoreRef$1
  } = Recoil_RecoilRoot;
  var {
    SUSPENSE_TIMEOUT_MS: SUSPENSE_TIMEOUT_MS$1
  } = Recoil_Retention;
  var {
    updateRetainCount: updateRetainCount$2
  } = Recoil_Retention;
  var {
    RetentionZone: RetentionZone$3
  } = Recoil_RetentionZone;
  var {
    useEffect: useEffect$2,
    useRef: useRef$3
  } = import_react.default;
  var {
    isSSR: isSSR$2
  } = Recoil_Environment;
  function useRetain(toRetain) {
    if (!Recoil_gkx("recoil_memory_managament_2020")) {
      return;
    }
    return useRetain_ACTUAL(toRetain);
  }
  function useRetain_ACTUAL(toRetain) {
    const array = Array.isArray(toRetain) ? toRetain : [toRetain];
    const retainables = array.map((a) => a instanceof RetentionZone$3 ? a : a.key);
    const storeRef = useStoreRef$1();
    useEffect$2(() => {
      if (!Recoil_gkx("recoil_memory_managament_2020")) {
        return;
      }
      const store = storeRef.current;
      if (timeoutID.current && !isSSR$2) {
        window.clearTimeout(timeoutID.current);
        timeoutID.current = null;
      } else {
        for (const r of retainables) {
          updateRetainCount$2(store, r, 1);
        }
      }
      return () => {
        for (const r of retainables) {
          updateRetainCount$2(store, r, -1);
        }
      };
    }, [storeRef, ...retainables]);
    const timeoutID = useRef$3();
    const previousRetainables = Recoil_usePrevious(retainables);
    if (!isSSR$2 && (previousRetainables === void 0 || !Recoil_shallowArrayEqual(previousRetainables, retainables))) {
      const store = storeRef.current;
      for (const r of retainables) {
        updateRetainCount$2(store, r, 1);
      }
      if (previousRetainables) {
        for (const r of previousRetainables) {
          updateRetainCount$2(store, r, -1);
        }
      }
      if (timeoutID.current) {
        window.clearTimeout(timeoutID.current);
      }
      timeoutID.current = window.setTimeout(() => {
        timeoutID.current = null;
        for (const r of retainables) {
          updateRetainCount$2(store, r, -1);
        }
      }, SUSPENSE_TIMEOUT_MS$1);
    }
  }
  var Recoil_useRetain = useRetain;
  function useComponentName() {
    return "<component name not available>";
  }
  var Recoil_useComponentName = useComponentName;
  var {
    batchUpdates: batchUpdates$2
  } = Recoil_Batching;
  var {
    DEFAULT_VALUE: DEFAULT_VALUE$2
  } = Recoil_Node;
  var {
    currentRendererSupportsUseSyncExternalStore: currentRendererSupportsUseSyncExternalStore$1,
    reactMode: reactMode$3,
    useMutableSource: useMutableSource$1,
    useSyncExternalStore: useSyncExternalStore$1
  } = Recoil_ReactMode;
  var {
    useRecoilMutableSource: useRecoilMutableSource$1,
    useStoreRef: useStoreRef$2
  } = Recoil_RecoilRoot;
  var {
    isRecoilValue: isRecoilValue$2
  } = Recoil_RecoilValue$1;
  var {
    AbstractRecoilValue: AbstractRecoilValue$3,
    getRecoilValueAsLoadable: getRecoilValueAsLoadable$2,
    setRecoilValue: setRecoilValue$2,
    setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$2,
    subscribeToRecoilValue: subscribeToRecoilValue$1
  } = Recoil_RecoilValueInterface;
  var {
    useCallback: useCallback$1,
    useEffect: useEffect$3,
    useMemo: useMemo$1,
    useRef: useRef$4,
    useState: useState$1
  } = import_react.default;
  var {
    setByAddingToSet: setByAddingToSet$2
  } = Recoil_CopyOnWrite;
  function handleLoadable(loadable, recoilValue, storeRef) {
    if (loadable.state === "hasValue") {
      return loadable.contents;
    } else if (loadable.state === "loading") {
      const promise = new Promise((resolve) => {
        storeRef.current.getState().suspendedComponentResolvers.add(resolve);
      });
      throw promise;
    } else if (loadable.state === "hasError") {
      throw loadable.contents;
    } else {
      throw Recoil_err(`Invalid value of loadable atom "${recoilValue.key}"`);
    }
  }
  function validateRecoilValue(recoilValue, hookName) {
    if (!isRecoilValue$2(recoilValue)) {
      throw Recoil_err(`Invalid argument to ${hookName}: expected an atom or selector but got ${String(recoilValue)}`);
    }
  }
  function useRecoilInterface_DEPRECATED() {
    const componentName2 = Recoil_useComponentName();
    const storeRef = useStoreRef$2();
    const [, forceUpdate] = useState$1([]);
    const recoilValuesUsed = useRef$4(/* @__PURE__ */ new Set());
    recoilValuesUsed.current = /* @__PURE__ */ new Set();
    const previousSubscriptions = useRef$4(/* @__PURE__ */ new Set());
    const subscriptions = useRef$4(/* @__PURE__ */ new Map());
    const unsubscribeFrom = useCallback$1((key) => {
      const sub = subscriptions.current.get(key);
      if (sub) {
        sub.release();
        subscriptions.current.delete(key);
      }
    }, [subscriptions]);
    const updateState = useCallback$1((_state, key) => {
      if (subscriptions.current.has(key)) {
        forceUpdate([]);
      }
    }, []);
    useEffect$3(() => {
      const store = storeRef.current;
      Recoil_differenceSets(recoilValuesUsed.current, previousSubscriptions.current).forEach((key) => {
        if (subscriptions.current.has(key)) {
          Recoil_expectationViolation(`Double subscription to RecoilValue "${key}"`);
          return;
        }
        const sub = subscribeToRecoilValue$1(store, new AbstractRecoilValue$3(key), (state2) => updateState(state2, key), componentName2);
        subscriptions.current.set(key, sub);
        const state = store.getState();
        if (state.nextTree) {
          store.getState().queuedComponentCallbacks_DEPRECATED.push(() => {
            updateState(store.getState(), key);
          });
        } else {
          updateState(store.getState(), key);
        }
      });
      Recoil_differenceSets(previousSubscriptions.current, recoilValuesUsed.current).forEach((key) => {
        unsubscribeFrom(key);
      });
      previousSubscriptions.current = recoilValuesUsed.current;
    });
    useEffect$3(() => {
      const currentSubscriptions = subscriptions.current;
      Recoil_differenceSets(recoilValuesUsed.current, new Set(currentSubscriptions.keys())).forEach((key) => {
        const sub = subscribeToRecoilValue$1(storeRef.current, new AbstractRecoilValue$3(key), (state) => updateState(state, key), componentName2);
        currentSubscriptions.set(key, sub);
      });
      return () => currentSubscriptions.forEach((_, key) => unsubscribeFrom(key));
    }, [componentName2, storeRef, unsubscribeFrom, updateState]);
    return useMemo$1(() => {
      function useSetRecoilState2(recoilState) {
        if (true) {
          validateRecoilValue(recoilState, "useSetRecoilState");
        }
        return (newValueOrUpdater) => {
          setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);
        };
      }
      function useResetRecoilState2(recoilState) {
        if (true) {
          validateRecoilValue(recoilState, "useResetRecoilState");
        }
        return () => setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$2);
      }
      function useRecoilValueLoadable2(recoilValue) {
        var _storeState$nextTree;
        if (true) {
          validateRecoilValue(recoilValue, "useRecoilValueLoadable");
        }
        if (!recoilValuesUsed.current.has(recoilValue.key)) {
          recoilValuesUsed.current = setByAddingToSet$2(recoilValuesUsed.current, recoilValue.key);
        }
        const storeState = storeRef.current.getState();
        return getRecoilValueAsLoadable$2(storeRef.current, recoilValue, reactMode$3().early ? (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree : storeState.currentTree);
      }
      function useRecoilValue2(recoilValue) {
        if (true) {
          validateRecoilValue(recoilValue, "useRecoilValue");
        }
        const loadable = useRecoilValueLoadable2(recoilValue);
        return handleLoadable(loadable, recoilValue, storeRef);
      }
      function useRecoilState2(recoilState) {
        if (true) {
          validateRecoilValue(recoilState, "useRecoilState");
        }
        return [useRecoilValue2(recoilState), useSetRecoilState2(recoilState)];
      }
      function useRecoilStateLoadable2(recoilState) {
        if (true) {
          validateRecoilValue(recoilState, "useRecoilStateLoadable");
        }
        return [useRecoilValueLoadable2(recoilState), useSetRecoilState2(recoilState)];
      }
      return {
        getRecoilValue: useRecoilValue2,
        getRecoilValueLoadable: useRecoilValueLoadable2,
        getRecoilState: useRecoilState2,
        getRecoilStateLoadable: useRecoilStateLoadable2,
        getSetRecoilState: useSetRecoilState2,
        getResetRecoilState: useResetRecoilState2
      };
    }, [recoilValuesUsed, storeRef]);
  }
  var recoilComponentGetRecoilValueCount_FOR_TESTING = {
    current: 0
  };
  function useRecoilValueLoadable_SYNC_EXTERNAL_STORE(recoilValue) {
    const storeRef = useStoreRef$2();
    const componentName2 = Recoil_useComponentName();
    const getSnapshot = useCallback$1(() => {
      var _storeState$nextTree2;
      if (true) {
        recoilComponentGetRecoilValueCount_FOR_TESTING.current++;
      }
      const store = storeRef.current;
      const storeState = store.getState();
      const treeState = reactMode$3().early ? (_storeState$nextTree2 = storeState.nextTree) !== null && _storeState$nextTree2 !== void 0 ? _storeState$nextTree2 : storeState.currentTree : storeState.currentTree;
      const loadable = getRecoilValueAsLoadable$2(store, recoilValue, treeState);
      return {
        loadable,
        key: recoilValue.key
      };
    }, [storeRef, recoilValue]);
    const memoizePreviousSnapshot = useCallback$1((getState) => {
      let prevState;
      return () => {
        var _prevState, _prevState2;
        const nextState = getState();
        if ((_prevState = prevState) !== null && _prevState !== void 0 && _prevState.loadable.is(nextState.loadable) && ((_prevState2 = prevState) === null || _prevState2 === void 0 ? void 0 : _prevState2.key) === nextState.key) {
          return prevState;
        }
        prevState = nextState;
        return nextState;
      };
    }, []);
    const getMemoizedSnapshot = useMemo$1(() => memoizePreviousSnapshot(getSnapshot), [getSnapshot, memoizePreviousSnapshot]);
    const subscribe = useCallback$1((notify) => {
      const store = storeRef.current;
      const subscription = subscribeToRecoilValue$1(store, recoilValue, notify, componentName2);
      return subscription.release;
    }, [storeRef, recoilValue, componentName2]);
    return useSyncExternalStore$1(
      subscribe,
      getMemoizedSnapshot,
      getMemoizedSnapshot
    ).loadable;
  }
  function useRecoilValueLoadable_MUTABLE_SOURCE(recoilValue) {
    const storeRef = useStoreRef$2();
    const getLoadable = useCallback$1(() => {
      var _storeState$nextTree3;
      const store = storeRef.current;
      const storeState = store.getState();
      const treeState = reactMode$3().early ? (_storeState$nextTree3 = storeState.nextTree) !== null && _storeState$nextTree3 !== void 0 ? _storeState$nextTree3 : storeState.currentTree : storeState.currentTree;
      return getRecoilValueAsLoadable$2(store, recoilValue, treeState);
    }, [storeRef, recoilValue]);
    const getLoadableWithTesting = useCallback$1(() => {
      if (true) {
        recoilComponentGetRecoilValueCount_FOR_TESTING.current++;
      }
      return getLoadable();
    }, [getLoadable]);
    const componentName2 = Recoil_useComponentName();
    const subscribe = useCallback$1((_storeState, notify) => {
      const store = storeRef.current;
      const subscription = subscribeToRecoilValue$1(store, recoilValue, () => {
        if (!Recoil_gkx("recoil_suppress_rerender_in_callback")) {
          return notify();
        }
        const newLoadable = getLoadable();
        if (!prevLoadableRef.current.is(newLoadable)) {
          notify();
        }
        prevLoadableRef.current = newLoadable;
      }, componentName2);
      return subscription.release;
    }, [storeRef, recoilValue, componentName2, getLoadable]);
    const source2 = useRecoilMutableSource$1();
    if (source2 == null) {
      throw Recoil_err("Recoil hooks must be used in components contained within a <RecoilRoot> component.");
    }
    const loadable = useMutableSource$1(source2, getLoadableWithTesting, subscribe);
    const prevLoadableRef = useRef$4(loadable);
    useEffect$3(() => {
      prevLoadableRef.current = loadable;
    });
    return loadable;
  }
  function useRecoilValueLoadable_TRANSITION_SUPPORT(recoilValue) {
    const storeRef = useStoreRef$2();
    const componentName2 = Recoil_useComponentName();
    const getLoadable = useCallback$1(() => {
      var _storeState$nextTree4;
      if (true) {
        recoilComponentGetRecoilValueCount_FOR_TESTING.current++;
      }
      const store = storeRef.current;
      const storeState = store.getState();
      const treeState = reactMode$3().early ? (_storeState$nextTree4 = storeState.nextTree) !== null && _storeState$nextTree4 !== void 0 ? _storeState$nextTree4 : storeState.currentTree : storeState.currentTree;
      return getRecoilValueAsLoadable$2(store, recoilValue, treeState);
    }, [storeRef, recoilValue]);
    const getState = useCallback$1(() => ({
      loadable: getLoadable(),
      key: recoilValue.key
    }), [getLoadable, recoilValue.key]);
    const updateState = useCallback$1((prevState) => {
      const nextState = getState();
      return prevState.loadable.is(nextState.loadable) && prevState.key === nextState.key ? prevState : nextState;
    }, [getState]);
    useEffect$3(() => {
      const subscription = subscribeToRecoilValue$1(storeRef.current, recoilValue, (_state) => {
        setState(updateState);
      }, componentName2);
      setState(updateState);
      return subscription.release;
    }, [componentName2, recoilValue, storeRef, updateState]);
    const [state, setState] = useState$1(getState);
    return state.key !== recoilValue.key ? getState().loadable : state.loadable;
  }
  function useRecoilValueLoadable_LEGACY(recoilValue) {
    const storeRef = useStoreRef$2();
    const [, forceUpdate] = useState$1([]);
    const componentName2 = Recoil_useComponentName();
    const getLoadable = useCallback$1(() => {
      var _storeState$nextTree5;
      if (true) {
        recoilComponentGetRecoilValueCount_FOR_TESTING.current++;
      }
      const store = storeRef.current;
      const storeState = store.getState();
      const treeState = reactMode$3().early ? (_storeState$nextTree5 = storeState.nextTree) !== null && _storeState$nextTree5 !== void 0 ? _storeState$nextTree5 : storeState.currentTree : storeState.currentTree;
      return getRecoilValueAsLoadable$2(store, recoilValue, treeState);
    }, [storeRef, recoilValue]);
    const loadable = getLoadable();
    const prevLoadableRef = useRef$4(loadable);
    useEffect$3(() => {
      prevLoadableRef.current = loadable;
    });
    useEffect$3(() => {
      const store = storeRef.current;
      const storeState = store.getState();
      const subscription = subscribeToRecoilValue$1(store, recoilValue, (_state) => {
        var _prevLoadableRef$curr;
        if (!Recoil_gkx("recoil_suppress_rerender_in_callback")) {
          return forceUpdate([]);
        }
        const newLoadable = getLoadable();
        if (!((_prevLoadableRef$curr = prevLoadableRef.current) !== null && _prevLoadableRef$curr !== void 0 && _prevLoadableRef$curr.is(newLoadable))) {
          forceUpdate(newLoadable);
        }
        prevLoadableRef.current = newLoadable;
      }, componentName2);
      if (storeState.nextTree) {
        store.getState().queuedComponentCallbacks_DEPRECATED.push(() => {
          prevLoadableRef.current = null;
          forceUpdate([]);
        });
      } else {
        var _prevLoadableRef$curr2;
        if (!Recoil_gkx("recoil_suppress_rerender_in_callback")) {
          return forceUpdate([]);
        }
        const newLoadable = getLoadable();
        if (!((_prevLoadableRef$curr2 = prevLoadableRef.current) !== null && _prevLoadableRef$curr2 !== void 0 && _prevLoadableRef$curr2.is(newLoadable))) {
          forceUpdate(newLoadable);
        }
        prevLoadableRef.current = newLoadable;
      }
      return subscription.release;
    }, [componentName2, getLoadable, recoilValue, storeRef]);
    return loadable;
  }
  function useRecoilValueLoadable(recoilValue) {
    if (true) {
      validateRecoilValue(recoilValue, "useRecoilValueLoadable");
    }
    if (Recoil_gkx("recoil_memory_managament_2020")) {
      Recoil_useRetain(recoilValue);
    }
    return {
      TRANSITION_SUPPORT: useRecoilValueLoadable_TRANSITION_SUPPORT,
      SYNC_EXTERNAL_STORE: currentRendererSupportsUseSyncExternalStore$1() ? useRecoilValueLoadable_SYNC_EXTERNAL_STORE : useRecoilValueLoadable_TRANSITION_SUPPORT,
      MUTABLE_SOURCE: useRecoilValueLoadable_MUTABLE_SOURCE,
      LEGACY: useRecoilValueLoadable_LEGACY
    }[reactMode$3().mode](recoilValue);
  }
  function useRecoilValue(recoilValue) {
    if (true) {
      validateRecoilValue(recoilValue, "useRecoilValue");
    }
    const storeRef = useStoreRef$2();
    const loadable = useRecoilValueLoadable(recoilValue);
    return handleLoadable(loadable, recoilValue, storeRef);
  }
  function useSetRecoilState(recoilState) {
    if (true) {
      validateRecoilValue(recoilState, "useSetRecoilState");
    }
    const storeRef = useStoreRef$2();
    return useCallback$1((newValueOrUpdater) => {
      setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);
    }, [storeRef, recoilState]);
  }
  function useResetRecoilState(recoilState) {
    if (true) {
      validateRecoilValue(recoilState, "useResetRecoilState");
    }
    const storeRef = useStoreRef$2();
    return useCallback$1(() => {
      setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$2);
    }, [storeRef, recoilState]);
  }
  function useRecoilState(recoilState) {
    if (true) {
      validateRecoilValue(recoilState, "useRecoilState");
    }
    return [useRecoilValue(recoilState), useSetRecoilState(recoilState)];
  }
  function useRecoilStateLoadable(recoilState) {
    if (true) {
      validateRecoilValue(recoilState, "useRecoilStateLoadable");
    }
    return [useRecoilValueLoadable(recoilState), useSetRecoilState(recoilState)];
  }
  function useSetUnvalidatedAtomValues() {
    const storeRef = useStoreRef$2();
    return (values5, transactionMetadata = {}) => {
      batchUpdates$2(() => {
        storeRef.current.addTransactionMetadata(transactionMetadata);
        values5.forEach((value, key) => setUnvalidatedRecoilValue$2(storeRef.current, new AbstractRecoilValue$3(key), value));
      });
    };
  }
  function useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE(recoilValue) {
    if (true) {
      validateRecoilValue(recoilValue, "useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE");
      if (!reactMode$3().early) {
        Recoil_recoverableViolation("Attepmt to use a hook with UNSTABLE_TRANSITION_SUPPORT in a rendering mode incompatible with concurrent rendering.  Try enabling the recoil_sync_external_store or recoil_transition_support GKs.");
      }
    }
    if (Recoil_gkx("recoil_memory_managament_2020")) {
      Recoil_useRetain(recoilValue);
    }
    return useRecoilValueLoadable_TRANSITION_SUPPORT(recoilValue);
  }
  function useRecoilValue_TRANSITION_SUPPORT_UNSTABLE(recoilValue) {
    if (true) {
      validateRecoilValue(recoilValue, "useRecoilValue_TRANSITION_SUPPORT_UNSTABLE");
    }
    const storeRef = useStoreRef$2();
    const loadable = useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE(recoilValue);
    return handleLoadable(loadable, recoilValue, storeRef);
  }
  function useRecoilState_TRANSITION_SUPPORT_UNSTABLE(recoilState) {
    if (true) {
      validateRecoilValue(recoilState, "useRecoilState_TRANSITION_SUPPORT_UNSTABLE");
    }
    return [useRecoilValue_TRANSITION_SUPPORT_UNSTABLE(recoilState), useSetRecoilState(recoilState)];
  }
  var Recoil_Hooks = {
    recoilComponentGetRecoilValueCount_FOR_TESTING,
    useRecoilInterface: useRecoilInterface_DEPRECATED,
    useRecoilState,
    useRecoilStateLoadable,
    useRecoilValue,
    useRecoilValueLoadable,
    useResetRecoilState,
    useSetRecoilState,
    useSetUnvalidatedAtomValues,
    useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE,
    useRecoilValue_TRANSITION_SUPPORT_UNSTABLE,
    useRecoilState_TRANSITION_SUPPORT_UNSTABLE
  };
  function filterMap(map, callback) {
    const result = /* @__PURE__ */ new Map();
    for (const [key, value] of map) {
      if (callback(value, key)) {
        result.set(key, value);
      }
    }
    return result;
  }
  var Recoil_filterMap = filterMap;
  function filterSet(set2, callback) {
    const result = /* @__PURE__ */ new Set();
    for (const value of set2) {
      if (callback(value)) {
        result.add(value);
      }
    }
    return result;
  }
  var Recoil_filterSet = filterSet;
  function mergeMaps(...maps) {
    const result = /* @__PURE__ */ new Map();
    for (let i = 0; i < maps.length; i++) {
      const iterator = maps[i].keys();
      let nextKey;
      while (!(nextKey = iterator.next()).done) {
        result.set(nextKey.value, maps[i].get(nextKey.value));
      }
    }
    return result;
  }
  var Recoil_mergeMaps = mergeMaps;
  var {
    batchUpdates: batchUpdates$3
  } = Recoil_Batching;
  var {
    DEFAULT_VALUE: DEFAULT_VALUE$3,
    getNode: getNode$4,
    nodes: nodes$1
  } = Recoil_Node;
  var {
    useStoreRef: useStoreRef$3
  } = Recoil_RecoilRoot;
  var {
    AbstractRecoilValue: AbstractRecoilValue$4,
    setRecoilValueLoadable: setRecoilValueLoadable$1
  } = Recoil_RecoilValueInterface;
  var {
    SUSPENSE_TIMEOUT_MS: SUSPENSE_TIMEOUT_MS$2
  } = Recoil_Retention;
  var {
    cloneSnapshot: cloneSnapshot$1
  } = Recoil_Snapshot$1;
  var {
    useCallback: useCallback$2,
    useEffect: useEffect$4,
    useRef: useRef$5,
    useState: useState$2
  } = import_react.default;
  var {
    isSSR: isSSR$3
  } = Recoil_Environment;
  function useTransactionSubscription(callback) {
    const storeRef = useStoreRef$3();
    useEffect$4(() => {
      const sub = storeRef.current.subscribeToTransactions(callback);
      return sub.release;
    }, [callback, storeRef]);
  }
  function externallyVisibleAtomValuesInState(state) {
    const atomValues = state.atomValues.toMap();
    const persistedAtomContentsValues = Recoil_mapMap(Recoil_filterMap(atomValues, (v, k) => {
      const node5 = getNode$4(k);
      const persistence = node5.persistence_UNSTABLE;
      return persistence != null && persistence.type !== "none" && v.state === "hasValue";
    }), (v) => v.contents);
    return Recoil_mergeMaps(state.nonvalidatedAtoms.toMap(), persistedAtomContentsValues);
  }
  function useTransactionObservation_DEPRECATED(callback) {
    useTransactionSubscription(useCallback$2((store) => {
      let previousTree = store.getState().previousTree;
      const currentTree = store.getState().currentTree;
      if (!previousTree) {
        Recoil_recoverableViolation("Transaction subscribers notified without a previous tree being present -- this is a bug in Recoil");
        previousTree = store.getState().currentTree;
      }
      const atomValues = externallyVisibleAtomValuesInState(currentTree);
      const previousAtomValues = externallyVisibleAtomValuesInState(previousTree);
      const atomInfo = Recoil_mapMap(nodes$1, (node5) => {
        var _node$persistence_UNS, _node$persistence_UNS2, _node$persistence_UNS3, _node$persistence_UNS4;
        return {
          persistence_UNSTABLE: {
            type: (_node$persistence_UNS = (_node$persistence_UNS2 = node5.persistence_UNSTABLE) === null || _node$persistence_UNS2 === void 0 ? void 0 : _node$persistence_UNS2.type) !== null && _node$persistence_UNS !== void 0 ? _node$persistence_UNS : "none",
            backButton: (_node$persistence_UNS3 = (_node$persistence_UNS4 = node5.persistence_UNSTABLE) === null || _node$persistence_UNS4 === void 0 ? void 0 : _node$persistence_UNS4.backButton) !== null && _node$persistence_UNS3 !== void 0 ? _node$persistence_UNS3 : false
          }
        };
      });
      const modifiedAtoms = Recoil_filterSet(currentTree.dirtyAtoms, (k) => atomValues.has(k) || previousAtomValues.has(k));
      callback({
        atomValues,
        previousAtomValues,
        atomInfo,
        modifiedAtoms,
        transactionMetadata: {
          ...currentTree.transactionMetadata
        }
      });
    }, [callback]));
  }
  function useRecoilTransactionObserver(callback) {
    useTransactionSubscription(useCallback$2((store) => {
      const snapshot = cloneSnapshot$1(store, "latest");
      const previousSnapshot = cloneSnapshot$1(store, "previous");
      callback({
        snapshot,
        previousSnapshot
      });
    }, [callback]));
  }
  function useRecoilSnapshot() {
    const storeRef = useStoreRef$3();
    const [snapshot, setSnapshot] = useState$2(() => cloneSnapshot$1(storeRef.current));
    const previousSnapshot = Recoil_usePrevious(snapshot);
    const timeoutID = useRef$5();
    const releaseRef = useRef$5();
    useTransactionSubscription(useCallback$2((store) => setSnapshot(cloneSnapshot$1(store)), []));
    useEffect$4(() => {
      const release = snapshot.retain();
      if (timeoutID.current && !isSSR$3) {
        var _releaseRef$current;
        window.clearTimeout(timeoutID.current);
        timeoutID.current = null;
        (_releaseRef$current = releaseRef.current) === null || _releaseRef$current === void 0 ? void 0 : _releaseRef$current.call(releaseRef);
        releaseRef.current = null;
      }
      return () => {
        window.setTimeout(release, 10);
      };
    }, [snapshot]);
    if (previousSnapshot !== snapshot && !isSSR$3) {
      if (timeoutID.current) {
        var _releaseRef$current2;
        window.clearTimeout(timeoutID.current);
        timeoutID.current = null;
        (_releaseRef$current2 = releaseRef.current) === null || _releaseRef$current2 === void 0 ? void 0 : _releaseRef$current2.call(releaseRef);
        releaseRef.current = null;
      }
      releaseRef.current = snapshot.retain();
      timeoutID.current = window.setTimeout(() => {
        var _releaseRef$current3;
        timeoutID.current = null;
        (_releaseRef$current3 = releaseRef.current) === null || _releaseRef$current3 === void 0 ? void 0 : _releaseRef$current3.call(releaseRef);
        releaseRef.current = null;
      }, SUSPENSE_TIMEOUT_MS$2);
    }
    return snapshot;
  }
  function gotoSnapshot(store, snapshot) {
    var _storeState$nextTree;
    const storeState = store.getState();
    const prev = (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree;
    const next = snapshot.getStore_INTERNAL().getState().currentTree;
    batchUpdates$3(() => {
      const keysToUpdate = /* @__PURE__ */ new Set();
      for (const keys2 of [prev.atomValues.keys(), next.atomValues.keys()]) {
        for (const key of keys2) {
          var _prev$atomValues$get, _next$atomValues$get;
          if (((_prev$atomValues$get = prev.atomValues.get(key)) === null || _prev$atomValues$get === void 0 ? void 0 : _prev$atomValues$get.contents) !== ((_next$atomValues$get = next.atomValues.get(key)) === null || _next$atomValues$get === void 0 ? void 0 : _next$atomValues$get.contents) && getNode$4(key).shouldRestoreFromSnapshots) {
            keysToUpdate.add(key);
          }
        }
      }
      keysToUpdate.forEach((key) => {
        setRecoilValueLoadable$1(store, new AbstractRecoilValue$4(key), next.atomValues.has(key) ? Recoil_nullthrows(next.atomValues.get(key)) : DEFAULT_VALUE$3);
      });
      store.replaceState((state) => ({
        ...state,
        stateID: snapshot.getID()
      }));
    });
  }
  function useGotoRecoilSnapshot() {
    const storeRef = useStoreRef$3();
    return useCallback$2((snapshot) => gotoSnapshot(storeRef.current, snapshot), [storeRef]);
  }
  var Recoil_SnapshotHooks = {
    useRecoilSnapshot,
    gotoSnapshot,
    useGotoRecoilSnapshot,
    useRecoilTransactionObserver,
    useTransactionObservation_DEPRECATED,
    useTransactionSubscription_DEPRECATED: useTransactionSubscription
  };
  var {
    peekNodeInfo: peekNodeInfo$2
  } = Recoil_FunctionalCore;
  var {
    useStoreRef: useStoreRef$4
  } = Recoil_RecoilRoot;
  function useGetRecoilValueInfo() {
    const storeRef = useStoreRef$4();
    return ({
      key
    }) => peekNodeInfo$2(storeRef.current, storeRef.current.getState().currentTree, key);
  }
  var Recoil_useGetRecoilValueInfo = useGetRecoilValueInfo;
  var {
    reactMode: reactMode$4
  } = Recoil_ReactMode;
  var {
    RecoilRoot: RecoilRoot$1,
    useStoreRef: useStoreRef$5
  } = Recoil_RecoilRoot;
  var {
    useMemo: useMemo$2
  } = import_react.default;
  function useRecoilBridgeAcrossReactRoots() {
    if (reactMode$4().mode === "MUTABLE_SOURCE") {
      console.warn("Warning: There are known issues using useRecoilBridgeAcrossReactRoots() in recoil_mutable_source rendering mode.  Please consider upgrading to recoil_sync_external_store mode.");
    }
    const store = useStoreRef$5().current;
    return useMemo$2(() => {
      function RecoilBridge({
        children: children2
      }) {
        return /* @__PURE__ */ import_react.default.createElement(RecoilRoot$1, {
          store_INTERNAL: store
        }, children2);
      }
      return RecoilBridge;
    }, [store]);
  }
  var Recoil_useRecoilBridgeAcrossReactRoots = useRecoilBridgeAcrossReactRoots;
  var {
    loadableWithValue: loadableWithValue$1
  } = Recoil_Loadable$1;
  var {
    initializeNode: initializeNode$3
  } = Recoil_FunctionalCore;
  var {
    DEFAULT_VALUE: DEFAULT_VALUE$4,
    getNode: getNode$5
  } = Recoil_Node;
  var {
    copyTreeState: copyTreeState$1,
    getRecoilValueAsLoadable: getRecoilValueAsLoadable$3,
    invalidateDownstreams: invalidateDownstreams$1,
    writeLoadableToTreeState: writeLoadableToTreeState$1
  } = Recoil_RecoilValueInterface;
  function isAtom(recoilValue) {
    return getNode$5(recoilValue.key).nodeType === "atom";
  }
  var TransactionInterfaceImpl = class {
    constructor(store, treeState) {
      _defineProperty(this, "_store", void 0);
      _defineProperty(this, "_treeState", void 0);
      _defineProperty(this, "_changes", void 0);
      _defineProperty(this, "get", (recoilValue) => {
        if (this._changes.has(recoilValue.key)) {
          return this._changes.get(recoilValue.key);
        }
        if (!isAtom(recoilValue)) {
          throw Recoil_err("Reading selectors within atomicUpdate is not supported");
        }
        const loadable = getRecoilValueAsLoadable$3(this._store, recoilValue, this._treeState);
        if (loadable.state === "hasValue") {
          return loadable.contents;
        } else if (loadable.state === "hasError") {
          throw loadable.contents;
        } else {
          throw Recoil_err(`Expected Recoil atom ${recoilValue.key} to have a value, but it is in a loading state.`);
        }
      });
      _defineProperty(this, "set", (recoilState, valueOrUpdater) => {
        if (!isAtom(recoilState)) {
          throw Recoil_err("Setting selectors within atomicUpdate is not supported");
        }
        if (typeof valueOrUpdater === "function") {
          const current = this.get(recoilState);
          this._changes.set(recoilState.key, valueOrUpdater(current));
        } else {
          initializeNode$3(this._store, recoilState.key, "set");
          this._changes.set(recoilState.key, valueOrUpdater);
        }
      });
      _defineProperty(this, "reset", (recoilState) => {
        this.set(recoilState, DEFAULT_VALUE$4);
      });
      this._store = store;
      this._treeState = treeState;
      this._changes = /* @__PURE__ */ new Map();
    }
    newTreeState_INTERNAL() {
      if (this._changes.size === 0) {
        return this._treeState;
      }
      const newState = copyTreeState$1(this._treeState);
      for (const [k, v] of this._changes) {
        writeLoadableToTreeState$1(newState, k, loadableWithValue$1(v));
      }
      invalidateDownstreams$1(this._store, newState);
      return newState;
    }
  };
  function atomicUpdater(store) {
    return (fn) => {
      store.replaceState((treeState) => {
        const changeset = new TransactionInterfaceImpl(store, treeState);
        fn(changeset);
        return changeset.newTreeState_INTERNAL();
      });
    };
  }
  var Recoil_AtomicUpdates = {
    atomicUpdater
  };
  var Recoil_AtomicUpdates_1 = Recoil_AtomicUpdates.atomicUpdater;
  var Recoil_AtomicUpdates$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    atomicUpdater: Recoil_AtomicUpdates_1
  });
  function invariant(condition, message) {
    if (!condition) {
      throw new Error(message);
    }
  }
  var invariant_1 = invariant;
  var Recoil_invariant = invariant_1;
  var {
    atomicUpdater: atomicUpdater$1
  } = Recoil_AtomicUpdates$1;
  var {
    batchUpdates: batchUpdates$4
  } = Recoil_Batching;
  var {
    DEFAULT_VALUE: DEFAULT_VALUE$5
  } = Recoil_Node;
  var {
    useStoreRef: useStoreRef$6
  } = Recoil_RecoilRoot;
  var {
    refreshRecoilValue: refreshRecoilValue$1,
    setRecoilValue: setRecoilValue$3
  } = Recoil_RecoilValueInterface;
  var {
    cloneSnapshot: cloneSnapshot$2
  } = Recoil_Snapshot$1;
  var {
    gotoSnapshot: gotoSnapshot$1
  } = Recoil_SnapshotHooks;
  var {
    useCallback: useCallback$3
  } = import_react.default;
  var Sentinel = class {
  };
  var SENTINEL = new Sentinel();
  function recoilCallback(store, fn, args, extraInterface) {
    let ret = SENTINEL;
    let releaseSnapshot;
    batchUpdates$4(() => {
      const errMsg = "useRecoilCallback() expects a function that returns a function: it accepts a function of the type (RecoilInterface) => (Args) => ReturnType and returns a callback function (Args) => ReturnType, where RecoilInterface is an object {snapshot, set, ...} and Args and ReturnType are the argument and return types of the callback you want to create.  Please see the docs at recoiljs.org for details.";
      if (typeof fn !== "function") {
        throw Recoil_err(errMsg);
      }
      const callbackInterface = Recoil_lazyProxy({
        ...extraInterface !== null && extraInterface !== void 0 ? extraInterface : {},
        set: (node5, newValue) => setRecoilValue$3(store, node5, newValue),
        reset: (node5) => setRecoilValue$3(store, node5, DEFAULT_VALUE$5),
        refresh: (node5) => refreshRecoilValue$1(store, node5),
        gotoSnapshot: (snapshot) => gotoSnapshot$1(store, snapshot),
        transact_UNSTABLE: (transaction) => atomicUpdater$1(store)(transaction)
      }, {
        snapshot: () => {
          const snapshot = cloneSnapshot$2(store);
          releaseSnapshot = snapshot.retain();
          return snapshot;
        }
      });
      const callback = fn(callbackInterface);
      if (typeof callback !== "function") {
        throw Recoil_err(errMsg);
      }
      ret = callback(...args);
    });
    !!(ret instanceof Sentinel) ? true ? Recoil_invariant(false, "batchUpdates should return immediately") : Recoil_invariant(false) : void 0;
    if (Recoil_isPromise(ret)) {
      ret.finally(() => {
        var _releaseSnapshot;
        (_releaseSnapshot = releaseSnapshot) === null || _releaseSnapshot === void 0 ? void 0 : _releaseSnapshot();
      });
    } else {
      var _releaseSnapshot2;
      (_releaseSnapshot2 = releaseSnapshot) === null || _releaseSnapshot2 === void 0 ? void 0 : _releaseSnapshot2();
    }
    return ret;
  }
  function useRecoilCallback(fn, deps) {
    const storeRef = useStoreRef$6();
    return useCallback$3(
      (...args) => {
        return recoilCallback(storeRef.current, fn, args);
      },
      deps != null ? [...deps, storeRef] : void 0
    );
  }
  var Recoil_useRecoilCallback = {
    recoilCallback,
    useRecoilCallback
  };
  var {
    useStoreRef: useStoreRef$7
  } = Recoil_RecoilRoot;
  var {
    refreshRecoilValue: refreshRecoilValue$2
  } = Recoil_RecoilValueInterface;
  var {
    useCallback: useCallback$4
  } = import_react.default;
  function useRecoilRefresher(recoilValue) {
    const storeRef = useStoreRef$7();
    return useCallback$4(() => {
      const store = storeRef.current;
      refreshRecoilValue$2(store, recoilValue);
    }, [recoilValue, storeRef]);
  }
  var Recoil_useRecoilRefresher = useRecoilRefresher;
  var {
    atomicUpdater: atomicUpdater$2
  } = Recoil_AtomicUpdates$1;
  var {
    useStoreRef: useStoreRef$8
  } = Recoil_RecoilRoot;
  var {
    useMemo: useMemo$3
  } = import_react.default;
  function useRecoilTransaction(fn, deps) {
    const storeRef = useStoreRef$8();
    return useMemo$3(
      () => (...args) => {
        const atomicUpdate = atomicUpdater$2(storeRef.current);
        atomicUpdate((transactionInterface) => {
          fn(transactionInterface)(...args);
        });
      },
      deps != null ? [...deps, storeRef] : void 0
    );
  }
  var Recoil_useRecoilTransaction = useRecoilTransaction;
  var WrappedValue = class {
    constructor(value) {
      _defineProperty(this, "value", void 0);
      this.value = value;
    }
  };
  var Recoil_Wrapper = {
    WrappedValue
  };
  var Recoil_Wrapper_1 = Recoil_Wrapper.WrappedValue;
  var Recoil_Wrapper$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    WrappedValue: Recoil_Wrapper_1
  });
  var {
    isFastRefreshEnabled: isFastRefreshEnabled$2
  } = Recoil_ReactMode;
  var ChangedPathError = class extends Error {
  };
  var TreeCache = class {
    constructor(options) {
      var _options$onHit, _options$onSet, _options$mapNodeValue;
      _defineProperty(this, "_name", void 0);
      _defineProperty(this, "_numLeafs", void 0);
      _defineProperty(this, "_root", void 0);
      _defineProperty(this, "_onHit", void 0);
      _defineProperty(this, "_onSet", void 0);
      _defineProperty(this, "_mapNodeValue", void 0);
      this._name = options === null || options === void 0 ? void 0 : options.name;
      this._numLeafs = 0;
      this._root = null;
      this._onHit = (_options$onHit = options === null || options === void 0 ? void 0 : options.onHit) !== null && _options$onHit !== void 0 ? _options$onHit : () => {
      };
      this._onSet = (_options$onSet = options === null || options === void 0 ? void 0 : options.onSet) !== null && _options$onSet !== void 0 ? _options$onSet : () => {
      };
      this._mapNodeValue = (_options$mapNodeValue = options === null || options === void 0 ? void 0 : options.mapNodeValue) !== null && _options$mapNodeValue !== void 0 ? _options$mapNodeValue : (val) => val;
    }
    size() {
      return this._numLeafs;
    }
    root() {
      return this._root;
    }
    get(getNodeValue, handlers) {
      var _this$getLeafNode;
      return (_this$getLeafNode = this.getLeafNode(getNodeValue, handlers)) === null || _this$getLeafNode === void 0 ? void 0 : _this$getLeafNode.value;
    }
    getLeafNode(getNodeValue, handlers) {
      if (this._root == null) {
        return void 0;
      }
      let node5 = this._root;
      while (node5) {
        handlers === null || handlers === void 0 ? void 0 : handlers.onNodeVisit(node5);
        if (node5.type === "leaf") {
          this._onHit(node5);
          return node5;
        }
        const nodeValue = this._mapNodeValue(getNodeValue(node5.nodeKey));
        node5 = node5.branches.get(nodeValue);
      }
      return void 0;
    }
    set(route, value, handlers) {
      const addLeaf = () => {
        var _node2, _node3, _this$_root2, _handlers$onNodeVisit2;
        let node5;
        let branchKey;
        for (const [nodeKey, nodeValue] of route) {
          var _node, _handlers$onNodeVisit, _this$_root;
          const root3 = this._root;
          if ((root3 === null || root3 === void 0 ? void 0 : root3.type) === "leaf") {
            throw this.invalidCacheError();
          }
          const parent2 = node5;
          node5 = parent2 ? parent2.branches.get(branchKey) : root3;
          node5 = (_node = node5) !== null && _node !== void 0 ? _node : {
            type: "branch",
            nodeKey,
            parent: parent2,
            branches: /* @__PURE__ */ new Map(),
            branchKey
          };
          if (node5.type !== "branch" || node5.nodeKey !== nodeKey) {
            throw this.invalidCacheError();
          }
          parent2 === null || parent2 === void 0 ? void 0 : parent2.branches.set(branchKey, node5);
          handlers === null || handlers === void 0 ? void 0 : (_handlers$onNodeVisit = handlers.onNodeVisit) === null || _handlers$onNodeVisit === void 0 ? void 0 : _handlers$onNodeVisit.call(handlers, node5);
          branchKey = this._mapNodeValue(nodeValue);
          this._root = (_this$_root = this._root) !== null && _this$_root !== void 0 ? _this$_root : node5;
        }
        const oldLeaf = node5 ? (_node2 = node5) === null || _node2 === void 0 ? void 0 : _node2.branches.get(branchKey) : this._root;
        if (oldLeaf != null && (oldLeaf.type !== "leaf" || oldLeaf.branchKey !== branchKey)) {
          throw this.invalidCacheError();
        }
        const leafNode = {
          type: "leaf",
          value,
          parent: node5,
          branchKey
        };
        (_node3 = node5) === null || _node3 === void 0 ? void 0 : _node3.branches.set(branchKey, leafNode);
        this._root = (_this$_root2 = this._root) !== null && _this$_root2 !== void 0 ? _this$_root2 : leafNode;
        this._numLeafs++;
        this._onSet(leafNode);
        handlers === null || handlers === void 0 ? void 0 : (_handlers$onNodeVisit2 = handlers.onNodeVisit) === null || _handlers$onNodeVisit2 === void 0 ? void 0 : _handlers$onNodeVisit2.call(handlers, leafNode);
      };
      try {
        addLeaf();
      } catch (error) {
        if (error instanceof ChangedPathError) {
          this.clear();
          addLeaf();
        } else {
          throw error;
        }
      }
    }
    delete(leaf) {
      const root3 = this.root();
      if (!root3) {
        return false;
      }
      if (leaf === root3) {
        this._root = null;
        this._numLeafs = 0;
        return true;
      }
      let node5 = leaf.parent;
      let branchKey = leaf.branchKey;
      while (node5) {
        var _node4;
        node5.branches.delete(branchKey);
        if (node5 === root3) {
          if (node5.branches.size === 0) {
            this._root = null;
            this._numLeafs = 0;
          } else {
            this._numLeafs--;
          }
          return true;
        }
        if (node5.branches.size > 0) {
          break;
        }
        branchKey = (_node4 = node5) === null || _node4 === void 0 ? void 0 : _node4.branchKey;
        node5 = node5.parent;
      }
      for (; node5 !== root3; node5 = node5.parent) {
        if (node5 == null) {
          return false;
        }
      }
      this._numLeafs--;
      return true;
    }
    clear() {
      this._numLeafs = 0;
      this._root = null;
    }
    invalidCacheError() {
      const CHANGED_PATH_ERROR_MESSAGE = isFastRefreshEnabled$2() ? "Possible Fast Refresh module reload detected.  This may also be caused by an selector returning inconsistent values. Resetting cache." : "Invalid cache values.  This happens when selectors do not return consistent values for the same input dependency values.  That may also be caused when using Fast Refresh to change a selector implementation.  Resetting cache.";
      Recoil_recoverableViolation(CHANGED_PATH_ERROR_MESSAGE + (this._name != null ? ` - ${this._name}` : ""));
      throw new ChangedPathError();
    }
  };
  var Recoil_TreeCache = {
    TreeCache
  };
  var Recoil_TreeCache_1 = Recoil_TreeCache.TreeCache;
  var Recoil_TreeCache$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    TreeCache: Recoil_TreeCache_1
  });
  var LRUCache = class {
    constructor(options) {
      var _options$mapKey;
      _defineProperty(this, "_maxSize", void 0);
      _defineProperty(this, "_size", void 0);
      _defineProperty(this, "_head", void 0);
      _defineProperty(this, "_tail", void 0);
      _defineProperty(this, "_map", void 0);
      _defineProperty(this, "_keyMapper", void 0);
      this._maxSize = options.maxSize;
      this._size = 0;
      this._head = null;
      this._tail = null;
      this._map = /* @__PURE__ */ new Map();
      this._keyMapper = (_options$mapKey = options.mapKey) !== null && _options$mapKey !== void 0 ? _options$mapKey : (v) => v;
    }
    head() {
      return this._head;
    }
    tail() {
      return this._tail;
    }
    size() {
      return this._size;
    }
    maxSize() {
      return this._maxSize;
    }
    has(key) {
      return this._map.has(this._keyMapper(key));
    }
    get(key) {
      const mappedKey = this._keyMapper(key);
      const node5 = this._map.get(mappedKey);
      if (!node5) {
        return void 0;
      }
      this.set(key, node5.value);
      return node5.value;
    }
    set(key, val) {
      const mappedKey = this._keyMapper(key);
      const existingNode = this._map.get(mappedKey);
      if (existingNode) {
        this.delete(key);
      }
      const head = this.head();
      const node5 = {
        key,
        right: head,
        left: null,
        value: val
      };
      if (head) {
        head.left = node5;
      } else {
        this._tail = node5;
      }
      this._map.set(mappedKey, node5);
      this._head = node5;
      this._size++;
      this._maybeDeleteLRU();
    }
    _maybeDeleteLRU() {
      if (this.size() > this.maxSize()) {
        this.deleteLru();
      }
    }
    deleteLru() {
      const tail = this.tail();
      if (tail) {
        this.delete(tail.key);
      }
    }
    delete(key) {
      const mappedKey = this._keyMapper(key);
      if (!this._size || !this._map.has(mappedKey)) {
        return;
      }
      const node5 = Recoil_nullthrows(this._map.get(mappedKey));
      const right = node5.right;
      const left = node5.left;
      if (right) {
        right.left = node5.left;
      }
      if (left) {
        left.right = node5.right;
      }
      if (node5 === this.head()) {
        this._head = right;
      }
      if (node5 === this.tail()) {
        this._tail = left;
      }
      this._map.delete(mappedKey);
      this._size--;
    }
    clear() {
      this._size = 0;
      this._head = null;
      this._tail = null;
      this._map = /* @__PURE__ */ new Map();
    }
  };
  var Recoil_LRUCache = {
    LRUCache
  };
  var Recoil_LRUCache_1 = Recoil_LRUCache.LRUCache;
  var Recoil_LRUCache$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    LRUCache: Recoil_LRUCache_1
  });
  var {
    LRUCache: LRUCache$1
  } = Recoil_LRUCache$1;
  var {
    TreeCache: TreeCache$1
  } = Recoil_TreeCache$1;
  function treeCacheLRU({
    name,
    maxSize,
    mapNodeValue = (v) => v
  }) {
    const lruCache = new LRUCache$1({
      maxSize
    });
    const cache2 = new TreeCache$1({
      name,
      mapNodeValue,
      onHit: (node5) => {
        lruCache.set(node5, true);
      },
      onSet: (node5) => {
        const lruNode = lruCache.tail();
        lruCache.set(node5, true);
        if (lruNode && cache2.size() > maxSize) {
          cache2.delete(lruNode.key);
        }
      }
    });
    return cache2;
  }
  var Recoil_treeCacheLRU = treeCacheLRU;
  var TIME_WARNING_THRESHOLD_MS = 15;
  function stringify(x, opt, key) {
    if (typeof x === "string" && !x.includes('"') && !x.includes("\\")) {
      return `"${x}"`;
    }
    switch (typeof x) {
      case "undefined":
        return "";
      case "boolean":
        return x ? "true" : "false";
      case "number":
      case "symbol":
        return String(x);
      case "string":
        return JSON.stringify(x);
      case "function":
        if ((opt === null || opt === void 0 ? void 0 : opt.allowFunctions) !== true) {
          throw Recoil_err("Attempt to serialize function in a Recoil cache key");
        }
        return `__FUNCTION(${x.name})__`;
    }
    if (x === null) {
      return "null";
    }
    if (typeof x !== "object") {
      var _JSON$stringify;
      return (_JSON$stringify = JSON.stringify(x)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : "";
    }
    if (Recoil_isPromise(x)) {
      return "__PROMISE__";
    }
    if (Array.isArray(x)) {
      return `[${x.map((v, i) => stringify(v, opt, i.toString()))}]`;
    }
    if (typeof x.toJSON === "function") {
      return stringify(x.toJSON(key), opt, key);
    }
    if (x instanceof Map) {
      const obj = {};
      for (const [k, v] of x) {
        obj[typeof k === "string" ? k : stringify(k, opt)] = v;
      }
      return stringify(obj, opt, key);
    }
    if (x instanceof Set) {
      return stringify(Array.from(x).sort((a, b) => stringify(a, opt).localeCompare(stringify(b, opt))), opt, key);
    }
    if (Symbol !== void 0 && x[Symbol.iterator] != null && typeof x[Symbol.iterator] === "function") {
      return stringify(Array.from(x), opt, key);
    }
    return `{${Object.keys(x).filter((k) => x[k] !== void 0).sort().map((k) => `${stringify(k, opt)}:${stringify(x[k], opt, k)}`).join(",")}}`;
  }
  function stableStringify(x, opt = {
    allowFunctions: false
  }) {
    if (true) {
      if (typeof window !== "undefined") {
        const startTime = window.performance ? window.performance.now() : 0;
        const str = stringify(x, opt);
        const endTime = window.performance ? window.performance.now() : 0;
        if (endTime - startTime > TIME_WARNING_THRESHOLD_MS) {
          console.groupCollapsed(`Recoil: Spent ${endTime - startTime}ms computing a cache key`);
          console.warn(x, str);
          console.groupEnd();
        }
        return str;
      }
    }
    return stringify(x, opt);
  }
  var Recoil_stableStringify = stableStringify;
  var {
    TreeCache: TreeCache$2
  } = Recoil_TreeCache$1;
  var defaultPolicy = {
    equality: "reference",
    eviction: "keep-all",
    maxSize: Infinity
  };
  function treeCacheFromPolicy({
    equality = defaultPolicy.equality,
    eviction = defaultPolicy.eviction,
    maxSize = defaultPolicy.maxSize
  } = defaultPolicy, name) {
    const valueMapper = getValueMapper(equality);
    return getTreeCache(eviction, maxSize, valueMapper, name);
  }
  function getValueMapper(equality) {
    switch (equality) {
      case "reference":
        return (val) => val;
      case "value":
        return (val) => Recoil_stableStringify(val);
    }
    throw Recoil_err(`Unrecognized equality policy ${equality}`);
  }
  function getTreeCache(eviction, maxSize, mapNodeValue, name) {
    switch (eviction) {
      case "keep-all":
        return new TreeCache$2({
          name,
          mapNodeValue
        });
      case "lru":
        return Recoil_treeCacheLRU({
          name,
          maxSize: Recoil_nullthrows(maxSize),
          mapNodeValue
        });
      case "most-recent":
        return Recoil_treeCacheLRU({
          name,
          maxSize: 1,
          mapNodeValue
        });
    }
    throw Recoil_err(`Unrecognized eviction policy ${eviction}`);
  }
  var Recoil_treeCacheFromPolicy = treeCacheFromPolicy;
  function isNode(object2) {
    var _ownerDocument, _doc$defaultView;
    if (typeof window === "undefined") {
      return false;
    }
    const doc = object2 != null ? (_ownerDocument = object2.ownerDocument) !== null && _ownerDocument !== void 0 ? _ownerDocument : object2 : document;
    const defaultView = (_doc$defaultView = doc.defaultView) !== null && _doc$defaultView !== void 0 ? _doc$defaultView : window;
    return !!(object2 != null && (typeof defaultView.Node === "function" ? object2 instanceof defaultView.Node : typeof object2 === "object" && typeof object2.nodeType === "number" && typeof object2.nodeName === "string"));
  }
  var Recoil_isNode = isNode;
  var {
    isReactNative: isReactNative$1,
    isWindow: isWindow$1
  } = Recoil_Environment;
  function shouldNotBeFrozen(value) {
    if (value === null || typeof value !== "object") {
      return true;
    }
    switch (typeof value.$$typeof) {
      case "symbol":
        return true;
      case "number":
        return true;
    }
    if (value["@@__IMMUTABLE_ITERABLE__@@"] != null || value["@@__IMMUTABLE_KEYED__@@"] != null || value["@@__IMMUTABLE_INDEXED__@@"] != null || value["@@__IMMUTABLE_ORDERED__@@"] != null || value["@@__IMMUTABLE_RECORD__@@"] != null) {
      return true;
    }
    if (Recoil_isNode(value)) {
      return true;
    }
    if (Recoil_isPromise(value)) {
      return true;
    }
    if (value instanceof Error) {
      return true;
    }
    if (ArrayBuffer.isView(value)) {
      return true;
    }
    if (!isReactNative$1 && isWindow$1(value)) {
      return true;
    }
    return false;
  }
  function deepFreezeValue(value) {
    if (typeof value !== "object" || shouldNotBeFrozen(value)) {
      return;
    }
    Object.freeze(value);
    for (const key in value) {
      if (Object.prototype.hasOwnProperty.call(value, key)) {
        const prop = value[key];
        if (typeof prop === "object" && prop != null && !Object.isFrozen(prop)) {
          deepFreezeValue(prop);
        }
      }
    }
    Object.seal(value);
  }
  var Recoil_deepFreezeValue = deepFreezeValue;
  function startPerfBlock(_id) {
    return () => null;
  }
  var Recoil_PerformanceTimings = {
    startPerfBlock
  };
  var {
    isLoadable: isLoadable$1,
    loadableWithError: loadableWithError$1,
    loadableWithPromise: loadableWithPromise$1,
    loadableWithValue: loadableWithValue$2
  } = Recoil_Loadable$1;
  var {
    WrappedValue: WrappedValue$1
  } = Recoil_Wrapper$1;
  var {
    getNodeLoadable: getNodeLoadable$2,
    peekNodeLoadable: peekNodeLoadable$1,
    setNodeValue: setNodeValue$3
  } = Recoil_FunctionalCore;
  var {
    saveDepsToStore: saveDepsToStore$1
  } = Recoil_Graph;
  var {
    DEFAULT_VALUE: DEFAULT_VALUE$6,
    getConfigDeletionHandler: getConfigDeletionHandler$1,
    getNode: getNode$6,
    registerNode: registerNode$1
  } = Recoil_Node;
  var {
    isRecoilValue: isRecoilValue$3
  } = Recoil_RecoilValue$1;
  var {
    markRecoilValueModified: markRecoilValueModified$1
  } = Recoil_RecoilValueInterface;
  var {
    retainedByOptionWithDefault: retainedByOptionWithDefault$1
  } = Recoil_Retention;
  var {
    recoilCallback: recoilCallback$1
  } = Recoil_useRecoilCallback;
  var {
    startPerfBlock: startPerfBlock$1
  } = Recoil_PerformanceTimings;
  var Canceled = class {
  };
  var CANCELED = new Canceled();
  var dependencyStack = [];
  var waitingStores = /* @__PURE__ */ new Map();
  var getNewExecutionID = (() => {
    let executionID = 0;
    return () => executionID++;
  })();
  function selector(options) {
    let recoilValue = null;
    const {
      key,
      get: get2,
      cachePolicy_UNSTABLE: cachePolicy
    } = options;
    const set2 = options.set != null ? options.set : void 0;
    if (true) {
      if (typeof key !== "string") {
        throw Recoil_err("A key option with a unique string value must be provided when creating a selector.");
      }
      if (typeof get2 !== "function") {
        throw Recoil_err("Selectors must specify a get callback option to get the selector value.");
      }
    }
    const discoveredDependencyNodeKeys = /* @__PURE__ */ new Set();
    const cache2 = Recoil_treeCacheFromPolicy(cachePolicy !== null && cachePolicy !== void 0 ? cachePolicy : {
      equality: "reference",
      eviction: "keep-all"
    }, key);
    const retainedBy = retainedByOptionWithDefault$1(options.retainedBy_UNSTABLE);
    const executionInfoMap = /* @__PURE__ */ new Map();
    let liveStoresCount = 0;
    function selectorIsLive() {
      return !Recoil_gkx("recoil_memory_managament_2020") || liveStoresCount > 0;
    }
    function selectorInit(store) {
      store.getState().knownSelectors.add(key);
      liveStoresCount++;
      return () => {
        liveStoresCount--;
      };
    }
    function selectorShouldDeleteConfigOnRelease() {
      return getConfigDeletionHandler$1(key) !== void 0 && !selectorIsLive();
    }
    function resolveAsync(store, state, executionID, loadable, depValues) {
      setCache(state, loadable, depValues);
      notifyStoresOfResolvedAsync(store, executionID);
    }
    function notifyStoresOfResolvedAsync(store, executionID) {
      if (isLatestExecution(store, executionID)) {
        clearExecutionInfo(store);
      }
      notifyWaitingStores(executionID, true);
    }
    function notifyStoresOfNewAsyncDep(store, executionID) {
      if (isLatestExecution(store, executionID)) {
        const executionInfo = Recoil_nullthrows(getExecutionInfo(store));
        executionInfo.stateVersions.clear();
        notifyWaitingStores(executionID, false);
      }
    }
    function notifyWaitingStores(executionID, clearWaitlist) {
      const stores = waitingStores.get(executionID);
      if (stores != null) {
        for (const waitingStore of stores) {
          markRecoilValueModified$1(waitingStore, Recoil_nullthrows(recoilValue));
        }
        if (clearWaitlist) {
          waitingStores.delete(executionID);
        }
      }
    }
    function markStoreWaitingForResolvedAsync(store, executionID) {
      let stores = waitingStores.get(executionID);
      if (stores == null) {
        waitingStores.set(executionID, stores = /* @__PURE__ */ new Set());
      }
      stores.add(store);
    }
    function wrapResultPromise(store, promise, state, depValues, executionID, loadingDepsState) {
      return promise.then((value) => {
        if (!selectorIsLive()) {
          clearExecutionInfo(store);
          throw CANCELED;
        }
        const loadable = loadableWithValue$2(value);
        resolveAsync(store, state, executionID, loadable, depValues);
        return value;
      }).catch((errorOrPromise) => {
        if (!selectorIsLive()) {
          clearExecutionInfo(store);
          throw CANCELED;
        }
        if (Recoil_isPromise(errorOrPromise)) {
          return wrapPendingDependencyPromise(store, errorOrPromise, state, depValues, executionID, loadingDepsState);
        }
        const loadable = loadableWithError$1(errorOrPromise);
        resolveAsync(store, state, executionID, loadable, depValues);
        throw errorOrPromise;
      });
    }
    function wrapPendingDependencyPromise(store, promise, state, existingDeps, executionID, loadingDepsState) {
      return promise.then((resolvedDep) => {
        if (!selectorIsLive()) {
          clearExecutionInfo(store);
          throw CANCELED;
        }
        if (loadingDepsState.loadingDepKey != null && loadingDepsState.loadingDepPromise === promise) {
          state.atomValues.set(loadingDepsState.loadingDepKey, loadableWithValue$2(resolvedDep));
        } else {
          store.getState().knownSelectors.forEach((nodeKey) => {
            state.atomValues.delete(nodeKey);
          });
        }
        const cachedLoadable = getLoadableFromCacheAndUpdateDeps(store, state);
        if (cachedLoadable && cachedLoadable.state !== "loading") {
          if (isLatestExecution(store, executionID) || getExecutionInfo(store) == null) {
            notifyStoresOfResolvedAsync(store, executionID);
          }
          if (cachedLoadable.state === "hasValue") {
            return cachedLoadable.contents;
          } else {
            throw cachedLoadable.contents;
          }
        }
        if (!isLatestExecution(store, executionID)) {
          const executionInfo = getInProgressExecutionInfo(store, state);
          if (executionInfo != null) {
            return executionInfo.loadingLoadable.contents;
          }
        }
        const [loadable, depValues] = evaluateSelectorGetter(store, state, executionID);
        if (loadable.state !== "loading") {
          resolveAsync(store, state, executionID, loadable, depValues);
        }
        if (loadable.state === "hasError") {
          throw loadable.contents;
        }
        return loadable.contents;
      }).catch((error) => {
        if (error instanceof Canceled) {
          throw CANCELED;
        }
        if (!selectorIsLive()) {
          clearExecutionInfo(store);
          throw CANCELED;
        }
        const loadable = loadableWithError$1(error);
        resolveAsync(store, state, executionID, loadable, existingDeps);
        throw error;
      });
    }
    function updateDeps(store, state, deps, executionID) {
      var _store$getState, _store$getState$curre, _store$getState2, _store$getState2$next;
      if (isLatestExecution(store, executionID) || state.version === ((_store$getState = store.getState()) === null || _store$getState === void 0 ? void 0 : (_store$getState$curre = _store$getState.currentTree) === null || _store$getState$curre === void 0 ? void 0 : _store$getState$curre.version) || state.version === ((_store$getState2 = store.getState()) === null || _store$getState2 === void 0 ? void 0 : (_store$getState2$next = _store$getState2.nextTree) === null || _store$getState2$next === void 0 ? void 0 : _store$getState2$next.version)) {
        var _store$getState$nextT, _store$getState3, _store$getState3$next;
        saveDepsToStore$1(key, deps, store, (_store$getState$nextT = (_store$getState3 = store.getState()) === null || _store$getState3 === void 0 ? void 0 : (_store$getState3$next = _store$getState3.nextTree) === null || _store$getState3$next === void 0 ? void 0 : _store$getState3$next.version) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store.getState().currentTree.version);
      }
      for (const nodeKey of deps) {
        discoveredDependencyNodeKeys.add(nodeKey);
      }
    }
    function evaluateSelectorGetter(store, state, executionID) {
      const endPerfBlock = startPerfBlock$1(key);
      let duringSynchronousExecution = true;
      let duringAsynchronousExecution = true;
      const finishEvaluation = () => {
        endPerfBlock();
        duringAsynchronousExecution = false;
      };
      let result;
      let resultIsError = false;
      let loadable;
      const loadingDepsState = {
        loadingDepKey: null,
        loadingDepPromise: null
      };
      const depValues = /* @__PURE__ */ new Map();
      function getRecoilValue({
        key: depKey
      }) {
        const depLoadable = getNodeLoadable$2(store, state, depKey);
        depValues.set(depKey, depLoadable);
        if (!duringSynchronousExecution) {
          updateDeps(store, state, new Set(depValues.keys()), executionID);
          notifyStoresOfNewAsyncDep(store, executionID);
        }
        switch (depLoadable.state) {
          case "hasValue":
            return depLoadable.contents;
          case "hasError":
            throw depLoadable.contents;
          case "loading":
            loadingDepsState.loadingDepKey = depKey;
            loadingDepsState.loadingDepPromise = depLoadable.contents;
            throw depLoadable.contents;
        }
        throw Recoil_err("Invalid Loadable state");
      }
      const getCallback = (fn) => {
        return (...args) => {
          if (duringAsynchronousExecution) {
            throw Recoil_err("Callbacks from getCallback() should only be called asynchronously after the selector is evalutated.  It can be used for selectors to return objects with callbacks that can work with Recoil state without a subscription.");
          }
          !(recoilValue != null) ? true ? Recoil_invariant(false, "Recoil Value can never be null") : Recoil_invariant(false) : void 0;
          return recoilCallback$1(
            store,
            fn,
            args,
            {
              node: recoilValue
            }
          );
        };
      };
      try {
        result = get2({
          get: getRecoilValue,
          getCallback
        });
        result = isRecoilValue$3(result) ? getRecoilValue(result) : result;
        if (isLoadable$1(result)) {
          if (result.state === "hasError") {
            resultIsError = true;
          }
          result = result.contents;
        }
        if (Recoil_isPromise(result)) {
          result = wrapResultPromise(store, result, state, depValues, executionID, loadingDepsState).finally(finishEvaluation);
        } else {
          finishEvaluation();
        }
        result = result instanceof WrappedValue$1 ? result.value : result;
      } catch (errorOrDepPromise) {
        result = errorOrDepPromise;
        if (Recoil_isPromise(result)) {
          result = wrapPendingDependencyPromise(store, result, state, depValues, executionID, loadingDepsState).finally(finishEvaluation);
        } else {
          resultIsError = true;
          finishEvaluation();
        }
      }
      if (resultIsError) {
        loadable = loadableWithError$1(result);
      } else if (Recoil_isPromise(result)) {
        loadable = loadableWithPromise$1(result);
      } else {
        loadable = loadableWithValue$2(result);
      }
      duringSynchronousExecution = false;
      updateExecutionInfoDepValues(store, executionID, depValues);
      updateDeps(store, state, new Set(depValues.keys()), executionID);
      return [loadable, depValues];
    }
    function getLoadableFromCacheAndUpdateDeps(store, state) {
      let cachedLoadable = state.atomValues.get(key);
      if (cachedLoadable != null) {
        return cachedLoadable;
      }
      const depsAfterCacheLookup = /* @__PURE__ */ new Set();
      try {
        cachedLoadable = cache2.get((nodeKey) => {
          !(typeof nodeKey === "string") ? true ? Recoil_invariant(false, "Cache nodeKey is type string") : Recoil_invariant(false) : void 0;
          return getNodeLoadable$2(store, state, nodeKey).contents;
        }, {
          onNodeVisit: (node5) => {
            if (node5.type === "branch" && node5.nodeKey !== key) {
              depsAfterCacheLookup.add(node5.nodeKey);
            }
          }
        });
      } catch (error) {
        throw Recoil_err(`Problem with cache lookup for selector "${key}": ${error.message}`);
      }
      if (cachedLoadable) {
        var _getExecutionInfo;
        state.atomValues.set(key, cachedLoadable);
        updateDeps(store, state, depsAfterCacheLookup, (_getExecutionInfo = getExecutionInfo(store)) === null || _getExecutionInfo === void 0 ? void 0 : _getExecutionInfo.executionID);
      }
      return cachedLoadable;
    }
    function getSelectorLoadableAndUpdateDeps(store, state) {
      const cachedVal = getLoadableFromCacheAndUpdateDeps(store, state);
      if (cachedVal != null) {
        clearExecutionInfo(store);
        return cachedVal;
      }
      const inProgressExecutionInfo = getInProgressExecutionInfo(store, state);
      if (inProgressExecutionInfo != null) {
        var _inProgressExecutionI;
        if (((_inProgressExecutionI = inProgressExecutionInfo.loadingLoadable) === null || _inProgressExecutionI === void 0 ? void 0 : _inProgressExecutionI.state) === "loading") {
          markStoreWaitingForResolvedAsync(store, inProgressExecutionInfo.executionID);
        }
        return inProgressExecutionInfo.loadingLoadable;
      }
      const newExecutionID = getNewExecutionID();
      const [loadable, newDepValues] = evaluateSelectorGetter(store, state, newExecutionID);
      if (loadable.state === "loading") {
        setExecutionInfo(store, newExecutionID, loadable, newDepValues, state);
        markStoreWaitingForResolvedAsync(store, newExecutionID);
      } else {
        clearExecutionInfo(store);
        setCache(state, loadable, newDepValues);
      }
      return loadable;
    }
    function getInProgressExecutionInfo(store, state) {
      const pendingExecutions = Recoil_concatIterables([executionInfoMap.has(store) ? [Recoil_nullthrows(executionInfoMap.get(store))] : [], Recoil_mapIterable(Recoil_filterIterable(executionInfoMap, ([s]) => s !== store), ([, execInfo]) => execInfo)]);
      function anyDepChanged(execDepValues) {
        for (const [depKey, execLoadable] of execDepValues) {
          if (!getNodeLoadable$2(store, state, depKey).is(execLoadable)) {
            return true;
          }
        }
        return false;
      }
      for (const execInfo of pendingExecutions) {
        if (execInfo.stateVersions.get(state.version) || !anyDepChanged(execInfo.depValuesDiscoveredSoFarDuringAsyncWork)) {
          execInfo.stateVersions.set(state.version, true);
          return execInfo;
        } else {
          execInfo.stateVersions.set(state.version, false);
        }
      }
      return void 0;
    }
    function getExecutionInfo(store) {
      return executionInfoMap.get(store);
    }
    function setExecutionInfo(store, newExecutionID, loadable, depValues, state) {
      executionInfoMap.set(store, {
        depValuesDiscoveredSoFarDuringAsyncWork: depValues,
        executionID: newExecutionID,
        loadingLoadable: loadable,
        stateVersions: /* @__PURE__ */ new Map([[state.version, true]])
      });
    }
    function updateExecutionInfoDepValues(store, executionID, depValues) {
      if (isLatestExecution(store, executionID)) {
        const executionInfo = getExecutionInfo(store);
        if (executionInfo != null) {
          executionInfo.depValuesDiscoveredSoFarDuringAsyncWork = depValues;
        }
      }
    }
    function clearExecutionInfo(store) {
      executionInfoMap.delete(store);
    }
    function isLatestExecution(store, executionID) {
      var _getExecutionInfo2;
      return executionID === ((_getExecutionInfo2 = getExecutionInfo(store)) === null || _getExecutionInfo2 === void 0 ? void 0 : _getExecutionInfo2.executionID);
    }
    function depValuesToDepRoute(depValues) {
      return Array.from(depValues.entries()).map(([depKey, valLoadable]) => [depKey, valLoadable.contents]);
    }
    function setCache(state, loadable, depValues) {
      if (true) {
        if (loadable.state !== "loading" && Boolean(options.dangerouslyAllowMutability) === false) {
          Recoil_deepFreezeValue(loadable.contents);
        }
      }
      state.atomValues.set(key, loadable);
      try {
        cache2.set(depValuesToDepRoute(depValues), loadable);
      } catch (error) {
        throw Recoil_err(`Problem with setting cache for selector "${key}": ${error.message}`);
      }
    }
    function detectCircularDependencies(fn) {
      if (dependencyStack.includes(key)) {
        const message = `Recoil selector has circular dependencies: ${dependencyStack.slice(dependencyStack.indexOf(key)).join(" \u2192 ")}`;
        return loadableWithError$1(Recoil_err(message));
      }
      dependencyStack.push(key);
      try {
        return fn();
      } finally {
        dependencyStack.pop();
      }
    }
    function selectorPeek(store, state) {
      const cachedLoadable = state.atomValues.get(key);
      if (cachedLoadable != null) {
        return cachedLoadable;
      }
      return cache2.get((nodeKey) => {
        var _peekNodeLoadable;
        !(typeof nodeKey === "string") ? true ? Recoil_invariant(false, "Cache nodeKey is type string") : Recoil_invariant(false) : void 0;
        return (_peekNodeLoadable = peekNodeLoadable$1(store, state, nodeKey)) === null || _peekNodeLoadable === void 0 ? void 0 : _peekNodeLoadable.contents;
      });
    }
    function selectorGet(store, state) {
      return detectCircularDependencies(() => getSelectorLoadableAndUpdateDeps(store, state));
    }
    function invalidateSelector(state) {
      state.atomValues.delete(key);
    }
    function clearSelectorCache(store, treeState) {
      !(recoilValue != null) ? true ? Recoil_invariant(false, "Recoil Value can never be null") : Recoil_invariant(false) : void 0;
      for (const nodeKey of discoveredDependencyNodeKeys) {
        var _node$clearCache;
        const node5 = getNode$6(nodeKey);
        (_node$clearCache = node5.clearCache) === null || _node$clearCache === void 0 ? void 0 : _node$clearCache.call(node5, store, treeState);
      }
      discoveredDependencyNodeKeys.clear();
      invalidateSelector(treeState);
      cache2.clear();
      markRecoilValueModified$1(store, recoilValue);
    }
    if (set2 != null) {
      const selectorSet = (store, state, newValue) => {
        let syncSelectorSetFinished = false;
        const writes = /* @__PURE__ */ new Map();
        function getRecoilValue({
          key: depKey
        }) {
          if (syncSelectorSetFinished) {
            throw Recoil_err("Recoil: Async selector sets are not currently supported.");
          }
          const loadable = getNodeLoadable$2(store, state, depKey);
          if (loadable.state === "hasValue") {
            return loadable.contents;
          } else if (loadable.state === "loading") {
            const msg = `Getting value of asynchronous atom or selector "${depKey}" in a pending state while setting selector "${key}" is not yet supported.`;
            Recoil_recoverableViolation(msg);
            throw Recoil_err(msg);
          } else {
            throw loadable.contents;
          }
        }
        function setRecoilState(recoilState, valueOrUpdater) {
          if (syncSelectorSetFinished) {
            const msg = "Recoil: Async selector sets are not currently supported.";
            Recoil_recoverableViolation(msg);
            throw Recoil_err(msg);
          }
          const setValue = typeof valueOrUpdater === "function" ? valueOrUpdater(getRecoilValue(recoilState)) : valueOrUpdater;
          const upstreamWrites = setNodeValue$3(store, state, recoilState.key, setValue);
          upstreamWrites.forEach((v, k) => writes.set(k, v));
        }
        function resetRecoilState(recoilState) {
          setRecoilState(recoilState, DEFAULT_VALUE$6);
        }
        const ret = set2({
          set: setRecoilState,
          get: getRecoilValue,
          reset: resetRecoilState
        }, newValue);
        if (ret !== void 0) {
          throw Recoil_isPromise(ret) ? Recoil_err("Recoil: Async selector sets are not currently supported.") : Recoil_err("Recoil: selector set should be a void function.");
        }
        syncSelectorSetFinished = true;
        return writes;
      };
      return recoilValue = registerNode$1({
        key,
        nodeType: "selector",
        peek: selectorPeek,
        get: selectorGet,
        set: selectorSet,
        init: selectorInit,
        invalidate: invalidateSelector,
        clearCache: clearSelectorCache,
        shouldDeleteConfigOnRelease: selectorShouldDeleteConfigOnRelease,
        dangerouslyAllowMutability: options.dangerouslyAllowMutability,
        shouldRestoreFromSnapshots: false,
        retainedBy
      });
    } else {
      return recoilValue = registerNode$1({
        key,
        nodeType: "selector",
        peek: selectorPeek,
        get: selectorGet,
        init: selectorInit,
        invalidate: invalidateSelector,
        clearCache: clearSelectorCache,
        shouldDeleteConfigOnRelease: selectorShouldDeleteConfigOnRelease,
        dangerouslyAllowMutability: options.dangerouslyAllowMutability,
        shouldRestoreFromSnapshots: false,
        retainedBy
      });
    }
  }
  selector.value = (value) => new WrappedValue$1(value);
  var Recoil_selector = selector;
  var {
    isLoadable: isLoadable$2,
    loadableWithError: loadableWithError$2,
    loadableWithPromise: loadableWithPromise$2,
    loadableWithValue: loadableWithValue$3
  } = Recoil_Loadable$1;
  var {
    WrappedValue: WrappedValue$2
  } = Recoil_Wrapper$1;
  var {
    peekNodeInfo: peekNodeInfo$3
  } = Recoil_FunctionalCore;
  var {
    DEFAULT_VALUE: DEFAULT_VALUE$7,
    DefaultValue: DefaultValue$2,
    getConfigDeletionHandler: getConfigDeletionHandler$2,
    registerNode: registerNode$2,
    setConfigDeletionHandler: setConfigDeletionHandler$1
  } = Recoil_Node;
  var {
    isRecoilValue: isRecoilValue$4
  } = Recoil_RecoilValue$1;
  var {
    getRecoilValueAsLoadable: getRecoilValueAsLoadable$4,
    markRecoilValueModified: markRecoilValueModified$2,
    setRecoilValue: setRecoilValue$4,
    setRecoilValueLoadable: setRecoilValueLoadable$2
  } = Recoil_RecoilValueInterface;
  var {
    retainedByOptionWithDefault: retainedByOptionWithDefault$2
  } = Recoil_Retention;
  var unwrap = (x) => x instanceof WrappedValue$2 ? x.value : x;
  function baseAtom(options) {
    const {
      key,
      persistence_UNSTABLE: persistence
    } = options;
    const retainedBy = retainedByOptionWithDefault$2(options.retainedBy_UNSTABLE);
    let liveStoresCount = 0;
    function unwrapPromise(promise) {
      return loadableWithPromise$2(promise.then((value) => {
        defaultLoadable = loadableWithValue$3(value);
        return value;
      }).catch((error) => {
        defaultLoadable = loadableWithError$2(error);
        throw error;
      }));
    }
    let defaultLoadable = Recoil_isPromise(options.default) ? unwrapPromise(options.default) : isLoadable$2(options.default) ? options.default.state === "loading" ? unwrapPromise(options.default.contents) : options.default : loadableWithValue$3(unwrap(options.default));
    maybeFreezeValueOrPromise(defaultLoadable.contents);
    let cachedAnswerForUnvalidatedValue = void 0;
    const cleanupEffectsByStore = /* @__PURE__ */ new Map();
    function maybeFreezeValueOrPromise(valueOrPromise) {
      if (true) {
        if (options.dangerouslyAllowMutability !== true) {
          if (Recoil_isPromise(valueOrPromise)) {
            return valueOrPromise.then((value) => {
              Recoil_deepFreezeValue(value);
              return value;
            });
          } else {
            Recoil_deepFreezeValue(valueOrPromise);
            return valueOrPromise;
          }
        }
      }
      return valueOrPromise;
    }
    function wrapPendingPromise(store, promise) {
      const wrappedPromise = promise.then((value) => {
        var _store$getState$nextT, _state$atomValues$get;
        const state = (_store$getState$nextT = store.getState().nextTree) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store.getState().currentTree;
        if (((_state$atomValues$get = state.atomValues.get(key)) === null || _state$atomValues$get === void 0 ? void 0 : _state$atomValues$get.contents) === wrappedPromise) {
          setRecoilValue$4(store, node5, value);
        }
        return value;
      }).catch((error) => {
        var _store$getState$nextT2, _state$atomValues$get2;
        const state = (_store$getState$nextT2 = store.getState().nextTree) !== null && _store$getState$nextT2 !== void 0 ? _store$getState$nextT2 : store.getState().currentTree;
        if (((_state$atomValues$get2 = state.atomValues.get(key)) === null || _state$atomValues$get2 === void 0 ? void 0 : _state$atomValues$get2.contents) === wrappedPromise) {
          setRecoilValueLoadable$2(store, node5, loadableWithError$2(error));
        }
        throw error;
      });
      return wrappedPromise;
    }
    function initAtom(store, initState, trigger) {
      var _options$effects;
      liveStoresCount++;
      const cleanupAtom = () => {
        var _cleanupEffectsByStor;
        liveStoresCount--;
        (_cleanupEffectsByStor = cleanupEffectsByStore.get(store)) === null || _cleanupEffectsByStor === void 0 ? void 0 : _cleanupEffectsByStor.forEach((cleanup) => cleanup());
        cleanupEffectsByStore.delete(store);
      };
      store.getState().knownAtoms.add(key);
      if (defaultLoadable.state === "loading") {
        const notifyDefaultSubscribers = () => {
          var _store$getState$nextT3;
          const state = (_store$getState$nextT3 = store.getState().nextTree) !== null && _store$getState$nextT3 !== void 0 ? _store$getState$nextT3 : store.getState().currentTree;
          if (!state.atomValues.has(key)) {
            markRecoilValueModified$2(store, node5);
          }
        };
        defaultLoadable.contents.finally(notifyDefaultSubscribers);
      }
      const effects = (_options$effects = options.effects) !== null && _options$effects !== void 0 ? _options$effects : options.effects_UNSTABLE;
      if (effects != null) {
        let getLoadable = function(recoilValue) {
          if (isDuringInit && recoilValue.key === key) {
            const retValue = initValue;
            return retValue instanceof DefaultValue$2 ? peekAtom(store, initState) : Recoil_isPromise(retValue) ? loadableWithPromise$2(retValue.then((v) => v instanceof DefaultValue$2 ? defaultLoadable.toPromise() : v)) : loadableWithValue$3(retValue);
          }
          return getRecoilValueAsLoadable$4(store, recoilValue);
        }, getPromise = function(recoilValue) {
          return getLoadable(recoilValue).toPromise();
        }, getInfo_UNSTABLE = function(recoilValue) {
          var _store$getState$nextT4;
          const info = peekNodeInfo$3(store, (_store$getState$nextT4 = store.getState().nextTree) !== null && _store$getState$nextT4 !== void 0 ? _store$getState$nextT4 : store.getState().currentTree, recoilValue.key);
          return isDuringInit && recoilValue.key === key && !(initValue instanceof DefaultValue$2) ? {
            ...info,
            isSet: true,
            loadable: getLoadable(recoilValue)
          } : info;
        };
        let initValue = DEFAULT_VALUE$7;
        let isDuringInit = true;
        let isInitError = false;
        let pendingSetSelf = null;
        const setSelf = (effect) => (valueOrUpdater) => {
          if (isDuringInit) {
            const currentLoadable = getLoadable(node5);
            const currentValue = currentLoadable.state === "hasValue" ? currentLoadable.contents : DEFAULT_VALUE$7;
            initValue = typeof valueOrUpdater === "function" ? valueOrUpdater(currentValue) : valueOrUpdater;
            if (Recoil_isPromise(initValue)) {
              initValue = initValue.then((value) => {
                pendingSetSelf = {
                  effect,
                  value
                };
                return value;
              });
            }
          } else {
            if (Recoil_isPromise(valueOrUpdater)) {
              throw Recoil_err("Setting atoms to async values is not implemented.");
            }
            if (typeof valueOrUpdater !== "function") {
              pendingSetSelf = {
                effect,
                value: unwrap(valueOrUpdater)
              };
            }
            setRecoilValue$4(store, node5, typeof valueOrUpdater === "function" ? (currentValue) => {
              const newValue = unwrap(
                valueOrUpdater(currentValue)
              );
              pendingSetSelf = {
                effect,
                value: newValue
              };
              return newValue;
            } : unwrap(valueOrUpdater));
          }
        };
        const resetSelf = (effect) => () => setSelf(effect)(DEFAULT_VALUE$7);
        const onSet = (effect) => (handler) => {
          var _cleanupEffectsByStor2;
          const {
            release
          } = store.subscribeToTransactions((currentStore) => {
            var _currentTree$atomValu;
            let {
              currentTree,
              previousTree
            } = currentStore.getState();
            if (!previousTree) {
              Recoil_recoverableViolation("Transaction subscribers notified without a next tree being present -- this is a bug in Recoil");
              previousTree = currentTree;
            }
            const newLoadable = (_currentTree$atomValu = currentTree.atomValues.get(key)) !== null && _currentTree$atomValu !== void 0 ? _currentTree$atomValu : defaultLoadable;
            if (newLoadable.state === "hasValue") {
              var _previousTree$atomVal, _pendingSetSelf, _pendingSetSelf2, _pendingSetSelf3;
              const newValue = newLoadable.contents;
              const oldLoadable = (_previousTree$atomVal = previousTree.atomValues.get(key)) !== null && _previousTree$atomVal !== void 0 ? _previousTree$atomVal : defaultLoadable;
              const oldValue = oldLoadable.state === "hasValue" ? oldLoadable.contents : DEFAULT_VALUE$7;
              if (((_pendingSetSelf = pendingSetSelf) === null || _pendingSetSelf === void 0 ? void 0 : _pendingSetSelf.effect) !== effect || ((_pendingSetSelf2 = pendingSetSelf) === null || _pendingSetSelf2 === void 0 ? void 0 : _pendingSetSelf2.value) !== newValue) {
                handler(newValue, oldValue, !currentTree.atomValues.has(key));
              } else if (((_pendingSetSelf3 = pendingSetSelf) === null || _pendingSetSelf3 === void 0 ? void 0 : _pendingSetSelf3.effect) === effect) {
                pendingSetSelf = null;
              }
            }
          }, key);
          cleanupEffectsByStore.set(store, [...(_cleanupEffectsByStor2 = cleanupEffectsByStore.get(store)) !== null && _cleanupEffectsByStor2 !== void 0 ? _cleanupEffectsByStor2 : [], release]);
        };
        for (const effect of effects) {
          try {
            const cleanup = effect({
              node: node5,
              storeID: store.storeID,
              parentStoreID_UNSTABLE: store.parentStoreID,
              trigger,
              setSelf: setSelf(effect),
              resetSelf: resetSelf(effect),
              onSet: onSet(effect),
              getPromise,
              getLoadable,
              getInfo_UNSTABLE
            });
            if (cleanup != null) {
              var _cleanupEffectsByStor3;
              cleanupEffectsByStore.set(store, [...(_cleanupEffectsByStor3 = cleanupEffectsByStore.get(store)) !== null && _cleanupEffectsByStor3 !== void 0 ? _cleanupEffectsByStor3 : [], cleanup]);
            }
          } catch (error) {
            initValue = error;
            isInitError = true;
          }
        }
        isDuringInit = false;
        if (!(initValue instanceof DefaultValue$2)) {
          var _store$getState$nextT5;
          const initLoadable = isInitError ? loadableWithError$2(initValue) : Recoil_isPromise(initValue) ? loadableWithPromise$2(wrapPendingPromise(store, initValue)) : loadableWithValue$3(unwrap(initValue));
          maybeFreezeValueOrPromise(initLoadable.contents);
          initState.atomValues.set(key, initLoadable);
          (_store$getState$nextT5 = store.getState().nextTree) === null || _store$getState$nextT5 === void 0 ? void 0 : _store$getState$nextT5.atomValues.set(key, initLoadable);
        }
      }
      return cleanupAtom;
    }
    function peekAtom(_store, state) {
      var _ref2, _state$atomValues$get3;
      return (_ref2 = (_state$atomValues$get3 = state.atomValues.get(key)) !== null && _state$atomValues$get3 !== void 0 ? _state$atomValues$get3 : cachedAnswerForUnvalidatedValue) !== null && _ref2 !== void 0 ? _ref2 : defaultLoadable;
    }
    function getAtom(_store, state) {
      if (state.atomValues.has(key)) {
        return Recoil_nullthrows(state.atomValues.get(key));
      } else if (state.nonvalidatedAtoms.has(key)) {
        if (cachedAnswerForUnvalidatedValue != null) {
          return cachedAnswerForUnvalidatedValue;
        }
        if (persistence == null) {
          Recoil_expectationViolation(`Tried to restore a persisted value for atom ${key} but it has no persistence settings.`);
          return defaultLoadable;
        }
        const nonvalidatedValue = state.nonvalidatedAtoms.get(key);
        const validatorResult = persistence.validator(nonvalidatedValue, DEFAULT_VALUE$7);
        const validatedValueLoadable = validatorResult instanceof DefaultValue$2 ? defaultLoadable : loadableWithValue$3(validatorResult);
        cachedAnswerForUnvalidatedValue = validatedValueLoadable;
        return cachedAnswerForUnvalidatedValue;
      } else {
        return defaultLoadable;
      }
    }
    function invalidateAtom() {
      cachedAnswerForUnvalidatedValue = void 0;
    }
    function setAtom(_store, state, newValue) {
      if (state.atomValues.has(key)) {
        const existing = Recoil_nullthrows(state.atomValues.get(key));
        if (existing.state === "hasValue" && newValue === existing.contents) {
          return /* @__PURE__ */ new Map();
        }
      } else if (!state.nonvalidatedAtoms.has(key) && newValue instanceof DefaultValue$2) {
        return /* @__PURE__ */ new Map();
      }
      maybeFreezeValueOrPromise(newValue);
      cachedAnswerForUnvalidatedValue = void 0;
      return (/* @__PURE__ */ new Map()).set(key, loadableWithValue$3(newValue));
    }
    function shouldDeleteConfigOnReleaseAtom() {
      return getConfigDeletionHandler$2(key) !== void 0 && liveStoresCount <= 0;
    }
    const node5 = registerNode$2({
      key,
      nodeType: "atom",
      peek: peekAtom,
      get: getAtom,
      set: setAtom,
      init: initAtom,
      invalidate: invalidateAtom,
      shouldDeleteConfigOnRelease: shouldDeleteConfigOnReleaseAtom,
      dangerouslyAllowMutability: options.dangerouslyAllowMutability,
      persistence_UNSTABLE: options.persistence_UNSTABLE ? {
        type: options.persistence_UNSTABLE.type,
        backButton: options.persistence_UNSTABLE.backButton
      } : void 0,
      shouldRestoreFromSnapshots: true,
      retainedBy
    });
    return node5;
  }
  function atom(options) {
    if (true) {
      if (typeof options.key !== "string") {
        throw Recoil_err("A key option with a unique string value must be provided when creating an atom.");
      }
    }
    const {
      ...restOptions
    } = options;
    const optionsDefault = "default" in options ? options.default : new Promise(() => {
    });
    if (isRecoilValue$4(optionsDefault)) {
      return atomWithFallback({
        ...restOptions,
        default: optionsDefault
      });
    } else {
      return baseAtom({
        ...restOptions,
        default: optionsDefault
      });
    }
  }
  function atomWithFallback(options) {
    const base = atom({
      ...options,
      default: DEFAULT_VALUE$7,
      persistence_UNSTABLE: options.persistence_UNSTABLE === void 0 ? void 0 : {
        ...options.persistence_UNSTABLE,
        validator: (storedValue) => storedValue instanceof DefaultValue$2 ? storedValue : Recoil_nullthrows(options.persistence_UNSTABLE).validator(storedValue, DEFAULT_VALUE$7)
      },
      effects: options.effects,
      effects_UNSTABLE: options.effects_UNSTABLE
    });
    const sel = Recoil_selector({
      key: `${options.key}__withFallback`,
      get: ({
        get: get2
      }) => {
        const baseValue = get2(base);
        return baseValue instanceof DefaultValue$2 ? options.default : baseValue;
      },
      set: ({
        set: set2
      }, newValue) => set2(base, newValue),
      cachePolicy_UNSTABLE: {
        eviction: "most-recent"
      },
      dangerouslyAllowMutability: options.dangerouslyAllowMutability
    });
    setConfigDeletionHandler$1(sel.key, getConfigDeletionHandler$2(options.key));
    return sel;
  }
  atom.value = (value) => new WrappedValue$2(value);
  var Recoil_atom = atom;
  var MapCache = class {
    constructor(options) {
      var _options$mapKey;
      _defineProperty(this, "_map", void 0);
      _defineProperty(this, "_keyMapper", void 0);
      this._map = /* @__PURE__ */ new Map();
      this._keyMapper = (_options$mapKey = options === null || options === void 0 ? void 0 : options.mapKey) !== null && _options$mapKey !== void 0 ? _options$mapKey : (v) => v;
    }
    size() {
      return this._map.size;
    }
    has(key) {
      return this._map.has(this._keyMapper(key));
    }
    get(key) {
      return this._map.get(this._keyMapper(key));
    }
    set(key, val) {
      this._map.set(this._keyMapper(key), val);
    }
    delete(key) {
      this._map.delete(this._keyMapper(key));
    }
    clear() {
      this._map.clear();
    }
  };
  var Recoil_MapCache = {
    MapCache
  };
  var Recoil_MapCache_1 = Recoil_MapCache.MapCache;
  var Recoil_MapCache$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    MapCache: Recoil_MapCache_1
  });
  var {
    LRUCache: LRUCache$2
  } = Recoil_LRUCache$1;
  var {
    MapCache: MapCache$1
  } = Recoil_MapCache$1;
  var defaultPolicy$1 = {
    equality: "reference",
    eviction: "none",
    maxSize: Infinity
  };
  function cacheFromPolicy({
    equality = defaultPolicy$1.equality,
    eviction = defaultPolicy$1.eviction,
    maxSize = defaultPolicy$1.maxSize
  } = defaultPolicy$1) {
    const valueMapper = getValueMapper$1(equality);
    const cache2 = getCache(eviction, maxSize, valueMapper);
    return cache2;
  }
  function getValueMapper$1(equality) {
    switch (equality) {
      case "reference":
        return (val) => val;
      case "value":
        return (val) => Recoil_stableStringify(val);
    }
    throw Recoil_err(`Unrecognized equality policy ${equality}`);
  }
  function getCache(eviction, maxSize, mapKey) {
    switch (eviction) {
      case "keep-all":
        return new MapCache$1({
          mapKey
        });
      case "lru":
        return new LRUCache$2({
          mapKey,
          maxSize: Recoil_nullthrows(maxSize)
        });
      case "most-recent":
        return new LRUCache$2({
          mapKey,
          maxSize: 1
        });
    }
    throw Recoil_err(`Unrecognized eviction policy ${eviction}`);
  }
  var Recoil_cacheFromPolicy = cacheFromPolicy;
  var {
    setConfigDeletionHandler: setConfigDeletionHandler$2
  } = Recoil_Node;
  function atomFamily(options) {
    var _options$cachePolicyF, _options$cachePolicyF2;
    const atomCache = Recoil_cacheFromPolicy({
      equality: (_options$cachePolicyF = (_options$cachePolicyF2 = options.cachePolicyForParams_UNSTABLE) === null || _options$cachePolicyF2 === void 0 ? void 0 : _options$cachePolicyF2.equality) !== null && _options$cachePolicyF !== void 0 ? _options$cachePolicyF : "value",
      eviction: "keep-all"
    });
    return (params) => {
      var _stableStringify, _options$effects;
      const cachedAtom = atomCache.get(params);
      if (cachedAtom != null) {
        return cachedAtom;
      }
      const {
        cachePolicyForParams_UNSTABLE,
        ...atomOptions
      } = options;
      const optionsDefault = "default" in options ? options.default : new Promise(() => {
      });
      const newAtom = Recoil_atom({
        ...atomOptions,
        key: `${options.key}__${(_stableStringify = Recoil_stableStringify(params)) !== null && _stableStringify !== void 0 ? _stableStringify : "void"}`,
        default: typeof optionsDefault === "function" ? optionsDefault(params) : optionsDefault,
        retainedBy_UNSTABLE: typeof options.retainedBy_UNSTABLE === "function" ? options.retainedBy_UNSTABLE(params) : options.retainedBy_UNSTABLE,
        effects: typeof options.effects === "function" ? options.effects(params) : typeof options.effects_UNSTABLE === "function" ? options.effects_UNSTABLE(params) : (_options$effects = options.effects) !== null && _options$effects !== void 0 ? _options$effects : options.effects_UNSTABLE
      });
      atomCache.set(params, newAtom);
      setConfigDeletionHandler$2(newAtom.key, () => {
        atomCache.delete(params);
      });
      return newAtom;
    };
  }
  var Recoil_atomFamily = atomFamily;
  var {
    setConfigDeletionHandler: setConfigDeletionHandler$3
  } = Recoil_Node;
  var nextIndex = 0;
  function selectorFamily(options) {
    var _options$cachePolicyF, _options$cachePolicyF2;
    const selectorCache = Recoil_cacheFromPolicy({
      equality: (_options$cachePolicyF = (_options$cachePolicyF2 = options.cachePolicyForParams_UNSTABLE) === null || _options$cachePolicyF2 === void 0 ? void 0 : _options$cachePolicyF2.equality) !== null && _options$cachePolicyF !== void 0 ? _options$cachePolicyF : "value",
      eviction: "keep-all"
    });
    return (params) => {
      var _stableStringify;
      let cachedSelector;
      try {
        cachedSelector = selectorCache.get(params);
      } catch (error) {
        throw Recoil_err(`Problem with cache lookup for selector ${options.key}: ${error.message}`);
      }
      if (cachedSelector != null) {
        return cachedSelector;
      }
      const myKey = `${options.key}__selectorFamily/${(_stableStringify = Recoil_stableStringify(params, {
        allowFunctions: true
      })) !== null && _stableStringify !== void 0 ? _stableStringify : "void"}/${nextIndex++}`;
      const myGet = (callbacks) => options.get(params)(callbacks);
      const myCachePolicy = options.cachePolicy_UNSTABLE;
      const retainedBy = typeof options.retainedBy_UNSTABLE === "function" ? options.retainedBy_UNSTABLE(params) : options.retainedBy_UNSTABLE;
      let newSelector;
      if (options.set != null) {
        const set2 = options.set;
        const mySet = (callbacks, newValue) => set2(params)(callbacks, newValue);
        newSelector = Recoil_selector({
          key: myKey,
          get: myGet,
          set: mySet,
          cachePolicy_UNSTABLE: myCachePolicy,
          dangerouslyAllowMutability: options.dangerouslyAllowMutability,
          retainedBy_UNSTABLE: retainedBy
        });
      } else {
        newSelector = Recoil_selector({
          key: myKey,
          get: myGet,
          cachePolicy_UNSTABLE: myCachePolicy,
          dangerouslyAllowMutability: options.dangerouslyAllowMutability,
          retainedBy_UNSTABLE: retainedBy
        });
      }
      selectorCache.set(params, newSelector);
      setConfigDeletionHandler$3(newSelector.key, () => {
        selectorCache.delete(params);
      });
      return newSelector;
    };
  }
  var Recoil_selectorFamily = selectorFamily;
  var constantSelector = Recoil_selectorFamily({
    key: "__constant",
    get: (constant2) => () => constant2,
    cachePolicyForParams_UNSTABLE: {
      equality: "reference"
    }
  });
  function constSelector(constant2) {
    return constantSelector(constant2);
  }
  var Recoil_constSelector = constSelector;
  var throwingSelector = Recoil_selectorFamily({
    key: "__error",
    get: (message) => () => {
      throw Recoil_err(message);
    },
    cachePolicyForParams_UNSTABLE: {
      equality: "reference"
    }
  });
  function errorSelector(message) {
    return throwingSelector(message);
  }
  var Recoil_errorSelector = errorSelector;
  function readOnlySelector(atom2) {
    return atom2;
  }
  var Recoil_readOnlySelector = readOnlySelector;
  var {
    loadableWithError: loadableWithError$3,
    loadableWithPromise: loadableWithPromise$3,
    loadableWithValue: loadableWithValue$4
  } = Recoil_Loadable$1;
  function concurrentRequests(getRecoilValue, deps) {
    const results = Array(deps.length).fill(void 0);
    const exceptions = Array(deps.length).fill(void 0);
    for (const [i, dep] of deps.entries()) {
      try {
        results[i] = getRecoilValue(dep);
      } catch (e) {
        exceptions[i] = e;
      }
    }
    return [results, exceptions];
  }
  function isError(exp) {
    return exp != null && !Recoil_isPromise(exp);
  }
  function unwrapDependencies(dependencies) {
    return Array.isArray(dependencies) ? dependencies : Object.getOwnPropertyNames(dependencies).map((key) => dependencies[key]);
  }
  function wrapResults(dependencies, results) {
    return Array.isArray(dependencies) ? results : Object.getOwnPropertyNames(dependencies).reduce((out, key, idx) => ({
      ...out,
      [key]: results[idx]
    }), {});
  }
  function wrapLoadables(dependencies, results, exceptions) {
    const output = exceptions.map((exception, idx) => exception == null ? loadableWithValue$4(results[idx]) : Recoil_isPromise(exception) ? loadableWithPromise$3(exception) : loadableWithError$3(exception));
    return wrapResults(dependencies, output);
  }
  function combineAsyncResultsWithSyncResults(syncResults, asyncResults) {
    return asyncResults.map((result, idx) => result === void 0 ? syncResults[idx] : result);
  }
  var waitForNone = Recoil_selectorFamily({
    key: "__waitForNone",
    get: (dependencies) => ({
      get: get2
    }) => {
      const deps = unwrapDependencies(dependencies);
      const [results, exceptions] = concurrentRequests(get2, deps);
      return wrapLoadables(dependencies, results, exceptions);
    },
    dangerouslyAllowMutability: true
  });
  var waitForAny = Recoil_selectorFamily({
    key: "__waitForAny",
    get: (dependencies) => ({
      get: get2
    }) => {
      const deps = unwrapDependencies(dependencies);
      const [results, exceptions] = concurrentRequests(get2, deps);
      if (exceptions.some((exp) => !Recoil_isPromise(exp))) {
        return wrapLoadables(dependencies, results, exceptions);
      }
      return new Promise((resolve) => {
        for (const [i, exp] of exceptions.entries()) {
          if (Recoil_isPromise(exp)) {
            exp.then((result) => {
              results[i] = result;
              exceptions[i] = void 0;
              resolve(wrapLoadables(dependencies, results, exceptions));
            }).catch((error) => {
              exceptions[i] = error;
              resolve(wrapLoadables(dependencies, results, exceptions));
            });
          }
        }
      });
    },
    dangerouslyAllowMutability: true
  });
  var waitForAll = Recoil_selectorFamily({
    key: "__waitForAll",
    get: (dependencies) => ({
      get: get2
    }) => {
      const deps = unwrapDependencies(dependencies);
      const [results, exceptions] = concurrentRequests(get2, deps);
      if (exceptions.every((exp) => exp == null)) {
        return wrapResults(dependencies, results);
      }
      const error = exceptions.find(isError);
      if (error != null) {
        throw error;
      }
      return Promise.all(exceptions).then((exceptionResults) => wrapResults(dependencies, combineAsyncResultsWithSyncResults(results, exceptionResults)));
    },
    dangerouslyAllowMutability: true
  });
  var waitForAllSettled = Recoil_selectorFamily({
    key: "__waitForAllSettled",
    get: (dependencies) => ({
      get: get2
    }) => {
      const deps = unwrapDependencies(dependencies);
      const [results, exceptions] = concurrentRequests(get2, deps);
      if (exceptions.every((exp) => !Recoil_isPromise(exp))) {
        return wrapLoadables(dependencies, results, exceptions);
      }
      return Promise.all(exceptions.map((exp, i) => Recoil_isPromise(exp) ? exp.then((result) => {
        results[i] = result;
        exceptions[i] = void 0;
      }).catch((error) => {
        results[i] = void 0;
        exceptions[i] = error;
      }) : null)).then(() => wrapLoadables(dependencies, results, exceptions));
    },
    dangerouslyAllowMutability: true
  });
  var noWait = Recoil_selectorFamily({
    key: "__noWait",
    get: (dependency) => ({
      get: get2
    }) => {
      try {
        return Recoil_selector.value(loadableWithValue$4(get2(dependency)));
      } catch (exception) {
        return Recoil_selector.value(Recoil_isPromise(exception) ? loadableWithPromise$3(exception) : loadableWithError$3(exception));
      }
    },
    dangerouslyAllowMutability: true
  });
  var Recoil_WaitFor = {
    waitForNone,
    waitForAny,
    waitForAll,
    waitForAllSettled,
    noWait
  };
  var {
    RecoilLoadable
  } = Recoil_Loadable$1;
  var {
    DefaultValue: DefaultValue$3
  } = Recoil_Node;
  var {
    RecoilRoot: RecoilRoot$2,
    useRecoilStoreID: useRecoilStoreID$1
  } = Recoil_RecoilRoot;
  var {
    isRecoilValue: isRecoilValue$5
  } = Recoil_RecoilValue$1;
  var {
    retentionZone: retentionZone$1
  } = Recoil_RetentionZone;
  var {
    freshSnapshot: freshSnapshot$2
  } = Recoil_Snapshot$1;
  var {
    useRecoilState: useRecoilState$1,
    useRecoilState_TRANSITION_SUPPORT_UNSTABLE: useRecoilState_TRANSITION_SUPPORT_UNSTABLE$1,
    useRecoilStateLoadable: useRecoilStateLoadable$1,
    useRecoilValue: useRecoilValue$1,
    useRecoilValue_TRANSITION_SUPPORT_UNSTABLE: useRecoilValue_TRANSITION_SUPPORT_UNSTABLE$1,
    useRecoilValueLoadable: useRecoilValueLoadable$1,
    useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE: useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE$1,
    useResetRecoilState: useResetRecoilState$1,
    useSetRecoilState: useSetRecoilState$1
  } = Recoil_Hooks;
  var {
    useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,
    useRecoilSnapshot: useRecoilSnapshot$1,
    useRecoilTransactionObserver: useRecoilTransactionObserver$1
  } = Recoil_SnapshotHooks;
  var {
    useRecoilCallback: useRecoilCallback$1
  } = Recoil_useRecoilCallback;
  var {
    noWait: noWait$1,
    waitForAll: waitForAll$1,
    waitForAllSettled: waitForAllSettled$1,
    waitForAny: waitForAny$1,
    waitForNone: waitForNone$1
  } = Recoil_WaitFor;
  var Recoil_index = {
    DefaultValue: DefaultValue$3,
    isRecoilValue: isRecoilValue$5,
    RecoilLoadable,
    RecoilEnv: Recoil_RecoilEnv,
    RecoilRoot: RecoilRoot$2,
    useRecoilStoreID: useRecoilStoreID$1,
    useRecoilBridgeAcrossReactRoots_UNSTABLE: Recoil_useRecoilBridgeAcrossReactRoots,
    atom: Recoil_atom,
    selector: Recoil_selector,
    atomFamily: Recoil_atomFamily,
    selectorFamily: Recoil_selectorFamily,
    constSelector: Recoil_constSelector,
    errorSelector: Recoil_errorSelector,
    readOnlySelector: Recoil_readOnlySelector,
    noWait: noWait$1,
    waitForNone: waitForNone$1,
    waitForAny: waitForAny$1,
    waitForAll: waitForAll$1,
    waitForAllSettled: waitForAllSettled$1,
    useRecoilValue: useRecoilValue$1,
    useRecoilValueLoadable: useRecoilValueLoadable$1,
    useRecoilState: useRecoilState$1,
    useRecoilStateLoadable: useRecoilStateLoadable$1,
    useSetRecoilState: useSetRecoilState$1,
    useResetRecoilState: useResetRecoilState$1,
    useGetRecoilValueInfo_UNSTABLE: Recoil_useGetRecoilValueInfo,
    useRecoilRefresher_UNSTABLE: Recoil_useRecoilRefresher,
    useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE: useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE$1,
    useRecoilValue_TRANSITION_SUPPORT_UNSTABLE: useRecoilValue_TRANSITION_SUPPORT_UNSTABLE$1,
    useRecoilState_TRANSITION_SUPPORT_UNSTABLE: useRecoilState_TRANSITION_SUPPORT_UNSTABLE$1,
    useRecoilCallback: useRecoilCallback$1,
    useRecoilTransaction_UNSTABLE: Recoil_useRecoilTransaction,
    useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,
    useRecoilSnapshot: useRecoilSnapshot$1,
    useRecoilTransactionObserver_UNSTABLE: useRecoilTransactionObserver$1,
    snapshot_UNSTABLE: freshSnapshot$2,
    useRetain: Recoil_useRetain,
    retentionZone: retentionZone$1
  };
  var Recoil_index_1 = Recoil_index.DefaultValue;
  var Recoil_index_2 = Recoil_index.isRecoilValue;
  var Recoil_index_3 = Recoil_index.RecoilLoadable;
  var Recoil_index_4 = Recoil_index.RecoilEnv;
  var Recoil_index_5 = Recoil_index.RecoilRoot;
  var Recoil_index_6 = Recoil_index.useRecoilStoreID;
  var Recoil_index_7 = Recoil_index.useRecoilBridgeAcrossReactRoots_UNSTABLE;
  var Recoil_index_8 = Recoil_index.atom;
  var Recoil_index_9 = Recoil_index.selector;
  var Recoil_index_10 = Recoil_index.atomFamily;
  var Recoil_index_11 = Recoil_index.selectorFamily;
  var Recoil_index_12 = Recoil_index.constSelector;
  var Recoil_index_13 = Recoil_index.errorSelector;
  var Recoil_index_14 = Recoil_index.readOnlySelector;
  var Recoil_index_15 = Recoil_index.noWait;
  var Recoil_index_16 = Recoil_index.waitForNone;
  var Recoil_index_17 = Recoil_index.waitForAny;
  var Recoil_index_18 = Recoil_index.waitForAll;
  var Recoil_index_19 = Recoil_index.waitForAllSettled;
  var Recoil_index_20 = Recoil_index.useRecoilValue;
  var Recoil_index_21 = Recoil_index.useRecoilValueLoadable;
  var Recoil_index_22 = Recoil_index.useRecoilState;
  var Recoil_index_23 = Recoil_index.useRecoilStateLoadable;
  var Recoil_index_24 = Recoil_index.useSetRecoilState;
  var Recoil_index_25 = Recoil_index.useResetRecoilState;
  var Recoil_index_26 = Recoil_index.useGetRecoilValueInfo_UNSTABLE;
  var Recoil_index_27 = Recoil_index.useRecoilRefresher_UNSTABLE;
  var Recoil_index_28 = Recoil_index.useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE;
  var Recoil_index_29 = Recoil_index.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE;
  var Recoil_index_30 = Recoil_index.useRecoilState_TRANSITION_SUPPORT_UNSTABLE;
  var Recoil_index_31 = Recoil_index.useRecoilCallback;
  var Recoil_index_32 = Recoil_index.useRecoilTransaction_UNSTABLE;
  var Recoil_index_33 = Recoil_index.useGotoRecoilSnapshot;
  var Recoil_index_34 = Recoil_index.useRecoilSnapshot;
  var Recoil_index_35 = Recoil_index.useRecoilTransactionObserver_UNSTABLE;
  var Recoil_index_36 = Recoil_index.snapshot_UNSTABLE;
  var Recoil_index_37 = Recoil_index.useRetain;
  var Recoil_index_38 = Recoil_index.retentionZone;

  // node_modules/styletron-engine-atomic/dist-browser-esm/sequential-id-generator.js
  var SequentialIDGenerator = class {
    constructor(prefix2 = "") {
      this.prefix = prefix2;
      this.count = 0;
      this.offset = 374;
      this.msb = 1295;
      this.power = 2;
    }
    next() {
      const id = this.increment().toString(36);
      return this.prefix ? `${this.prefix}${id}` : id;
    }
    increment() {
      const id = this.count + this.offset;
      if (id === this.msb) {
        this.offset += (this.msb + 1) * 9;
        this.msb = Math.pow(36, ++this.power) - 1;
      }
      this.count++;
      return id;
    }
  };

  // node_modules/styletron-engine-atomic/dist-browser-esm/sort-css-media-queries.js
  var minMaxWidth = /(!?\(\s*min(-device-)?-width).+\(\s*max(-device)?-width/i;
  var minWidth = /\(\s*min(-device)?-width/i;
  var maxMinWidth = /(!?\(\s*max(-device)?-width).+\(\s*min(-device)?-width/i;
  var maxWidth = /\(\s*max(-device)?-width/i;
  var isMinWidth = _testQuery(minMaxWidth, maxMinWidth, minWidth);
  var isMaxWidth = _testQuery(maxMinWidth, minMaxWidth, maxWidth);
  var minMaxHeight = /(!?\(\s*min(-device)?-height).+\(\s*max(-device)?-height/i;
  var minHeight = /\(\s*min(-device)?-height/i;
  var maxMinHeight = /(!?\(\s*max(-device)?-height).+\(\s*min(-device)?-height/i;
  var maxHeight = /\(\s*max(-device)?-height/i;
  var isMinHeight = _testQuery(minMaxHeight, maxMinHeight, minHeight);
  var isMaxHeight = _testQuery(maxMinHeight, minMaxHeight, maxHeight);
  var isPrint = /print/i;
  var isPrintOnly = /^print$/i;
  var maxValue = Number.MAX_VALUE;
  function _getQueryLength(length) {
    const matches = /(-?\d*\.?\d+)(ch|em|ex|px|rem)/.exec(length);
    if (matches === null) {
      return maxValue;
    }
    let number = matches[1];
    const unit = matches[2];
    switch (unit) {
      case "ch":
        number = parseFloat(number) * 8.8984375;
        break;
      case "em":
      case "rem":
        number = parseFloat(number) * 16;
        break;
      case "ex":
        number = parseFloat(number) * 8.296875;
        break;
      case "px":
        number = parseFloat(number);
        break;
    }
    return +number;
  }
  function _testQuery(doubleTestTrue, doubleTestFalse, singleTest) {
    return function(query) {
      if (doubleTestTrue.test(query)) {
        return true;
      } else if (doubleTestFalse.test(query)) {
        return false;
      }
      return singleTest.test(query);
    };
  }
  function _testIsPrint(a, b) {
    const isPrintA = isPrint.test(a);
    const isPrintOnlyA = isPrintOnly.test(a);
    const isPrintB = isPrint.test(b);
    const isPrintOnlyB = isPrintOnly.test(b);
    if (isPrintA && isPrintB) {
      if (!isPrintOnlyA && isPrintOnlyB) {
        return 1;
      }
      if (isPrintOnlyA && !isPrintOnlyB) {
        return -1;
      }
      return a.localeCompare(b);
    }
    if (isPrintA) {
      return 1;
    }
    if (isPrintB) {
      return -1;
    }
    return null;
  }
  function sortCSSmq(a, b) {
    if (a === "") {
      return -1;
    }
    if (b === "") {
      return 1;
    }
    const testIsPrint = _testIsPrint(a, b);
    if (testIsPrint !== null) {
      return testIsPrint;
    }
    const minA = isMinWidth(a) || isMinHeight(a);
    const maxA = isMaxWidth(a) || isMaxHeight(a);
    const minB = isMinWidth(b) || isMinHeight(b);
    const maxB = isMaxWidth(b) || isMaxHeight(b);
    if (minA && maxB) {
      return -1;
    }
    if (maxA && minB) {
      return 1;
    }
    const lengthA = _getQueryLength(a);
    const lengthB = _getQueryLength(b);
    if (lengthA === maxValue && lengthB === maxValue) {
      return a.localeCompare(b);
    } else if (lengthA === maxValue) {
      return 1;
    } else if (lengthB === maxValue) {
      return -1;
    }
    if (lengthA > lengthB) {
      if (maxA) {
        return -1;
      }
      return 1;
    }
    if (lengthA < lengthB) {
      if (maxA) {
        return 1;
      }
      return -1;
    }
    return a.localeCompare(b);
  }

  // node_modules/styletron-engine-atomic/dist-browser-esm/cache.js
  var MultiCache = class {
    constructor(idGenerator, onNewCache, onNewValue) {
      this.idGenerator = idGenerator;
      this.onNewCache = onNewCache;
      this.onNewValue = onNewValue;
      this.sortedCacheKeys = [];
      this.caches = {};
    }
    getCache(key) {
      if (!this.caches[key]) {
        const cache2 = new Cache(this.idGenerator, this.onNewValue);
        cache2.key = key;
        this.sortedCacheKeys.push(key);
        this.sortedCacheKeys.sort(sortCSSmq);
        const keyIndex = this.sortedCacheKeys.indexOf(key);
        const insertBeforeMedia = keyIndex < this.sortedCacheKeys.length - 1 ? this.sortedCacheKeys[keyIndex + 1] : void 0;
        this.caches[key] = cache2;
        this.onNewCache(key, cache2, insertBeforeMedia);
      }
      return this.caches[key];
    }
    getSortedCacheKeys() {
      return this.sortedCacheKeys;
    }
  };
  var Cache = class {
    constructor(idGenerator, onNewValue) {
      this.cache = {};
      this.idGenerator = idGenerator;
      this.onNewValue = onNewValue;
    }
    addValue(key, value) {
      const cached = this.cache[key];
      if (cached) {
        return cached;
      }
      const id = this.idGenerator.next();
      this.cache[key] = id;
      this.onNewValue(this, id, value);
      return id;
    }
  };

  // node_modules/styletron-engine-atomic/dist-browser-esm/hyphenate-style-name.js
  var uppercasePattern = /[A-Z]/g;
  var msPattern = /^ms-/;
  var cache = {};
  function hyphenateStyleName(prop) {
    return prop in cache ? cache[prop] : cache[prop] = prop.replace(uppercasePattern, "-$&").toLowerCase().replace(msPattern, "-ms-");
  }

  // node_modules/styletron-engine-atomic/dist-browser-esm/validate-no-mixed-hand.js
  var shorthandMap = {
    "list-style": ["list-style-type", "list-style-position", "list-style-image"],
    margin: ["margin-top", "margin-right", "margin-bottom", "margin-left"],
    outline: ["outline-width", "outline-style", "outline-color"],
    padding: ["padding-top", "padding-right", "padding-bottom", "padding-left"],
    background: ["background-image", "background-position", "background-size", "background-repeat", "background-origin", "background-clip", "background-attachment", "background-color"],
    border: ["border-top-width", "border-right-width", "border-bottom-width", "border-left-width", "border-width", "border-top-style", "border-right-style", "border-bottom-style", "border-left-style", "border-style", "border-top-color", "border-right-color", "border-bottom-color", "border-left-color", "border-color"],
    "border-color": ["border-top-color", "border-right-color", "border-bottom-color", "border-left-color"],
    "border-style": ["border-top-style", "border-right-style", "border-bottom-style", "border-left-style"],
    "border-width": ["border-top-width", "border-right-width", "border-bottom-width", "border-left-width"],
    "border-top": ["border-top-width", "border-top-style", "border-top-color"],
    "border-right": ["border-right-width", "border-right-style", "border-right-color"],
    "border-bottom": ["border-bottom-width", "border-bottom-style", "border-bottom-color"],
    "border-left": ["border-left-width", "border-left-style", "border-left-color"],
    "border-radius": ["border-top-left-radius", "border-top-right-radius", "border-bottom-right-radius", "border-bottom-left-radius"],
    "border-image": ["border-image-source", "border-image-slice", "border-image-width", "border-image-outset", "border-image-repeat"],
    font: ["font-style", "font-variant-ligatures", "font-variant-alternates", "font-variant-caps", "font-variant-numeric", "font-variant-east-asian", "font-variant", "font-weight", "font-stretch", "font-size", "line-height", "font-family"],
    "font-variant": ["font-variant-ligatures", "font-variant-alternates", "font-variant-caps", "font-variant-numeric", "font-variant-east-asian"],
    flex: ["flex-grow", "flex-shrink", "flex-basis"],
    "flex-flow": ["flex-direction", "flex-wrap"],
    grid: ["grid-template-rows", "grid-template-columns", "grid-template-areas", "grid-auto-rows", "grid-auto-columns", "grid-auto-flow"],
    "grid-template": ["grid-template-rows", "grid-template-columns", "grid-template-areas"],
    "grid-row": ["grid-row-start", "grid-row-end"],
    "grid-column": ["grid-column-start", "grid-column-end"],
    "grid-area": ["grid-row-start", "grid-column-start", "grid-row-end", "grid-column-end"],
    "grid-gap": ["grid-row-gap", "grid-column-gap"],
    mask: ["mask-image", "mask-mode", "mask-position", "mask-size", "mask-repeat", "mask-origin", "mask-clip"],
    "mask-border": ["mask-border-source", "mask-border-slice", "mask-border-width", "mask-border-outset", "mask-border-repeat", "mask-border-mode"],
    columns: ["column-width", "column-count"],
    "column-rule": ["column-rule-width", "column-rule-style", "column-rule-color"],
    "scroll-padding": ["scroll-padding-top", "scroll-padding-right", "scroll-padding-bottom", "scroll-padding-left"],
    "scroll-padding-block": ["scroll-padding-block-start", "scroll-padding-block-end"],
    "scroll-padding-inline": ["scroll-padding-inline-start", "scroll-padding-inline-end"],
    "scroll-snap-margin": ["scroll-snap-margin-top", "scroll-snap-margin-right", "scroll-snap-margin-bottom", "scroll-snap-margin-left"],
    "scroll-snap-margin-block": ["scroll-snap-margin-block-start", "scroll-snap-margin-block-end"],
    "scroll-snap-margin-inline": ["scroll-snap-margin-inline-start", "scroll-snap-margin-inline-end"],
    cue: ["cue-before", "cue-after"],
    pause: ["pause-before", "pause-after"],
    rest: ["rest-before", "rest-after"],
    "text-decoration": ["text-decoration-line", "text-decoration-style", "text-decoration-color"],
    "text-emphasis": ["text-emphasis-style", "text-emphasis-color"],
    animation: ["animation-name", "animation-duration", "animation-timing-function", "animation-delay", "animation-iteration-count", "animation-direction", "animation-fill-mode", "animation-play-state"],
    transition: ["transition-property", "transition-duration", "transition-timing-function", "transition-delay"]
  };
  function validateNoMixedHand(style) {
    const hyphenatedProperties = Object.keys(style).reduce((acc, property) => {
      acc[hyphenateStyleName(property)] = property;
      return acc;
    }, {});
    const mixed = [];
    for (const property in hyphenatedProperties) {
      if (property in shorthandMap) {
        for (const longhand of shorthandMap[property]) {
          if (longhand in hyphenatedProperties) {
            const long = hyphenatedProperties[longhand];
            const short = hyphenatedProperties[property];
            mixed.push({
              shorthand: {
                property: short,
                value: style[short]
              },
              longhand: {
                property: long,
                value: style[long]
              }
            });
          }
        }
      }
    }
    return mixed;
  }

  // node_modules/inline-style-prefixer/es/utils/capitalizeString.js
  function capitalizeString(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }

  // node_modules/inline-style-prefixer/es/utils/prefixProperty.js
  function prefixProperty(prefixProperties, property, style) {
    if (prefixProperties.hasOwnProperty(property)) {
      var newStyle = {};
      var requiredPrefixes = prefixProperties[property];
      var capitalizedProperty = capitalizeString(property);
      var keys2 = Object.keys(style);
      for (var i = 0; i < keys2.length; i++) {
        var styleProperty = keys2[i];
        if (styleProperty === property) {
          for (var j = 0; j < requiredPrefixes.length; j++) {
            newStyle[requiredPrefixes[j] + capitalizedProperty] = style[property];
          }
        }
        newStyle[styleProperty] = style[styleProperty];
      }
      return newStyle;
    }
    return style;
  }

  // node_modules/inline-style-prefixer/es/utils/prefixValue.js
  function prefixValue(plugins2, property, value, style, metaData) {
    for (var i = 0, len = plugins2.length; i < len; ++i) {
      var processedValue = plugins2[i](property, value, style, metaData);
      if (processedValue) {
        return processedValue;
      }
    }
  }

  // node_modules/inline-style-prefixer/es/utils/addNewValuesOnly.js
  function addIfNew(list, value) {
    if (list.indexOf(value) === -1) {
      list.push(value);
    }
  }
  function addNewValuesOnly(list, values5) {
    if (Array.isArray(values5)) {
      for (var i = 0, len = values5.length; i < len; ++i) {
        addIfNew(list, values5[i]);
      }
    } else {
      addIfNew(list, values5);
    }
  }

  // node_modules/inline-style-prefixer/es/utils/isObject.js
  function isObject(value) {
    return value instanceof Object && !Array.isArray(value);
  }

  // node_modules/inline-style-prefixer/es/createPrefixer.js
  function createPrefixer(_ref2) {
    var prefixMap = _ref2.prefixMap, plugins2 = _ref2.plugins;
    return function prefix2(style) {
      for (var property in style) {
        var value = style[property];
        if (isObject(value)) {
          style[property] = prefix2(value);
        } else if (Array.isArray(value)) {
          var combinedValue = [];
          for (var i = 0, len = value.length; i < len; ++i) {
            var processedValue = prefixValue(plugins2, property, value[i], style, prefixMap);
            addNewValuesOnly(combinedValue, processedValue || value[i]);
          }
          if (combinedValue.length > 0) {
            style[property] = combinedValue;
          }
        } else {
          var _processedValue = prefixValue(plugins2, property, value, style, prefixMap);
          if (_processedValue) {
            style[property] = _processedValue;
          }
          style = prefixProperty(prefixMap, property, style);
        }
      }
      return style;
    };
  }

  // node_modules/inline-style-prefixer/es/data.js
  var w = ["Webkit"];
  var m = ["Moz"];
  var ms = ["ms"];
  var wm = ["Webkit", "Moz"];
  var wms = ["Webkit", "ms"];
  var wmms = ["Webkit", "Moz", "ms"];
  var data_default = {
    plugins: [],
    prefixMap: { "appearance": wm, "textEmphasisPosition": w, "textEmphasis": w, "textEmphasisStyle": w, "textEmphasisColor": w, "boxDecorationBreak": w, "maskImage": w, "maskMode": w, "maskRepeat": w, "maskPosition": w, "maskClip": w, "maskOrigin": w, "maskSize": w, "maskComposite": w, "mask": w, "maskBorderSource": w, "maskBorderMode": w, "maskBorderSlice": w, "maskBorderWidth": w, "maskBorderOutset": w, "maskBorderRepeat": w, "maskBorder": w, "maskType": w, "textDecorationStyle": w, "textDecorationSkip": w, "textDecorationLine": w, "textDecorationColor": w, "userSelect": wmms, "backdropFilter": w, "fontKerning": w, "scrollSnapType": wms, "scrollSnapPointsX": wms, "scrollSnapPointsY": wms, "scrollSnapDestination": wms, "scrollSnapCoordinate": wms, "clipPath": w, "shapeImageThreshold": w, "shapeImageMargin": w, "shapeImageOutside": w, "filter": w, "hyphens": wms, "flowInto": wms, "flowFrom": wms, "breakBefore": wms, "breakAfter": wms, "breakInside": wms, "regionFragment": wms, "writingMode": wms, "textOrientation": w, "tabSize": m, "fontFeatureSettings": w, "columnCount": w, "columnFill": w, "columnGap": w, "columnRule": w, "columnRuleColor": w, "columnRuleStyle": w, "columnRuleWidth": w, "columns": w, "columnSpan": w, "columnWidth": w, "wrapFlow": ms, "wrapThrough": ms, "wrapMargin": ms, "textSizeAdjust": wms }
  };

  // node_modules/inline-style-prefixer/es/plugins/backgroundClip.js
  function backgroundClip(property, value) {
    if (typeof value === "string" && value === "text") {
      return ["-webkit-text", "text"];
    }
  }

  // node_modules/inline-style-prefixer/es/plugins/cursor.js
  var prefixes = ["-webkit-", "-moz-", ""];
  var values = {
    "zoom-in": true,
    "zoom-out": true,
    grab: true,
    grabbing: true
  };
  function cursor(property, value) {
    if (property === "cursor" && values.hasOwnProperty(value)) {
      return prefixes.map(function(prefix2) {
        return prefix2 + value;
      });
    }
  }

  // node_modules/inline-style-prefixer/es/plugins/crossFade.js
  var import_isPrefixedValue = __toESM(require_isPrefixedValue());
  var prefixes2 = ["-webkit-", ""];
  function crossFade(property, value) {
    if (typeof value === "string" && !(0, import_isPrefixedValue.default)(value) && value.indexOf("cross-fade(") > -1) {
      return prefixes2.map(function(prefix2) {
        return value.replace(/cross-fade\(/g, prefix2 + "cross-fade(");
      });
    }
  }

  // node_modules/inline-style-prefixer/es/plugins/filter.js
  var import_isPrefixedValue2 = __toESM(require_isPrefixedValue());
  var prefixes3 = ["-webkit-", ""];
  function filter(property, value) {
    if (typeof value === "string" && !(0, import_isPrefixedValue2.default)(value) && value.indexOf("filter(") > -1) {
      return prefixes3.map(function(prefix2) {
        return value.replace(/filter\(/g, prefix2 + "filter(");
      });
    }
  }

  // node_modules/inline-style-prefixer/es/plugins/flex.js
  var values2 = {
    flex: ["-webkit-box", "-moz-box", "-ms-flexbox", "-webkit-flex", "flex"],
    "inline-flex": ["-webkit-inline-box", "-moz-inline-box", "-ms-inline-flexbox", "-webkit-inline-flex", "inline-flex"]
  };
  function flex(property, value) {
    if (property === "display" && values2.hasOwnProperty(value)) {
      return values2[value];
    }
  }

  // node_modules/inline-style-prefixer/es/plugins/flexboxOld.js
  var alternativeValues = {
    "space-around": "justify",
    "space-between": "justify",
    "flex-start": "start",
    "flex-end": "end",
    "wrap-reverse": "multiple",
    wrap: "multiple"
  };
  var alternativeProps = {
    alignItems: "WebkitBoxAlign",
    justifyContent: "WebkitBoxPack",
    flexWrap: "WebkitBoxLines",
    flexGrow: "WebkitBoxFlex"
  };
  function flexboxOld(property, value, style) {
    if (property === "flexDirection" && typeof value === "string") {
      if (value.indexOf("column") > -1) {
        style.WebkitBoxOrient = "vertical";
      } else {
        style.WebkitBoxOrient = "horizontal";
      }
      if (value.indexOf("reverse") > -1) {
        style.WebkitBoxDirection = "reverse";
      } else {
        style.WebkitBoxDirection = "normal";
      }
    }
    if (alternativeProps.hasOwnProperty(property)) {
      style[alternativeProps[property]] = alternativeValues[value] || value;
    }
  }

  // node_modules/inline-style-prefixer/es/plugins/gradient.js
  var import_isPrefixedValue3 = __toESM(require_isPrefixedValue());
  var prefixes4 = ["-webkit-", "-moz-", ""];
  var values3 = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/gi;
  function gradient(property, value) {
    if (typeof value === "string" && !(0, import_isPrefixedValue3.default)(value) && values3.test(value)) {
      return prefixes4.map(function(prefix2) {
        return value.replace(values3, function(grad) {
          return prefix2 + grad;
        });
      });
    }
  }

  // node_modules/inline-style-prefixer/es/plugins/grid.js
  var _slicedToArray = function() {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err2) {
        _d = true;
        _e = err2;
      } finally {
        try {
          if (!_n && _i["return"])
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    return function(arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();
  function isSimplePositionValue(value) {
    return typeof value === "number" && !isNaN(value);
  }
  function isComplexSpanValue(value) {
    return typeof value === "string" && value.includes("/");
  }
  var alignmentValues = ["center", "end", "start", "stretch"];
  var displayValues = {
    "inline-grid": ["-ms-inline-grid", "inline-grid"],
    grid: ["-ms-grid", "grid"]
  };
  var propertyConverters = {
    alignSelf: function alignSelf(value, style) {
      if (alignmentValues.indexOf(value) > -1) {
        style.msGridRowAlign = value;
      }
    },
    gridColumn: function gridColumn(value, style) {
      if (isSimplePositionValue(value)) {
        style.msGridColumn = value;
      } else if (isComplexSpanValue(value)) {
        var _value$split = value.split("/"), _value$split2 = _slicedToArray(_value$split, 2), start = _value$split2[0], end = _value$split2[1];
        propertyConverters.gridColumnStart(+start, style);
        var _end$split = end.split(/ ?span /), _end$split2 = _slicedToArray(_end$split, 2), maybeSpan = _end$split2[0], maybeNumber = _end$split2[1];
        if (maybeSpan === "") {
          propertyConverters.gridColumnEnd(+start + +maybeNumber, style);
        } else {
          propertyConverters.gridColumnEnd(+end, style);
        }
      } else {
        propertyConverters.gridColumnStart(value, style);
      }
    },
    gridColumnEnd: function gridColumnEnd(value, style) {
      var msGridColumn = style.msGridColumn;
      if (isSimplePositionValue(value) && isSimplePositionValue(msGridColumn)) {
        style.msGridColumnSpan = value - msGridColumn;
      }
    },
    gridColumnStart: function gridColumnStart(value, style) {
      if (isSimplePositionValue(value)) {
        style.msGridColumn = value;
      }
    },
    gridRow: function gridRow(value, style) {
      if (isSimplePositionValue(value)) {
        style.msGridRow = value;
      } else if (isComplexSpanValue(value)) {
        var _value$split3 = value.split("/"), _value$split4 = _slicedToArray(_value$split3, 2), start = _value$split4[0], end = _value$split4[1];
        propertyConverters.gridRowStart(+start, style);
        var _end$split3 = end.split(/ ?span /), _end$split4 = _slicedToArray(_end$split3, 2), maybeSpan = _end$split4[0], maybeNumber = _end$split4[1];
        if (maybeSpan === "") {
          propertyConverters.gridRowEnd(+start + +maybeNumber, style);
        } else {
          propertyConverters.gridRowEnd(+end, style);
        }
      } else {
        propertyConverters.gridRowStart(value, style);
      }
    },
    gridRowEnd: function gridRowEnd(value, style) {
      var msGridRow = style.msGridRow;
      if (isSimplePositionValue(value) && isSimplePositionValue(msGridRow)) {
        style.msGridRowSpan = value - msGridRow;
      }
    },
    gridRowStart: function gridRowStart(value, style) {
      if (isSimplePositionValue(value)) {
        style.msGridRow = value;
      }
    },
    gridTemplateColumns: function gridTemplateColumns(value, style) {
      style.msGridColumns = value;
    },
    gridTemplateRows: function gridTemplateRows(value, style) {
      style.msGridRows = value;
    },
    justifySelf: function justifySelf(value, style) {
      if (alignmentValues.indexOf(value) > -1) {
        style.msGridColumnAlign = value;
      }
    }
  };
  function grid(property, value, style) {
    if (property === "display" && value in displayValues) {
      return displayValues[value];
    }
    if (property in propertyConverters) {
      var propertyConverter = propertyConverters[property];
      propertyConverter(value, style);
    }
  }

  // node_modules/inline-style-prefixer/es/plugins/imageSet.js
  var import_isPrefixedValue4 = __toESM(require_isPrefixedValue());
  var prefixes5 = ["-webkit-", ""];
  function imageSet(property, value) {
    if (typeof value === "string" && !(0, import_isPrefixedValue4.default)(value) && value.indexOf("image-set(") > -1) {
      return prefixes5.map(function(prefix2) {
        return value.replace(/image-set\(/g, prefix2 + "image-set(");
      });
    }
  }

  // node_modules/inline-style-prefixer/es/plugins/logical.js
  var alternativeProps2 = {
    marginBlockStart: ["WebkitMarginBefore"],
    marginBlockEnd: ["WebkitMarginAfter"],
    marginInlineStart: ["WebkitMarginStart", "MozMarginStart"],
    marginInlineEnd: ["WebkitMarginEnd", "MozMarginEnd"],
    paddingBlockStart: ["WebkitPaddingBefore"],
    paddingBlockEnd: ["WebkitPaddingAfter"],
    paddingInlineStart: ["WebkitPaddingStart", "MozPaddingStart"],
    paddingInlineEnd: ["WebkitPaddingEnd", "MozPaddingEnd"],
    borderBlockStart: ["WebkitBorderBefore"],
    borderBlockStartColor: ["WebkitBorderBeforeColor"],
    borderBlockStartStyle: ["WebkitBorderBeforeStyle"],
    borderBlockStartWidth: ["WebkitBorderBeforeWidth"],
    borderBlockEnd: ["WebkitBorderAfter"],
    borderBlockEndColor: ["WebkitBorderAfterColor"],
    borderBlockEndStyle: ["WebkitBorderAfterStyle"],
    borderBlockEndWidth: ["WebkitBorderAfterWidth"],
    borderInlineStart: ["WebkitBorderStart", "MozBorderStart"],
    borderInlineStartColor: ["WebkitBorderStartColor", "MozBorderStartColor"],
    borderInlineStartStyle: ["WebkitBorderStartStyle", "MozBorderStartStyle"],
    borderInlineStartWidth: ["WebkitBorderStartWidth", "MozBorderStartWidth"],
    borderInlineEnd: ["WebkitBorderEnd", "MozBorderEnd"],
    borderInlineEndColor: ["WebkitBorderEndColor", "MozBorderEndColor"],
    borderInlineEndStyle: ["WebkitBorderEndStyle", "MozBorderEndStyle"],
    borderInlineEndWidth: ["WebkitBorderEndWidth", "MozBorderEndWidth"]
  };
  function logical(property, value, style) {
    if (Object.prototype.hasOwnProperty.call(alternativeProps2, property)) {
      var alternativePropList = alternativeProps2[property];
      for (var i = 0, len = alternativePropList.length; i < len; ++i) {
        style[alternativePropList[i]] = value;
      }
    }
  }

  // node_modules/inline-style-prefixer/es/plugins/position.js
  function position(property, value) {
    if (property === "position" && value === "sticky") {
      return ["-webkit-sticky", "sticky"];
    }
  }

  // node_modules/inline-style-prefixer/es/plugins/sizing.js
  var prefixes6 = ["-webkit-", "-moz-", ""];
  var properties = {
    maxHeight: true,
    maxWidth: true,
    width: true,
    height: true,
    columnWidth: true,
    minWidth: true,
    minHeight: true
  };
  var values4 = {
    "min-content": true,
    "max-content": true,
    "fill-available": true,
    "fit-content": true,
    "contain-floats": true
  };
  function sizing(property, value) {
    if (properties.hasOwnProperty(property) && values4.hasOwnProperty(value)) {
      return prefixes6.map(function(prefix2) {
        return prefix2 + value;
      });
    }
  }

  // node_modules/inline-style-prefixer/es/plugins/transition.js
  var import_hyphenateProperty = __toESM(require_hyphenateProperty());
  var import_isPrefixedValue5 = __toESM(require_isPrefixedValue());
  var properties2 = {
    transition: true,
    transitionProperty: true,
    WebkitTransition: true,
    WebkitTransitionProperty: true,
    MozTransition: true,
    MozTransitionProperty: true
  };
  var prefixMapping = {
    Webkit: "-webkit-",
    Moz: "-moz-",
    ms: "-ms-"
  };
  function prefixValue2(value, propertyPrefixMap) {
    if ((0, import_isPrefixedValue5.default)(value)) {
      return value;
    }
    var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);
    for (var i = 0, len = multipleValues.length; i < len; ++i) {
      var singleValue = multipleValues[i];
      var values5 = [singleValue];
      for (var property in propertyPrefixMap) {
        var dashCaseProperty = (0, import_hyphenateProperty.default)(property);
        if (singleValue.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== "order") {
          var prefixes7 = propertyPrefixMap[property];
          for (var j = 0, pLen = prefixes7.length; j < pLen; ++j) {
            values5.unshift(singleValue.replace(dashCaseProperty, prefixMapping[prefixes7[j]] + dashCaseProperty));
          }
        }
      }
      multipleValues[i] = values5.join(",");
    }
    return multipleValues.join(",");
  }
  function transition(property, value, style, propertyPrefixMap) {
    if (typeof value === "string" && properties2.hasOwnProperty(property)) {
      var outputValue = prefixValue2(value, propertyPrefixMap);
      var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(val) {
        return !/-moz-|-ms-/.test(val);
      }).join(",");
      if (property.indexOf("Webkit") > -1) {
        return webkitOutput;
      }
      var mozOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(val) {
        return !/-webkit-|-ms-/.test(val);
      }).join(",");
      if (property.indexOf("Moz") > -1) {
        return mozOutput;
      }
      style["Webkit" + capitalizeString(property)] = webkitOutput;
      style["Moz" + capitalizeString(property)] = mozOutput;
      return outputValue;
    }
  }

  // node_modules/inline-style-prefixer/es/index.js
  var plugins = [backgroundClip, crossFade, cursor, filter, flexboxOld, gradient, grid, imageSet, logical, position, sizing, transition, flex];
  var prefix = createPrefixer({
    prefixMap: data_default.prefixMap,
    plugins
  });

  // node_modules/styletron-engine-atomic/dist-browser-esm/inject-style-prefixed.js
  function injectStylePrefixed(styleCache, styles, media, pseudo) {
    const cache2 = styleCache.getCache(media);
    let classString = "";
    for (const originalKey in styles) {
      const originalVal = styles[originalKey];
      if (originalVal === void 0 || originalVal === null) {
        continue;
      }
      if (typeof originalVal !== "object") {
        if (true) {
          validateValueType(originalVal, originalKey);
        }
        const propValPair = `${hyphenateStyleName(originalKey)}:${originalVal}`;
        const key = `${pseudo}${propValPair}`;
        const cachedId = cache2.cache[key];
        if (cachedId !== void 0) {
          classString += " " + cachedId;
          continue;
        } else {
          let block = "";
          const prefixed = prefix({
            [originalKey]: originalVal
          });
          for (const prefixedKey in prefixed) {
            const prefixedVal = prefixed[prefixedKey];
            const prefixedValType = typeof prefixedVal;
            if (prefixedValType === "string" || prefixedValType === "number") {
              const prefixedPair = `${hyphenateStyleName(prefixedKey)}:${prefixedVal}`;
              if (prefixedPair !== propValPair) {
                block += `${prefixedPair};`;
              }
            } else if (Array.isArray(prefixedVal)) {
              const hyphenated = hyphenateStyleName(prefixedKey);
              for (let i = 0; i < prefixedVal.length; i++) {
                const prefixedPair = `${hyphenated}:${prefixedVal[i]}`;
                if (prefixedPair !== propValPair) {
                  block += `${prefixedPair};`;
                }
              }
            }
          }
          block += propValPair;
          const id = cache2.addValue(key, {
            pseudo,
            block
          });
          classString += " " + id;
        }
      } else {
        if (originalKey[0] === ":") {
          classString += " " + injectStylePrefixed(styleCache, originalVal, media, pseudo + originalKey);
        } else if (originalKey.substring(0, 6) === "@media") {
          classString += " " + injectStylePrefixed(styleCache, originalVal, originalKey.substr(7), pseudo);
        }
      }
    }
    if (true) {
      const conflicts = validateNoMixedHand(styles);
      if (conflicts.length) {
        conflicts.forEach(({
          shorthand,
          longhand
        }) => {
          const short = JSON.stringify({
            [shorthand.property]: shorthand.value
          });
          const long = JSON.stringify({
            [longhand.property]: longhand.value
          });
          console.warn(`Styles \`${short}\` and \`${long}\` in object yielding class "${classString.slice(1)}" may result in unexpected behavior. Mixing shorthand and longhand properties within the same style object is unsupported with atomic rendering.`);
        });
      }
    }
    return classString.slice(1);
  }
  function validateValueType(value, key) {
    if (value === null || Array.isArray(value) || typeof value !== "number" && typeof value !== "string") {
      throw new Error(`Unsupported style value: ${JSON.stringify(value)} used in property ${JSON.stringify(key)}`);
    }
  }

  // node_modules/styletron-engine-atomic/dist-browser-esm/validate-keyframes-object.js
  var validAnimationState = /^(from|to|\+?(\d*\.)?\d+%)(\s*,\s*(from|to|\+?(\d*\.)?\d+%))*$/;
  function validateKeyframesObject(keyframes) {
    let valid = true;
    for (const animationState in keyframes) {
      const value = keyframes[animationState];
      if (!validAnimationState.test(animationState)) {
        valid = false;
        console.warn(`Warning: property "${animationState}" in keyframes object ${JSON.stringify(keyframes)} is not a valid. Must be "from", "to", or a percentage.`);
      }
      if (typeof value !== "object") {
        valid = false;
        console.warn(`Warning: value for "${animationState}" property in keyframes object ${JSON.stringify(keyframes)} must be an object. Instead it was a ${typeof value}.`);
      }
      if (!valid) {
        console.warn(`Warning: object used as value for "animationName" style is invalid:`, keyframes);
      }
    }
  }

  // node_modules/styletron-engine-atomic/dist-browser-esm/css.js
  function atomicSelector(id, pseudo) {
    let selector2 = `.${id}`;
    if (pseudo) {
      selector2 += pseudo;
    }
    return selector2;
  }
  function keyframesToBlock(keyframes) {
    if (true) {
      validateKeyframesObject(keyframes);
    }
    if (typeof Object.getPrototypeOf(keyframes) !== "undefined") {
      if (Object.getPrototypeOf(keyframes) !== Object.getPrototypeOf({})) {
        console.warn("Only plain objects should be used as animation values. Unexpectedly recieved:", keyframes);
      }
    }
    let result = "";
    for (const animationState in keyframes) {
      result += `${animationState}{${declarationsToBlock(keyframes[animationState])}}`;
    }
    return result;
  }
  function declarationsToBlock(style) {
    let css = "";
    for (const prop in style) {
      const val = style[prop];
      if (typeof val === "string" || typeof val === "number") {
        css += `${hyphenateStyleName(prop)}:${val};`;
      }
    }
    return css.slice(0, -1);
  }
  function keyframesBlockToRule(id, block) {
    return `@keyframes ${id}{${block}}`;
  }
  function fontFaceBlockToRule(id, block) {
    return `@font-face{font-family:${id};${block}}`;
  }
  function styleBlockToRule(selector2, block) {
    return `${selector2}{${block}}`;
  }

  // node_modules/styletron-engine-atomic/dist-browser-esm/dev-tool.js
  var insertRuleIntoDevtools = (selector2, block) => {
    const key = selector2.substring(1, selector2.indexOf(":") !== -1 ? selector2.indexOf(":") : selector2.length);
    const styles = {};
    for (const decl of block.split(";")) {
      if (decl.trim() !== "" && !window.__STYLETRON_DEVTOOLS__.atomicMap[key])
        styles[decl.substring(0, decl.indexOf(":"))] = decl.substring(decl.indexOf(":") + 1, decl.length);
    }
    window.__STYLETRON_DEVTOOLS__.atomicMap[key] = styles;
  };
  var hydrateDevtoolsRule = (cssString) => {
    const id = cssString.substring(0, 3);
    const block = cssString.substring(4, cssString.length - 1);
    insertRuleIntoDevtools(id, block);
  };

  // node_modules/styletron-engine-atomic/dist-browser-esm/client/client.js
  var STYLES_HYDRATOR = /\.([^{:]+)(:[^{]+)?{(?:[^}]*;)?([^}]*?)}/g;
  var KEYFRAMES_HYRDATOR = /@keyframes ([^{]+){((?:(?:from|to|(?:\d+\.?\d*%))\{(?:[^}])*})*)}/g;
  var FONT_FACE_HYDRATOR = /@font-face\{font-family:([^;]+);([^}]*)\}/g;
  function hydrateStyles(cache2, hydrator, css) {
    let match;
    while (match = hydrator.exec(css)) {
      const [, id, pseudo, key] = match;
      if (window.__STYLETRON_DEVTOOLS__) {
        hydrateDevtoolsRule(match[0]);
      }
      const fullKey = pseudo ? `${pseudo}${key}` : key;
      cache2.cache[fullKey] = id;
      cache2.idGenerator.increment();
    }
  }
  function hydrate(cache2, hydrator, css) {
    let match;
    while (match = hydrator.exec(css)) {
      const [, id, key] = match;
      if (window.__STYLETRON_DEVTOOLS__) {
        hydrateDevtoolsRule(match[0]);
      }
      cache2.cache[key] = id;
      cache2.idGenerator.increment();
    }
  }
  var StyletronClient = class {
    constructor(opts = {}) {
      this.styleElements = {};
      const styleIdGenerator = new SequentialIDGenerator(opts.prefix);
      const onNewStyle = (cache2, id, value) => {
        const {
          pseudo,
          block
        } = value;
        const sheet = this.styleElements[cache2.key].sheet;
        const selector2 = atomicSelector(id, pseudo);
        const rule = styleBlockToRule(selector2, block);
        try {
          sheet.insertRule(rule, sheet.cssRules.length);
          if (window.__STYLETRON_DEVTOOLS__) {
            insertRuleIntoDevtools(selector2, block);
          }
        } catch (e) {
          if (true) {
            console.warn(`Failed to inject CSS: "${rule}". Perhaps this has invalid or un-prefixed properties?`);
          }
        }
      };
      this.styleCache = new MultiCache(styleIdGenerator, (media, _cache, insertBeforeMedia) => {
        const styleElement = document.createElement("style");
        styleElement.media = media;
        if (insertBeforeMedia === void 0) {
          this.container.appendChild(styleElement);
        } else {
          const insertBeforeIndex = findSheetIndexWithMedia(this.container.children, insertBeforeMedia);
          this.container.insertBefore(styleElement, this.container.children[insertBeforeIndex]);
        }
        this.styleElements[media] = styleElement;
      }, onNewStyle);
      this.keyframesCache = new Cache(new SequentialIDGenerator(opts.prefix), (cache2, id, value) => {
        this.styleCache.getCache("");
        const sheet = this.styleElements[""].sheet;
        const rule = keyframesBlockToRule(id, keyframesToBlock(value));
        try {
          sheet.insertRule(rule, sheet.cssRules.length);
        } catch (e) {
          if (true) {
            console.warn(`Failed to inject CSS: "${rule}". Perhaps this has invalid or un-prefixed properties?`);
          }
        }
      });
      this.fontFaceCache = new Cache(new SequentialIDGenerator(opts.prefix), (cache2, id, value) => {
        this.styleCache.getCache("");
        const sheet = this.styleElements[""].sheet;
        const rule = fontFaceBlockToRule(id, declarationsToBlock(value));
        try {
          sheet.insertRule(rule, sheet.cssRules.length);
        } catch (e) {
          if (true) {
            console.warn(`Failed to inject CSS: "${rule}". Perhaps this has invalid or un-prefixed properties?`);
          }
        }
      });
      if (opts.container) {
        this.container = opts.container;
      }
      if (opts.hydrate && opts.hydrate.length > 0) {
        if (!this.container) {
          const parentElement = opts.hydrate[0].parentElement;
          if (parentElement !== null && parentElement !== void 0) {
            this.container = parentElement;
          }
        }
        for (let i = 0; i < opts.hydrate.length; i++) {
          const element = opts.hydrate[i];
          const hydrateType = element.getAttribute("data-hydrate");
          if (hydrateType === "font-face") {
            hydrate(this.fontFaceCache, FONT_FACE_HYDRATOR, element.textContent);
            continue;
          }
          if (hydrateType === "keyframes") {
            hydrate(this.keyframesCache, KEYFRAMES_HYRDATOR, element.textContent);
            continue;
          }
          const key = element.media ? element.media : "";
          this.styleElements[key] = element;
          const cache2 = new Cache(styleIdGenerator, onNewStyle);
          cache2.key = key;
          hydrateStyles(cache2, STYLES_HYDRATOR, element.textContent);
          this.styleCache.sortedCacheKeys.push(key);
          this.styleCache.caches[key] = cache2;
        }
      }
      if (!this.container) {
        if (document.head === null) {
          throw new Error("No container provided and `document.head` was null");
        }
        this.container = document.head;
      }
    }
    renderStyle(style) {
      return injectStylePrefixed(this.styleCache, style, "", "");
    }
    renderFontFace(fontFace) {
      const key = declarationsToBlock(fontFace);
      return this.fontFaceCache.addValue(key, fontFace);
    }
    renderKeyframes(keyframes) {
      const key = keyframesToBlock(keyframes);
      return this.keyframesCache.addValue(key, keyframes);
    }
  };
  var client_default = StyletronClient;
  function findSheetIndexWithMedia(children2, media) {
    let index2 = 0;
    for (; index2 < children2.length; index2++) {
      const child = children2[index2];
      if (child.tagName === "STYLE" && child.media === media) {
        return index2;
      }
    }
    return -1;
  }

  // node_modules/styletron-react/dist-browser-esm/index.js
  var React = __toESM(require_react());

  // node_modules/styletron-standard/dist-browser-esm/index.js
  function driver(style, styletron) {
    const tx = renderDeclarativeRules(style, styletron);
    return styletron.renderStyle(tx);
  }
  function getInitialStyle() {
    return {};
  }
  function renderDeclarativeRules(style, styletron) {
    for (const key in style) {
      const val = style[key];
      if (key === "animationName" && typeof val !== "string") {
        style.animationName = styletron.renderKeyframes(val);
        continue;
      }
      if (key === "fontFamily" && typeof val !== "string") {
        if (Array.isArray(val)) {
          let result = "";
          for (const font of val) {
            if (typeof font === "object") {
              result += `${styletron.renderFontFace(font)},`;
            } else if (typeof font === "string") {
              result += `${font},`;
            }
          }
          style.fontFamily = result.slice(0, -1);
          continue;
        } else if (val === void 0) {
          continue;
        } else {
          style.fontFamily = styletron.renderFontFace(val);
          continue;
        }
      }
      if (typeof val === "object" && val !== null) {
        renderDeclarativeRules(val, styletron);
      }
    }
    return style;
  }

  // node_modules/styletron-react/dist-browser-esm/dev-tool.js
  function addDebugMetadata(instance, stackIndex) {
    const {
      stack,
      stacktrace,
      message
    } = new Error("stacktrace source");
    instance.debug = {
      stackInfo: {
        stack,
        stacktrace,
        message
      },
      stackIndex
    };
  }
  var setupDevtoolsExtension = () => {
    const atomicMap = {};
    const extensionsMap = /* @__PURE__ */ new Map();
    const stylesMap = /* @__PURE__ */ new Map();
    const getStyles = (className) => {
      const styles = {};
      if (typeof className !== "string") {
        return styles;
      }
      if (stylesMap.has(className)) {
        styles.styles = stylesMap.get(className);
        const classList = className.split(" ");
        if (classList.length) {
          const classes = {};
          classList.forEach((singleClassName) => {
            classes[singleClassName] = atomicMap[singleClassName];
          });
          styles.classes = classes;
        }
        if (extensionsMap.has(className)) {
          const extension = extensionsMap.get(className);
          styles.extends = extension;
        }
        return styles;
      }
    };
    window.__STYLETRON_DEVTOOLS__ = {
      atomicMap,
      extensionsMap,
      stylesMap,
      getStyles
    };
  };

  // node_modules/styletron-react/dist-browser-esm/index.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  var noopEngine = {
    renderStyle: () => "",
    renderKeyframes: () => "",
    renderFontFace: () => ""
  };
  var StyletronContext = /* @__PURE__ */ React.createContext(noopEngine);
  var HydrationContext = /* @__PURE__ */ React.createContext(false);
  var DebugEngineContext = /* @__PURE__ */ React.createContext(void 0);
  var DevProvider = class extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        hydrating: Boolean(props.debugAfterHydration)
      };
    }
    componentDidMount() {
      if (true) {
        if (this.state.hydrating === true) {
          this.setState({
            hydrating: false
          });
        }
      }
    }
    render() {
      return /* @__PURE__ */ React.createElement(StyletronContext.Provider, {
        value: this.props.value
      }, /* @__PURE__ */ React.createElement(DebugEngineContext.Provider, {
        value: this.props.debug
      }, /* @__PURE__ */ React.createElement(HydrationContext.Provider, {
        value: this.state.hydrating
      }, this.props.children)));
    }
  };
  var Provider = true ? DevProvider : StyletronContext.Provider;
  if (!window.__STYLETRON_DEVTOOLS__) {
    setupDevtoolsExtension();
  }
  function checkNoopEngine(engine2) {
    if (true) {
      engine2 === noopEngine && console.warn(true ? `
Styletron has been switched to a no-op (test) mode.

A Styletron styled component was rendered, but no Styletron engine instance was provided in React context.

Did you forget to provide a Styletron engine instance to React context via using the Styletron provider component?

Note: Providers and Consumers must come from the exact same React.createContext call to work.
If your app has multiple instances of the "styletron-react" package in your node_module tree,
your Provider may be coming from a different React.createContext call, which means the styled components
will not recieve the provided engine instance. This scenario can arise, for example, when using "npm link".
` : `Styletron Provider is not set up. Defaulting to no-op.`);
    }
  }
  function useStyletron() {
    const styletronEngine = React.useContext(StyletronContext);
    const debugEngine = React.useContext(DebugEngineContext);
    const hydrating = React.useContext(HydrationContext);
    checkNoopEngine(styletronEngine);
    const debugClassName = React.useRef("");
    const prevDebugClassNameDeps = React.useRef([]);
    return [function css(style) {
      const className = driver(style, styletronEngine);
      if (false) {
        return className;
      }
      const {
        stack,
        message
      } = new Error("stacktrace source");
      const nextDeps = [debugEngine, hydrating];
      if (prevDebugClassNameDeps.current[0] !== nextDeps[0] || prevDebugClassNameDeps.current[1] !== nextDeps[1]) {
        if (debugEngine && !hydrating) {
          debugClassName.current = debugEngine.debug({
            stackInfo: {
              stack,
              message
            },
            stackIndex: 1
          });
        }
        prevDebugClassNameDeps.current = nextDeps;
      }
      if (debugClassName.current) {
        return `${debugClassName.current} ${className}`;
      }
      return className;
    }];
  }
  function createStyled({
    getInitialStyle: getInitialStyle2,
    driver: driver2,
    wrapper: wrapper3
  }) {
    function styled3(base, styleArg) {
      if (true) {
        if (base.__STYLETRON__) {
          console.warn("It appears you are passing a styled component into `styled`.");
          console.warn("For composition with existing styled components, use `withStyle` or `withTransform` instead.");
        }
      }
      const baseStyletron = {
        reducers: [],
        base,
        driver: driver2,
        getInitialStyle: getInitialStyle2,
        wrapper: wrapper3
      };
      if (true) {
        addDebugMetadata(baseStyletron, 2);
      }
      return createStyledElementComponent(autoComposeShallow(baseStyletron, styleArg));
    }
    return styled3;
  }
  var styled = createStyled({
    getInitialStyle,
    driver,
    wrapper: (Component15) => Component15
  });
  var withStyleDeep = (component, styleArg) => {
    const styletron = component.__STYLETRON__;
    if (true) {
      if (!styletron) {
        console.warn("The first parameter to `withStyle` must be a styled component (without extra wrappers).");
      }
    }
    if (true) {
      addDebugMetadata(styletron, 2);
      return createStyledElementComponent(addExtension(autoComposeDeep(styletron, styleArg), component, styleArg));
    } else {
      return createStyledElementComponent(autoComposeDeep(styletron, styleArg));
    }
  };
  var withStyle = withStyleDeep;
  var withWrapper = (component, wrapper3) => {
    const styletron = component.__STYLETRON__;
    if (true) {
      if (!styletron) {
        console.warn("The first parameter to `withWrapper` must be a styled component (without extra wrappers).");
      }
    }
    const composed = {
      getInitialStyle: styletron.getInitialStyle,
      base: styletron.base,
      driver: styletron.driver,
      wrapper: wrapper3,
      reducers: styletron.reducers
    };
    if (true) {
      addDebugMetadata(composed, 2);
    }
    return createStyledElementComponent(composed);
  };
  function autoComposeShallow(styletron, styleArg) {
    if (typeof styleArg === "function") {
      return dynamicComposeShallow(styletron, styleArg);
    }
    return staticComposeShallow(styletron, styleArg);
  }
  function addExtension(composed, component, styleArg) {
    return {
      ...composed,
      ext: {
        with: styleArg,
        name: component.displayName,
        base: component.__STYLETRON__.base,
        getInitialStyle: component.__STYLETRON__.reducers.length ? component.__STYLETRON__.reducers[0].reducer : component.__STYLETRON__.getInitialStyle
      }
    };
  }
  function autoComposeDeep(styletron, styleArg) {
    if (typeof styleArg === "function") {
      return dynamicComposeDeep(styletron, styleArg);
    }
    return staticComposeDeep(styletron, styleArg);
  }
  function staticComposeShallow(styletron, style) {
    return composeStatic(styletron, createShallowMergeReducer(style));
  }
  function staticComposeDeep(styletron, style) {
    return composeStatic(styletron, createDeepMergeReducer(style));
  }
  function dynamicComposeShallow(styletron, styleFn) {
    return composeDynamic(styletron, (style, props) => shallowMerge(style, styleFn(props)));
  }
  function dynamicComposeDeep(styletron, styleFn) {
    return composeDynamic(styletron, (style, props) => deepMerge(style, styleFn(props)));
  }
  function createShallowMergeReducer(style) {
    return {
      reducer: (inputStyle) => shallowMerge(inputStyle, style),
      assignmentCommutative: true,
      factory: createShallowMergeReducer,
      style
    };
  }
  function createDeepMergeReducer(style) {
    return {
      reducer: (inputStyle) => deepMerge(inputStyle, style),
      assignmentCommutative: true,
      factory: createDeepMergeReducer,
      style
    };
  }
  function composeStatic(styletron, reducerContainer) {
    if (styletron.reducers.length === 0) {
      const style = reducerContainer.reducer(styletron.getInitialStyle());
      const result = {
        reducers: styletron.reducers,
        base: styletron.base,
        driver: styletron.driver,
        wrapper: styletron.wrapper,
        getInitialStyle: () => style
      };
      if (true) {
        result.debug = styletron.debug;
      }
      return result;
    } else {
      const last2 = styletron.reducers[0];
      if (last2.assignmentCommutative === true && reducerContainer.assignmentCommutative === true) {
        const composed = reducerContainer.reducer(last2.style);
        const result = {
          getInitialStyle: styletron.getInitialStyle,
          base: styletron.base,
          driver: styletron.driver,
          wrapper: styletron.wrapper,
          reducers: [last2.factory(composed)].concat(styletron.reducers.slice(1))
        };
        if (true) {
          result.debug = styletron.debug;
        }
        return result;
      }
      return composeDynamic(styletron, reducerContainer.reducer);
    }
  }
  function composeDynamic(styletron, reducer) {
    const composed = {
      getInitialStyle: styletron.getInitialStyle,
      base: styletron.base,
      driver: styletron.driver,
      wrapper: styletron.wrapper,
      reducers: [{
        assignmentCommutative: false,
        reducer
      }].concat(styletron.reducers)
    };
    if (true) {
      composed.debug = styletron.debug;
    }
    return composed;
  }
  function createStyledElementComponent(styletron) {
    const {
      reducers,
      base,
      driver: driver2,
      wrapper: wrapper3,
      getInitialStyle: getInitialStyle2,
      ext
    } = styletron;
    if (true) {
      var debugStackInfo, debugStackIndex;
      if (styletron.debug) {
        debugStackInfo = styletron.debug.stackInfo;
        debugStackIndex = styletron.debug.stackIndex;
      }
    }
    if (true) {
      var debugClassName;
    }
    const StyledElement = /* @__PURE__ */ React.forwardRef((props, ref) => {
      const styletron2 = React.useContext(StyletronContext);
      const debugEngine = React.useContext(DebugEngineContext);
      const hydrating = React.useContext(HydrationContext);
      checkNoopEngine(styletron2);
      const elementProps = omitPrefixedKeys(props);
      let style = resolveStyle(getInitialStyle2, reducers, props);
      if (props.$style) {
        if (typeof props.$style === "function") {
          style = deepMerge(style, props.$style(props));
        } else {
          style = deepMerge(style, props.$style);
        }
      }
      const styleClassString = driver2(style, styletron2);
      const Element = props.$as ? props.$as : base;
      elementProps.className = props.className ? `${props.className} ${styleClassString}` : styleClassString;
      if (debugEngine && !hydrating) {
        if (!debugClassName) {
          debugClassName = debugEngine.debug({
            stackInfo: debugStackInfo,
            stackIndex: debugStackIndex
          });
        }
        const joined = `${debugClassName} ${elementProps.className}`;
        elementProps.className = joined;
      }
      if (window.__STYLETRON_DEVTOOLS__) {
        window.__STYLETRON_DEVTOOLS__.stylesMap.set(elementProps.className, style);
        if (ext) {
          window.__STYLETRON_DEVTOOLS__.extensionsMap.set(elementProps.className, {
            base: ext.base,
            displayName: ext.name,
            initialStyles: ext.getInitialStyle({}, props),
            styleOverrides: typeof ext.with === "function" ? ext.with(props) : ext.with
          });
        }
      }
      if (props.$ref) {
        console.warn("The prop `$ref` has been deprecated. Use `ref` instead. Refs are now forwarded with React.forwardRef.");
      }
      return /* @__PURE__ */ React.createElement(Element, _extends({}, elementProps, {
        ref: ref || props.$ref
      }));
    });
    const Wrapped = wrapper3(StyledElement);
    Wrapped.__STYLETRON__ = {
      base,
      reducers,
      driver: driver2,
      wrapper: wrapper3,
      getInitialStyle: getInitialStyle2
    };
    if (true) {
      let displayName;
      if (typeof base === "string") {
        displayName = base;
      } else if (base.displayName) {
        displayName = base.displayName;
      } else if (base.name) {
        displayName = base.name;
      } else {
        displayName = "Unknown";
      }
      Wrapped.displayName = `Styled(${displayName})`;
    }
    return Wrapped;
  }
  function resolveStyle(getInitialStyle2, reducers, props) {
    let result = getInitialStyle2();
    let i = reducers.length;
    while (i--) {
      const reducer = reducers[i].reducer;
      result = reducer(result, props);
    }
    return result;
  }
  function isObject2(x) {
    return typeof x === "object" && x !== null;
  }
  function omitPrefixedKeys(source2) {
    const result = {};
    for (const key in source2) {
      if (key[0] !== "$") {
        result[key] = source2[key];
      }
    }
    return result;
  }
  function deepMerge(a, b) {
    const result = assign({}, a);
    for (const key in b) {
      const val = b[key];
      if (isObject2(val) && isObject2(a[key])) {
        result[key] = deepMerge(a[key], val);
      } else {
        result[key] = val;
      }
    }
    return result;
  }
  function shallowMerge(a, b) {
    return assign(assign({}, a), b);
  }
  function assign(target, source2) {
    for (const key in source2) {
      target[key] = source2[key];
    }
    return target;
  }

  // node_modules/baseui/esm/styles/theme-provider.js
  var React2 = __toESM(require_react());

  // node_modules/baseui/esm/tokens/colors.js
  var colors = {
    white: "#FFFFFF",
    gray50: "#F6F6F6",
    gray100: "#EEEEEE",
    gray200: "#E2E2E2",
    gray300: "#CBCBCB",
    gray400: "#AFAFAF",
    gray500: "#6B6B6B",
    gray600: "#545454",
    gray700: "#333333",
    gray800: "#1F1F1F",
    gray900: "#141414",
    black: "#000000",
    platinum50: "#F4FAFB",
    platinum100: "#EBF5F7",
    platinum200: "#CCDFE5",
    platinum300: "#A1BDCA",
    platinum400: "#8EA3AD",
    platinum500: "#6C7C83",
    platinum600: "#556268",
    platinum700: "#394145",
    platinum800: "#142328",
    red50: "#FFEFED",
    red100: "#FED7D2",
    red200: "#F1998E",
    red300: "#E85C4A",
    red400: "#E11900",
    red500: "#AB1300",
    red600: "#870F00",
    red700: "#5A0A00",
    orange50: "#FFF3EF",
    orange100: "#FFE1D6",
    orange200: "#FABDA5",
    orange300: "#FA9269",
    orange400: "#FF6937",
    orange500: "#C14F29",
    orange600: "#9A3F21",
    orange700: "#672A16",
    yellow50: "#FFFAF0",
    yellow100: "#FFF2D9",
    yellow200: "#FFE3AC",
    yellow300: "#FFCF70",
    yellow400: "#FFC043",
    yellow500: "#BC8B2C",
    yellow600: "#996F00",
    yellow700: "#674D1B",
    lime50: "#F2F7ED",
    lime100: "#E0ECD2",
    lime200: "#BCD69D",
    lime300: "#8BB956",
    lime400: "#67A421",
    lime500: "#4E7C19",
    lime600: "#3D6213",
    lime700: "#29410d",
    green50: "#E6F2ED",
    green100: "#ADDEC9",
    green200: "#66D19E",
    green300: "#06C167",
    green400: "#048848",
    green500: "#03703C",
    green600: "#03582F",
    green700: "#10462D",
    teal50: "#EDF5F7",
    teal100: "#D2E8EC",
    teal200: "#9DCDD6",
    teal300: "#56A9B9",
    teal400: "#218EA4",
    teal500: "#196B7C",
    teal600: "#135562",
    teal700: "#0D3841",
    blue50: "#EFF3FE",
    blue100: "#D4E2FC",
    blue200: "#A0BFF8",
    blue300: "#5B91F5",
    blue400: "#276EF1",
    blue500: "#1E54B7",
    blue600: "#174291",
    blue700: "#102C60",
    cobalt50: "#EBEDFA",
    cobalt100: "#D2D7F0",
    cobalt200: "#949CE3",
    cobalt300: "#535FCF",
    cobalt400: "#0E1FC1",
    cobalt500: "#0A1899",
    cobalt600: "#081270",
    cobalt700: "#050C4D",
    purple50: "#F3F1F9",
    purple100: "#E3DDF2",
    purple200: "#C1B4E2",
    purple300: "#957FCE",
    purple400: "#7356BF",
    purple500: "#574191",
    purple600: "#453473",
    purple700: "#2E224C",
    magenta50: "#F9F1F7",
    magenta100: "#F2DDEB",
    magenta200: "#E2B4D3",
    magenta300: "#CE7EB3",
    magenta400: "#BF569C",
    magenta500: "#914176",
    magenta600: "#72335D",
    magenta700: "#4C223E",
    brown50: "#F6F0EA",
    brown100: "#EBE0DB",
    brown200: "#D2BBB0",
    brown300: "#B18977",
    brown400: "#99644C",
    brown500: "#744C3A",
    brown600: "#5C3C2E",
    brown700: "#3D281E"
  };
  var colors_default = colors;

  // node_modules/baseui/esm/themes/light-theme/color-tokens.js
  var lightColorTokens = {
    primaryA: colors_default.black,
    primaryB: colors_default.white,
    primary: colors_default.black,
    primary50: colors_default.gray50,
    primary100: colors_default.gray100,
    primary200: colors_default.gray200,
    primary300: colors_default.gray300,
    primary400: colors_default.gray400,
    primary500: colors_default.gray500,
    primary600: colors_default.gray600,
    primary700: colors_default.gray700,
    accent: colors_default.blue400,
    accent50: colors_default.blue50,
    accent100: colors_default.blue100,
    accent200: colors_default.blue200,
    accent300: colors_default.blue300,
    accent400: colors_default.blue400,
    accent500: colors_default.blue500,
    accent600: colors_default.blue600,
    accent700: colors_default.blue700,
    negative: colors_default.red400,
    negative50: colors_default.red50,
    negative100: colors_default.red100,
    negative200: colors_default.red200,
    negative300: colors_default.red300,
    negative400: colors_default.red400,
    negative500: colors_default.red500,
    negative600: colors_default.red600,
    negative700: colors_default.red700,
    warning: colors_default.yellow400,
    warning50: colors_default.yellow50,
    warning100: colors_default.yellow100,
    warning200: colors_default.yellow200,
    warning300: colors_default.yellow300,
    warning400: colors_default.yellow400,
    warning500: colors_default.yellow500,
    warning600: colors_default.yellow600,
    warning700: colors_default.yellow700,
    positive: colors_default.green500,
    positive50: colors_default.green50,
    positive100: colors_default.green100,
    positive200: colors_default.green200,
    positive300: colors_default.green300,
    positive400: colors_default.green400,
    positive500: colors_default.green500,
    positive600: colors_default.green600,
    positive700: colors_default.green700,
    white: colors_default.white,
    black: colors_default.black,
    mono100: colors_default.white,
    mono200: colors_default.gray50,
    mono300: colors_default.gray100,
    mono400: colors_default.gray200,
    mono500: colors_default.gray300,
    mono600: colors_default.gray400,
    mono700: colors_default.gray500,
    mono800: colors_default.gray600,
    mono900: colors_default.gray700,
    mono1000: colors_default.black,
    ratingInactiveFill: colors_default.gray100,
    ratingStroke: colors_default.gray300
  };
  var color_tokens_default = lightColorTokens;

  // node_modules/baseui/esm/styles/util.js
  function hexToRgb() {
    var hex = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    var alpha = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "1";
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function(m2, r, g, b) {
      return r + r + g + g + b + b;
    });
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? "rgba(".concat(parseInt(result[1], 16), ", ").concat(parseInt(result[2], 16), ", ").concat(parseInt(result[3], 16), ", ").concat(alpha, ")") : null;
  }
  function expandBorderStyles(borderStyles) {
    return {
      borderTopWidth: borderStyles.borderWidth,
      borderTopStyle: borderStyles.borderStyle,
      borderTopColor: borderStyles.borderColor,
      borderBottomWidth: borderStyles.borderWidth,
      borderBottomStyle: borderStyles.borderStyle,
      borderBottomColor: borderStyles.borderColor,
      borderLeftWidth: borderStyles.borderWidth,
      borderLeftStyle: borderStyles.borderStyle,
      borderLeftColor: borderStyles.borderColor,
      borderRightWidth: borderStyles.borderWidth,
      borderRightStyle: borderStyles.borderStyle,
      borderRightColor: borderStyles.borderColor
    };
  }

  // node_modules/baseui/esm/themes/light-theme/color-semantic-tokens.js
  function ownKeys(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source2), true).forEach(function(key) {
        _defineProperty2(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty2(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var color_semantic_tokens_default = function() {
    var foundation = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : color_tokens_default;
    var core = {
      backgroundPrimary: foundation.primaryB,
      backgroundSecondary: colors_default.gray50,
      backgroundTertiary: colors_default.gray100,
      backgroundInversePrimary: foundation.primaryA,
      backgroundInverseSecondary: colors_default.gray800,
      contentPrimary: foundation.primaryA,
      contentSecondary: colors_default.gray600,
      contentTertiary: colors_default.gray500,
      contentInversePrimary: foundation.primaryB,
      contentInverseSecondary: colors_default.gray300,
      contentInverseTertiary: colors_default.gray400,
      borderOpaque: colors_default.gray200,
      borderTransparent: hexToRgb(foundation.primaryA, "0.08"),
      borderSelected: foundation.primaryA,
      borderInverseOpaque: colors_default.gray700,
      borderInverseTransparent: hexToRgb(foundation.primaryB, "0.2"),
      borderInverseSelected: foundation.primaryB
    };
    var coreExtensions = {
      backgroundStateDisabled: colors_default.gray50,
      backgroundOverlayDark: hexToRgb(colors_default.black, "0.3"),
      backgroundOverlayLight: hexToRgb(colors_default.black, "0.08"),
      backgroundOverlayArt: hexToRgb(colors_default.black, "0.00"),
      backgroundAccent: foundation.accent,
      backgroundNegative: foundation.negative,
      backgroundWarning: foundation.warning,
      backgroundPositive: colors_default.green400,
      backgroundLightAccent: colors_default.blue50,
      backgroundLightNegative: colors_default.red50,
      backgroundLightWarning: colors_default.yellow50,
      backgroundLightPositive: colors_default.green50,
      backgroundAlwaysDark: colors_default.black,
      backgroundAlwaysLight: colors_default.white,
      contentStateDisabled: colors_default.gray400,
      contentAccent: foundation.accent,
      contentOnColor: colors_default.white,
      contentOnColorInverse: colors_default.black,
      contentNegative: foundation.negative,
      contentWarning: colors_default.yellow600,
      contentPositive: colors_default.green400,
      borderStateDisabled: colors_default.gray50,
      borderAccent: colors_default.blue400,
      borderAccentLight: colors_default.blue200,
      borderNegative: colors_default.red200,
      borderWarning: colors_default.yellow200,
      borderPositive: colors_default.green200,
      safety: colors_default.blue400,
      eatsGreen400: colors_default.green400,
      freightBlue400: colors_default.cobalt400,
      jumpRed400: colors_default.red400,
      rewardsTier1: colors_default.blue400,
      rewardsTier2: colors_default.yellow400,
      rewardsTier3: colors_default.platinum400,
      rewardsTier4: colors_default.black,
      membership: colors_default.yellow600
    };
    return _objectSpread(_objectSpread({}, core), coreExtensions);
  };

  // node_modules/baseui/esm/themes/light-theme/color-component-tokens.js
  var tagHoverBackground = "rgba(0, 0, 0, 0.08)";
  var color_component_tokens_default = function() {
    var themePrimitives = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : color_tokens_default;
    return {
      bannerActionLowInfo: themePrimitives.accent100,
      bannerActionLowNegative: themePrimitives.negative100,
      bannerActionLowPositive: themePrimitives.positive100,
      bannerActionLowWarning: themePrimitives.warning200,
      bannerActionHighInfo: themePrimitives.accent500,
      bannerActionHighNegative: themePrimitives.negative500,
      bannerActionHighPositive: themePrimitives.positive500,
      bannerActionHighWarning: themePrimitives.warning200,
      buttonPrimaryFill: themePrimitives.primary,
      buttonPrimaryText: themePrimitives.white,
      buttonPrimaryHover: themePrimitives.primary700,
      buttonPrimaryActive: themePrimitives.primary600,
      buttonPrimarySelectedFill: themePrimitives.primary600,
      buttonPrimarySelectedText: themePrimitives.white,
      buttonPrimarySpinnerForeground: themePrimitives.accent,
      buttonPrimarySpinnerBackground: themePrimitives.primaryB,
      buttonSecondaryFill: themePrimitives.primary100,
      buttonSecondaryText: themePrimitives.primary,
      buttonSecondaryHover: themePrimitives.primary200,
      buttonSecondaryActive: themePrimitives.primary300,
      buttonSecondarySelectedFill: themePrimitives.primary300,
      buttonSecondarySelectedText: themePrimitives.primary,
      buttonSecondarySpinnerForeground: themePrimitives.accent,
      buttonSecondarySpinnerBackground: themePrimitives.primaryB,
      buttonTertiaryFill: "transparent",
      buttonTertiaryText: themePrimitives.primary,
      buttonTertiaryHover: themePrimitives.primary50,
      buttonTertiaryActive: themePrimitives.primary100,
      buttonTertiarySelectedFill: themePrimitives.primary100,
      buttonTertiarySelectedText: themePrimitives.primary,
      buttonTertiaryDisabledActiveFill: themePrimitives.primary50,
      buttonTertiaryDisabledActiveText: themePrimitives.mono600,
      buttonTertiarySpinnerForeground: themePrimitives.accent,
      buttonTertiarySpinnerBackground: themePrimitives.primary100,
      buttonDisabledFill: themePrimitives.mono200,
      buttonDisabledText: themePrimitives.mono600,
      buttonDisabledActiveFill: themePrimitives.mono700,
      buttonDisabledActiveText: themePrimitives.mono100,
      buttonDisabledSpinnerForeground: themePrimitives.mono600,
      buttonDisabledSpinnerBackground: themePrimitives.mono400,
      breadcrumbsText: themePrimitives.black,
      breadcrumbsSeparatorFill: themePrimitives.mono700,
      calendarBackground: themePrimitives.mono100,
      calendarForeground: themePrimitives.mono1000,
      calendarForegroundDisabled: themePrimitives.mono500,
      calendarHeaderBackground: themePrimitives.white,
      calendarHeaderForeground: themePrimitives.primary,
      calendarHeaderBackgroundActive: themePrimitives.primary700,
      calendarHeaderForegroundDisabled: themePrimitives.primary500,
      calendarDayForegroundPseudoSelected: themePrimitives.mono1000,
      calendarDayBackgroundPseudoSelectedHighlighted: themePrimitives.primary200,
      calendarDayForegroundPseudoSelectedHighlighted: themePrimitives.mono1000,
      calendarDayBackgroundSelected: themePrimitives.primary,
      calendarDayForegroundSelected: themePrimitives.white,
      calendarDayBackgroundSelectedHighlighted: themePrimitives.primary,
      calendarDayForegroundSelectedHighlighted: themePrimitives.white,
      comboboxListItemFocus: themePrimitives.mono200,
      comboboxListItemHover: themePrimitives.mono300,
      fileUploaderBackgroundColor: themePrimitives.mono200,
      fileUploaderBackgroundColorActive: themePrimitives.primary50,
      fileUploaderBorderColorActive: themePrimitives.primary,
      fileUploaderBorderColorDefault: themePrimitives.mono500,
      fileUploaderMessageColor: themePrimitives.mono800,
      linkText: themePrimitives.primary,
      linkVisited: themePrimitives.primary700,
      linkHover: themePrimitives.primary600,
      linkActive: themePrimitives.primary500,
      listHeaderFill: themePrimitives.white,
      listBodyFill: themePrimitives.white,
      progressStepsCompletedText: themePrimitives.white,
      progressStepsCompletedFill: themePrimitives.primary,
      progressStepsActiveText: themePrimitives.white,
      progressStepsActiveFill: themePrimitives.primary,
      toggleFill: themePrimitives.white,
      toggleFillChecked: themePrimitives.primary,
      toggleFillDisabled: themePrimitives.mono600,
      toggleTrackFill: themePrimitives.mono400,
      toggleTrackFillDisabled: themePrimitives.mono300,
      tickFill: themePrimitives.mono100,
      tickFillHover: themePrimitives.mono200,
      tickFillActive: themePrimitives.mono300,
      tickFillSelected: themePrimitives.primary,
      tickFillSelectedHover: themePrimitives.primary700,
      tickFillSelectedHoverActive: themePrimitives.primary600,
      tickFillError: themePrimitives.negative50,
      tickFillErrorHover: themePrimitives.negative100,
      tickFillErrorHoverActive: themePrimitives.negative200,
      tickFillErrorSelected: themePrimitives.negative400,
      tickFillErrorSelectedHover: themePrimitives.negative500,
      tickFillErrorSelectedHoverActive: themePrimitives.negative600,
      tickFillDisabled: themePrimitives.mono600,
      tickBorder: themePrimitives.mono700,
      tickBorderError: themePrimitives.negative400,
      tickMarkFill: themePrimitives.white,
      tickMarkFillError: themePrimitives.white,
      tickMarkFillDisabled: themePrimitives.mono100,
      sliderTrackFill: "transparent",
      sliderHandleFill: themePrimitives.primaryA,
      sliderHandleFillDisabled: themePrimitives.primary400,
      sliderHandleInnerFill: themePrimitives.primaryA,
      sliderTrackFillHover: themePrimitives.mono500,
      sliderTrackFillActive: themePrimitives.mono600,
      sliderTrackFillDisabled: themePrimitives.mono300,
      sliderHandleInnerFillDisabled: themePrimitives.mono400,
      sliderHandleInnerFillSelectedHover: themePrimitives.primary,
      sliderHandleInnerFillSelectedActive: themePrimitives.primary500,
      inputBorder: themePrimitives.mono300,
      inputFill: themePrimitives.mono300,
      inputFillError: themePrimitives.negative50,
      inputFillDisabled: themePrimitives.mono200,
      inputFillActive: themePrimitives.mono200,
      inputFillPositive: themePrimitives.positive50,
      inputTextDisabled: themePrimitives.mono600,
      inputBorderError: themePrimitives.negative200,
      inputBorderPositive: themePrimitives.positive200,
      inputEnhancerFill: themePrimitives.mono300,
      inputEnhancerFillDisabled: themePrimitives.mono300,
      inputEnhancerTextDisabled: themePrimitives.mono600,
      inputPlaceholder: themePrimitives.mono700,
      inputPlaceholderDisabled: themePrimitives.mono600,
      menuFill: themePrimitives.mono100,
      menuFillHover: themePrimitives.mono200,
      menuFontDefault: themePrimitives.mono800,
      menuFontDisabled: themePrimitives.mono500,
      menuFontHighlighted: themePrimitives.mono1000,
      menuFontSelected: themePrimitives.mono1000,
      modalCloseColor: themePrimitives.mono1000,
      modalCloseColorHover: themePrimitives.mono800,
      modalCloseColorFocus: themePrimitives.mono800,
      tabBarFill: themePrimitives.mono200,
      tabColor: themePrimitives.mono800,
      notificationInfoBackground: themePrimitives.accent50,
      notificationInfoText: themePrimitives.primaryA,
      notificationPositiveBackground: themePrimitives.positive50,
      notificationPositiveText: themePrimitives.primaryA,
      notificationWarningBackground: themePrimitives.warning50,
      notificationWarningText: themePrimitives.primaryA,
      notificationNegativeBackground: themePrimitives.negative50,
      notificationNegativeText: themePrimitives.primaryA,
      tagFontDisabledRampUnit: "100",
      tagSolidFontRampUnit: "0",
      tagSolidRampUnit: "400",
      tagOutlinedFontRampUnit: "400",
      tagOutlinedRampUnit: "200",
      tagSolidHoverRampUnit: "50",
      tagSolidActiveRampUnit: "100",
      tagSolidDisabledRampUnit: "50",
      tagSolidFontHoverRampUnit: "500",
      tagLightRampUnit: "50",
      tagLightHoverRampUnit: "100",
      tagLightActiveRampUnit: "100",
      tagLightFontRampUnit: "500",
      tagLightFontHoverRampUnit: "500",
      tagOutlinedHoverRampUnit: "50",
      tagOutlinedActiveRampUnit: "0",
      tagOutlinedFontHoverRampUnit: "400",
      tagNeutralFontDisabled: themePrimitives.mono600,
      tagNeutralOutlinedDisabled: themePrimitives.mono400,
      tagNeutralSolidFont: themePrimitives.white,
      tagNeutralSolidBackground: themePrimitives.black,
      tagNeutralOutlinedBackground: themePrimitives.mono600,
      tagNeutralOutlinedFont: themePrimitives.black,
      tagNeutralSolidHover: themePrimitives.mono300,
      tagNeutralSolidActive: themePrimitives.mono400,
      tagNeutralSolidDisabled: themePrimitives.mono200,
      tagNeutralSolidFontHover: themePrimitives.mono900,
      tagNeutralLightBackground: themePrimitives.mono300,
      tagNeutralLightHover: themePrimitives.mono300,
      tagNeutralLightActive: themePrimitives.mono400,
      tagNeutralLightDisabled: themePrimitives.mono200,
      tagNeutralLightFont: themePrimitives.mono900,
      tagNeutralLightFontHover: themePrimitives.mono900,
      tagNeutralOutlinedActive: themePrimitives.mono900,
      tagNeutralOutlinedFontHover: themePrimitives.mono800,
      tagNeutralOutlinedHover: tagHoverBackground,
      tagPrimaryFontDisabled: themePrimitives.primary400,
      tagPrimaryOutlinedDisabled: themePrimitives.primary200,
      tagPrimarySolidFont: themePrimitives.white,
      tagPrimarySolidBackground: themePrimitives.primary,
      tagPrimaryOutlinedFontHover: themePrimitives.primary,
      tagPrimaryOutlinedFont: themePrimitives.primary,
      tagPrimarySolidHover: themePrimitives.primary100,
      tagPrimarySolidActive: themePrimitives.primary200,
      tagPrimarySolidDisabled: themePrimitives.primary50,
      tagPrimarySolidFontHover: themePrimitives.primary700,
      tagPrimaryLightBackground: themePrimitives.primary50,
      tagPrimaryLightHover: themePrimitives.primary100,
      tagPrimaryLightActive: themePrimitives.primary100,
      tagPrimaryLightDisabled: themePrimitives.primary50,
      tagPrimaryLightFont: themePrimitives.primary500,
      tagPrimaryLightFontHover: themePrimitives.primary500,
      tagPrimaryOutlinedActive: themePrimitives.primary600,
      tagPrimaryOutlinedHover: tagHoverBackground,
      tagPrimaryOutlinedBackground: themePrimitives.primary400,
      tagAccentFontDisabled: themePrimitives.accent200,
      tagAccentOutlinedDisabled: themePrimitives.accent200,
      tagAccentSolidFont: themePrimitives.white,
      tagAccentSolidBackground: themePrimitives.accent400,
      tagAccentOutlinedBackground: themePrimitives.accent200,
      tagAccentOutlinedFont: themePrimitives.accent400,
      tagAccentSolidHover: themePrimitives.accent50,
      tagAccentSolidActive: themePrimitives.accent100,
      tagAccentSolidDisabled: themePrimitives.accent50,
      tagAccentSolidFontHover: themePrimitives.accent500,
      tagAccentLightBackground: themePrimitives.accent50,
      tagAccentLightHover: themePrimitives.accent100,
      tagAccentLightActive: themePrimitives.accent100,
      tagAccentLightDisabled: themePrimitives.accent50,
      tagAccentLightFont: themePrimitives.accent500,
      tagAccentLightFontHover: themePrimitives.accent500,
      tagAccentOutlinedActive: themePrimitives.accent600,
      tagAccentOutlinedFontHover: themePrimitives.accent400,
      tagAccentOutlinedHover: tagHoverBackground,
      tagPositiveFontDisabled: themePrimitives.positive200,
      tagPositiveOutlinedDisabled: themePrimitives.positive200,
      tagPositiveSolidFont: themePrimitives.white,
      tagPositiveSolidBackground: themePrimitives.positive400,
      tagPositiveOutlinedBackground: themePrimitives.positive200,
      tagPositiveOutlinedFont: themePrimitives.positive400,
      tagPositiveSolidHover: themePrimitives.positive50,
      tagPositiveSolidActive: themePrimitives.positive100,
      tagPositiveSolidDisabled: themePrimitives.positive50,
      tagPositiveSolidFontHover: themePrimitives.positive500,
      tagPositiveLightBackground: themePrimitives.positive50,
      tagPositiveLightHover: themePrimitives.positive100,
      tagPositiveLightActive: themePrimitives.positive100,
      tagPositiveLightDisabled: themePrimitives.positive50,
      tagPositiveLightFont: themePrimitives.positive500,
      tagPositiveLightFontHover: themePrimitives.positive500,
      tagPositiveOutlinedActive: themePrimitives.positive600,
      tagPositiveOutlinedFontHover: themePrimitives.positive400,
      tagPositiveOutlinedHover: tagHoverBackground,
      tagWarningFontDisabled: themePrimitives.warning300,
      tagWarningOutlinedDisabled: themePrimitives.warning300,
      tagWarningSolidFont: themePrimitives.warning700,
      tagWarningSolidBackground: themePrimitives.warning400,
      tagWarningOutlinedBackground: themePrimitives.warning300,
      tagWarningOutlinedFont: themePrimitives.warning600,
      tagWarningSolidHover: themePrimitives.warning50,
      tagWarningSolidActive: themePrimitives.warning100,
      tagWarningSolidDisabled: themePrimitives.warning50,
      tagWarningSolidFontHover: themePrimitives.warning500,
      tagWarningLightBackground: themePrimitives.warning50,
      tagWarningLightHover: themePrimitives.warning100,
      tagWarningLightActive: themePrimitives.warning100,
      tagWarningLightDisabled: themePrimitives.warning50,
      tagWarningLightFont: themePrimitives.warning500,
      tagWarningLightFontHover: themePrimitives.warning500,
      tagWarningOutlinedActive: themePrimitives.warning600,
      tagWarningOutlinedFontHover: themePrimitives.warning600,
      tagWarningOutlinedHover: tagHoverBackground,
      tagNegativeFontDisabled: themePrimitives.negative200,
      tagNegativeOutlinedDisabled: themePrimitives.negative200,
      tagNegativeSolidFont: themePrimitives.white,
      tagNegativeSolidBackground: themePrimitives.negative400,
      tagNegativeOutlinedBackground: themePrimitives.negative200,
      tagNegativeOutlinedFont: themePrimitives.negative400,
      tagNegativeSolidHover: themePrimitives.negative50,
      tagNegativeSolidActive: themePrimitives.negative100,
      tagNegativeSolidDisabled: themePrimitives.negative50,
      tagNegativeSolidFontHover: themePrimitives.negative500,
      tagNegativeLightBackground: themePrimitives.negative50,
      tagNegativeLightHover: themePrimitives.negative100,
      tagNegativeLightActive: themePrimitives.negative100,
      tagNegativeLightDisabled: themePrimitives.negative50,
      tagNegativeLightFont: themePrimitives.negative500,
      tagNegativeLightFontHover: themePrimitives.negative500,
      tagNegativeOutlinedActive: themePrimitives.negative600,
      tagNegativeOutlinedFontHover: themePrimitives.negative400,
      tagNegativeOutlinedHover: tagHoverBackground,
      tableHeadBackgroundColor: themePrimitives.mono100,
      tableBackground: themePrimitives.mono100,
      tableStripedBackground: themePrimitives.mono200,
      tableFilter: themePrimitives.mono600,
      tableFilterHeading: themePrimitives.mono700,
      tableFilterBackground: themePrimitives.mono100,
      tableFilterFooterBackground: themePrimitives.mono200,
      toastText: themePrimitives.white,
      toastPrimaryText: themePrimitives.white,
      toastInfoBackground: themePrimitives.accent400,
      toastInfoText: themePrimitives.white,
      toastPositiveBackground: themePrimitives.positive400,
      toastPositiveText: themePrimitives.white,
      toastWarningBackground: themePrimitives.warning400,
      toastWarningText: themePrimitives.black,
      toastNegativeBackground: themePrimitives.negative400,
      toastNegativeText: themePrimitives.white,
      spinnerTrackFill: themePrimitives.mono900,
      progressbarTrackFill: themePrimitives.mono900,
      tooltipBackground: themePrimitives.mono900,
      tooltipText: themePrimitives.mono100
    };
  };

  // node_modules/baseui/esm/themes/shared/borders.js
  var borders = {
    border100: {
      borderColor: "hsla(0, 0%, 0%, 0.04)",
      borderStyle: "solid",
      borderWidth: "1px"
    },
    border200: {
      borderColor: "hsla(0, 0%, 0%, 0.08)",
      borderStyle: "solid",
      borderWidth: "1px"
    },
    border300: {
      borderColor: "hsla(0, 0%, 0%, 0.12)",
      borderStyle: "solid",
      borderWidth: "1px"
    },
    border400: {
      borderColor: "hsla(0, 0%, 0%, 0.16)",
      borderStyle: "solid",
      borderWidth: "1px"
    },
    border500: {
      borderColor: "hsla(0, 0%, 0%, 0.2)",
      borderStyle: "solid",
      borderWidth: "1px"
    },
    border600: {
      borderColor: "hsla(0, 0%, 0%, 0.24)",
      borderStyle: "solid",
      borderWidth: "1px"
    },
    radius100: "2px",
    radius200: "4px",
    radius300: "8px",
    radius400: "12px",
    radius500: "16px",
    useRoundedCorners: true,
    buttonBorderRadiusMini: "4px",
    buttonBorderRadius: "8px",
    checkboxBorderRadius: "0px",
    inputBorderRadiusMini: "4px",
    inputBorderRadius: "8px",
    popoverBorderRadius: "8px",
    surfaceBorderRadius: "0px",
    tagBorderRadius: "24px"
  };
  var borders_default = borders;

  // node_modules/baseui/esm/themes/shared/lighting.js
  var lighting = {
    shadow400: "0 1px 4px hsla(0, 0%, 0%, 0.16)",
    shadow500: "0 2px 8px hsla(0, 0%, 0%, 0.16)",
    shadow600: "0 4px 16px hsla(0, 0%, 0%, 0.16)",
    shadow700: "0 8px 24px hsla(0, 0%, 0%, 0.16)",
    overlay0: "inset 0 0 0 1000px hsla(0, 0%, 0%, 0)",
    overlay100: "inset 0 0 0 1000px hsla(0, 0%, 0%, 0.04)",
    overlay200: "inset 0 0 0 1000px hsla(0, 0%, 0%, 0.08)",
    overlay300: "inset 0 0 0 1000px hsla(0, 0%, 0%, 0.12)",
    overlay400: "inset 0 0 0 1000px hsla(0, 0%, 0%, 0.16)",
    overlay500: "inset 0 0 0 1000px hsla(0, 0%, 0%, 0.2)",
    overlay600: "inset 0 0 0 1000px hsla(0, 0%, 0%, 0.24)",
    shallowAbove: "0px -4px 16px rgba(0, 0, 0, 0.12)",
    shallowBelow: "0px 4px 16px rgba(0, 0, 0, 0.12)",
    deepAbove: "0px -16px 48px rgba(0, 0, 0, 0.22)",
    deepBelow: "0px 16px 48px rgba(0, 0, 0, 0.22)"
  };
  var lighting_default = lighting;

  // node_modules/baseui/esm/themes/shared/typography.js
  function ownKeys2(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source2), true).forEach(function(key) {
        _defineProperty3(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys2(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty3(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var defaultFontTokens = {
    primaryFontFamily: 'system-ui, "Helvetica Neue", Helvetica, Arial, sans-serif'
  };
  var monoFontFamily = '"Lucida Console", Monaco, monospace';
  var typography_default = function() {
    var fontTokens = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultFontTokens;
    var font100 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "12px",
      fontWeight: "normal",
      lineHeight: "20px"
    };
    var font150 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "12px",
      fontWeight: 500,
      lineHeight: "16px"
    };
    var font200 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "14px",
      fontWeight: "normal",
      lineHeight: "20px"
    };
    var font250 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "14px",
      fontWeight: 500,
      lineHeight: "16px"
    };
    var font300 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "16px",
      fontWeight: "normal",
      lineHeight: "24px"
    };
    var font350 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "16px",
      fontWeight: 500,
      lineHeight: "20px"
    };
    var font400 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "18px",
      fontWeight: "normal",
      lineHeight: "28px"
    };
    var font450 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "18px",
      fontWeight: 500,
      lineHeight: "24px"
    };
    var font550 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "20px",
      fontWeight: 700,
      lineHeight: "28px"
    };
    var font650 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "24px",
      fontWeight: 700,
      lineHeight: "32px"
    };
    var font750 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "28px",
      fontWeight: 700,
      lineHeight: "36px"
    };
    var font850 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "32px",
      fontWeight: 700,
      lineHeight: "40px"
    };
    var font950 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "36px",
      fontWeight: 700,
      lineHeight: "44px"
    };
    var font1050 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "40px",
      fontWeight: 700,
      lineHeight: "52px"
    };
    var font1150 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "36px",
      fontWeight: 700,
      lineHeight: "44px"
    };
    var font1250 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "44px",
      fontWeight: 700,
      lineHeight: "52px"
    };
    var font1350 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "52px",
      fontWeight: 700,
      lineHeight: "64px"
    };
    var font1450 = {
      fontFamily: fontTokens.primaryFontFamily,
      fontSize: "96px",
      fontWeight: 700,
      lineHeight: "112px"
    };
    return {
      font100,
      font150,
      font200,
      font250,
      font300,
      font350,
      font400,
      font450,
      font550,
      font650,
      font750,
      font850,
      font950,
      font1050,
      font1150,
      font1250,
      font1350,
      font1450,
      ParagraphXSmall: font100,
      ParagraphSmall: font200,
      ParagraphMedium: font300,
      ParagraphLarge: font400,
      LabelXSmall: font150,
      LabelSmall: font250,
      LabelMedium: font350,
      LabelLarge: font450,
      HeadingXSmall: font550,
      HeadingSmall: font650,
      HeadingMedium: font750,
      HeadingLarge: font850,
      HeadingXLarge: font950,
      HeadingXXLarge: font1050,
      DisplayXSmall: font1150,
      DisplaySmall: font1250,
      DisplayMedium: font1350,
      DisplayLarge: font1450,
      MonoParagraphXSmall: _objectSpread2(_objectSpread2({}, font100), {}, {
        fontFamily: monoFontFamily
      }),
      MonoParagraphSmall: _objectSpread2(_objectSpread2({}, font200), {}, {
        fontFamily: monoFontFamily
      }),
      MonoParagraphMedium: _objectSpread2(_objectSpread2({}, font300), {}, {
        fontFamily: monoFontFamily
      }),
      MonoParagraphLarge: _objectSpread2(_objectSpread2({}, font400), {}, {
        fontFamily: monoFontFamily
      }),
      MonoLabelXSmall: _objectSpread2(_objectSpread2({}, font150), {}, {
        fontFamily: monoFontFamily
      }),
      MonoLabelSmall: _objectSpread2(_objectSpread2({}, font250), {}, {
        fontFamily: monoFontFamily
      }),
      MonoLabelMedium: _objectSpread2(_objectSpread2({}, font350), {}, {
        fontFamily: monoFontFamily
      }),
      MonoLabelLarge: _objectSpread2(_objectSpread2({}, font450), {}, {
        fontFamily: monoFontFamily
      }),
      MonoHeadingXSmall: _objectSpread2(_objectSpread2({}, font550), {}, {
        fontFamily: monoFontFamily
      }),
      MonoHeadingSmall: _objectSpread2(_objectSpread2({}, font650), {}, {
        fontFamily: monoFontFamily
      }),
      MonoHeadingMedium: _objectSpread2(_objectSpread2({}, font750), {}, {
        fontFamily: monoFontFamily
      }),
      MonoHeadingLarge: _objectSpread2(_objectSpread2({}, font850), {}, {
        fontFamily: monoFontFamily
      }),
      MonoHeadingXLarge: _objectSpread2(_objectSpread2({}, font950), {}, {
        fontFamily: monoFontFamily
      }),
      MonoHeadingXXLarge: _objectSpread2(_objectSpread2({}, font1050), {}, {
        fontFamily: monoFontFamily
      }),
      MonoDisplayXSmall: _objectSpread2(_objectSpread2({}, font1150), {}, {
        fontFamily: monoFontFamily
      }),
      MonoDisplaySmall: _objectSpread2(_objectSpread2({}, font1250), {}, {
        fontFamily: monoFontFamily
      }),
      MonoDisplayMedium: _objectSpread2(_objectSpread2({}, font1350), {}, {
        fontFamily: monoFontFamily
      }),
      MonoDisplayLarge: _objectSpread2(_objectSpread2({}, font1450), {}, {
        fontFamily: monoFontFamily
      })
    };
  };

  // node_modules/baseui/esm/themes/shared/animation.js
  var animation = {
    timing100: "100ms",
    timing200: "200ms",
    timing300: "300ms",
    timing400: "400ms",
    timing500: "500ms",
    timing600: "600ms",
    timing700: "700ms",
    timing800: "800ms",
    timing900: "900ms",
    timing1000: "1000ms",
    easeInCurve: "cubic-bezier(.8, .2, .6, 1)",
    easeOutCurve: "cubic-bezier(.2, .8, .4, 1)",
    easeInOutCurve: "cubic-bezier(0.4, 0, 0.2, 1)",
    easeInQuinticCurve: "cubic-bezier(0.755, 0.05, 0.855, 0.06)",
    easeOutQuinticCurve: "cubic-bezier(0.23, 1, 0.32, 1)",
    easeInOutQuinticCurve: "cubic-bezier(0.86, 0, 0.07, 1)",
    linearCurve: "cubic-bezier(0, 0, 1, 1)"
  };
  var animation_default = animation;

  // node_modules/baseui/esm/themes/shared/breakpoints.js
  var breakpoints = {
    small: 320,
    medium: 600,
    large: 1136
  };
  var breakpoints_default = breakpoints;

  // node_modules/baseui/esm/themes/shared/grid.js
  var grid2 = {
    columns: [4, 8, 12],
    gutters: [16, 36, 36],
    margins: [16, 36, 64],
    gaps: 0,
    unit: "px",
    maxWidth: 1280
  };
  var grid_default = grid2;

  // node_modules/baseui/esm/helpers/responsive-helpers.js
  var getMediaQuery = function getMediaQuery2(breakpoint) {
    return "@media screen and (min-width: ".concat(breakpoint, "px)");
  };
  var getMediaQueries = function getMediaQueries2(breakpoints2) {
    return Object.keys(breakpoints2).map(function(key) {
      return breakpoints2[key];
    }).sort(function(a, b) {
      return a - b;
    }).map(getMediaQuery);
  };

  // node_modules/baseui/esm/themes/shared/media-query.js
  var mediaQuery = {
    small: getMediaQuery(breakpoints_default.small),
    medium: getMediaQuery(breakpoints_default.medium),
    large: getMediaQuery(breakpoints_default.large)
  };
  var media_query_default = mediaQuery;

  // node_modules/baseui/esm/themes/shared/sizing.js
  var sizing2 = {
    scale0: "2px",
    scale100: "4px",
    scale200: "6px",
    scale300: "8px",
    scale400: "10px",
    scale500: "12px",
    scale550: "14px",
    scale600: "16px",
    scale650: "18px",
    scale700: "20px",
    scale750: "22px",
    scale800: "24px",
    scale850: "28px",
    scale900: "32px",
    scale950: "36px",
    scale1000: "40px",
    scale1200: "48px",
    scale1400: "56px",
    scale1600: "64px",
    scale2400: "96px",
    scale3200: "128px",
    scale4800: "192px"
  };
  var sizing_default = sizing2;

  // node_modules/baseui/esm/themes/light-theme/light-theme.js
  function ownKeys3(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread3(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys3(Object(source2), true).forEach(function(key) {
        _defineProperty4(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys3(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty4(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var LightTheme = {
    name: "light-theme",
    colors: _objectSpread3(_objectSpread3(_objectSpread3({}, color_tokens_default), color_component_tokens_default()), color_semantic_tokens_default()),
    animation: animation_default,
    breakpoints: breakpoints_default,
    borders: borders_default,
    direction: "auto",
    grid: grid_default,
    lighting: lighting_default,
    mediaQuery: media_query_default,
    sizing: sizing_default,
    typography: typography_default(),
    zIndex: {
      modal: 2e3
    }
  };

  // node_modules/baseui/esm/utils/deep-merge.js
  function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  }
  function deepMerge2(target) {
    target = target || {};
    var len = arguments.length <= 1 ? 0 : arguments.length - 1;
    var obj;
    var value;
    for (var i = 0; i < len; i++) {
      obj = (i + 1 < 1 || arguments.length <= i + 1 ? void 0 : arguments[i + 1]) || {};
      for (var key in obj) {
        if (_typeof(obj[key]) !== void 0) {
          value = obj[key];
          if (isCloneable(value)) {
            target[key] = deepMerge2(
              target[key] || Array.isArray(value) && [] || {},
              value
            );
          } else {
            target[key] = value;
          }
        }
      }
    }
    return target;
  }
  function isCloneable(obj) {
    return Array.isArray(obj) || {}.toString.call(obj) == "[object Object]";
  }

  // node_modules/baseui/esm/styles/theme-provider.js
  var ThemeContext = /* @__PURE__ */ React2.createContext(LightTheme);
  var ThemeProvider = function ThemeProvider2(props) {
    var theme = props.theme, children2 = props.children;
    return /* @__PURE__ */ React2.createElement(ThemeContext.Provider, {
      value: theme
    }, children2);
  };
  var theme_provider_default = ThemeProvider;

  // node_modules/baseui/esm/styles/styled.js
  var React3 = __toESM(require_react());
  function ownKeys4(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread4(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys4(Object(source2), true).forEach(function(key) {
        _defineProperty5(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys4(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty5(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _slicedToArray2(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _extends2() {
    _extends2 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  var wrapper = function wrapper2(StyledComponent) {
    return /* @__PURE__ */ React3.forwardRef(function(props, ref) {
      return /* @__PURE__ */ React3.createElement(ThemeContext.Consumer, null, function(theme) {
        return /* @__PURE__ */ React3.createElement(StyledComponent, _extends2({
          ref
        }, props, {
          $theme: theme
        }));
      });
    });
  };
  function createThemedStyled() {
    return createStyled({
      wrapper,
      getInitialStyle,
      driver
    });
  }
  var styled2 = createThemedStyled();
  function createThemedWithStyle() {
    return withStyle;
  }
  var withStyle2 = createThemedWithStyle();
  function createThemedUseStyletron() {
    return function() {
      var theme = React3.useContext(ThemeContext);
      var _styletronUseStyletro = useStyletron(), _styletronUseStyletro2 = _slicedToArray2(_styletronUseStyletro, 1), css = _styletronUseStyletro2[0];
      return [css, theme];
    };
  }
  var useStyletron2 = createThemedUseStyletron();
  function withWrapper2(StyledElement, wrapperFn) {
    return withWrapper(StyledElement, function(Styled) {
      return /* @__PURE__ */ React3.forwardRef(function(props, ref) {
        return /* @__PURE__ */ React3.createElement(ThemeContext.Consumer, null, function(theme) {
          return wrapperFn(Styled)(_objectSpread4(_objectSpread4({
            ref
          }, props), {}, {
            $theme: theme
          }));
        });
      });
    });
  }

  // node_modules/baseui/esm/styles/index.js
  var ThemeConsumer = ThemeContext.Consumer;

  // node_modules/baseui/esm/locale/index.js
  var React4 = __toESM(require_react());
  var import_just_extend = __toESM(require_just_extend());

  // node_modules/baseui/esm/accordion/locale.js
  var locale = {
    collapse: "Collapse",
    expand: "Expand"
  };
  var locale_default = locale;

  // node_modules/baseui/esm/breadcrumbs/locale.js
  var locale2 = {
    ariaLabel: "Breadcrumbs navigation"
  };
  var locale_default2 = locale2;

  // node_modules/baseui/esm/datepicker/locale.js
  var locale3 = {
    ariaLabel: "Select a date.",
    ariaLabelRange: "Select a date range.",
    ariaLabelCalendar: "Calendar.",
    ariaRoleDescriptionCalendarMonth: "Calendar month",
    previousMonth: "Previous month.",
    nextMonth: "Next month.",
    pastWeek: "Past Week",
    pastMonth: "Past Month",
    pastThreeMonths: "Past 3 Months",
    pastSixMonths: "Past 6 Months",
    pastYear: "Past Year",
    pastTwoYears: "Past 2 Years",
    screenReaderMessageInput: "Press the down arrow key to interact with the calendar and select a date. Press the escape button to close the calendar.",
    selectedDate: "Selected date is ${date}.",
    selectedDateRange: "Selected date range is from ${startDate} to ${endDate}.",
    selectSecondDatePrompt: "Select the second date.",
    quickSelectLabel: "Choose a date range",
    quickSelectAriaLabel: "Choose a date range",
    quickSelectPlaceholder: "None",
    timeSelectEndLabel: "End time",
    timeSelectStartLabel: "Start time",
    timePickerAriaLabel12Hour: "Select a time, 12-hour format.",
    timePickerAriaLabel24Hour: "Select a time, 24-hour format.",
    timezonePickerAriaLabel: "Select a timezone.",
    selectedStartDateLabel: "Selected start date.",
    selectedEndDateLabel: "Selected end date.",
    dateNotAvailableLabel: "Not available.",
    dateAvailableLabel: "It's available.",
    selectedLabel: "Selected.",
    chooseLabel: "Choose"
  };
  var locale_default3 = locale3;

  // node_modules/baseui/esm/data-table/locale.js
  var locale4 = {
    emptyState: "No rows match the filter criteria defined. Please remove one or more filters to view more data.",
    loadingState: "Loading rows.",
    searchAriaLabel: "Search by text",
    filterAdd: "Add Filter",
    filterExclude: "Exclude",
    filterApply: "Apply",
    filterExcludeRange: "Exclude range",
    filterExcludeValue: "Exclude value",
    filterAppliedTo: "filter applied to",
    optionsLabel: "Select column to filter by",
    optionsSearch: "Search for a column to filter by...",
    optionsEmpty: "No columns available.",
    categoricalFilterSelectAll: "Select All",
    categoricalFilterSelectClear: "Clear",
    categoricalFilterEmpty: "No categories found",
    datetimeFilterRange: "Range",
    datetimeFilterRangeDatetime: "Date, Time",
    datetimeFilterRangeDate: "Date",
    datetimeFilterRangeTime: "Time",
    datetimeFilterCategorical: "Categorical",
    datetimeFilterCategoricalWeekday: "Weekday",
    datetimeFilterCategoricalMonth: "Month",
    datetimeFilterCategoricalQuarter: "Quarter",
    datetimeFilterCategoricalHalf: "Half",
    datetimeFilterCategoricalFirstHalf: "H1",
    datetimeFilterCategoricalSecondHalf: "H2",
    datetimeFilterCategoricalYear: "Year",
    numericalFilterRange: "Range",
    numericalFilterSingleValue: "Single Value",
    booleanFilterTrue: "true",
    booleanFilterFalse: "false",
    booleanColumnTrueShort: "T",
    booleanColumnFalseShort: "F",
    selectRow: "Select row",
    selectAllRows: "Select all rows"
  };
  var locale_default4 = locale4;

  // node_modules/baseui/esm/button-group/locale.js
  var locale5 = {
    ariaLabel: "button group"
  };
  var locale_default5 = locale5;

  // node_modules/baseui/esm/file-uploader/locale.js
  var locale6 = {
    dropFilesToUpload: "Drop files here to upload...",
    or: "",
    browseFiles: "Browse files",
    retry: "Retry Upload",
    cancel: "Cancel"
  };
  var locale_default6 = locale6;

  // node_modules/baseui/esm/menu/locale.js
  var locale7 = {
    noResultsMsg: "No results",
    parentMenuItemAriaLabel: "You are currently at an item that opens a nested listbox. Press right arrow to enter that element and left arrow to return."
  };
  var locale_default7 = locale7;

  // node_modules/baseui/esm/modal/locale.js
  var locale8 = {
    close: "Close"
  };
  var locale_default8 = locale8;

  // node_modules/baseui/esm/drawer/locale.js
  var locale9 = {
    close: "Close"
  };
  var locale_default9 = locale9;

  // node_modules/baseui/esm/pagination/locale.js
  var locale10 = {
    prev: "Prev",
    next: "Next",
    preposition: "of"
  };
  var locale_default10 = locale10;

  // node_modules/baseui/esm/select/locale.js
  var locale11 = {
    noResultsMsg: "No results found",
    placeholder: "Select...",
    create: "Create"
  };
  var locale_default11 = locale11;

  // node_modules/baseui/esm/toast/locale.js
  var locale12 = {
    close: "Close"
  };
  var locale_default12 = locale12;

  // node_modules/baseui/esm/locale/en_US.js
  var en_US = {
    accordion: locale_default,
    breadcrumbs: locale_default2,
    datepicker: locale_default3,
    datatable: locale_default4,
    buttongroup: locale_default5,
    fileuploader: locale_default6,
    menu: locale_default7,
    modal: locale_default8,
    drawer: locale_default9,
    pagination: locale_default10,
    select: locale_default11,
    toast: locale_default12
  };
  var en_US_default = en_US;

  // node_modules/baseui/esm/locale/index.js
  var LocaleContext = /* @__PURE__ */ React4.createContext(en_US_default);

  // node_modules/baseui/esm/helpers/base-provider.js
  var React12 = __toESM(require_react());

  // node_modules/react-uid/dist/es2015/uid.js
  var generateUID = function() {
    var counter2 = 1;
    var map = /* @__PURE__ */ new WeakMap();
    var uid2 = function(item, index2) {
      if (typeof item === "number" || typeof item === "string") {
        return index2 ? "idx-" + index2 : "val-" + item;
      }
      if (!map.has(item)) {
        map.set(item, counter2++);
        return uid2(item);
      }
      return "uid" + map.get(item);
    };
    return uid2;
  };
  var uid = generateUID();

  // node_modules/react-uid/dist/es2015/Control.js
  var React6 = __toESM(require_react());

  // node_modules/react-uid/dist/es2015/context.js
  var React5 = __toESM(require_react());
  var createSource = function(prefix2) {
    if (prefix2 === void 0) {
      prefix2 = "";
    }
    return {
      value: 1,
      prefix: prefix2,
      uid: generateUID()
    };
  };
  var counter = createSource();
  var source = React5.createContext(createSource());
  var getId = function(source2) {
    return source2.value++;
  };
  var getPrefix = function(source2) {
    return source2 ? source2.prefix : "";
  };

  // node_modules/tslib/tslib.es6.js
  var __assign = function() {
    __assign = Object.assign || function __assign2(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    return __assign.apply(this, arguments);
  };

  // node_modules/react-uid/dist/es2015/Control.js
  var UIDReset = function(_a) {
    var children2 = _a.children, _b = _a.prefix, prefix2 = _b === void 0 ? "" : _b;
    return React6.createElement(source.Provider, { value: createSource(prefix2) }, children2);
  };

  // node_modules/react-uid/dist/es2015/hooks.js
  var React7 = __toESM(require_react());
  var generateUID2 = function(context3) {
    var quartz = context3 || counter;
    var prefix2 = getPrefix(quartz);
    var id = getId(quartz);
    var uid2 = prefix2 + id;
    var gen = function(item) {
      return uid2 + quartz.uid(item);
    };
    return { uid: uid2, gen };
  };
  var useUIDState = function() {
    if (true) {
      if (!("useContext" in React7)) {
        throw new Error("Hooks API requires React 16.8+");
      }
    }
    return React7.useState(generateUID2(React7.useContext(source)));
  };
  var useUID = function() {
    var uid2 = useUIDState()[0].uid;
    return uid2;
  };
  var useUIDSeed = function() {
    var gen = useUIDState()[0].gen;
    return gen;
  };

  // node_modules/baseui/esm/layer/layers-manager.js
  var React9 = __toESM(require_react());

  // node_modules/baseui/esm/helpers/overrides.js
  var React8 = __toESM(require_react());
  var import_react_is = __toESM(require_react_is());
  function _extends3() {
    _extends3 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  function ownKeys5(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread5(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys5(Object(source2), true).forEach(function(key) {
        _defineProperty6(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys5(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty6(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof2(obj);
  }
  function getOverride(_override) {
    if ((0, import_react_is.isValidElementType)(_override)) {
      return _override;
    }
    if (_override && _typeof2(_override) === "object") {
      return _override.component;
    }
    return _override;
  }
  function getOverrideProps(_override) {
    if (_override && _typeof2(_override) === "object") {
      if (_typeof2(_override.props) === "object") {
        return _objectSpread5(_objectSpread5({}, _override.props), {}, {
          $style: _override.style
        });
      } else {
        return {
          $style: _override.style
        };
      }
    }
    return {};
  }
  function toObjectOverride(_override) {
    if ((0, import_react_is.isValidElementType)(_override)) {
      return {
        component: _override
      };
    }
    return _override || {};
  }
  function getOverrides(_override, defaultComponent) {
    var Component15 = getOverride(_override) || defaultComponent;
    if (_override && _typeof2(_override) === "object" && typeof _override.props === "function") {
      if (true) {
        console.warn("baseui:Overrides Props as a function will be removed in the next major version. Override the whole component instead. See https://baseweb.design/guides/understanding-overrides/#override-the-entire-subcomponent");
      }
      var DynamicOverride = /* @__PURE__ */ React8.forwardRef(function(props2, ref) {
        var mappedProps = _override.props(props2);
        var nextProps = getOverrideProps(_objectSpread5(_objectSpread5({}, _override), {}, {
          props: mappedProps
        }));
        return /* @__PURE__ */ React8.createElement(Component15, _extends3({
          ref
        }, nextProps));
      });
      DynamicOverride.displayName = Component15.displayName;
      return [DynamicOverride, {}];
    }
    var props = getOverrideProps(_override);
    return [Component15, props];
  }
  function mergeOverrides() {
    var target = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var source2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var merged = Object.assign({}, target, source2);
    var allIdentifiers = Object.keys(merged);
    return allIdentifiers.reduce(function(acc, name) {
      acc[name] = mergeOverride(toObjectOverride(target[name]), toObjectOverride(source2[name]));
      return acc;
    }, {});
  }
  function mergeOverride(target, source2) {
    var merged = _objectSpread5(_objectSpread5({}, target), source2);
    if (target.props && source2.props) {
      merged.props = mergeConfigurationOverrides(target.props, source2.props);
    }
    if (target.style && source2.style) {
      merged.style = mergeConfigurationOverrides(target.style, source2.style);
    }
    return merged;
  }
  function mergeConfigurationOverrides(target, source2) {
    if (_typeof2(target) === "object" && _typeof2(source2) === "object") {
      return deepMerge2({}, target, source2);
    }
    return function() {
      return deepMerge2({}, typeof target === "function" ? target.apply(void 0, arguments) : target, typeof source2 === "function" ? source2.apply(void 0, arguments) : source2);
    };
  }

  // node_modules/baseui/esm/utils/focusVisible.js
  var initialized = false;
  var hadKeyboardEvent = true;
  var hadFocusVisibleRecently = false;
  var inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    "datetime-local": true
  };
  function focusTriggersKeyboardModality(node5) {
    var type = node5.type, tagName = node5.tagName;
    if (tagName === "INPUT" && inputTypesWhitelist[type] && !node5.readOnly) {
      return true;
    }
    if (tagName === "TEXTAREA" && !node5.readOnly) {
      return true;
    }
    if (node5.isContentEditable) {
      return true;
    }
    return false;
  }
  function handleKeyDown(event) {
    if (event.metaKey || event.altKey || event.ctrlKey) {
      return;
    }
    hadKeyboardEvent = true;
  }
  function handlePointerDown() {
    hadKeyboardEvent = false;
  }
  function handleVisibilityChange() {
    if (this.visibilityState === "hidden") {
      if (hadFocusVisibleRecently) {
        hadKeyboardEvent = true;
      }
    }
  }
  function prepare(doc) {
    doc.addEventListener("keydown", handleKeyDown, true);
    doc.addEventListener("mousedown", handlePointerDown, true);
    doc.addEventListener("pointerdown", handlePointerDown, true);
    doc.addEventListener("touchstart", handlePointerDown, true);
    doc.addEventListener("visibilitychange", handleVisibilityChange, true);
  }
  function isFocusVisible(event) {
    try {
      return event.target.matches(":focus-visible");
    } catch (error) {
    }
    return hadKeyboardEvent || focusTriggersKeyboardModality(event.target);
  }
  function initFocusVisible(node5) {
    if (!initialized && node5 != null) {
      initialized = true;
      prepare(node5.ownerDocument);
    }
  }
  var forkFocus = function forkFocus2(rootProps, handler) {
    return function(e) {
      if (typeof rootProps.onFocus === "function") {
        rootProps.onFocus(e);
      }
      handler(e);
    };
  };
  var forkBlur = function forkBlur2(rootProps, handler) {
    return function(e) {
      if (typeof rootProps.onBlur === "function") {
        rootProps.onBlur(e);
      }
      handler(e);
    };
  };

  // node_modules/baseui/esm/layer/layers-manager.js
  function _typeof3(obj) {
    "@babel/helpers - typeof";
    return _typeof3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof3(obj);
  }
  function _extends4() {
    _extends4 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends4.apply(this, arguments);
  }
  function _slicedToArray3(arr, i) {
    return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
  }
  function _nonIterableRest2() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArrayLimit2(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles2(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread();
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray2(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray2(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray2(o, minLen);
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray2(arr);
  }
  function _arrayLikeToArray2(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass)
      _setPrototypeOf(subClass, superClass);
  }
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf13(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _possibleConstructorReturn(self2, call) {
    if (call && (_typeof3(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self2);
  }
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf12(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf(o);
  }
  function _defineProperty7(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var StyledAppContainer = styled2("div", {});
  StyledAppContainer.displayName = "StyledAppContainer";
  var StyledLayersContainer = styled2("div", {});
  StyledLayersContainer.displayName = "StyledLayersContainer";
  function defaultEventHandlerFn() {
    if (true) {
      console.warn("`LayersManager` was not found. This occurs if you are attempting to use a component requiring `Layer` without using the `BaseProvider` at the root of your app. Please visit https://baseweb.design/components/base-provider/ for more information");
    }
  }
  var LayersContext = /* @__PURE__ */ React9.createContext({
    addEscapeHandler: defaultEventHandlerFn,
    removeEscapeHandler: defaultEventHandlerFn,
    addKeyDownHandler: defaultEventHandlerFn,
    removeKeyDownHandler: defaultEventHandlerFn,
    addKeyUpHandler: defaultEventHandlerFn,
    removeKeyUpHandler: defaultEventHandlerFn,
    addKeyPressHandler: defaultEventHandlerFn,
    removeKeyPressHandler: defaultEventHandlerFn,
    addDocClickHandler: defaultEventHandlerFn,
    removeDocClickHandler: defaultEventHandlerFn,
    host: void 0,
    zIndex: void 0
  });
  var Provider2 = LayersContext.Provider;
  var Consumer = LayersContext.Consumer;
  var LayersManager = /* @__PURE__ */ function(_React$Component) {
    _inherits(LayersManager2, _React$Component);
    var _super = _createSuper(LayersManager2);
    function LayersManager2(props) {
      var _this;
      _classCallCheck(this, LayersManager2);
      _this = _super.call(this, props);
      _defineProperty7(_assertThisInitialized(_this), "host", /* @__PURE__ */ React9.createRef());
      _defineProperty7(_assertThisInitialized(_this), "containerRef", /* @__PURE__ */ React9.createRef());
      _defineProperty7(_assertThisInitialized(_this), "onDocumentClick", function(event) {
        var docClickHandler = _this.state.docClickHandlers[_this.state.docClickHandlers.length - 1];
        if (docClickHandler) {
          docClickHandler(event);
        }
      });
      _defineProperty7(_assertThisInitialized(_this), "onKeyDown", function(event) {
        var keyDownHandler = _this.state.keyDownHandlers[_this.state.keyDownHandlers.length - 1];
        if (keyDownHandler) {
          keyDownHandler(event);
        }
      });
      _defineProperty7(_assertThisInitialized(_this), "onKeyUp", function(event) {
        if (event.key === "Escape") {
          var escapeKeyHandler = _this.state.escapeKeyHandlers[_this.state.escapeKeyHandlers.length - 1];
          if (escapeKeyHandler) {
            escapeKeyHandler();
          }
        }
        var keyUpHandler = _this.state.keyUpHandlers[_this.state.keyUpHandlers.length - 1];
        if (keyUpHandler) {
          keyUpHandler(event);
        }
      });
      _defineProperty7(_assertThisInitialized(_this), "onKeyPress", function(event) {
        var keyPressHandler = _this.state.keyPressHandlers[_this.state.keyPressHandlers.length - 1];
        if (keyPressHandler) {
          keyPressHandler(event);
        }
      });
      _defineProperty7(_assertThisInitialized(_this), "onAddEscapeHandler", function(escapeKeyHandler) {
        _this.setState(function(prev) {
          return {
            escapeKeyHandlers: [].concat(_toConsumableArray(prev.escapeKeyHandlers), [escapeKeyHandler])
          };
        });
      });
      _defineProperty7(_assertThisInitialized(_this), "onRemoveEscapeHandler", function(escapeKeyHandler) {
        _this.setState(function(prev) {
          return {
            escapeKeyHandlers: prev.escapeKeyHandlers.filter(function(handler) {
              return handler !== escapeKeyHandler;
            })
          };
        });
      });
      _defineProperty7(_assertThisInitialized(_this), "onAddKeyDownHandler", function(keyDownHandler) {
        _this.setState(function(prev) {
          return {
            keyDownHandlers: [].concat(_toConsumableArray(prev.keyDownHandlers), [keyDownHandler])
          };
        });
      });
      _defineProperty7(_assertThisInitialized(_this), "onRemoveKeyDownHandler", function(keyDownHandler) {
        _this.setState(function(prev) {
          return {
            keyDownHandlers: prev.keyDownHandlers.filter(function(handler) {
              return handler !== keyDownHandler;
            })
          };
        });
      });
      _defineProperty7(_assertThisInitialized(_this), "onAddKeyUpHandler", function(keyUpHandler) {
        _this.setState(function(prev) {
          return {
            keyUpHandlers: [].concat(_toConsumableArray(prev.keyUpHandlers), [keyUpHandler])
          };
        });
      });
      _defineProperty7(_assertThisInitialized(_this), "onRemoveKeyUpHandler", function(keyUpHandler) {
        _this.setState(function(prev) {
          return {
            keyUpHandlers: prev.keyUpHandlers.filter(function(handler) {
              return handler !== keyUpHandler;
            })
          };
        });
      });
      _defineProperty7(_assertThisInitialized(_this), "onAddKeyPressHandler", function(keyPressHandler) {
        _this.setState(function(prev) {
          return {
            keyPressHandlers: [].concat(_toConsumableArray(prev.keyPressHandlers), [keyPressHandler])
          };
        });
      });
      _defineProperty7(_assertThisInitialized(_this), "onRemoveKeyPressHandler", function(keyPressHandler) {
        _this.setState(function(prev) {
          return {
            keyPressHandlers: prev.keyPressHandlers.filter(function(handler) {
              return handler !== keyPressHandler;
            })
          };
        });
      });
      _defineProperty7(_assertThisInitialized(_this), "onAddDocClickHandler", function(docClickHandler) {
        _this.setState(function(prev) {
          return {
            docClickHandlers: [].concat(_toConsumableArray(prev.docClickHandlers), [docClickHandler])
          };
        });
      });
      _defineProperty7(_assertThisInitialized(_this), "onRemoveDocClickHandler", function(docClickHandler) {
        _this.setState(function(prev) {
          return {
            docClickHandlers: prev.docClickHandlers.filter(function(handler) {
              return handler !== docClickHandler;
            })
          };
        });
      });
      _this.state = {
        escapeKeyHandlers: [],
        keyDownHandlers: [],
        keyUpHandlers: [],
        keyPressHandlers: [],
        docClickHandlers: []
      };
      return _this;
    }
    _createClass(LayersManager2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.forceUpdate();
        initFocusVisible(this.containerRef.current);
        if (typeof document !== "undefined") {
          document.addEventListener("keydown", this.onKeyDown);
          document.addEventListener("keyup", this.onKeyUp);
          document.addEventListener("keypress", this.onKeyPress);
          document.addEventListener("mousedown", this.onDocumentClick);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (typeof document !== "undefined") {
          document.removeEventListener("keydown", this.onKeyDown);
          document.removeEventListener("keyup", this.onKeyUp);
          document.removeEventListener("keypress", this.onKeyPress);
          document.removeEventListener("mousedown", this.onDocumentClick);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;
        var _this$props$overrides = this.props.overrides, overrides = _this$props$overrides === void 0 ? {} : _this$props$overrides;
        var _getOverrides = getOverrides(overrides.AppContainer, StyledAppContainer), _getOverrides2 = _slicedToArray3(_getOverrides, 2), AppContainer = _getOverrides2[0], appContainerProps = _getOverrides2[1];
        var _getOverrides3 = getOverrides(overrides.LayersContainer, StyledLayersContainer), _getOverrides4 = _slicedToArray3(_getOverrides3, 2), LayersContainer = _getOverrides4[0], layersContainerProps = _getOverrides4[1];
        return /* @__PURE__ */ React9.createElement(Consumer, null, function(_ref2) {
          var host = _ref2.host;
          if (true) {
            if (host !== void 0) {
              console.warn("There is a LayersManager already exists in your application. It is not recommended to have more than one LayersManager in an application.");
            }
          }
          return /* @__PURE__ */ React9.createElement(Provider2, {
            value: {
              host: host || _this2.host.current,
              zIndex: _this2.props.zIndex,
              addEscapeHandler: _this2.onAddEscapeHandler,
              removeEscapeHandler: _this2.onRemoveEscapeHandler,
              addKeyDownHandler: _this2.onAddKeyDownHandler,
              removeKeyDownHandler: _this2.onRemoveKeyDownHandler,
              addKeyUpHandler: _this2.onAddKeyUpHandler,
              removeKeyUpHandler: _this2.onRemoveKeyUpHandler,
              addKeyPressHandler: _this2.onAddKeyPressHandler,
              removeKeyPressHandler: _this2.onRemoveKeyPressHandler,
              addDocClickHandler: _this2.onAddDocClickHandler,
              removeDocClickHandler: _this2.onRemoveDocClickHandler
            }
          }, /* @__PURE__ */ React9.createElement(AppContainer, _extends4({}, appContainerProps, {
            ref: _this2.containerRef
          }), _this2.props.children), /* @__PURE__ */ React9.createElement(LayersContainer, _extends4({}, layersContainerProps, {
            ref: _this2.host
          })));
        });
      }
    }]);
    return LayersManager2;
  }(React9.Component);

  // node_modules/baseui/esm/layer/layer.js
  var React10 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());
  function _typeof4(obj) {
    "@babel/helpers - typeof";
    return _typeof4 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof4(obj);
  }
  function _extends5() {
    _extends5 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends5.apply(this, arguments);
  }
  function _classCallCheck2(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties2(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass2(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties2(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties2(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _inherits2(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass)
      _setPrototypeOf2(subClass, superClass);
  }
  function _setPrototypeOf2(o, p) {
    _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf13(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf2(o, p);
  }
  function _createSuper2(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct2();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf2(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf2(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn2(this, result);
    };
  }
  function _possibleConstructorReturn2(self2, call) {
    if (call && (_typeof4(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized2(self2);
  }
  function _assertThisInitialized2(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct2() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf2(o) {
    _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf12(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf2(o);
  }
  function _defineProperty8(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var Container = styled2("div", function(_ref2) {
    var $zIndex = _ref2.$zIndex;
    return {
      position: "absolute",
      top: 0,
      left: 0,
      right: 0,
      zIndex: $zIndex || null
    };
  });
  Container.displayName = "Container";
  var LayerComponent = /* @__PURE__ */ function(_React$Component) {
    _inherits2(LayerComponent2, _React$Component);
    var _super = _createSuper2(LayerComponent2);
    function LayerComponent2() {
      var _this;
      _classCallCheck2(this, LayerComponent2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty8(_assertThisInitialized2(_this), "state", {
        container: null
      });
      _defineProperty8(_assertThisInitialized2(_this), "onEscape", function() {
        if (_this.props.onEscape) {
          _this.props.onEscape();
        }
      });
      _defineProperty8(_assertThisInitialized2(_this), "onKeyDown", function(event) {
        if (_this.props.onKeyDown) {
          _this.props.onKeyDown(event);
        }
      });
      _defineProperty8(_assertThisInitialized2(_this), "onKeyUp", function(event) {
        if (_this.props.onKeyUp) {
          _this.props.onKeyUp(event);
        }
      });
      _defineProperty8(_assertThisInitialized2(_this), "onKeyPress", function(event) {
        if (_this.props.onKeyPress) {
          _this.props.onKeyPress(event);
        }
      });
      _defineProperty8(_assertThisInitialized2(_this), "onDocumentClick", function(event) {
        if (_this.props.onDocumentClick) {
          _this.props.onDocumentClick(event);
        }
      });
      return _this;
    }
    _createClass2(LayerComponent2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.context.addEscapeHandler(this.onEscape);
        this.context.addKeyDownHandler(this.onKeyDown);
        this.context.addKeyUpHandler(this.onKeyUp);
        this.context.addKeyPressHandler(this.onKeyPress);
        if (!this.props.isHoverLayer) {
          this.context.addDocClickHandler(this.onDocumentClick);
        }
        var _this$props = this.props, onMount = _this$props.onMount, mountNode = _this$props.mountNode, layersManagerHost = _this$props.host;
        if (mountNode) {
          onMount && onMount();
          return;
        }
        var hasLayersManager = layersManagerHost !== void 0;
        if (true) {
          if (!hasLayersManager) {
            console.warn("`LayersManager` was not found. This occurs if you are attempting to use a component requiring `Layer` without using the `BaseProvider` at the root of your app. Please visit https://baseweb.design/components/base-provider/ for more information");
          }
        }
        var host = hasLayersManager ? layersManagerHost : document.body;
        if (host) {
          this.addContainer(host);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this$props2 = this.props, host = _this$props2.host, mountNode = _this$props2.mountNode;
        if (mountNode) {
          return;
        }
        if (host && host !== prevProps.host && prevProps.host === null) {
          this.addContainer(host);
        }
        if (prevProps.isHoverLayer != this.props.isHoverLayer) {
          if (this.props.isHoverLayer) {
            this.context.removeDocClickHandler(this.onDocumentClick);
          } else {
            this.context.addDocClickHandler(this.onDocumentClick);
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.context.removeEscapeHandler(this.onEscape);
        this.context.removeKeyDownHandler(this.onKeyDown);
        this.context.removeKeyUpHandler(this.onKeyUp);
        this.context.removeKeyPressHandler(this.onKeyPress);
        this.context.removeDocClickHandler(this.onDocumentClick);
        if (this.props.onUnmount) {
          this.props.onUnmount();
        }
        var host = this.props.host;
        var container2 = this.state.container;
        if (host && container2) {
          if (host.contains(container2)) {
            host.removeChild(container2);
          }
        }
      }
    }, {
      key: "addContainer",
      value: function addContainer(host) {
        var _this$props3 = this.props, index2 = _this$props3.index, mountNode = _this$props3.mountNode, onMount = _this$props3.onMount;
        if (mountNode) {
          return;
        }
        if (host) {
          var container2 = host.ownerDocument.createElement("div");
          var sibling = typeof index2 === "number" ? host.children[index2] : null;
          sibling ? host.insertBefore(container2, sibling) : host.appendChild(container2);
          this.setState({
            container: container2
          }, function() {
            onMount && onMount();
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var container2 = this.state.container;
        var _this$props4 = this.props, children2 = _this$props4.children, mountNode = _this$props4.mountNode, zIndex = _this$props4.zIndex;
        var childrenToRender = zIndex ? /* @__PURE__ */ React10.createElement(Container, {
          $zIndex: zIndex
        }, children2) : children2;
        if (typeof document !== "undefined") {
          if (mountNode) {
            return /* @__PURE__ */ import_react_dom2.default.createPortal(childrenToRender, mountNode);
          } else if (container2) {
            return /* @__PURE__ */ import_react_dom2.default.createPortal(childrenToRender, container2);
          }
          return null;
        }
        return null;
      }
    }]);
    return LayerComponent2;
  }(React10.Component);
  _defineProperty8(LayerComponent, "contextType", LayersContext);
  function Layer(props) {
    return /* @__PURE__ */ React10.createElement(Consumer, null, function(_ref2) {
      var host = _ref2.host, zIndex = _ref2.zIndex;
      return /* @__PURE__ */ React10.createElement(LayerComponent, _extends5({}, props, {
        host,
        zIndex
      }));
    });
  }

  // node_modules/baseui/esm/layer/tether.js
  var React11 = __toESM(require_react());

  // node_modules/popper.js/dist/esm/popper.js
  var isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && typeof navigator !== "undefined";
  var timeoutDuration = function() {
    var longerTimeoutBrowsers = ["Edge", "Trident", "Firefox"];
    for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
      if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
        return 1;
      }
    }
    return 0;
  }();
  function microtaskDebounce(fn) {
    var called = false;
    return function() {
      if (called) {
        return;
      }
      called = true;
      window.Promise.resolve().then(function() {
        called = false;
        fn();
      });
    };
  }
  function taskDebounce(fn) {
    var scheduled = false;
    return function() {
      if (!scheduled) {
        scheduled = true;
        setTimeout(function() {
          scheduled = false;
          fn();
        }, timeoutDuration);
      }
    };
  }
  var supportsMicroTasks = isBrowser && window.Promise;
  var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;
  function isFunction(functionToCheck) {
    var getType = {};
    return functionToCheck && getType.toString.call(functionToCheck) === "[object Function]";
  }
  function getStyleComputedProperty(element, property) {
    if (element.nodeType !== 1) {
      return [];
    }
    var window2 = element.ownerDocument.defaultView;
    var css = window2.getComputedStyle(element, null);
    return property ? css[property] : css;
  }
  function getParentNode(element) {
    if (element.nodeName === "HTML") {
      return element;
    }
    return element.parentNode || element.host;
  }
  function getScrollParent(element) {
    if (!element) {
      return document.body;
    }
    switch (element.nodeName) {
      case "HTML":
      case "BODY":
        return element.ownerDocument.body;
      case "#document":
        return element.body;
    }
    var _getStyleComputedProp = getStyleComputedProperty(element), overflow = _getStyleComputedProp.overflow, overflowX = _getStyleComputedProp.overflowX, overflowY = _getStyleComputedProp.overflowY;
    if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
      return element;
    }
    return getScrollParent(getParentNode(element));
  }
  function getReferenceNode(reference) {
    return reference && reference.referenceNode ? reference.referenceNode : reference;
  }
  var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
  var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);
  function isIE(version) {
    if (version === 11) {
      return isIE11;
    }
    if (version === 10) {
      return isIE10;
    }
    return isIE11 || isIE10;
  }
  function getOffsetParent(element) {
    if (!element) {
      return document.documentElement;
    }
    var noOffsetParent = isIE(10) ? document.body : null;
    var offsetParent = element.offsetParent || null;
    while (offsetParent === noOffsetParent && element.nextElementSibling) {
      offsetParent = (element = element.nextElementSibling).offsetParent;
    }
    var nodeName = offsetParent && offsetParent.nodeName;
    if (!nodeName || nodeName === "BODY" || nodeName === "HTML") {
      return element ? element.ownerDocument.documentElement : document.documentElement;
    }
    if (["TH", "TD", "TABLE"].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, "position") === "static") {
      return getOffsetParent(offsetParent);
    }
    return offsetParent;
  }
  function isOffsetContainer(element) {
    var nodeName = element.nodeName;
    if (nodeName === "BODY") {
      return false;
    }
    return nodeName === "HTML" || getOffsetParent(element.firstElementChild) === element;
  }
  function getRoot(node5) {
    if (node5.parentNode !== null) {
      return getRoot(node5.parentNode);
    }
    return node5;
  }
  function findCommonOffsetParent(element1, element2) {
    if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
      return document.documentElement;
    }
    var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
    var start = order ? element1 : element2;
    var end = order ? element2 : element1;
    var range = document.createRange();
    range.setStart(start, 0);
    range.setEnd(end, 0);
    var commonAncestorContainer = range.commonAncestorContainer;
    if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
      if (isOffsetContainer(commonAncestorContainer)) {
        return commonAncestorContainer;
      }
      return getOffsetParent(commonAncestorContainer);
    }
    var element1root = getRoot(element1);
    if (element1root.host) {
      return findCommonOffsetParent(element1root.host, element2);
    } else {
      return findCommonOffsetParent(element1, getRoot(element2).host);
    }
  }
  function getScroll(element) {
    var side = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "top";
    var upperSide = side === "top" ? "scrollTop" : "scrollLeft";
    var nodeName = element.nodeName;
    if (nodeName === "BODY" || nodeName === "HTML") {
      var html = element.ownerDocument.documentElement;
      var scrollingElement = element.ownerDocument.scrollingElement || html;
      return scrollingElement[upperSide];
    }
    return element[upperSide];
  }
  function includeScroll(rect, element) {
    var subtract = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var scrollTop = getScroll(element, "top");
    var scrollLeft = getScroll(element, "left");
    var modifier = subtract ? -1 : 1;
    rect.top += scrollTop * modifier;
    rect.bottom += scrollTop * modifier;
    rect.left += scrollLeft * modifier;
    rect.right += scrollLeft * modifier;
    return rect;
  }
  function getBordersSize(styles, axis) {
    var sideA = axis === "x" ? "Left" : "Top";
    var sideB = sideA === "Left" ? "Right" : "Bottom";
    return parseFloat(styles["border" + sideA + "Width"]) + parseFloat(styles["border" + sideB + "Width"]);
  }
  function getSize(axis, body, html, computedStyle) {
    return Math.max(body["offset" + axis], body["scroll" + axis], html["client" + axis], html["offset" + axis], html["scroll" + axis], isIE(10) ? parseInt(html["offset" + axis]) + parseInt(computedStyle["margin" + (axis === "Height" ? "Top" : "Left")]) + parseInt(computedStyle["margin" + (axis === "Height" ? "Bottom" : "Right")]) : 0);
  }
  function getWindowSizes(document2) {
    var body = document2.body;
    var html = document2.documentElement;
    var computedStyle = isIE(10) && getComputedStyle(html);
    return {
      height: getSize("Height", body, html, computedStyle),
      width: getSize("Width", body, html, computedStyle)
    };
  }
  var classCallCheck = function(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };
  var createClass = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  var defineProperty = function(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  };
  var _extends6 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = arguments[i];
      for (var key in source2) {
        if (Object.prototype.hasOwnProperty.call(source2, key)) {
          target[key] = source2[key];
        }
      }
    }
    return target;
  };
  function getClientRect(offsets) {
    return _extends6({}, offsets, {
      right: offsets.left + offsets.width,
      bottom: offsets.top + offsets.height
    });
  }
  function getBoundingClientRect(element) {
    var rect = {};
    try {
      if (isIE(10)) {
        rect = element.getBoundingClientRect();
        var scrollTop = getScroll(element, "top");
        var scrollLeft = getScroll(element, "left");
        rect.top += scrollTop;
        rect.left += scrollLeft;
        rect.bottom += scrollTop;
        rect.right += scrollLeft;
      } else {
        rect = element.getBoundingClientRect();
      }
    } catch (e) {
    }
    var result = {
      left: rect.left,
      top: rect.top,
      width: rect.right - rect.left,
      height: rect.bottom - rect.top
    };
    var sizes = element.nodeName === "HTML" ? getWindowSizes(element.ownerDocument) : {};
    var width = sizes.width || element.clientWidth || result.width;
    var height = sizes.height || element.clientHeight || result.height;
    var horizScrollbar = element.offsetWidth - width;
    var vertScrollbar = element.offsetHeight - height;
    if (horizScrollbar || vertScrollbar) {
      var styles = getStyleComputedProperty(element);
      horizScrollbar -= getBordersSize(styles, "x");
      vertScrollbar -= getBordersSize(styles, "y");
      result.width -= horizScrollbar;
      result.height -= vertScrollbar;
    }
    return getClientRect(result);
  }
  function getOffsetRectRelativeToArbitraryNode(children2, parent2) {
    var fixedPosition = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var isIE102 = isIE(10);
    var isHTML = parent2.nodeName === "HTML";
    var childrenRect = getBoundingClientRect(children2);
    var parentRect = getBoundingClientRect(parent2);
    var scrollParent = getScrollParent(children2);
    var styles = getStyleComputedProperty(parent2);
    var borderTopWidth = parseFloat(styles.borderTopWidth);
    var borderLeftWidth = parseFloat(styles.borderLeftWidth);
    if (fixedPosition && isHTML) {
      parentRect.top = Math.max(parentRect.top, 0);
      parentRect.left = Math.max(parentRect.left, 0);
    }
    var offsets = getClientRect({
      top: childrenRect.top - parentRect.top - borderTopWidth,
      left: childrenRect.left - parentRect.left - borderLeftWidth,
      width: childrenRect.width,
      height: childrenRect.height
    });
    offsets.marginTop = 0;
    offsets.marginLeft = 0;
    if (!isIE102 && isHTML) {
      var marginTop = parseFloat(styles.marginTop);
      var marginLeft = parseFloat(styles.marginLeft);
      offsets.top -= borderTopWidth - marginTop;
      offsets.bottom -= borderTopWidth - marginTop;
      offsets.left -= borderLeftWidth - marginLeft;
      offsets.right -= borderLeftWidth - marginLeft;
      offsets.marginTop = marginTop;
      offsets.marginLeft = marginLeft;
    }
    if (isIE102 && !fixedPosition ? parent2.contains(scrollParent) : parent2 === scrollParent && scrollParent.nodeName !== "BODY") {
      offsets = includeScroll(offsets, parent2);
    }
    return offsets;
  }
  function getViewportOffsetRectRelativeToArtbitraryNode(element) {
    var excludeScroll = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var html = element.ownerDocument.documentElement;
    var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
    var width = Math.max(html.clientWidth, window.innerWidth || 0);
    var height = Math.max(html.clientHeight, window.innerHeight || 0);
    var scrollTop = !excludeScroll ? getScroll(html) : 0;
    var scrollLeft = !excludeScroll ? getScroll(html, "left") : 0;
    var offset2 = {
      top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
      left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
      width,
      height
    };
    return getClientRect(offset2);
  }
  function isFixed(element) {
    var nodeName = element.nodeName;
    if (nodeName === "BODY" || nodeName === "HTML") {
      return false;
    }
    if (getStyleComputedProperty(element, "position") === "fixed") {
      return true;
    }
    var parentNode = getParentNode(element);
    if (!parentNode) {
      return false;
    }
    return isFixed(parentNode);
  }
  function getFixedPositionOffsetParent(element) {
    if (!element || !element.parentElement || isIE()) {
      return document.documentElement;
    }
    var el = element.parentElement;
    while (el && getStyleComputedProperty(el, "transform") === "none") {
      el = el.parentElement;
    }
    return el || document.documentElement;
  }
  function getBoundaries(popper, reference, padding, boundariesElement) {
    var fixedPosition = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
    var boundaries = { top: 0, left: 0 };
    var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
    if (boundariesElement === "viewport") {
      boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
    } else {
      var boundariesNode = void 0;
      if (boundariesElement === "scrollParent") {
        boundariesNode = getScrollParent(getParentNode(reference));
        if (boundariesNode.nodeName === "BODY") {
          boundariesNode = popper.ownerDocument.documentElement;
        }
      } else if (boundariesElement === "window") {
        boundariesNode = popper.ownerDocument.documentElement;
      } else {
        boundariesNode = boundariesElement;
      }
      var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);
      if (boundariesNode.nodeName === "HTML" && !isFixed(offsetParent)) {
        var _getWindowSizes = getWindowSizes(popper.ownerDocument), height = _getWindowSizes.height, width = _getWindowSizes.width;
        boundaries.top += offsets.top - offsets.marginTop;
        boundaries.bottom = height + offsets.top;
        boundaries.left += offsets.left - offsets.marginLeft;
        boundaries.right = width + offsets.left;
      } else {
        boundaries = offsets;
      }
    }
    padding = padding || 0;
    var isPaddingNumber = typeof padding === "number";
    boundaries.left += isPaddingNumber ? padding : padding.left || 0;
    boundaries.top += isPaddingNumber ? padding : padding.top || 0;
    boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
    boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;
    return boundaries;
  }
  function getArea(_ref2) {
    var width = _ref2.width, height = _ref2.height;
    return width * height;
  }
  function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
    var padding = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0;
    if (placement.indexOf("auto") === -1) {
      return placement;
    }
    var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
    var rects = {
      top: {
        width: boundaries.width,
        height: refRect.top - boundaries.top
      },
      right: {
        width: boundaries.right - refRect.right,
        height: boundaries.height
      },
      bottom: {
        width: boundaries.width,
        height: boundaries.bottom - refRect.bottom
      },
      left: {
        width: refRect.left - boundaries.left,
        height: boundaries.height
      }
    };
    var sortedAreas = Object.keys(rects).map(function(key) {
      return _extends6({
        key
      }, rects[key], {
        area: getArea(rects[key])
      });
    }).sort(function(a, b) {
      return b.area - a.area;
    });
    var filteredAreas = sortedAreas.filter(function(_ref2) {
      var width = _ref2.width, height = _ref2.height;
      return width >= popper.clientWidth && height >= popper.clientHeight;
    });
    var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
    var variation = placement.split("-")[1];
    return computedPlacement + (variation ? "-" + variation : "");
  }
  function getReferenceOffsets(state, popper, reference) {
    var fixedPosition = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
    var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
    return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
  }
  function getOuterSizes(element) {
    var window2 = element.ownerDocument.defaultView;
    var styles = window2.getComputedStyle(element);
    var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
    var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
    var result = {
      width: element.offsetWidth + y,
      height: element.offsetHeight + x
    };
    return result;
  }
  function getOppositePlacement(placement) {
    var hash = { left: "right", right: "left", bottom: "top", top: "bottom" };
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash[matched];
    });
  }
  function getPopperOffsets(popper, referenceOffsets, placement) {
    placement = placement.split("-")[0];
    var popperRect = getOuterSizes(popper);
    var popperOffsets = {
      width: popperRect.width,
      height: popperRect.height
    };
    var isHoriz = ["right", "left"].indexOf(placement) !== -1;
    var mainSide = isHoriz ? "top" : "left";
    var secondarySide = isHoriz ? "left" : "top";
    var measurement = isHoriz ? "height" : "width";
    var secondaryMeasurement = !isHoriz ? "height" : "width";
    popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
    if (placement === secondarySide) {
      popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
    } else {
      popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
    }
    return popperOffsets;
  }
  function find(arr, check) {
    if (Array.prototype.find) {
      return arr.find(check);
    }
    return arr.filter(check)[0];
  }
  function findIndex(arr, prop, value) {
    if (Array.prototype.findIndex) {
      return arr.findIndex(function(cur) {
        return cur[prop] === value;
      });
    }
    var match = find(arr, function(obj) {
      return obj[prop] === value;
    });
    return arr.indexOf(match);
  }
  function runModifiers(modifiers2, data, ends) {
    var modifiersToRun = ends === void 0 ? modifiers2 : modifiers2.slice(0, findIndex(modifiers2, "name", ends));
    modifiersToRun.forEach(function(modifier) {
      if (modifier["function"]) {
        console.warn("`modifier.function` is deprecated, use `modifier.fn`!");
      }
      var fn = modifier["function"] || modifier.fn;
      if (modifier.enabled && isFunction(fn)) {
        data.offsets.popper = getClientRect(data.offsets.popper);
        data.offsets.reference = getClientRect(data.offsets.reference);
        data = fn(data, modifier);
      }
    });
    return data;
  }
  function update() {
    if (this.state.isDestroyed) {
      return;
    }
    var data = {
      instance: this,
      styles: {},
      arrowStyles: {},
      attributes: {},
      flipped: false,
      offsets: {}
    };
    data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);
    data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);
    data.originalPlacement = data.placement;
    data.positionFixed = this.options.positionFixed;
    data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
    data.offsets.popper.position = this.options.positionFixed ? "fixed" : "absolute";
    data = runModifiers(this.modifiers, data);
    if (!this.state.isCreated) {
      this.state.isCreated = true;
      this.options.onCreate(data);
    } else {
      this.options.onUpdate(data);
    }
  }
  function isModifierEnabled(modifiers2, modifierName) {
    return modifiers2.some(function(_ref2) {
      var name = _ref2.name, enabled = _ref2.enabled;
      return enabled && name === modifierName;
    });
  }
  function getSupportedPropertyName(property) {
    var prefixes7 = [false, "ms", "Webkit", "Moz", "O"];
    var upperProp = property.charAt(0).toUpperCase() + property.slice(1);
    for (var i = 0; i < prefixes7.length; i++) {
      var prefix2 = prefixes7[i];
      var toCheck = prefix2 ? "" + prefix2 + upperProp : property;
      if (typeof document.body.style[toCheck] !== "undefined") {
        return toCheck;
      }
    }
    return null;
  }
  function destroy() {
    this.state.isDestroyed = true;
    if (isModifierEnabled(this.modifiers, "applyStyle")) {
      this.popper.removeAttribute("x-placement");
      this.popper.style.position = "";
      this.popper.style.top = "";
      this.popper.style.left = "";
      this.popper.style.right = "";
      this.popper.style.bottom = "";
      this.popper.style.willChange = "";
      this.popper.style[getSupportedPropertyName("transform")] = "";
    }
    this.disableEventListeners();
    if (this.options.removeOnDestroy) {
      this.popper.parentNode.removeChild(this.popper);
    }
    return this;
  }
  function getWindow(element) {
    var ownerDocument = element.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView : window;
  }
  function attachToScrollParents(scrollParent, event, callback, scrollParents) {
    var isBody = scrollParent.nodeName === "BODY";
    var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
    target.addEventListener(event, callback, { passive: true });
    if (!isBody) {
      attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
    }
    scrollParents.push(target);
  }
  function setupEventListeners(reference, options, state, updateBound) {
    state.updateBound = updateBound;
    getWindow(reference).addEventListener("resize", state.updateBound, { passive: true });
    var scrollElement = getScrollParent(reference);
    attachToScrollParents(scrollElement, "scroll", state.updateBound, state.scrollParents);
    state.scrollElement = scrollElement;
    state.eventsEnabled = true;
    return state;
  }
  function enableEventListeners() {
    if (!this.state.eventsEnabled) {
      this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
    }
  }
  function removeEventListeners(reference, state) {
    getWindow(reference).removeEventListener("resize", state.updateBound);
    state.scrollParents.forEach(function(target) {
      target.removeEventListener("scroll", state.updateBound);
    });
    state.updateBound = null;
    state.scrollParents = [];
    state.scrollElement = null;
    state.eventsEnabled = false;
    return state;
  }
  function disableEventListeners() {
    if (this.state.eventsEnabled) {
      cancelAnimationFrame(this.scheduleUpdate);
      this.state = removeEventListeners(this.reference, this.state);
    }
  }
  function isNumeric(n) {
    return n !== "" && !isNaN(parseFloat(n)) && isFinite(n);
  }
  function setStyles(element, styles) {
    Object.keys(styles).forEach(function(prop) {
      var unit = "";
      if (["width", "height", "top", "right", "bottom", "left"].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
        unit = "px";
      }
      element.style[prop] = styles[prop] + unit;
    });
  }
  function setAttributes(element, attributes) {
    Object.keys(attributes).forEach(function(prop) {
      var value = attributes[prop];
      if (value !== false) {
        element.setAttribute(prop, attributes[prop]);
      } else {
        element.removeAttribute(prop);
      }
    });
  }
  function applyStyle(data) {
    setStyles(data.instance.popper, data.styles);
    setAttributes(data.instance.popper, data.attributes);
    if (data.arrowElement && Object.keys(data.arrowStyles).length) {
      setStyles(data.arrowElement, data.arrowStyles);
    }
    return data;
  }
  function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
    var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);
    var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
    popper.setAttribute("x-placement", placement);
    setStyles(popper, { position: options.positionFixed ? "fixed" : "absolute" });
    return options;
  }
  function getRoundedOffsets(data, shouldRound) {
    var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
    var round = Math.round, floor = Math.floor;
    var noRound = function noRound2(v) {
      return v;
    };
    var referenceWidth = round(reference.width);
    var popperWidth = round(popper.width);
    var isVertical = ["left", "right"].indexOf(data.placement) !== -1;
    var isVariation = data.placement.indexOf("-") !== -1;
    var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
    var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;
    var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
    var verticalToInteger = !shouldRound ? noRound : round;
    return {
      left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
      top: verticalToInteger(popper.top),
      bottom: verticalToInteger(popper.bottom),
      right: horizontalToInteger(popper.right)
    };
  }
  var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);
  function computeStyle(data, options) {
    var x = options.x, y = options.y;
    var popper = data.offsets.popper;
    var legacyGpuAccelerationOption = find(data.instance.modifiers, function(modifier) {
      return modifier.name === "applyStyle";
    }).gpuAcceleration;
    if (legacyGpuAccelerationOption !== void 0) {
      console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");
    }
    var gpuAcceleration = legacyGpuAccelerationOption !== void 0 ? legacyGpuAccelerationOption : options.gpuAcceleration;
    var offsetParent = getOffsetParent(data.instance.popper);
    var offsetParentRect = getBoundingClientRect(offsetParent);
    var styles = {
      position: popper.position
    };
    var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);
    var sideA = x === "bottom" ? "top" : "bottom";
    var sideB = y === "right" ? "left" : "right";
    var prefixedProperty = getSupportedPropertyName("transform");
    var left = void 0, top = void 0;
    if (sideA === "bottom") {
      if (offsetParent.nodeName === "HTML") {
        top = -offsetParent.clientHeight + offsets.bottom;
      } else {
        top = -offsetParentRect.height + offsets.bottom;
      }
    } else {
      top = offsets.top;
    }
    if (sideB === "right") {
      if (offsetParent.nodeName === "HTML") {
        left = -offsetParent.clientWidth + offsets.right;
      } else {
        left = -offsetParentRect.width + offsets.right;
      }
    } else {
      left = offsets.left;
    }
    if (gpuAcceleration && prefixedProperty) {
      styles[prefixedProperty] = "translate3d(" + left + "px, " + top + "px, 0)";
      styles[sideA] = 0;
      styles[sideB] = 0;
      styles.willChange = "transform";
    } else {
      var invertTop = sideA === "bottom" ? -1 : 1;
      var invertLeft = sideB === "right" ? -1 : 1;
      styles[sideA] = top * invertTop;
      styles[sideB] = left * invertLeft;
      styles.willChange = sideA + ", " + sideB;
    }
    var attributes = {
      "x-placement": data.placement
    };
    data.attributes = _extends6({}, attributes, data.attributes);
    data.styles = _extends6({}, styles, data.styles);
    data.arrowStyles = _extends6({}, data.offsets.arrow, data.arrowStyles);
    return data;
  }
  function isModifierRequired(modifiers2, requestingName, requestedName) {
    var requesting = find(modifiers2, function(_ref2) {
      var name = _ref2.name;
      return name === requestingName;
    });
    var isRequired = !!requesting && modifiers2.some(function(modifier) {
      return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
    });
    if (!isRequired) {
      var _requesting = "`" + requestingName + "`";
      var requested = "`" + requestedName + "`";
      console.warn(requested + " modifier is required by " + _requesting + " modifier in order to work, be sure to include it before " + _requesting + "!");
    }
    return isRequired;
  }
  function arrow(data, options) {
    var _data$offsets$arrow;
    if (!isModifierRequired(data.instance.modifiers, "arrow", "keepTogether")) {
      return data;
    }
    var arrowElement = options.element;
    if (typeof arrowElement === "string") {
      arrowElement = data.instance.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return data;
      }
    } else {
      if (!data.instance.popper.contains(arrowElement)) {
        console.warn("WARNING: `arrow.element` must be child of its popper element!");
        return data;
      }
    }
    var placement = data.placement.split("-")[0];
    var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
    var isVertical = ["left", "right"].indexOf(placement) !== -1;
    var len = isVertical ? "height" : "width";
    var sideCapitalized = isVertical ? "Top" : "Left";
    var side = sideCapitalized.toLowerCase();
    var altSide = isVertical ? "left" : "top";
    var opSide = isVertical ? "bottom" : "right";
    var arrowElementSize = getOuterSizes(arrowElement)[len];
    if (reference[opSide] - arrowElementSize < popper[side]) {
      data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
    }
    if (reference[side] + arrowElementSize > popper[opSide]) {
      data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
    }
    data.offsets.popper = getClientRect(data.offsets.popper);
    var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;
    var css = getStyleComputedProperty(data.instance.popper);
    var popperMarginSide = parseFloat(css["margin" + sideCapitalized]);
    var popperBorderSide = parseFloat(css["border" + sideCapitalized + "Width"]);
    var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;
    sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);
    data.arrowElement = arrowElement;
    data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ""), _data$offsets$arrow);
    return data;
  }
  function getOppositeVariation(variation) {
    if (variation === "end") {
      return "start";
    } else if (variation === "start") {
      return "end";
    }
    return variation;
  }
  var placements = ["auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start"];
  var validPlacements = placements.slice(3);
  function clockwise(placement) {
    var counter2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var index2 = validPlacements.indexOf(placement);
    var arr = validPlacements.slice(index2 + 1).concat(validPlacements.slice(0, index2));
    return counter2 ? arr.reverse() : arr;
  }
  var BEHAVIORS = {
    FLIP: "flip",
    CLOCKWISE: "clockwise",
    COUNTERCLOCKWISE: "counterclockwise"
  };
  function flip(data, options) {
    if (isModifierEnabled(data.instance.modifiers, "inner")) {
      return data;
    }
    if (data.flipped && data.placement === data.originalPlacement) {
      return data;
    }
    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);
    var placement = data.placement.split("-")[0];
    var placementOpposite = getOppositePlacement(placement);
    var variation = data.placement.split("-")[1] || "";
    var flipOrder = [];
    switch (options.behavior) {
      case BEHAVIORS.FLIP:
        flipOrder = [placement, placementOpposite];
        break;
      case BEHAVIORS.CLOCKWISE:
        flipOrder = clockwise(placement);
        break;
      case BEHAVIORS.COUNTERCLOCKWISE:
        flipOrder = clockwise(placement, true);
        break;
      default:
        flipOrder = options.behavior;
    }
    flipOrder.forEach(function(step, index2) {
      if (placement !== step || flipOrder.length === index2 + 1) {
        return data;
      }
      placement = data.placement.split("-")[0];
      placementOpposite = getOppositePlacement(placement);
      var popperOffsets = data.offsets.popper;
      var refOffsets = data.offsets.reference;
      var floor = Math.floor;
      var overlapsRef = placement === "left" && floor(popperOffsets.right) > floor(refOffsets.left) || placement === "right" && floor(popperOffsets.left) < floor(refOffsets.right) || placement === "top" && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === "bottom" && floor(popperOffsets.top) < floor(refOffsets.bottom);
      var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
      var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
      var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
      var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
      var overflowsBoundaries = placement === "left" && overflowsLeft || placement === "right" && overflowsRight || placement === "top" && overflowsTop || placement === "bottom" && overflowsBottom;
      var isVertical = ["top", "bottom"].indexOf(placement) !== -1;
      var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === "start" && overflowsLeft || isVertical && variation === "end" && overflowsRight || !isVertical && variation === "start" && overflowsTop || !isVertical && variation === "end" && overflowsBottom);
      var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === "start" && overflowsRight || isVertical && variation === "end" && overflowsLeft || !isVertical && variation === "start" && overflowsBottom || !isVertical && variation === "end" && overflowsTop);
      var flippedVariation = flippedVariationByRef || flippedVariationByContent;
      if (overlapsRef || overflowsBoundaries || flippedVariation) {
        data.flipped = true;
        if (overlapsRef || overflowsBoundaries) {
          placement = flipOrder[index2 + 1];
        }
        if (flippedVariation) {
          variation = getOppositeVariation(variation);
        }
        data.placement = placement + (variation ? "-" + variation : "");
        data.offsets.popper = _extends6({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
        data = runModifiers(data.instance.modifiers, data, "flip");
      }
    });
    return data;
  }
  function keepTogether(data) {
    var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
    var placement = data.placement.split("-")[0];
    var floor = Math.floor;
    var isVertical = ["top", "bottom"].indexOf(placement) !== -1;
    var side = isVertical ? "right" : "bottom";
    var opSide = isVertical ? "left" : "top";
    var measurement = isVertical ? "width" : "height";
    if (popper[side] < floor(reference[opSide])) {
      data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
    }
    if (popper[opSide] > floor(reference[side])) {
      data.offsets.popper[opSide] = floor(reference[side]);
    }
    return data;
  }
  function toValue(str, measurement, popperOffsets, referenceOffsets) {
    var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
    var value = +split[1];
    var unit = split[2];
    if (!value) {
      return str;
    }
    if (unit.indexOf("%") === 0) {
      var element = void 0;
      switch (unit) {
        case "%p":
          element = popperOffsets;
          break;
        case "%":
        case "%r":
        default:
          element = referenceOffsets;
      }
      var rect = getClientRect(element);
      return rect[measurement] / 100 * value;
    } else if (unit === "vh" || unit === "vw") {
      var size = void 0;
      if (unit === "vh") {
        size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
      } else {
        size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
      }
      return size / 100 * value;
    } else {
      return value;
    }
  }
  function parseOffset(offset2, popperOffsets, referenceOffsets, basePlacement) {
    var offsets = [0, 0];
    var useHeight = ["right", "left"].indexOf(basePlacement) !== -1;
    var fragments = offset2.split(/(\+|\-)/).map(function(frag) {
      return frag.trim();
    });
    var divider = fragments.indexOf(find(fragments, function(frag) {
      return frag.search(/,|\s/) !== -1;
    }));
    if (fragments[divider] && fragments[divider].indexOf(",") === -1) {
      console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");
    }
    var splitRegex = /\s*,\s*|\s+/;
    var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];
    ops = ops.map(function(op, index2) {
      var measurement = (index2 === 1 ? !useHeight : useHeight) ? "height" : "width";
      var mergeWithPrevious = false;
      return op.reduce(function(a, b) {
        if (a[a.length - 1] === "" && ["+", "-"].indexOf(b) !== -1) {
          a[a.length - 1] = b;
          mergeWithPrevious = true;
          return a;
        } else if (mergeWithPrevious) {
          a[a.length - 1] += b;
          mergeWithPrevious = false;
          return a;
        } else {
          return a.concat(b);
        }
      }, []).map(function(str) {
        return toValue(str, measurement, popperOffsets, referenceOffsets);
      });
    });
    ops.forEach(function(op, index2) {
      op.forEach(function(frag, index22) {
        if (isNumeric(frag)) {
          offsets[index2] += frag * (op[index22 - 1] === "-" ? -1 : 1);
        }
      });
    });
    return offsets;
  }
  function offset(data, _ref2) {
    var offset2 = _ref2.offset;
    var placement = data.placement, _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
    var basePlacement = placement.split("-")[0];
    var offsets = void 0;
    if (isNumeric(+offset2)) {
      offsets = [+offset2, 0];
    } else {
      offsets = parseOffset(offset2, popper, reference, basePlacement);
    }
    if (basePlacement === "left") {
      popper.top += offsets[0];
      popper.left -= offsets[1];
    } else if (basePlacement === "right") {
      popper.top += offsets[0];
      popper.left += offsets[1];
    } else if (basePlacement === "top") {
      popper.left += offsets[0];
      popper.top -= offsets[1];
    } else if (basePlacement === "bottom") {
      popper.left += offsets[0];
      popper.top += offsets[1];
    }
    data.popper = popper;
    return data;
  }
  function preventOverflow(data, options) {
    var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);
    if (data.instance.reference === boundariesElement) {
      boundariesElement = getOffsetParent(boundariesElement);
    }
    var transformProp = getSupportedPropertyName("transform");
    var popperStyles = data.instance.popper.style;
    var top = popperStyles.top, left = popperStyles.left, transform = popperStyles[transformProp];
    popperStyles.top = "";
    popperStyles.left = "";
    popperStyles[transformProp] = "";
    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);
    popperStyles.top = top;
    popperStyles.left = left;
    popperStyles[transformProp] = transform;
    options.boundaries = boundaries;
    var order = options.priority;
    var popper = data.offsets.popper;
    var check = {
      primary: function primary(placement) {
        var value = popper[placement];
        if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
          value = Math.max(popper[placement], boundaries[placement]);
        }
        return defineProperty({}, placement, value);
      },
      secondary: function secondary(placement) {
        var mainSide = placement === "right" ? "left" : "top";
        var value = popper[mainSide];
        if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
          value = Math.min(popper[mainSide], boundaries[placement] - (placement === "right" ? popper.width : popper.height));
        }
        return defineProperty({}, mainSide, value);
      }
    };
    order.forEach(function(placement) {
      var side = ["left", "top"].indexOf(placement) !== -1 ? "primary" : "secondary";
      popper = _extends6({}, popper, check[side](placement));
    });
    data.offsets.popper = popper;
    return data;
  }
  function shift(data) {
    var placement = data.placement;
    var basePlacement = placement.split("-")[0];
    var shiftvariation = placement.split("-")[1];
    if (shiftvariation) {
      var _data$offsets = data.offsets, reference = _data$offsets.reference, popper = _data$offsets.popper;
      var isVertical = ["bottom", "top"].indexOf(basePlacement) !== -1;
      var side = isVertical ? "left" : "top";
      var measurement = isVertical ? "width" : "height";
      var shiftOffsets = {
        start: defineProperty({}, side, reference[side]),
        end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
      };
      data.offsets.popper = _extends6({}, popper, shiftOffsets[shiftvariation]);
    }
    return data;
  }
  function hide(data) {
    if (!isModifierRequired(data.instance.modifiers, "hide", "preventOverflow")) {
      return data;
    }
    var refRect = data.offsets.reference;
    var bound = find(data.instance.modifiers, function(modifier) {
      return modifier.name === "preventOverflow";
    }).boundaries;
    if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
      if (data.hide === true) {
        return data;
      }
      data.hide = true;
      data.attributes["x-out-of-boundaries"] = "";
    } else {
      if (data.hide === false) {
        return data;
      }
      data.hide = false;
      data.attributes["x-out-of-boundaries"] = false;
    }
    return data;
  }
  function inner(data) {
    var placement = data.placement;
    var basePlacement = placement.split("-")[0];
    var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
    var isHoriz = ["left", "right"].indexOf(basePlacement) !== -1;
    var subtractLength = ["top", "left"].indexOf(basePlacement) === -1;
    popper[isHoriz ? "left" : "top"] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? "width" : "height"] : 0);
    data.placement = getOppositePlacement(placement);
    data.offsets.popper = getClientRect(popper);
    return data;
  }
  var modifiers = {
    shift: {
      order: 100,
      enabled: true,
      fn: shift
    },
    offset: {
      order: 200,
      enabled: true,
      fn: offset,
      offset: 0
    },
    preventOverflow: {
      order: 300,
      enabled: true,
      fn: preventOverflow,
      priority: ["left", "right", "top", "bottom"],
      padding: 5,
      boundariesElement: "scrollParent"
    },
    keepTogether: {
      order: 400,
      enabled: true,
      fn: keepTogether
    },
    arrow: {
      order: 500,
      enabled: true,
      fn: arrow,
      element: "[x-arrow]"
    },
    flip: {
      order: 600,
      enabled: true,
      fn: flip,
      behavior: "flip",
      padding: 5,
      boundariesElement: "viewport",
      flipVariations: false,
      flipVariationsByContent: false
    },
    inner: {
      order: 700,
      enabled: false,
      fn: inner
    },
    hide: {
      order: 800,
      enabled: true,
      fn: hide
    },
    computeStyle: {
      order: 850,
      enabled: true,
      fn: computeStyle,
      gpuAcceleration: true,
      x: "bottom",
      y: "right"
    },
    applyStyle: {
      order: 900,
      enabled: true,
      fn: applyStyle,
      onLoad: applyStyleOnLoad,
      gpuAcceleration: void 0
    }
  };
  var Defaults = {
    placement: "bottom",
    positionFixed: false,
    eventsEnabled: true,
    removeOnDestroy: false,
    onCreate: function onCreate() {
    },
    onUpdate: function onUpdate() {
    },
    modifiers
  };
  var Popper = function() {
    function Popper2(reference, popper) {
      var _this = this;
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      classCallCheck(this, Popper2);
      this.scheduleUpdate = function() {
        return requestAnimationFrame(_this.update);
      };
      this.update = debounce(this.update.bind(this));
      this.options = _extends6({}, Popper2.Defaults, options);
      this.state = {
        isDestroyed: false,
        isCreated: false,
        scrollParents: []
      };
      this.reference = reference && reference.jquery ? reference[0] : reference;
      this.popper = popper && popper.jquery ? popper[0] : popper;
      this.options.modifiers = {};
      Object.keys(_extends6({}, Popper2.Defaults.modifiers, options.modifiers)).forEach(function(name) {
        _this.options.modifiers[name] = _extends6({}, Popper2.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
      });
      this.modifiers = Object.keys(this.options.modifiers).map(function(name) {
        return _extends6({
          name
        }, _this.options.modifiers[name]);
      }).sort(function(a, b) {
        return a.order - b.order;
      });
      this.modifiers.forEach(function(modifierOptions) {
        if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
          modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
        }
      });
      this.update();
      var eventsEnabled = this.options.eventsEnabled;
      if (eventsEnabled) {
        this.enableEventListeners();
      }
      this.state.eventsEnabled = eventsEnabled;
    }
    createClass(Popper2, [{
      key: "update",
      value: function update$$1() {
        return update.call(this);
      }
    }, {
      key: "destroy",
      value: function destroy$$1() {
        return destroy.call(this);
      }
    }, {
      key: "enableEventListeners",
      value: function enableEventListeners$$1() {
        return enableEventListeners.call(this);
      }
    }, {
      key: "disableEventListeners",
      value: function disableEventListeners$$1() {
        return disableEventListeners.call(this);
      }
    }]);
    return Popper2;
  }();
  Popper.Utils = (typeof window !== "undefined" ? window : window).PopperUtils;
  Popper.placements = placements;
  Popper.Defaults = Defaults;
  var popper_default = Popper;

  // node_modules/baseui/esm/layer/utils.js
  function toPopperPlacement(placement) {
    return placement.replace(/(Top|Left)$/, "-start").replace(/(Right|Bottom)$/, "-end");
  }
  function parsePopperOffset(offset2) {
    return {
      top: Math.floor(offset2.top || 0),
      left: Math.floor(offset2.left || 0)
    };
  }

  // node_modules/baseui/esm/layer/constants.js
  var TETHER_PLACEMENT = {
    auto: "auto",
    topLeft: "topLeft",
    top: "top",
    topRight: "topRight",
    rightTop: "rightTop",
    right: "right",
    rightBottom: "rightBottom",
    bottomRight: "bottomRight",
    bottom: "bottom",
    bottomLeft: "bottomLeft",
    leftBottom: "leftBottom",
    left: "left",
    leftTop: "leftTop"
  };

  // node_modules/baseui/esm/layer/tether.js
  function _typeof5(obj) {
    "@babel/helpers - typeof";
    return _typeof5 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof5(obj);
  }
  var _excluded = ["modifiers"];
  function ownKeys6(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread6(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys6(Object(source2), true).forEach(function(key) {
        _defineProperty9(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys6(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _objectWithoutProperties(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _classCallCheck3(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties3(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass3(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties3(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties3(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _inherits3(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass)
      _setPrototypeOf3(subClass, superClass);
  }
  function _setPrototypeOf3(o, p) {
    _setPrototypeOf3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf13(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf3(o, p);
  }
  function _createSuper3(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct3();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf3(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf3(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn3(this, result);
    };
  }
  function _possibleConstructorReturn3(self2, call) {
    if (call && (_typeof5(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized3(self2);
  }
  function _assertThisInitialized3(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct3() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf3(o) {
    _getPrototypeOf3 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf12(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf3(o);
  }
  function _defineProperty9(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var Tether = /* @__PURE__ */ function(_React$Component) {
    _inherits3(Tether2, _React$Component);
    var _super = _createSuper3(Tether2);
    function Tether2() {
      var _this;
      _classCallCheck3(this, Tether2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty9(_assertThisInitialized3(_this), "popper", void 0);
      _defineProperty9(_assertThisInitialized3(_this), "popperHeight", 0);
      _defineProperty9(_assertThisInitialized3(_this), "popperWidth", 0);
      _defineProperty9(_assertThisInitialized3(_this), "anchorHeight", 0);
      _defineProperty9(_assertThisInitialized3(_this), "anchorWidth", 0);
      _defineProperty9(_assertThisInitialized3(_this), "state", {
        isMounted: false
      });
      _defineProperty9(_assertThisInitialized3(_this), "onPopperUpdate", function(data) {
        var normalizedOffsets = {
          popper: parsePopperOffset(data.offsets.popper),
          arrow: data.offsets.arrow ? parsePopperOffset(data.offsets.arrow) : {
            top: 0,
            left: 0
          }
        };
        _this.props.onPopperUpdate(normalizedOffsets, data);
      });
      return _this;
    }
    _createClass3(Tether2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.setState({
          isMounted: true
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (this.props.anchorRef) {
          var _this$props$anchorRef = this.props.anchorRef.getBoundingClientRect(), height = _this$props$anchorRef.height, width = _this$props$anchorRef.width;
          if (this.anchorHeight !== height || this.anchorWidth !== width) {
            this.anchorHeight = height;
            this.anchorWidth = width;
            this.popper && this.popper.scheduleUpdate();
          }
        }
        if (this.props.popperRef) {
          var _this$props$popperRef = this.props.popperRef.getBoundingClientRect(), _height = _this$props$popperRef.height, _width = _this$props$popperRef.width;
          if (this.popperHeight !== _height || this.popperWidth !== _width) {
            this.popperHeight = _height;
            this.popperWidth = _width;
            this.popper && this.popper.scheduleUpdate();
          }
          if (this.state.isMounted !== prevState.isMounted) {
            if (!this.props.anchorRef) {
              if (true) {
                console.warn("[baseui][TetherBehavior] ref has not been passed to the Popper's anchor element.\n              See how to pass the ref to an anchor element in the Popover example\n              https://baseweb.design/components/popover/#anchor-ref-handling-example");
              }
            } else {
              this.initializePopper();
            }
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.destroyPopover();
      }
    }, {
      key: "initializePopper",
      value: function initializePopper() {
        var _this$props = this.props, placement = _this$props.placement, popperOptions = _this$props.popperOptions;
        var modifiers2 = popperOptions.modifiers, restOptions = _objectWithoutProperties(popperOptions, _excluded);
        if (!this.props.anchorRef || !this.props.popperRef)
          return;
        this.popper = new popper_default(this.props.anchorRef, this.props.popperRef, _objectSpread6({
          placement: toPopperPlacement(placement),
          modifiers: _objectSpread6({
            arrow: {
              element: this.props.arrowRef,
              enabled: !!this.props.arrowRef
            },
            computeStyle: {
              gpuAcceleration: false
            },
            applyStyle: {
              enabled: false
            },
            applyReactStyle: {
              enabled: true,
              fn: this.onPopperUpdate,
              order: 900
            },
            preventOverflow: {
              enabled: true
            }
          }, modifiers2)
        }, restOptions));
      }
    }, {
      key: "destroyPopover",
      value: function destroyPopover() {
        if (this.popper) {
          this.popper.destroy();
          delete this.popper;
        }
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children || null;
      }
    }]);
    return Tether2;
  }(React11.Component);
  _defineProperty9(Tether, "defaultProps", {
    anchorRef: null,
    onPopperUpdate: function onPopperUpdate() {
      return null;
    },
    placement: TETHER_PLACEMENT.auto,
    popperRef: null,
    popperOptions: {}
  });
  var tether_default = Tether;

  // node_modules/baseui/esm/helpers/base-provider.js
  var BaseProvider = function BaseProvider2(props) {
    var children2 = props.children, overrides = props.overrides, theme = props.theme, zIndex = props.zIndex;
    return /* @__PURE__ */ React12.createElement(LayersManager, {
      zIndex,
      overrides
    }, /* @__PURE__ */ React12.createElement(UIDReset, {
      prefix: "bui"
    }, /* @__PURE__ */ React12.createElement(theme_provider_default, {
      theme
    }, children2)));
  };
  var base_provider_default = BaseProvider;

  // node_modules/@remix-run/router/dist/router.js
  function _extends7() {
    _extends7 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends7.apply(this, arguments);
  }
  var Action;
  (function(Action2) {
    Action2["Pop"] = "POP";
    Action2["Push"] = "PUSH";
    Action2["Replace"] = "REPLACE";
  })(Action || (Action = {}));
  var PopStateEventType = "popstate";
  function createBrowserHistory(options) {
    if (options === void 0) {
      options = {};
    }
    function createBrowserLocation(window2, globalHistory) {
      let {
        pathname,
        search,
        hash
      } = window2.location;
      return createLocation(
        "",
        {
          pathname,
          search,
          hash
        },
        globalHistory.state && globalHistory.state.usr || null,
        globalHistory.state && globalHistory.state.key || "default"
      );
    }
    function createBrowserHref(window2, to) {
      return typeof to === "string" ? to : createPath(to);
    }
    return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
  }
  function createKey() {
    return Math.random().toString(36).substr(2, 8);
  }
  function getHistoryState(location) {
    return {
      usr: location.state,
      key: location.key
    };
  }
  function createLocation(current, to, state, key) {
    if (state === void 0) {
      state = null;
    }
    let location = _extends7({
      pathname: typeof current === "string" ? current : current.pathname,
      search: "",
      hash: ""
    }, typeof to === "string" ? parsePath(to) : to, {
      state,
      key: to && to.key || key || createKey()
    });
    return location;
  }
  function createPath(_ref2) {
    let {
      pathname = "/",
      search = "",
      hash = ""
    } = _ref2;
    if (search && search !== "?")
      pathname += search.charAt(0) === "?" ? search : "?" + search;
    if (hash && hash !== "#")
      pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
    return pathname;
  }
  function parsePath(path) {
    let parsedPath = {};
    if (path) {
      let hashIndex = path.indexOf("#");
      if (hashIndex >= 0) {
        parsedPath.hash = path.substr(hashIndex);
        path = path.substr(0, hashIndex);
      }
      let searchIndex = path.indexOf("?");
      if (searchIndex >= 0) {
        parsedPath.search = path.substr(searchIndex);
        path = path.substr(0, searchIndex);
      }
      if (path) {
        parsedPath.pathname = path;
      }
    }
    return parsedPath;
  }
  function createURL(location) {
    let base = typeof window !== "undefined" && typeof window.location !== "undefined" && window.location.origin !== "null" ? window.location.origin : "unknown://unknown";
    let href = typeof location === "string" ? location : createPath(location);
    return new URL(href, base);
  }
  function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
    if (options === void 0) {
      options = {};
    }
    let {
      window: window2 = document.defaultView,
      v5Compat = false
    } = options;
    let globalHistory = window2.history;
    let action = Action.Pop;
    let listener = null;
    function handlePop() {
      action = Action.Pop;
      if (listener) {
        listener({
          action,
          location: history.location
        });
      }
    }
    function push(to, state) {
      action = Action.Push;
      let location = createLocation(history.location, to, state);
      if (validateLocation)
        validateLocation(location, to);
      let historyState = getHistoryState(location);
      let url = history.createHref(location);
      try {
        globalHistory.pushState(historyState, "", url);
      } catch (error) {
        window2.location.assign(url);
      }
      if (v5Compat && listener) {
        listener({
          action,
          location: history.location
        });
      }
    }
    function replace(to, state) {
      action = Action.Replace;
      let location = createLocation(history.location, to, state);
      if (validateLocation)
        validateLocation(location, to);
      let historyState = getHistoryState(location);
      let url = history.createHref(location);
      globalHistory.replaceState(historyState, "", url);
      if (v5Compat && listener) {
        listener({
          action,
          location: history.location
        });
      }
    }
    let history = {
      get action() {
        return action;
      },
      get location() {
        return getLocation(window2, globalHistory);
      },
      listen(fn) {
        if (listener) {
          throw new Error("A history only accepts one active listener");
        }
        window2.addEventListener(PopStateEventType, handlePop);
        listener = fn;
        return () => {
          window2.removeEventListener(PopStateEventType, handlePop);
          listener = null;
        };
      },
      createHref(to) {
        return createHref(window2, to);
      },
      encodeLocation(to) {
        let url = createURL(typeof to === "string" ? to : createPath(to));
        return {
          pathname: url.pathname,
          search: url.search,
          hash: url.hash
        };
      },
      push,
      replace,
      go(n) {
        return globalHistory.go(n);
      }
    };
    return history;
  }
  var ResultType;
  (function(ResultType2) {
    ResultType2["data"] = "data";
    ResultType2["deferred"] = "deferred";
    ResultType2["redirect"] = "redirect";
    ResultType2["error"] = "error";
  })(ResultType || (ResultType = {}));
  function matchRoutes(routes, locationArg, basename) {
    if (basename === void 0) {
      basename = "/";
    }
    let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    let pathname = stripBasename(location.pathname || "/", basename);
    if (pathname == null) {
      return null;
    }
    let branches = flattenRoutes(routes);
    rankRouteBranches(branches);
    let matches = null;
    for (let i = 0; matches == null && i < branches.length; ++i) {
      matches = matchRouteBranch(
        branches[i],
        safelyDecodeURI(pathname)
      );
    }
    return matches;
  }
  function flattenRoutes(routes, branches, parentsMeta, parentPath) {
    if (branches === void 0) {
      branches = [];
    }
    if (parentsMeta === void 0) {
      parentsMeta = [];
    }
    if (parentPath === void 0) {
      parentPath = "";
    }
    routes.forEach((route, index2) => {
      let meta = {
        relativePath: route.path || "",
        caseSensitive: route.caseSensitive === true,
        childrenIndex: index2,
        route
      };
      if (meta.relativePath.startsWith("/")) {
        invariant2(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
        meta.relativePath = meta.relativePath.slice(parentPath.length);
      }
      let path = joinPaths([parentPath, meta.relativePath]);
      let routesMeta = parentsMeta.concat(meta);
      if (route.children && route.children.length > 0) {
        invariant2(
          route.index !== true,
          "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
        );
        flattenRoutes(route.children, branches, routesMeta, path);
      }
      if (route.path == null && !route.index) {
        return;
      }
      branches.push({
        path,
        score: computeScore(path, route.index),
        routesMeta
      });
    });
    return branches;
  }
  function rankRouteBranches(branches) {
    branches.sort((a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b.routesMeta.map((meta) => meta.childrenIndex)));
  }
  var paramRe = /^:\w+$/;
  var dynamicSegmentValue = 3;
  var indexRouteValue = 2;
  var emptySegmentValue = 1;
  var staticSegmentValue = 10;
  var splatPenalty = -2;
  var isSplat = (s) => s === "*";
  function computeScore(path, index2) {
    let segments = path.split("/");
    let initialScore = segments.length;
    if (segments.some(isSplat)) {
      initialScore += splatPenalty;
    }
    if (index2) {
      initialScore += indexRouteValue;
    }
    return segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
  }
  function compareIndexes(a, b) {
    let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
    return siblings ? a[a.length - 1] - b[b.length - 1] : 0;
  }
  function matchRouteBranch(branch, pathname) {
    let {
      routesMeta
    } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches = [];
    for (let i = 0; i < routesMeta.length; ++i) {
      let meta = routesMeta[i];
      let end = i === routesMeta.length - 1;
      let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
      let match = matchPath({
        path: meta.relativePath,
        caseSensitive: meta.caseSensitive,
        end
      }, remainingPathname);
      if (!match)
        return null;
      Object.assign(matchedParams, match.params);
      let route = meta.route;
      matches.push({
        params: matchedParams,
        pathname: joinPaths([matchedPathname, match.pathname]),
        pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
        route
      });
      if (match.pathnameBase !== "/") {
        matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
      }
    }
    return matches;
  }
  function matchPath(pattern, pathname) {
    if (typeof pattern === "string") {
      pattern = {
        path: pattern,
        caseSensitive: false,
        end: true
      };
    }
    let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
    let match = pathname.match(matcher);
    if (!match)
      return null;
    let matchedPathname = match[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match.slice(1);
    let params = paramNames.reduce((memo2, paramName, index2) => {
      if (paramName === "*") {
        let splatValue = captureGroups[index2] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      memo2[paramName] = safelyDecodeURIComponent(captureGroups[index2] || "", paramName);
      return memo2;
    }, {});
    return {
      params,
      pathname: matchedPathname,
      pathnameBase,
      pattern
    };
  }
  function compilePath(path, caseSensitive, end) {
    if (caseSensitive === void 0) {
      caseSensitive = false;
    }
    if (end === void 0) {
      end = true;
    }
    warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
    let paramNames = [];
    let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/:(\w+)/g, (_, paramName) => {
      paramNames.push(paramName);
      return "([^\\/]+)";
    });
    if (path.endsWith("*")) {
      paramNames.push("*");
      regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
    } else if (end) {
      regexpSource += "\\/*$";
    } else if (path !== "" && path !== "/") {
      regexpSource += "(?:(?=\\/|$))";
    } else
      ;
    let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
    return [matcher, paramNames];
  }
  function safelyDecodeURI(value) {
    try {
      return decodeURI(value);
    } catch (error) {
      warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
      return value;
    }
  }
  function safelyDecodeURIComponent(value, paramName) {
    try {
      return decodeURIComponent(value);
    } catch (error) {
      warning(false, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error + ")."));
      return value;
    }
  }
  function stripBasename(pathname, basename) {
    if (basename === "/")
      return pathname;
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
      return null;
    }
    let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") {
      return null;
    }
    return pathname.slice(startIndex) || "/";
  }
  function invariant2(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  function warning(cond, message) {
    if (!cond) {
      if (typeof console !== "undefined")
        console.warn(message);
      try {
        throw new Error(message);
      } catch (e) {
      }
    }
  }
  function resolvePath(to, fromPathname) {
    if (fromPathname === void 0) {
      fromPathname = "/";
    }
    let {
      pathname: toPathname,
      search = "",
      hash = ""
    } = typeof to === "string" ? parsePath(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
      pathname,
      search: normalizeSearch(search),
      hash: normalizeHash(hash)
    };
  }
  function resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment) => {
      if (segment === "..") {
        if (segments.length > 1)
          segments.pop();
      } else if (segment !== ".") {
        segments.push(segment);
      }
    });
    return segments.length > 1 ? segments.join("/") : "/";
  }
  function getInvalidPathError(char, field, dest, path) {
    return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
  }
  function getPathContributingMatches(matches) {
    return matches.filter((match, index2) => index2 === 0 || match.route.path && match.route.path.length > 0);
  }
  function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
    if (isPathRelative === void 0) {
      isPathRelative = false;
    }
    let to;
    if (typeof toArg === "string") {
      to = parsePath(toArg);
    } else {
      to = _extends7({}, toArg);
      invariant2(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
      invariant2(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
      invariant2(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from;
    if (isPathRelative || toPathname == null) {
      from = locationPathname;
    } else {
      let routePathnameIndex = routePathnames.length - 1;
      if (toPathname.startsWith("..")) {
        let toSegments = toPathname.split("/");
        while (toSegments[0] === "..") {
          toSegments.shift();
          routePathnameIndex -= 1;
        }
        to.pathname = toSegments.join("/");
      }
      from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path = resolvePath(to, from);
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
      path.pathname += "/";
    }
    return path;
  }
  var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
  var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
  var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
  var normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
  var ErrorResponse = class {
    constructor(status, statusText, data, internal) {
      if (internal === void 0) {
        internal = false;
      }
      this.status = status;
      this.statusText = statusText || "";
      this.internal = internal;
      if (data instanceof Error) {
        this.data = data.toString();
        this.error = data;
      } else {
        this.data = data;
      }
    }
  };
  function isRouteErrorResponse(e) {
    return e instanceof ErrorResponse;
  }
  var validActionMethodsArr = ["post", "put", "patch", "delete"];
  var validActionMethods = new Set(validActionMethodsArr);
  var validRequestMethodsArr = ["get", ...validActionMethodsArr];
  var validRequestMethods = new Set(validRequestMethodsArr);
  var isBrowser2 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";

  // node_modules/react-router/dist/index.js
  var React13 = __toESM(require_react());
  function _extends8() {
    _extends8 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends8.apply(this, arguments);
  }
  function isPolyfill(x, y) {
    return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
  }
  var is = typeof Object.is === "function" ? Object.is : isPolyfill;
  var {
    useState: useState4,
    useEffect: useEffect3,
    useLayoutEffect: useLayoutEffect2,
    useDebugValue
  } = React13;
  var didWarnOld18Alpha = false;
  var didWarnUncachedGetSnapshot = false;
  function useSyncExternalStore$2(subscribe, getSnapshot, getServerSnapshot) {
    if (true) {
      if (!didWarnOld18Alpha) {
        if ("startTransition" in React13) {
          didWarnOld18Alpha = true;
          console.error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
        }
      }
    }
    const value = getSnapshot();
    if (true) {
      if (!didWarnUncachedGetSnapshot) {
        const cachedValue = getSnapshot();
        if (!is(value, cachedValue)) {
          console.error("The result of getSnapshot should be cached to avoid an infinite loop");
          didWarnUncachedGetSnapshot = true;
        }
      }
    }
    const [{
      inst
    }, forceUpdate] = useState4({
      inst: {
        value,
        getSnapshot
      }
    });
    useLayoutEffect2(() => {
      inst.value = value;
      inst.getSnapshot = getSnapshot;
      if (checkIfSnapshotChanged(inst)) {
        forceUpdate({
          inst
        });
      }
    }, [subscribe, value, getSnapshot]);
    useEffect3(() => {
      if (checkIfSnapshotChanged(inst)) {
        forceUpdate({
          inst
        });
      }
      const handleStoreChange = () => {
        if (checkIfSnapshotChanged(inst)) {
          forceUpdate({
            inst
          });
        }
      };
      return subscribe(handleStoreChange);
    }, [subscribe]);
    useDebugValue(value);
    return value;
  }
  function checkIfSnapshotChanged(inst) {
    const latestGetSnapshot = inst.getSnapshot;
    const prevValue = inst.value;
    try {
      const nextValue = latestGetSnapshot();
      return !is(prevValue, nextValue);
    } catch (error) {
      return true;
    }
  }
  function useSyncExternalStore$12(subscribe, getSnapshot, getServerSnapshot) {
    return getSnapshot();
  }
  var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
  var isServerEnvironment = !canUseDOM;
  var shim = isServerEnvironment ? useSyncExternalStore$12 : useSyncExternalStore$2;
  var useSyncExternalStore2 = "useSyncExternalStore" in React13 ? ((module2) => module2.useSyncExternalStore)(React13) : shim;
  var DataStaticRouterContext = /* @__PURE__ */ React13.createContext(null);
  if (true) {
    DataStaticRouterContext.displayName = "DataStaticRouterContext";
  }
  var DataRouterContext = /* @__PURE__ */ React13.createContext(null);
  if (true) {
    DataRouterContext.displayName = "DataRouter";
  }
  var DataRouterStateContext = /* @__PURE__ */ React13.createContext(null);
  if (true) {
    DataRouterStateContext.displayName = "DataRouterState";
  }
  var AwaitContext = /* @__PURE__ */ React13.createContext(null);
  if (true) {
    AwaitContext.displayName = "Await";
  }
  var NavigationContext = /* @__PURE__ */ React13.createContext(null);
  if (true) {
    NavigationContext.displayName = "Navigation";
  }
  var LocationContext = /* @__PURE__ */ React13.createContext(null);
  if (true) {
    LocationContext.displayName = "Location";
  }
  var RouteContext = /* @__PURE__ */ React13.createContext({
    outlet: null,
    matches: []
  });
  if (true) {
    RouteContext.displayName = "Route";
  }
  var RouteErrorContext = /* @__PURE__ */ React13.createContext(null);
  if (true) {
    RouteErrorContext.displayName = "RouteError";
  }
  function useHref(to, _temp) {
    let {
      relative
    } = _temp === void 0 ? {} : _temp;
    !useInRouterContext() ? true ? invariant2(
      false,
      "useHref() may be used only in the context of a <Router> component."
    ) : invariant2(false) : void 0;
    let {
      basename,
      navigator: navigator2
    } = React13.useContext(NavigationContext);
    let {
      hash,
      pathname,
      search
    } = useResolvedPath(to, {
      relative
    });
    let joinedPathname = pathname;
    if (basename !== "/") {
      joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
    }
    return navigator2.createHref({
      pathname: joinedPathname,
      search,
      hash
    });
  }
  function useInRouterContext() {
    return React13.useContext(LocationContext) != null;
  }
  function useLocation() {
    !useInRouterContext() ? true ? invariant2(
      false,
      "useLocation() may be used only in the context of a <Router> component."
    ) : invariant2(false) : void 0;
    return React13.useContext(LocationContext).location;
  }
  function useNavigate() {
    !useInRouterContext() ? true ? invariant2(
      false,
      "useNavigate() may be used only in the context of a <Router> component."
    ) : invariant2(false) : void 0;
    let {
      basename,
      navigator: navigator2
    } = React13.useContext(NavigationContext);
    let {
      matches
    } = React13.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match) => match.pathnameBase));
    let activeRef = React13.useRef(false);
    React13.useEffect(() => {
      activeRef.current = true;
    });
    let navigate = React13.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning(activeRef.current, "You should call navigate() in a React.useEffect(), not when your component is first rendered.") : void 0;
      if (!activeRef.current)
        return;
      if (typeof to === "number") {
        navigator2.go(to);
        return;
      }
      let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
      if (basename !== "/") {
        path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
      }
      (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
    }, [basename, navigator2, routePathnamesJson, locationPathname]);
    return navigate;
  }
  var OutletContext = /* @__PURE__ */ React13.createContext(null);
  function useOutlet(context3) {
    let outlet = React13.useContext(RouteContext).outlet;
    if (outlet) {
      return /* @__PURE__ */ React13.createElement(OutletContext.Provider, {
        value: context3
      }, outlet);
    }
    return outlet;
  }
  function useParams() {
    let {
      matches
    } = React13.useContext(RouteContext);
    let routeMatch = matches[matches.length - 1];
    return routeMatch ? routeMatch.params : {};
  }
  function useResolvedPath(to, _temp2) {
    let {
      relative
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      matches
    } = React13.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match) => match.pathnameBase));
    return React13.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
  }
  function useRoutes(routes, locationArg) {
    !useInRouterContext() ? true ? invariant2(
      false,
      "useRoutes() may be used only in the context of a <Router> component."
    ) : invariant2(false) : void 0;
    let {
      navigator: navigator2
    } = React13.useContext(NavigationContext);
    let dataRouterStateContext = React13.useContext(DataRouterStateContext);
    let {
      matches: parentMatches
    } = React13.useContext(RouteContext);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    if (true) {
      let parentPath = parentRoute && parentRoute.path || "";
      warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
    }
    let locationFromContext = useLocation();
    let location;
    if (locationArg) {
      var _parsedLocationArg$pa;
      let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? true ? invariant2(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')) : invariant2(false) : void 0;
      location = parsedLocationArg;
    } else {
      location = locationFromContext;
    }
    let pathname = location.pathname || "/";
    let remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
    let matches = matchRoutes(routes, {
      pathname: remainingPathname
    });
    if (true) {
      true ? warning(parentRoute || matches != null, 'No routes matched location "' + location.pathname + location.search + location.hash + '" ') : void 0;
      true ? warning(matches == null || matches[matches.length - 1].route.element !== void 0, 'Matched leaf route at location "' + location.pathname + location.search + location.hash + '" does not have an element. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.') : void 0;
    }
    let renderedMatches = _renderMatches(matches && matches.map((match) => Object.assign({}, match, {
      params: Object.assign({}, parentParams, match.params),
      pathname: joinPaths([
        parentPathnameBase,
        navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
      ]),
      pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
        parentPathnameBase,
        navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
      ])
    })), parentMatches, dataRouterStateContext || void 0);
    if (locationArg && renderedMatches) {
      return /* @__PURE__ */ React13.createElement(LocationContext.Provider, {
        value: {
          location: _extends8({
            pathname: "/",
            search: "",
            hash: "",
            state: null,
            key: "default"
          }, location),
          navigationType: Action.Pop
        }
      }, renderedMatches);
    }
    return renderedMatches;
  }
  function DefaultErrorElement() {
    let error = useRouteError();
    let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
    let stack = error instanceof Error ? error.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = {
      padding: "0.5rem",
      backgroundColor: lightgrey
    };
    let codeStyles = {
      padding: "2px 4px",
      backgroundColor: lightgrey
    };
    return /* @__PURE__ */ React13.createElement(React13.Fragment, null, /* @__PURE__ */ React13.createElement("h2", null, "Unhandled Thrown Error!"), /* @__PURE__ */ React13.createElement("h3", {
      style: {
        fontStyle: "italic"
      }
    }, message), stack ? /* @__PURE__ */ React13.createElement("pre", {
      style: preStyles
    }, stack) : null, /* @__PURE__ */ React13.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React13.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own\xA0", /* @__PURE__ */ React13.createElement("code", {
      style: codeStyles
    }, "errorElement"), " props on\xA0", /* @__PURE__ */ React13.createElement("code", {
      style: codeStyles
    }, "<Route>")));
  }
  var RenderErrorBoundary = class extends React13.Component {
    constructor(props) {
      super(props);
      this.state = {
        location: props.location,
        error: props.error
      };
    }
    static getDerivedStateFromError(error) {
      return {
        error
      };
    }
    static getDerivedStateFromProps(props, state) {
      if (state.location !== props.location) {
        return {
          error: props.error,
          location: props.location
        };
      }
      return {
        error: props.error || state.error,
        location: state.location
      };
    }
    componentDidCatch(error, errorInfo) {
      console.error("React Router caught the following error during render", error, errorInfo);
    }
    render() {
      return this.state.error ? /* @__PURE__ */ React13.createElement(RouteErrorContext.Provider, {
        value: this.state.error,
        children: this.props.component
      }) : this.props.children;
    }
  };
  function RenderedRoute(_ref2) {
    let {
      routeContext,
      match,
      children: children2
    } = _ref2;
    let dataStaticRouterContext = React13.useContext(DataStaticRouterContext);
    if (dataStaticRouterContext && match.route.errorElement) {
      dataStaticRouterContext._deepestRenderedBoundaryId = match.route.id;
    }
    return /* @__PURE__ */ React13.createElement(RouteContext.Provider, {
      value: routeContext
    }, children2);
  }
  function _renderMatches(matches, parentMatches, dataRouterState) {
    if (parentMatches === void 0) {
      parentMatches = [];
    }
    if (matches == null) {
      if (dataRouterState != null && dataRouterState.errors) {
        matches = dataRouterState.matches;
      } else {
        return null;
      }
    }
    let renderedMatches = matches;
    let errors = dataRouterState == null ? void 0 : dataRouterState.errors;
    if (errors != null) {
      let errorIndex = renderedMatches.findIndex((m2) => m2.route.id && (errors == null ? void 0 : errors[m2.route.id]));
      !(errorIndex >= 0) ? true ? invariant2(false, "Could not find a matching route for the current errors: " + errors) : invariant2(false) : void 0;
      renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
    }
    return renderedMatches.reduceRight((outlet, match, index2) => {
      let error = match.route.id ? errors == null ? void 0 : errors[match.route.id] : null;
      let errorElement = dataRouterState ? match.route.errorElement || /* @__PURE__ */ React13.createElement(DefaultErrorElement, null) : null;
      let getChildren = () => /* @__PURE__ */ React13.createElement(RenderedRoute, {
        match,
        routeContext: {
          outlet,
          matches: parentMatches.concat(renderedMatches.slice(0, index2 + 1))
        }
      }, error ? errorElement : match.route.element !== void 0 ? match.route.element : outlet);
      return dataRouterState && (match.route.errorElement || index2 === 0) ? /* @__PURE__ */ React13.createElement(RenderErrorBoundary, {
        location: dataRouterState.location,
        component: errorElement,
        error,
        children: getChildren()
      }) : getChildren();
    }, null);
  }
  var DataRouterHook;
  (function(DataRouterHook3) {
    DataRouterHook3["UseRevalidator"] = "useRevalidator";
  })(DataRouterHook || (DataRouterHook = {}));
  var DataRouterStateHook;
  (function(DataRouterStateHook3) {
    DataRouterStateHook3["UseLoaderData"] = "useLoaderData";
    DataRouterStateHook3["UseActionData"] = "useActionData";
    DataRouterStateHook3["UseRouteError"] = "useRouteError";
    DataRouterStateHook3["UseNavigation"] = "useNavigation";
    DataRouterStateHook3["UseRouteLoaderData"] = "useRouteLoaderData";
    DataRouterStateHook3["UseMatches"] = "useMatches";
    DataRouterStateHook3["UseRevalidator"] = "useRevalidator";
  })(DataRouterStateHook || (DataRouterStateHook = {}));
  function getDataRouterConsoleError(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.";
  }
  function useDataRouterState(hookName) {
    let state = React13.useContext(DataRouterStateContext);
    !state ? true ? invariant2(false, getDataRouterConsoleError(hookName)) : invariant2(false) : void 0;
    return state;
  }
  function useNavigation() {
    let state = useDataRouterState(DataRouterStateHook.UseNavigation);
    return state.navigation;
  }
  function useMatches() {
    let {
      matches,
      loaderData
    } = useDataRouterState(DataRouterStateHook.UseMatches);
    return React13.useMemo(() => matches.map((match) => {
      let {
        pathname,
        params
      } = match;
      return {
        id: match.route.id,
        pathname,
        params,
        data: loaderData[match.route.id],
        handle: match.route.handle
      };
    }), [matches, loaderData]);
  }
  function useRouteError() {
    var _state$errors;
    let error = React13.useContext(RouteErrorContext);
    let state = useDataRouterState(DataRouterStateHook.UseRouteError);
    let route = React13.useContext(RouteContext);
    let thisRoute = route.matches[route.matches.length - 1];
    if (error) {
      return error;
    }
    !route ? true ? invariant2(false, "useRouteError must be used inside a RouteContext") : invariant2(false) : void 0;
    !thisRoute.route.id ? true ? invariant2(false, 'useRouteError can only be used on routes that contain a unique "id"') : invariant2(false) : void 0;
    return (_state$errors = state.errors) == null ? void 0 : _state$errors[thisRoute.route.id];
  }
  var alreadyWarned = {};
  function warningOnce(key, cond, message) {
    if (!cond && !alreadyWarned[key]) {
      alreadyWarned[key] = true;
      true ? warning(false, message) : void 0;
    }
  }
  function Outlet(props) {
    return useOutlet(props.context);
  }
  function Route(_props) {
    true ? invariant2(false, "A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.") : invariant2(false);
  }
  function Router(_ref4) {
    let {
      basename: basenameProp = "/",
      children: children2 = null,
      location: locationProp,
      navigationType = Action.Pop,
      navigator: navigator2,
      static: staticProp = false
    } = _ref4;
    !!useInRouterContext() ? true ? invariant2(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : invariant2(false) : void 0;
    let basename = basenameProp.replace(/^\/*/, "/");
    let navigationContext = React13.useMemo(() => ({
      basename,
      navigator: navigator2,
      static: staticProp
    }), [basename, navigator2, staticProp]);
    if (typeof locationProp === "string") {
      locationProp = parsePath(locationProp);
    }
    let {
      pathname = "/",
      search = "",
      hash = "",
      state = null,
      key = "default"
    } = locationProp;
    let location = React13.useMemo(() => {
      let trailingPathname = stripBasename(pathname, basename);
      if (trailingPathname == null) {
        return null;
      }
      return {
        pathname: trailingPathname,
        search,
        hash,
        state,
        key
      };
    }, [basename, pathname, search, hash, state, key]);
    true ? warning(location != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash + '" because it does not start with the ') + "basename, so the <Router> won't render anything.") : void 0;
    if (location == null) {
      return null;
    }
    return /* @__PURE__ */ React13.createElement(NavigationContext.Provider, {
      value: navigationContext
    }, /* @__PURE__ */ React13.createElement(LocationContext.Provider, {
      children: children2,
      value: {
        location,
        navigationType
      }
    }));
  }
  function Routes(_ref5) {
    let {
      children: children2,
      location
    } = _ref5;
    let dataRouterContext = React13.useContext(DataRouterContext);
    let routes = dataRouterContext && !children2 ? dataRouterContext.router.routes : createRoutesFromChildren(children2);
    return useRoutes(routes, location);
  }
  var AwaitRenderStatus;
  (function(AwaitRenderStatus2) {
    AwaitRenderStatus2[AwaitRenderStatus2["pending"] = 0] = "pending";
    AwaitRenderStatus2[AwaitRenderStatus2["success"] = 1] = "success";
    AwaitRenderStatus2[AwaitRenderStatus2["error"] = 2] = "error";
  })(AwaitRenderStatus || (AwaitRenderStatus = {}));
  var neverSettledPromise = new Promise(() => {
  });
  function createRoutesFromChildren(children2, parentPath) {
    if (parentPath === void 0) {
      parentPath = [];
    }
    let routes = [];
    React13.Children.forEach(children2, (element, index2) => {
      if (!/* @__PURE__ */ React13.isValidElement(element)) {
        return;
      }
      if (element.type === React13.Fragment) {
        routes.push.apply(routes, createRoutesFromChildren(element.props.children, parentPath));
        return;
      }
      !(element.type === Route) ? true ? invariant2(false, "[" + (typeof element.type === "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>") : invariant2(false) : void 0;
      !(!element.props.index || !element.props.children) ? true ? invariant2(false, "An index route cannot have child routes.") : invariant2(false) : void 0;
      let treePath = [...parentPath, index2];
      let route = {
        id: element.props.id || treePath.join("-"),
        caseSensitive: element.props.caseSensitive,
        element: element.props.element,
        index: element.props.index,
        path: element.props.path,
        loader: element.props.loader,
        action: element.props.action,
        errorElement: element.props.errorElement,
        hasErrorBoundary: element.props.errorElement != null,
        shouldRevalidate: element.props.shouldRevalidate,
        handle: element.props.handle
      };
      if (element.props.children) {
        route.children = createRoutesFromChildren(element.props.children, treePath);
      }
      routes.push(route);
    });
    return routes;
  }

  // node_modules/react-router-dom/dist/index.js
  var React14 = __toESM(require_react());
  function _extends9() {
    _extends9 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends9.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose2(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  var defaultMethod = "get";
  var defaultEncType = "application/x-www-form-urlencoded";
  function isHtmlElement(object2) {
    return object2 != null && typeof object2.tagName === "string";
  }
  function isButtonElement(object2) {
    return isHtmlElement(object2) && object2.tagName.toLowerCase() === "button";
  }
  function isFormElement(object2) {
    return isHtmlElement(object2) && object2.tagName.toLowerCase() === "form";
  }
  function isInputElement(object2) {
    return isHtmlElement(object2) && object2.tagName.toLowerCase() === "input";
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  function shouldProcessLinkClick(event, target) {
    return event.button === 0 && (!target || target === "_self") && !isModifiedEvent(event);
  }
  function getFormSubmissionInfo(target, defaultAction, options) {
    let method;
    let action;
    let encType;
    let formData;
    if (isFormElement(target)) {
      let submissionTrigger = options.submissionTrigger;
      method = options.method || target.getAttribute("method") || defaultMethod;
      action = options.action || target.getAttribute("action") || defaultAction;
      encType = options.encType || target.getAttribute("enctype") || defaultEncType;
      formData = new FormData(target);
      if (submissionTrigger && submissionTrigger.name) {
        formData.append(submissionTrigger.name, submissionTrigger.value);
      }
    } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
      let form = target.form;
      if (form == null) {
        throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
      }
      method = options.method || target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
      action = options.action || target.getAttribute("formaction") || form.getAttribute("action") || defaultAction;
      encType = options.encType || target.getAttribute("formenctype") || form.getAttribute("enctype") || defaultEncType;
      formData = new FormData(form);
      if (target.name) {
        formData.append(target.name, target.value);
      }
    } else if (isHtmlElement(target)) {
      throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
    } else {
      method = options.method || defaultMethod;
      action = options.action || defaultAction;
      encType = options.encType || defaultEncType;
      if (target instanceof FormData) {
        formData = target;
      } else {
        formData = new FormData();
        if (target instanceof URLSearchParams) {
          for (let [name, value] of target) {
            formData.append(name, value);
          }
        } else if (target != null) {
          for (let name of Object.keys(target)) {
            formData.append(name, target[name]);
          }
        }
      }
    }
    let {
      protocol,
      host
    } = window.location;
    let url = new URL(action, protocol + "//" + host);
    return {
      url,
      method,
      encType,
      formData
    };
  }
  var _excluded2 = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset"];
  var _excluded22 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "children"];
  var _excluded3 = ["reloadDocument", "replace", "method", "action", "onSubmit", "fetcherKey", "routeId", "relative"];
  function BrowserRouter(_ref2) {
    let {
      basename,
      children: children2,
      window: window2
    } = _ref2;
    let historyRef = React14.useRef();
    if (historyRef.current == null) {
      historyRef.current = createBrowserHistory({
        window: window2,
        v5Compat: true
      });
    }
    let history = historyRef.current;
    let [state, setState] = React14.useState({
      action: history.action,
      location: history.location
    });
    React14.useLayoutEffect(() => history.listen(setState), [history]);
    return /* @__PURE__ */ React14.createElement(Router, {
      basename,
      children: children2,
      location: state.location,
      navigationType: state.action,
      navigator: history
    });
  }
  function HistoryRouter(_ref3) {
    let {
      basename,
      children: children2,
      history
    } = _ref3;
    const [state, setState] = React14.useState({
      action: history.action,
      location: history.location
    });
    React14.useLayoutEffect(() => history.listen(setState), [history]);
    return /* @__PURE__ */ React14.createElement(Router, {
      basename,
      children: children2,
      location: state.location,
      navigationType: state.action,
      navigator: history
    });
  }
  if (true) {
    HistoryRouter.displayName = "unstable_HistoryRouter";
  }
  var Link = /* @__PURE__ */ React14.forwardRef(function LinkWithRef(_ref4, ref) {
    let {
      onClick,
      relative,
      reloadDocument,
      replace,
      state,
      target,
      to,
      preventScrollReset
    } = _ref4, rest = _objectWithoutPropertiesLoose2(_ref4, _excluded2);
    let href = useHref(to, {
      relative
    });
    let internalOnClick = useLinkClickHandler(to, {
      replace,
      state,
      target,
      preventScrollReset,
      relative
    });
    function handleClick(event) {
      if (onClick)
        onClick(event);
      if (!event.defaultPrevented) {
        internalOnClick(event);
      }
    }
    return /* @__PURE__ */ React14.createElement("a", _extends9({}, rest, {
      href,
      onClick: reloadDocument ? onClick : handleClick,
      ref,
      target
    }));
  });
  if (true) {
    Link.displayName = "Link";
  }
  var NavLink = /* @__PURE__ */ React14.forwardRef(function NavLinkWithRef(_ref5, ref) {
    let {
      "aria-current": ariaCurrentProp = "page",
      caseSensitive = false,
      className: classNameProp = "",
      end = false,
      style: styleProp,
      to,
      children: children2
    } = _ref5, rest = _objectWithoutPropertiesLoose2(_ref5, _excluded22);
    let path = useResolvedPath(to, {
      relative: rest.relative
    });
    let location = useLocation();
    let routerState = React14.useContext(DataRouterStateContext);
    let {
      navigator: navigator2
    } = React14.useContext(NavigationContext);
    let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
    let locationPathname = location.pathname;
    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
    if (!caseSensitive) {
      locationPathname = locationPathname.toLowerCase();
      nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
      toPathname = toPathname.toLowerCase();
    }
    let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === "/";
    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
    let ariaCurrent = isActive ? ariaCurrentProp : void 0;
    let className;
    if (typeof classNameProp === "function") {
      className = classNameProp({
        isActive,
        isPending
      });
    } else {
      className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null].filter(Boolean).join(" ");
    }
    let style = typeof styleProp === "function" ? styleProp({
      isActive,
      isPending
    }) : styleProp;
    return /* @__PURE__ */ React14.createElement(Link, _extends9({}, rest, {
      "aria-current": ariaCurrent,
      className,
      ref,
      style,
      to
    }), typeof children2 === "function" ? children2({
      isActive,
      isPending
    }) : children2);
  });
  if (true) {
    NavLink.displayName = "NavLink";
  }
  var Form = /* @__PURE__ */ React14.forwardRef((props, ref) => {
    return /* @__PURE__ */ React14.createElement(FormImpl, _extends9({}, props, {
      ref
    }));
  });
  if (true) {
    Form.displayName = "Form";
  }
  var FormImpl = /* @__PURE__ */ React14.forwardRef((_ref6, forwardedRef) => {
    let {
      reloadDocument,
      replace,
      method = defaultMethod,
      action,
      onSubmit,
      fetcherKey,
      routeId,
      relative
    } = _ref6, props = _objectWithoutPropertiesLoose2(_ref6, _excluded3);
    let submit = useSubmitImpl(fetcherKey, routeId);
    let formMethod = method.toLowerCase() === "get" ? "get" : "post";
    let formAction = useFormAction(action, {
      relative
    });
    let submitHandler = (event) => {
      onSubmit && onSubmit(event);
      if (event.defaultPrevented)
        return;
      event.preventDefault();
      let submitter = event.nativeEvent.submitter;
      submit(submitter || event.currentTarget, {
        method,
        replace,
        relative
      });
    };
    return /* @__PURE__ */ React14.createElement("form", _extends9({
      ref: forwardedRef,
      method: formMethod,
      action: formAction,
      onSubmit: reloadDocument ? onSubmit : submitHandler
    }, props));
  });
  if (true) {
    FormImpl.displayName = "FormImpl";
  }
  function ScrollRestoration(_ref7) {
    let {
      getKey,
      storageKey
    } = _ref7;
    useScrollRestoration({
      getKey,
      storageKey
    });
    return null;
  }
  if (true) {
    ScrollRestoration.displayName = "ScrollRestoration";
  }
  var DataRouterHook2;
  (function(DataRouterHook3) {
    DataRouterHook3["UseScrollRestoration"] = "useScrollRestoration";
    DataRouterHook3["UseSubmitImpl"] = "useSubmitImpl";
    DataRouterHook3["UseFetcher"] = "useFetcher";
  })(DataRouterHook2 || (DataRouterHook2 = {}));
  var DataRouterStateHook2;
  (function(DataRouterStateHook3) {
    DataRouterStateHook3["UseFetchers"] = "useFetchers";
    DataRouterStateHook3["UseScrollRestoration"] = "useScrollRestoration";
  })(DataRouterStateHook2 || (DataRouterStateHook2 = {}));
  function getDataRouterConsoleError2(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.";
  }
  function useDataRouterContext(hookName) {
    let ctx = React14.useContext(DataRouterContext);
    !ctx ? true ? invariant2(false, getDataRouterConsoleError2(hookName)) : invariant2(false) : void 0;
    return ctx;
  }
  function useDataRouterState2(hookName) {
    let state = React14.useContext(DataRouterStateContext);
    !state ? true ? invariant2(false, getDataRouterConsoleError2(hookName)) : invariant2(false) : void 0;
    return state;
  }
  function useLinkClickHandler(to, _temp) {
    let {
      target,
      replace: replaceProp,
      state,
      preventScrollReset,
      relative
    } = _temp === void 0 ? {} : _temp;
    let navigate = useNavigate();
    let location = useLocation();
    let path = useResolvedPath(to, {
      relative
    });
    return React14.useCallback((event) => {
      if (shouldProcessLinkClick(event, target)) {
        event.preventDefault();
        let replace = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
        navigate(to, {
          replace,
          state,
          preventScrollReset,
          relative
        });
      }
    }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative]);
  }
  function useSubmitImpl(fetcherKey, routeId) {
    let {
      router
    } = useDataRouterContext(DataRouterHook2.UseSubmitImpl);
    let defaultAction = useFormAction();
    return React14.useCallback(function(target, options) {
      if (options === void 0) {
        options = {};
      }
      if (typeof document === "undefined") {
        throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
      }
      let {
        method,
        encType,
        formData,
        url
      } = getFormSubmissionInfo(target, defaultAction, options);
      let href = url.pathname + url.search;
      let opts = {
        replace: options.replace,
        formData,
        formMethod: method,
        formEncType: encType
      };
      if (fetcherKey) {
        !(routeId != null) ? true ? invariant2(false, "No routeId available for useFetcher()") : invariant2(false) : void 0;
        router.fetch(fetcherKey, routeId, href, opts);
      } else {
        router.navigate(href, opts);
      }
    }, [defaultAction, router, fetcherKey, routeId]);
  }
  function useFormAction(action, _temp2) {
    let {
      relative
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      basename
    } = React14.useContext(NavigationContext);
    let routeContext = React14.useContext(RouteContext);
    !routeContext ? true ? invariant2(false, "useFormAction must be used inside a RouteContext") : invariant2(false) : void 0;
    let [match] = routeContext.matches.slice(-1);
    let resolvedAction = action != null ? action : ".";
    let path = _extends9({}, useResolvedPath(resolvedAction, {
      relative
    }));
    let location = useLocation();
    if (action == null) {
      path.search = location.search;
      path.hash = location.hash;
      if (match.route.index) {
        let params = new URLSearchParams(path.search);
        params.delete("index");
        path.search = params.toString() ? "?" + params.toString() : "";
      }
    }
    if ((!action || action === ".") && match.route.index) {
      path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
    }
    if (basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    return createPath(path);
  }
  var SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
  var savedScrollPositions = {};
  function useScrollRestoration(_temp3) {
    let {
      getKey,
      storageKey
    } = _temp3 === void 0 ? {} : _temp3;
    let {
      router
    } = useDataRouterContext(DataRouterHook2.UseScrollRestoration);
    let {
      restoreScrollPosition,
      preventScrollReset
    } = useDataRouterState2(DataRouterStateHook2.UseScrollRestoration);
    let location = useLocation();
    let matches = useMatches();
    let navigation = useNavigation();
    React14.useEffect(() => {
      window.history.scrollRestoration = "manual";
      return () => {
        window.history.scrollRestoration = "auto";
      };
    }, []);
    useBeforeUnload(React14.useCallback(() => {
      if (navigation.state === "idle") {
        let key = (getKey ? getKey(location, matches) : null) || location.key;
        savedScrollPositions[key] = window.scrollY;
      }
      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
      window.history.scrollRestoration = "auto";
    }, [storageKey, getKey, navigation.state, location, matches]));
    React14.useLayoutEffect(() => {
      try {
        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
        if (sessionPositions) {
          savedScrollPositions = JSON.parse(sessionPositions);
        }
      } catch (e) {
      }
    }, [storageKey]);
    React14.useLayoutEffect(() => {
      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKey);
      return () => disableScrollRestoration && disableScrollRestoration();
    }, [router, getKey]);
    React14.useLayoutEffect(() => {
      if (restoreScrollPosition === false) {
        return;
      }
      if (typeof restoreScrollPosition === "number") {
        window.scrollTo(0, restoreScrollPosition);
        return;
      }
      if (location.hash) {
        let el = document.getElementById(location.hash.slice(1));
        if (el) {
          el.scrollIntoView();
          return;
        }
      }
      if (preventScrollReset === true) {
        return;
      }
      window.scrollTo(0, 0);
    }, [location, restoreScrollPosition, preventScrollReset]);
  }
  function useBeforeUnload(callback) {
    React14.useEffect(() => {
      window.addEventListener("beforeunload", callback);
      return () => {
        window.removeEventListener("beforeunload", callback);
      };
    }, [callback]);
  }

  // node_modules/baseui/esm/app-nav-bar/app-nav-bar.js
  var React50 = __toESM(require_react());

  // node_modules/baseui/esm/app-nav-bar/constants.js
  var POSITION = {
    horizontal: "horizontal",
    vertical: "vertical"
  };
  var KIND = {
    primary: "primary",
    secondary: "secondary"
  };

  // node_modules/baseui/esm/app-nav-bar/mobile-menu.js
  var React46 = __toESM(require_react());

  // node_modules/baseui/esm/button/button.js
  var React16 = __toESM(require_react());

  // node_modules/baseui/esm/button/constants.js
  var KIND2 = {
    primary: "primary",
    secondary: "secondary",
    tertiary: "tertiary"
  };
  var SHAPE = {
    default: "default",
    pill: "pill",
    round: "round",
    circle: "circle",
    square: "square"
  };
  var SIZE = {
    mini: "mini",
    default: "default",
    compact: "compact",
    large: "large"
  };

  // node_modules/baseui/esm/button/styled-components.js
  function ownKeys7(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread7(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys7(Object(source2), true).forEach(function(key) {
        _defineProperty10(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys7(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty10(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var BaseButton = styled2("button", function(_ref2) {
    var $theme = _ref2.$theme, $size = _ref2.$size, $colors = _ref2.$colors, $kind = _ref2.$kind, $shape = _ref2.$shape, $isLoading = _ref2.$isLoading, $isSelected = _ref2.$isSelected, $disabled = _ref2.$disabled, $isFocusVisible = _ref2.$isFocusVisible;
    return _objectSpread7(_objectSpread7(_objectSpread7(_objectSpread7(_objectSpread7({
      display: "inline-flex",
      flexDirection: $isLoading ? "column" : "row",
      alignItems: "center",
      justifyContent: "center",
      borderLeftWidth: 0,
      borderTopWidth: 0,
      borderRightWidth: 0,
      borderBottomWidth: 0,
      borderLeftStyle: "none",
      borderTopStyle: "none",
      borderRightStyle: "none",
      borderBottomStyle: "none",
      outline: "none",
      boxShadow: $isFocusVisible ? "inset 0 0 0 3px ".concat($theme.colors.accent) : "none",
      textDecoration: "none",
      WebkitAppearance: "none",
      transitionProperty: "background",
      transitionDuration: $theme.animation.timing200,
      transitionTimingFunction: $theme.animation.linearCurve,
      cursor: "pointer",
      ":disabled": _objectSpread7({
        cursor: "not-allowed"
      }, getDisabledStyles({
        $theme,
        $kind,
        $disabled,
        $isSelected
      })),
      marginLeft: 0,
      marginTop: 0,
      marginRight: 0,
      marginBottom: 0
    }, getFontStyles({
      $theme,
      $size
    })), getBorderRadiiStyles({
      $theme,
      $size,
      $shape
    })), getPaddingStyles({
      $theme,
      $size,
      $shape
    })), getColorStyles({
      $theme,
      $colors,
      $kind,
      $isLoading,
      $isSelected,
      $disabled
    })), getShapeStyles({
      $shape,
      $size
    }));
  });
  BaseButton.displayName = "BaseButton";
  BaseButton.displayName = "BaseButton";
  var EndEnhancer = styled2("div", function(_ref2) {
    var $theme = _ref2.$theme;
    var marginDirection = $theme.direction === "rtl" ? "marginRight" : "marginLeft";
    return _defineProperty10({
      display: "flex"
    }, marginDirection, $theme.sizing.scale500);
  });
  EndEnhancer.displayName = "EndEnhancer";
  EndEnhancer.displayName = "EndEnhancer";
  var StartEnhancer = styled2("div", function(_ref4) {
    var $theme = _ref4.$theme;
    var marginDirection = $theme.direction === "rtl" ? "marginLeft" : "marginRight";
    return _defineProperty10({
      display: "flex"
    }, marginDirection, $theme.sizing.scale500);
  });
  StartEnhancer.displayName = "StartEnhancer";
  StartEnhancer.displayName = "StartEnhancer";
  var LoadingSpinnerContainer = styled2("div", function(_ref6) {
    var $theme = _ref6.$theme, $size = _ref6.$size;
    var margins = "3px";
    if ($size === SIZE.mini || $size === SIZE.compact) {
      margins = $theme.sizing.scale0;
    }
    if ($size === SIZE.large) {
      margins = $theme.sizing.scale100;
    }
    return {
      lineHeight: 0,
      position: "static",
      marginBottom: margins,
      marginTop: margins
    };
  });
  LoadingSpinnerContainer.displayName = "LoadingSpinnerContainer";
  LoadingSpinnerContainer.displayName = "LoadingSpinnerContainer";
  var LoadingSpinner = styled2("span", function(_ref7) {
    var $theme = _ref7.$theme, $kind = _ref7.$kind, $disabled = _ref7.$disabled, $size = _ref7.$size;
    var _getLoadingSpinnerCol = getLoadingSpinnerColors({
      $theme,
      $kind,
      $disabled
    }), foreground = _getLoadingSpinnerCol.foreground, background = _getLoadingSpinnerCol.background;
    var dimension = $theme.sizing.scale550;
    if ($size === SIZE.mini || $size === SIZE.compact) {
      dimension = $theme.sizing.scale500;
    }
    if ($size === SIZE.large) {
      dimension = $theme.sizing.scale600;
    }
    return {
      height: dimension,
      width: dimension,
      borderTopLeftRadius: "50%",
      borderTopRightRadius: "50%",
      borderBottomRightRadius: "50%",
      borderBottomLeftRadius: "50%",
      borderLeftStyle: "solid",
      borderTopStyle: "solid",
      borderRightStyle: "solid",
      borderBottomStyle: "solid",
      borderLeftWidth: $theme.sizing.scale0,
      borderTopWidth: $theme.sizing.scale0,
      borderRightWidth: $theme.sizing.scale0,
      borderBottomWidth: $theme.sizing.scale0,
      borderTopColor: foreground,
      borderLeftColor: background,
      borderBottomColor: background,
      borderRightColor: background,
      boxSizing: "border-box",
      display: "inline-block",
      animationDuration: $theme.animation.timing700,
      animationTimingFunction: "linear",
      animationIterationCount: "infinite",
      animationName: {
        to: {
          transform: "rotate(360deg)"
        },
        from: {
          transform: "rotate(0deg)"
        }
      }
    };
  });
  LoadingSpinner.displayName = "LoadingSpinner";
  LoadingSpinner.displayName = "LoadingSpinner";
  function getLoadingSpinnerColors(_ref8) {
    var $theme = _ref8.$theme, $kind = _ref8.$kind, $disabled = _ref8.$disabled;
    if ($disabled) {
      return {
        foreground: $theme.colors.buttonDisabledSpinnerForeground,
        background: $theme.colors.buttonDisabledSpinnerBackground
      };
    }
    switch ($kind) {
      case KIND2.secondary: {
        return {
          foreground: $theme.colors.buttonSecondarySpinnerForeground,
          background: $theme.colors.buttonSecondarySpinnerBackground
        };
      }
      case KIND2.tertiary: {
        return {
          foreground: $theme.colors.buttonTertiarySpinnerForeground,
          background: $theme.colors.buttonTertiarySpinnerBackground
        };
      }
      case KIND2.primary:
      default: {
        return {
          foreground: $theme.colors.buttonPrimarySpinnerForeground,
          background: $theme.colors.buttonPrimarySpinnerBackground
        };
      }
    }
  }
  function getBorderRadiiStyles(_ref9) {
    var $theme = _ref9.$theme, $size = _ref9.$size, $shape = _ref9.$shape;
    var value = $theme.borders.buttonBorderRadius;
    if ($shape === SHAPE.pill) {
      if ($size === SIZE.compact) {
        value = "30px";
      } else if ($size === SIZE.large) {
        value = "42px";
      } else {
        value = "38px";
      }
    } else if ($shape === SHAPE.circle || $shape === SHAPE.round) {
      value = "50%";
    } else if ($size === SIZE.mini) {
      value = $theme.borders.buttonBorderRadiusMini;
    }
    return {
      borderTopRightRadius: value,
      borderBottomRightRadius: value,
      borderTopLeftRadius: value,
      borderBottomLeftRadius: value
    };
  }
  function getFontStyles(_ref10) {
    var $theme = _ref10.$theme, $size = _ref10.$size;
    switch ($size) {
      case SIZE.mini:
        return $theme.typography.font150;
      case SIZE.compact:
        return $theme.typography.font250;
      case SIZE.large:
        return $theme.typography.font450;
      default:
        return $theme.typography.font350;
    }
  }
  function getDisabledStyles(_ref11) {
    var $theme = _ref11.$theme, $kind = _ref11.$kind, $isSelected = _ref11.$isSelected, $disabled = _ref11.$disabled;
    if ($disabled && $isSelected) {
      if ($kind === KIND2.primary || $kind === KIND2.secondary) {
        return {
          color: $theme.colors.buttonDisabledActiveText,
          backgroundColor: $theme.colors.buttonDisabledActiveFill
        };
      } else if ($kind === KIND2.tertiary) {
        return {
          backgroundColor: $theme.colors.buttonTertiaryDisabledActiveFill,
          color: $theme.colors.buttonTertiaryDisabledActiveText
        };
      }
    }
    return {
      backgroundColor: $kind === KIND2.tertiary ? "transparent" : $theme.colors.buttonDisabledFill,
      color: $theme.colors.buttonDisabledText
    };
  }
  function getPaddingStyles(_ref12) {
    var $theme = _ref12.$theme, $size = _ref12.$size, $shape = _ref12.$shape;
    var iconShape = $shape === SHAPE.square || $shape === SHAPE.circle || $shape === SHAPE.round;
    switch ($size) {
      case SIZE.mini:
        return {
          paddingTop: $theme.sizing.scale200,
          paddingBottom: $theme.sizing.scale200,
          paddingLeft: iconShape ? $theme.sizing.scale200 : $theme.sizing.scale300,
          paddingRight: iconShape ? $theme.sizing.scale200 : $theme.sizing.scale300
        };
      case SIZE.compact:
        return {
          paddingTop: $theme.sizing.scale400,
          paddingBottom: $theme.sizing.scale400,
          paddingLeft: iconShape ? $theme.sizing.scale400 : $theme.sizing.scale500,
          paddingRight: iconShape ? $theme.sizing.scale400 : $theme.sizing.scale500
        };
      case SIZE.large:
        return {
          paddingTop: $theme.sizing.scale600,
          paddingBottom: $theme.sizing.scale600,
          paddingLeft: iconShape ? $theme.sizing.scale600 : $theme.sizing.scale700,
          paddingRight: iconShape ? $theme.sizing.scale600 : $theme.sizing.scale700
        };
      default:
        return {
          paddingTop: $theme.sizing.scale550,
          paddingBottom: $theme.sizing.scale550,
          paddingLeft: iconShape ? $theme.sizing.scale550 : $theme.sizing.scale600,
          paddingRight: iconShape ? $theme.sizing.scale550 : $theme.sizing.scale600
        };
    }
  }
  function getColorStyles(_ref13) {
    var $theme = _ref13.$theme, $colors = _ref13.$colors, $isLoading = _ref13.$isLoading, $isSelected = _ref13.$isSelected, $kind = _ref13.$kind, $disabled = _ref13.$disabled;
    if ($colors) {
      return {
        color: $colors.color,
        backgroundColor: $colors.backgroundColor,
        ":hover": {
          boxShadow: "inset 999px 999px 0px rgba(0, 0, 0, 0.04)"
        },
        ":active": {
          boxShadow: "inset 999px 999px 0px rgba(0, 0, 0, 0.08)"
        }
      };
    }
    if ($disabled) {
      return Object.freeze({});
    }
    switch ($kind) {
      case KIND2.primary:
        if ($isSelected) {
          return {
            color: $theme.colors.buttonPrimarySelectedText,
            backgroundColor: $theme.colors.buttonPrimarySelectedFill
          };
        }
        return {
          color: $theme.colors.buttonPrimaryText,
          backgroundColor: $theme.colors.buttonPrimaryFill,
          ":hover": {
            backgroundColor: $isLoading ? $theme.colors.buttonPrimaryActive : $theme.colors.buttonPrimaryHover
          },
          ":active": {
            backgroundColor: $theme.colors.buttonPrimaryActive
          }
        };
      case KIND2.secondary:
        if ($isSelected) {
          return {
            color: $theme.colors.buttonPrimaryText,
            backgroundColor: $theme.colors.buttonPrimaryFill
          };
        }
        return {
          color: $theme.colors.buttonSecondaryText,
          backgroundColor: $theme.colors.buttonSecondaryFill,
          ":hover": {
            backgroundColor: $isLoading ? $theme.colors.buttonSecondaryActive : $theme.colors.buttonSecondaryHover
          },
          ":active": {
            backgroundColor: $theme.colors.buttonSecondaryActive
          }
        };
      case KIND2.tertiary:
        if ($isSelected) {
          return {
            color: $theme.colors.buttonTertiarySelectedText,
            backgroundColor: $theme.colors.buttonTertiarySelectedFill
          };
        }
        return {
          color: $theme.colors.buttonTertiaryText,
          backgroundColor: $theme.colors.buttonTertiaryFill,
          ":hover": {
            backgroundColor: $isLoading ? $theme.colors.buttonTertiaryActive : $theme.colors.buttonTertiaryHover
          },
          ":active": {
            backgroundColor: $theme.colors.buttonTertiaryActive
          }
        };
      default:
        return Object.freeze({});
    }
  }
  function getShapeStyles(_ref14) {
    var $shape = _ref14.$shape, $size = _ref14.$size;
    if ($shape === SHAPE.circle || $shape === SHAPE.square) {
      var height, width;
      switch ($size) {
        case SIZE.mini:
          height = "28px";
          width = "28px";
          break;
        case SIZE.compact:
          height = "36px";
          width = "36px";
          break;
        case SIZE.large:
          height = "56px";
          width = "56px";
          break;
        case SIZE.default:
        default:
          height = "48px";
          width = "48px";
          break;
      }
      return {
        height,
        width,
        paddingTop: 0,
        paddingBottom: 0,
        paddingLeft: 0,
        paddingRight: 0
      };
    } else {
      return {};
    }
  }

  // node_modules/baseui/esm/button/utils.js
  function getSharedProps(_ref2) {
    var colors2 = _ref2.colors, disabled = _ref2.disabled, isLoading = _ref2.isLoading, isSelected = _ref2.isSelected, kind = _ref2.kind, shape = _ref2.shape, size = _ref2.size;
    return {
      $colors: colors2,
      $disabled: disabled,
      $isLoading: isLoading,
      $isSelected: isSelected,
      $kind: kind,
      $shape: shape,
      $size: size
    };
  }

  // node_modules/baseui/esm/button/button-internals.js
  var React15 = __toESM(require_react());
  var ReactIs = __toESM(require_react_is());
  var _excluded4 = ["Enhancer"];
  function _extends10() {
    _extends10 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends10.apply(this, arguments);
  }
  function _slicedToArray4(arr, i) {
    return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
  }
  function _nonIterableRest3() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray3(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray3(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray3(o, minLen);
  }
  function _arrayLikeToArray3(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit3(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles3(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _objectWithoutProperties2(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose3(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose3(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function RenderEnhancer(props) {
    var Enhancer = props.Enhancer, restProps = _objectWithoutProperties2(props, _excluded4);
    if (typeof Enhancer === "string") {
      return Enhancer;
    }
    if (ReactIs.isValidElementType(Enhancer)) {
      return /* @__PURE__ */ React15.createElement(Enhancer, restProps);
    }
    return Enhancer;
  }
  function ButtonInternals(props) {
    var children2 = props.children, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, startEnhancer = props.startEnhancer, endEnhancer = props.endEnhancer;
    var _getOverrides = getOverrides(overrides.StartEnhancer, StartEnhancer), _getOverrides2 = _slicedToArray4(_getOverrides, 2), StartEnhancer2 = _getOverrides2[0], startEnhancerProps = _getOverrides2[1];
    var _getOverrides3 = getOverrides(overrides.EndEnhancer, EndEnhancer), _getOverrides4 = _slicedToArray4(_getOverrides3, 2), EndEnhancer2 = _getOverrides4[0], endEnhancerProps = _getOverrides4[1];
    var sharedProps = getSharedProps(props);
    return /* @__PURE__ */ React15.createElement(React15.Fragment, null, startEnhancer !== null && startEnhancer !== void 0 && /* @__PURE__ */ React15.createElement(StartEnhancer2, _extends10({}, sharedProps, startEnhancerProps), /* @__PURE__ */ React15.createElement(RenderEnhancer, {
      Enhancer: startEnhancer
    })), children2, endEnhancer !== null && endEnhancer !== void 0 && /* @__PURE__ */ React15.createElement(EndEnhancer2, _extends10({}, sharedProps, endEnhancerProps), /* @__PURE__ */ React15.createElement(RenderEnhancer, {
      Enhancer: endEnhancer
    })));
  }

  // node_modules/baseui/esm/button/default-props.js
  var defaultProps = {
    disabled: false,
    isLoading: false,
    isSelected: false,
    kind: KIND2.primary,
    overrides: {},
    shape: SHAPE.default,
    size: SIZE.default
  };

  // node_modules/baseui/esm/button/button.js
  function _typeof6(obj) {
    "@babel/helpers - typeof";
    return _typeof6 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof6(obj);
  }
  var _excluded5 = ["overrides", "size", "kind", "shape", "isLoading", "isSelected", "startEnhancer", "endEnhancer", "children", "forwardedRef", "colors"];
  function _extends11() {
    _extends11 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends11.apply(this, arguments);
  }
  function ownKeys8(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread8(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys8(Object(source2), true).forEach(function(key) {
        _defineProperty11(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys8(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _slicedToArray5(arr, i) {
    return _arrayWithHoles4(arr) || _iterableToArrayLimit4(arr, i) || _unsupportedIterableToArray4(arr, i) || _nonIterableRest4();
  }
  function _nonIterableRest4() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray4(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray4(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray4(o, minLen);
  }
  function _arrayLikeToArray4(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit4(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles4(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _objectWithoutProperties3(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose4(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose4(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _classCallCheck4(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties4(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass4(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties4(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties4(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _inherits4(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass)
      _setPrototypeOf4(subClass, superClass);
  }
  function _setPrototypeOf4(o, p) {
    _setPrototypeOf4 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf13(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf4(o, p);
  }
  function _createSuper4(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct4();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf4(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf4(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn4(this, result);
    };
  }
  function _possibleConstructorReturn4(self2, call) {
    if (call && (_typeof6(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized4(self2);
  }
  function _assertThisInitialized4(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct4() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf4(o) {
    _getPrototypeOf4 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf12(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf4(o);
  }
  function _defineProperty11(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var Button = /* @__PURE__ */ function(_React$Component) {
    _inherits4(Button4, _React$Component);
    var _super = _createSuper4(Button4);
    function Button4() {
      var _this;
      _classCallCheck4(this, Button4);
      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(_args));
      _defineProperty11(_assertThisInitialized4(_this), "state", {
        isFocusVisible: false
      });
      _defineProperty11(_assertThisInitialized4(_this), "internalOnClick", function() {
        var _this$props = _this.props, isLoading = _this$props.isLoading, onClick = _this$props.onClick;
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        if (isLoading) {
          args[0].preventDefault();
          return;
        }
        onClick && onClick.apply(void 0, args);
      });
      _defineProperty11(_assertThisInitialized4(_this), "handleFocus", function(event) {
        if (isFocusVisible(event)) {
          _this.setState({
            isFocusVisible: true
          });
        }
      });
      _defineProperty11(_assertThisInitialized4(_this), "handleBlur", function(event) {
        if (_this.state.isFocusVisible !== false) {
          _this.setState({
            isFocusVisible: false
          });
        }
      });
      return _this;
    }
    _createClass4(Button4, [{
      key: "render",
      value: function render() {
        var _ref2;
        var _this$props2 = this.props, _this$props2$override = _this$props2.overrides, overrides = _this$props2$override === void 0 ? {} : _this$props2$override, size = _this$props2.size, kind = _this$props2.kind, shape = _this$props2.shape, isLoading = _this$props2.isLoading, isSelected = _this$props2.isSelected, startEnhancer = _this$props2.startEnhancer, endEnhancer = _this$props2.endEnhancer, children2 = _this$props2.children, forwardedRef = _this$props2.forwardedRef, colors2 = _this$props2.colors, restProps = _objectWithoutProperties3(_this$props2, _excluded5);
        var _getOverrides = getOverrides(
          overrides.BaseButton || overrides.Root,
          BaseButton
        ), _getOverrides2 = _slicedToArray5(_getOverrides, 2), BaseButton2 = _getOverrides2[0], baseButtonProps = _getOverrides2[1];
        var _getOverrides3 = getOverrides(overrides.LoadingSpinner, LoadingSpinner), _getOverrides4 = _slicedToArray5(_getOverrides3, 2), LoadingSpinner2 = _getOverrides4[0], loadingSpinnerProps = _getOverrides4[1];
        var _getOverrides5 = getOverrides(overrides.LoadingSpinnerContainer, LoadingSpinnerContainer), _getOverrides6 = _slicedToArray5(_getOverrides5, 2), LoadingSpinnerContainer2 = _getOverrides6[0], loadingSpinnerContainerProps = _getOverrides6[1];
        var sharedProps = _objectSpread8(_objectSpread8({}, getSharedProps(this.props)), {}, {
          $isFocusVisible: this.state.isFocusVisible
        });
        return /* @__PURE__ */ React16.createElement(BaseButton2, _extends11({
          ref: forwardedRef,
          "data-baseweb": "button"
        }, isLoading ? (_ref2 = {}, _defineProperty11(_ref2, "aria-label", "loading ".concat(typeof this.props.children === "string" ? this.props.children : "")), _defineProperty11(_ref2, "aria-busy", "true"), _ref2) : {}, sharedProps, restProps, baseButtonProps, {
          onClick: this.internalOnClick,
          onFocus: forkFocus(_objectSpread8(_objectSpread8({}, restProps), baseButtonProps), this.handleFocus),
          onBlur: forkBlur(_objectSpread8(_objectSpread8({}, restProps), baseButtonProps), this.handleBlur)
        }), isLoading ? /* @__PURE__ */ React16.createElement(React16.Fragment, null, /* @__PURE__ */ React16.createElement("div", {
          style: {
            opacity: 0,
            display: "flex",
            height: "0px"
          }
        }, /* @__PURE__ */ React16.createElement(ButtonInternals, this.props)), /* @__PURE__ */ React16.createElement(LoadingSpinnerContainer2, _extends11({}, sharedProps, loadingSpinnerContainerProps), /* @__PURE__ */ React16.createElement(LoadingSpinner2, _extends11({}, sharedProps, loadingSpinnerProps)))) : /* @__PURE__ */ React16.createElement(ButtonInternals, this.props));
      }
    }]);
    return Button4;
  }(React16.Component);
  _defineProperty11(Button, "defaultProps", defaultProps);
  var ForwardedButton = /* @__PURE__ */ React16.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React16.createElement(Button, _extends11({
      forwardedRef: ref
    }, props));
  });
  ForwardedButton.displayName = "Button";
  var button_default = ForwardedButton;

  // node_modules/baseui/esm/drawer/drawer.js
  var React26 = __toESM(require_react());

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose5(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends12() {
    _extends12 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends12.apply(this, arguments);
  }

  // node_modules/react-focus-lock/dist/es2015/Combination.js
  var React21 = __toESM(require_react());

  // node_modules/react-focus-lock/dist/es2015/Lock.js
  var React18 = __toESM(require_react());
  var import_prop_types2 = __toESM(require_prop_types());

  // node_modules/focus-lock/dist/es2015/constants.js
  var FOCUS_GROUP = "data-focus-lock";
  var FOCUS_DISABLED = "data-focus-lock-disabled";
  var FOCUS_ALLOW = "data-no-focus-lock";
  var FOCUS_AUTO = "data-autofocus-inside";
  var FOCUS_NO_AUTOFOCUS = "data-no-autofocus";

  // node_modules/react-focus-lock/node_modules/use-callback-ref/dist/es2015/assignRef.js
  function assignRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
    return ref;
  }

  // node_modules/react-focus-lock/node_modules/use-callback-ref/dist/es2015/useRef.js
  var import_react2 = __toESM(require_react());
  function useCallbackRef(initialValue, callback) {
    var ref = (0, import_react2.useState)(function() {
      return {
        value: initialValue,
        callback,
        facade: {
          get current() {
            return ref.value;
          },
          set current(value) {
            var last2 = ref.value;
            if (last2 !== value) {
              ref.value = value;
              ref.callback(value, last2);
            }
          }
        }
      };
    })[0];
    ref.callback = callback;
    return ref.facade;
  }

  // node_modules/react-focus-lock/node_modules/use-callback-ref/dist/es2015/useMergeRef.js
  function useMergeRefs(refs, defaultValue) {
    return useCallbackRef(defaultValue || null, function(newValue) {
      return refs.forEach(function(ref) {
        return assignRef(ref, newValue);
      });
    });
  }

  // node_modules/react-focus-lock/dist/es2015/Lock.js
  var import_react3 = __toESM(require_react());

  // node_modules/react-focus-lock/dist/es2015/FocusGuard.js
  var React17 = __toESM(require_react());
  var import_prop_types = __toESM(require_prop_types());
  var hiddenGuard = {
    width: "1px",
    height: "0px",
    padding: 0,
    overflow: "hidden",
    position: "fixed",
    top: "1px",
    left: "1px"
  };
  var InFocusGuard = function InFocusGuard2(_ref2) {
    var children2 = _ref2.children;
    return /* @__PURE__ */ React17.createElement(React17.Fragment, null, /* @__PURE__ */ React17.createElement("div", {
      key: "guard-first",
      "data-focus-guard": true,
      "data-focus-auto-guard": true,
      style: hiddenGuard
    }), children2, children2 && /* @__PURE__ */ React17.createElement("div", {
      key: "guard-last",
      "data-focus-guard": true,
      "data-focus-auto-guard": true,
      style: hiddenGuard
    }));
  };
  InFocusGuard.propTypes = true ? {
    children: import_prop_types.default.node
  } : {};
  InFocusGuard.defaultProps = {
    children: null
  };

  // node_modules/react-focus-lock/node_modules/use-sidecar/dist/es2015/medium.js
  function ItoI(a) {
    return a;
  }
  function innerCreateMedium(defaults, middleware) {
    if (middleware === void 0) {
      middleware = ItoI;
    }
    var buffer = [];
    var assigned = false;
    var medium = {
      read: function() {
        if (assigned) {
          throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
        }
        if (buffer.length) {
          return buffer[buffer.length - 1];
        }
        return defaults;
      },
      useMedium: function(data) {
        var item = middleware(data, assigned);
        buffer.push(item);
        return function() {
          buffer = buffer.filter(function(x) {
            return x !== item;
          });
        };
      },
      assignSyncMedium: function(cb) {
        assigned = true;
        while (buffer.length) {
          var cbs = buffer;
          buffer = [];
          cbs.forEach(cb);
        }
        buffer = {
          push: function(x) {
            return cb(x);
          },
          filter: function() {
            return buffer;
          }
        };
      },
      assignMedium: function(cb) {
        assigned = true;
        var pendingQueue = [];
        if (buffer.length) {
          var cbs = buffer;
          buffer = [];
          cbs.forEach(cb);
          pendingQueue = buffer;
        }
        var executeQueue = function() {
          var cbs2 = pendingQueue;
          pendingQueue = [];
          cbs2.forEach(cb);
        };
        var cycle = function() {
          return Promise.resolve().then(executeQueue);
        };
        cycle();
        buffer = {
          push: function(x) {
            pendingQueue.push(x);
            cycle();
          },
          filter: function(filter2) {
            pendingQueue = pendingQueue.filter(filter2);
            return buffer;
          }
        };
      }
    };
    return medium;
  }
  function createMedium(defaults, middleware) {
    if (middleware === void 0) {
      middleware = ItoI;
    }
    return innerCreateMedium(defaults, middleware);
  }
  function createSidecarMedium(options) {
    if (options === void 0) {
      options = {};
    }
    var medium = innerCreateMedium(null);
    medium.options = __assign({ async: true, ssr: false }, options);
    return medium;
  }

  // node_modules/react-focus-lock/dist/es2015/medium.js
  var mediumFocus = createMedium({}, function(_ref2) {
    var target = _ref2.target, currentTarget = _ref2.currentTarget;
    return {
      target,
      currentTarget
    };
  });
  var mediumBlur = createMedium();
  var mediumEffect = createMedium();
  var mediumSidecar = createSidecarMedium({
    async: true
  });

  // node_modules/react-focus-lock/dist/es2015/Lock.js
  var emptyArray = [];
  var FocusLock = /* @__PURE__ */ React18.forwardRef(function FocusLockUI(props, parentRef) {
    var _extends210;
    var _React$useState = React18.useState(), realObserved = _React$useState[0], setObserved = _React$useState[1];
    var observed = React18.useRef();
    var isActive = React18.useRef(false);
    var originalFocusedElement = React18.useRef(null);
    var children2 = props.children, disabled = props.disabled, noFocusGuards = props.noFocusGuards, persistentFocus = props.persistentFocus, crossFrame = props.crossFrame, autoFocus = props.autoFocus, allowTextSelection = props.allowTextSelection, group = props.group, className = props.className, whiteList = props.whiteList, hasPositiveIndices = props.hasPositiveIndices, _props$shards = props.shards, shards = _props$shards === void 0 ? emptyArray : _props$shards, _props$as = props.as, Container3 = _props$as === void 0 ? "div" : _props$as, _props$lockProps = props.lockProps, containerProps = _props$lockProps === void 0 ? {} : _props$lockProps, SideCar = props.sideCar, shouldReturnFocus = props.returnFocus, focusOptions = props.focusOptions, onActivationCallback = props.onActivation, onDeactivationCallback = props.onDeactivation;
    var _React$useState2 = React18.useState({}), id = _React$useState2[0];
    var onActivation = React18.useCallback(function() {
      originalFocusedElement.current = originalFocusedElement.current || document && document.activeElement;
      if (observed.current && onActivationCallback) {
        onActivationCallback(observed.current);
      }
      isActive.current = true;
    }, [onActivationCallback]);
    var onDeactivation = React18.useCallback(function() {
      isActive.current = false;
      if (onDeactivationCallback) {
        onDeactivationCallback(observed.current);
      }
    }, [onDeactivationCallback]);
    (0, import_react3.useEffect)(function() {
      if (!disabled) {
        originalFocusedElement.current = null;
      }
    }, []);
    var returnFocus = React18.useCallback(function(allowDefer) {
      var returnFocusTo = originalFocusedElement.current;
      if (returnFocusTo && returnFocusTo.focus) {
        var howToReturnFocus = typeof shouldReturnFocus === "function" ? shouldReturnFocus(returnFocusTo) : shouldReturnFocus;
        if (howToReturnFocus) {
          var returnFocusOptions = typeof howToReturnFocus === "object" ? howToReturnFocus : void 0;
          originalFocusedElement.current = null;
          if (allowDefer) {
            Promise.resolve().then(function() {
              return returnFocusTo.focus(returnFocusOptions);
            });
          } else {
            returnFocusTo.focus(returnFocusOptions);
          }
        }
      }
    }, [shouldReturnFocus]);
    var onFocus5 = React18.useCallback(function(event) {
      if (isActive.current) {
        mediumFocus.useMedium(event);
      }
    }, []);
    var onBlur5 = mediumBlur.useMedium;
    var setObserveNode = React18.useCallback(function(newObserved) {
      if (observed.current !== newObserved) {
        observed.current = newObserved;
        setObserved(newObserved);
      }
    }, []);
    if (true) {
      if (typeof allowTextSelection !== "undefined") {
        console.warn("React-Focus-Lock: allowTextSelection is deprecated and enabled by default");
      }
      React18.useEffect(function() {
        if (!observed.current && typeof Container3 !== "string") {
          console.error("FocusLock: could not obtain ref to internal node");
        }
      }, []);
    }
    var lockProps = _extends12((_extends210 = {}, _extends210[FOCUS_DISABLED] = disabled && "disabled", _extends210[FOCUS_GROUP] = group, _extends210), containerProps);
    var hasLeadingGuards = noFocusGuards !== true;
    var hasTailingGuards = hasLeadingGuards && noFocusGuards !== "tail";
    var mergedRef = useMergeRefs([parentRef, setObserveNode]);
    return /* @__PURE__ */ React18.createElement(React18.Fragment, null, hasLeadingGuards && [
      /* @__PURE__ */ React18.createElement("div", {
        key: "guard-first",
        "data-focus-guard": true,
        tabIndex: disabled ? -1 : 0,
        style: hiddenGuard
      }),
      hasPositiveIndices ? /* @__PURE__ */ React18.createElement("div", {
        key: "guard-nearest",
        "data-focus-guard": true,
        tabIndex: disabled ? -1 : 1,
        style: hiddenGuard
      }) : null
    ], !disabled && /* @__PURE__ */ React18.createElement(SideCar, {
      id,
      sideCar: mediumSidecar,
      observed: realObserved,
      disabled,
      persistentFocus,
      crossFrame,
      autoFocus,
      whiteList,
      shards,
      onActivation,
      onDeactivation,
      returnFocus,
      focusOptions
    }), /* @__PURE__ */ React18.createElement(Container3, _extends12({
      ref: mergedRef
    }, lockProps, {
      className,
      onBlur: onBlur5,
      onFocus: onFocus5
    }), children2), hasTailingGuards && /* @__PURE__ */ React18.createElement("div", {
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 0,
      style: hiddenGuard
    }));
  });
  FocusLock.propTypes = true ? {
    children: import_prop_types2.node,
    disabled: import_prop_types2.bool,
    returnFocus: (0, import_prop_types2.oneOfType)([import_prop_types2.bool, import_prop_types2.object, import_prop_types2.func]),
    focusOptions: import_prop_types2.object,
    noFocusGuards: import_prop_types2.bool,
    hasPositiveIndices: import_prop_types2.bool,
    allowTextSelection: import_prop_types2.bool,
    autoFocus: import_prop_types2.bool,
    persistentFocus: import_prop_types2.bool,
    crossFrame: import_prop_types2.bool,
    group: import_prop_types2.string,
    className: import_prop_types2.string,
    whiteList: import_prop_types2.func,
    shards: (0, import_prop_types2.arrayOf)(import_prop_types2.any),
    as: (0, import_prop_types2.oneOfType)([import_prop_types2.string, import_prop_types2.func, import_prop_types2.object]),
    lockProps: import_prop_types2.object,
    onActivation: import_prop_types2.func,
    onDeactivation: import_prop_types2.func,
    sideCar: import_prop_types2.any.isRequired
  } : {};
  FocusLock.defaultProps = {
    children: void 0,
    disabled: false,
    returnFocus: false,
    focusOptions: void 0,
    noFocusGuards: false,
    autoFocus: true,
    persistentFocus: false,
    crossFrame: true,
    hasPositiveIndices: void 0,
    allowTextSelection: void 0,
    group: void 0,
    className: void 0,
    whiteList: void 0,
    shards: void 0,
    as: "div",
    lockProps: {},
    onActivation: void 0,
    onDeactivation: void 0
  };
  var Lock_default = FocusLock;

  // node_modules/react-focus-lock/dist/es2015/Trap.js
  var React20 = __toESM(require_react());
  var import_prop_types3 = __toESM(require_prop_types());

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf5(o, p) {
    _setPrototypeOf5 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf13(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf5(o, p);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf5(subClass, superClass);
  }

  // node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof7(obj) {
    "@babel/helpers - typeof";
    return _typeof7 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof7(obj);
  }

  // node_modules/@babel/runtime/helpers/esm/toPrimitive.js
  function _toPrimitive(input, hint) {
    if (_typeof7(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof7(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  // node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof7(key) === "symbol" ? key : String(key);
  }

  // node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty12(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  // node_modules/react-clientside-effect/lib/index.es.js
  var import_react4 = __toESM(require_react());
  function withSideEffect(reducePropsToState2, handleStateChangeOnClient2) {
    if (true) {
      if (typeof reducePropsToState2 !== "function") {
        throw new Error("Expected reducePropsToState to be a function.");
      }
      if (typeof handleStateChangeOnClient2 !== "function") {
        throw new Error("Expected handleStateChangeOnClient to be a function.");
      }
    }
    function getDisplayName(WrappedComponent) {
      return WrappedComponent.displayName || WrappedComponent.name || "Component";
    }
    return function wrap(WrappedComponent) {
      if (true) {
        if (typeof WrappedComponent !== "function") {
          throw new Error("Expected WrappedComponent to be a React component.");
        }
      }
      var mountedInstances = [];
      var state;
      function emitChange() {
        state = reducePropsToState2(mountedInstances.map(function(instance) {
          return instance.props;
        }));
        handleStateChangeOnClient2(state);
      }
      var SideEffect = /* @__PURE__ */ function(_PureComponent) {
        _inheritsLoose(SideEffect2, _PureComponent);
        function SideEffect2() {
          return _PureComponent.apply(this, arguments) || this;
        }
        SideEffect2.peek = function peek() {
          return state;
        };
        var _proto = SideEffect2.prototype;
        _proto.componentDidMount = function componentDidMount() {
          mountedInstances.push(this);
          emitChange();
        };
        _proto.componentDidUpdate = function componentDidUpdate() {
          emitChange();
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
          var index2 = mountedInstances.indexOf(this);
          mountedInstances.splice(index2, 1);
          emitChange();
        };
        _proto.render = function render() {
          return /* @__PURE__ */ import_react4.default.createElement(WrappedComponent, this.props);
        };
        return SideEffect2;
      }(import_react4.PureComponent);
      _defineProperty12(SideEffect, "displayName", "SideEffect(" + getDisplayName(WrappedComponent) + ")");
      return SideEffect;
    };
  }
  var index_es_default = withSideEffect;

  // node_modules/focus-lock/dist/es2015/utils/array.js
  var toArray = function(a) {
    var ret = Array(a.length);
    for (var i = 0; i < a.length; ++i) {
      ret[i] = a[i];
    }
    return ret;
  };
  var asArray = function(a) {
    return Array.isArray(a) ? a : [a];
  };

  // node_modules/focus-lock/dist/es2015/utils/is.js
  var isElementHidden = function(node5) {
    if (node5.nodeType !== Node.ELEMENT_NODE) {
      return false;
    }
    var computedStyle = window.getComputedStyle(node5, null);
    if (!computedStyle || !computedStyle.getPropertyValue) {
      return false;
    }
    return computedStyle.getPropertyValue("display") === "none" || computedStyle.getPropertyValue("visibility") === "hidden";
  };
  var getParentNode2 = function(node5) {
    return node5.parentNode && node5.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? node5.parentNode.host : node5.parentNode;
  };
  var isTopNode = function(node5) {
    return node5 === document || node5 && node5.nodeType === Node.DOCUMENT_NODE;
  };
  var isVisibleUncached = function(node5, checkParent) {
    return !node5 || isTopNode(node5) || !isElementHidden(node5) && checkParent(getParentNode2(node5));
  };
  var isVisibleCached = function(visibilityCache, node5) {
    var cached = visibilityCache.get(node5);
    if (cached !== void 0) {
      return cached;
    }
    var result = isVisibleUncached(node5, isVisibleCached.bind(void 0, visibilityCache));
    visibilityCache.set(node5, result);
    return result;
  };
  var isAutoFocusAllowedUncached = function(node5, checkParent) {
    return node5 && !isTopNode(node5) ? isAutoFocusAllowed(node5) ? checkParent(getParentNode2(node5)) : false : true;
  };
  var isAutoFocusAllowedCached = function(cache2, node5) {
    var cached = cache2.get(node5);
    if (cached !== void 0) {
      return cached;
    }
    var result = isAutoFocusAllowedUncached(node5, isAutoFocusAllowedCached.bind(void 0, cache2));
    cache2.set(node5, result);
    return result;
  };
  var getDataset = function(node5) {
    return node5.dataset;
  };
  var isHTMLButtonElement = function(node5) {
    return node5.tagName === "BUTTON";
  };
  var isHTMLInputElement = function(node5) {
    return node5.tagName === "INPUT";
  };
  var isRadioElement = function(node5) {
    return isHTMLInputElement(node5) && node5.type === "radio";
  };
  var notHiddenInput = function(node5) {
    return !((isHTMLInputElement(node5) || isHTMLButtonElement(node5)) && (node5.type === "hidden" || node5.disabled));
  };
  var isAutoFocusAllowed = function(node5) {
    var attribute = node5.getAttribute(FOCUS_NO_AUTOFOCUS);
    return ![true, "true", ""].includes(attribute);
  };
  var isGuard = function(node5) {
    var _a;
    return Boolean(node5 && ((_a = getDataset(node5)) === null || _a === void 0 ? void 0 : _a.focusGuard));
  };
  var isNotAGuard = function(node5) {
    return !isGuard(node5);
  };
  var isDefined = function(x) {
    return Boolean(x);
  };

  // node_modules/focus-lock/dist/es2015/utils/tabOrder.js
  var tabSort = function(a, b) {
    var tabDiff = a.tabIndex - b.tabIndex;
    var indexDiff = a.index - b.index;
    if (tabDiff) {
      if (!a.tabIndex) {
        return 1;
      }
      if (!b.tabIndex) {
        return -1;
      }
    }
    return tabDiff || indexDiff;
  };
  var orderByTabIndex = function(nodes2, filterNegative, keepGuards) {
    return toArray(nodes2).map(function(node5, index2) {
      return {
        node: node5,
        index: index2,
        tabIndex: keepGuards && node5.tabIndex === -1 ? (node5.dataset || {}).focusGuard ? 0 : -1 : node5.tabIndex
      };
    }).filter(function(data) {
      return !filterNegative || data.tabIndex >= 0;
    }).sort(tabSort);
  };

  // node_modules/focus-lock/dist/es2015/utils/tabbables.js
  var tabbables = [
    "button:enabled",
    "select:enabled",
    "textarea:enabled",
    "input:enabled",
    "a[href]",
    "area[href]",
    "summary",
    "iframe",
    "object",
    "embed",
    "audio[controls]",
    "video[controls]",
    "[tabindex]",
    "[contenteditable]",
    "[autofocus]"
  ];

  // node_modules/focus-lock/dist/es2015/utils/tabUtils.js
  var queryTabbables = tabbables.join(",");
  var queryGuardTabbables = "".concat(queryTabbables, ", [data-focus-guard]");
  var getFocusablesWithShadowDom = function(parent2, withGuards) {
    var _a;
    return toArray(((_a = parent2.shadowRoot) === null || _a === void 0 ? void 0 : _a.children) || parent2.children).reduce(function(acc, child) {
      return acc.concat(child.matches(withGuards ? queryGuardTabbables : queryTabbables) ? [child] : [], getFocusablesWithShadowDom(child));
    }, []);
  };
  var getFocusables = function(parents, withGuards) {
    return parents.reduce(function(acc, parent2) {
      return acc.concat(
        getFocusablesWithShadowDom(parent2, withGuards),
        parent2.parentNode ? toArray(parent2.parentNode.querySelectorAll(queryTabbables)).filter(function(node5) {
          return node5 === parent2;
        }) : []
      );
    }, []);
  };
  var getParentAutofocusables = function(parent2) {
    var parentFocus = parent2.querySelectorAll("[".concat(FOCUS_AUTO, "]"));
    return toArray(parentFocus).map(function(node5) {
      return getFocusables([node5]);
    }).reduce(function(acc, nodes2) {
      return acc.concat(nodes2);
    }, []);
  };

  // node_modules/focus-lock/dist/es2015/utils/DOMutils.js
  var filterFocusable = function(nodes2, visibilityCache) {
    return toArray(nodes2).filter(function(node5) {
      return isVisibleCached(visibilityCache, node5);
    }).filter(function(node5) {
      return notHiddenInput(node5);
    });
  };
  var filterAutoFocusable = function(nodes2, cache2) {
    if (cache2 === void 0) {
      cache2 = /* @__PURE__ */ new Map();
    }
    return toArray(nodes2).filter(function(node5) {
      return isAutoFocusAllowedCached(cache2, node5);
    });
  };
  var getTabbableNodes = function(topNodes, visibilityCache, withGuards) {
    return orderByTabIndex(filterFocusable(getFocusables(topNodes, withGuards), visibilityCache), true, withGuards);
  };
  var getAllTabbableNodes = function(topNodes, visibilityCache) {
    return orderByTabIndex(filterFocusable(getFocusables(topNodes), visibilityCache), false);
  };
  var parentAutofocusables = function(topNode, visibilityCache) {
    return filterFocusable(getParentAutofocusables(topNode), visibilityCache);
  };
  var contains = function(scope, element) {
    if (scope.shadowRoot) {
      return contains(scope.shadowRoot, element);
    } else {
      if (Object.getPrototypeOf(scope).contains !== void 0 && Object.getPrototypeOf(scope).contains.call(scope, element)) {
        return true;
      }
      return toArray(scope.children).some(function(child) {
        return contains(child, element);
      });
    }
  };

  // node_modules/focus-lock/dist/es2015/utils/all-affected.js
  var filterNested = function(nodes2) {
    var contained = /* @__PURE__ */ new Set();
    var l = nodes2.length;
    for (var i = 0; i < l; i += 1) {
      for (var j = i + 1; j < l; j += 1) {
        var position2 = nodes2[i].compareDocumentPosition(nodes2[j]);
        if ((position2 & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0) {
          contained.add(j);
        }
        if ((position2 & Node.DOCUMENT_POSITION_CONTAINS) > 0) {
          contained.add(i);
        }
      }
    }
    return nodes2.filter(function(_, index2) {
      return !contained.has(index2);
    });
  };
  var getTopParent = function(node5) {
    return node5.parentNode ? getTopParent(node5.parentNode) : node5;
  };
  var getAllAffectedNodes = function(node5) {
    var nodes2 = asArray(node5);
    return nodes2.filter(Boolean).reduce(function(acc, currentNode) {
      var group = currentNode.getAttribute(FOCUS_GROUP);
      acc.push.apply(acc, group ? filterNested(toArray(getTopParent(currentNode).querySelectorAll("[".concat(FOCUS_GROUP, '="').concat(group, '"]:not([').concat(FOCUS_DISABLED, '="disabled"])')))) : [currentNode]);
      return acc;
    }, []);
  };

  // node_modules/focus-lock/dist/es2015/utils/getActiveElement.js
  var getNestedShadowActiveElement = function(shadowRoot) {
    return shadowRoot.activeElement ? shadowRoot.activeElement.shadowRoot ? getNestedShadowActiveElement(shadowRoot.activeElement.shadowRoot) : shadowRoot.activeElement : void 0;
  };
  var getActiveElement = function() {
    return document.activeElement ? document.activeElement.shadowRoot ? getNestedShadowActiveElement(document.activeElement.shadowRoot) : document.activeElement : void 0;
  };

  // node_modules/focus-lock/dist/es2015/focusInside.js
  var focusInFrame = function(frame) {
    return frame === document.activeElement;
  };
  var focusInsideIframe = function(topNode) {
    return Boolean(toArray(topNode.querySelectorAll("iframe")).some(function(node5) {
      return focusInFrame(node5);
    }));
  };
  var focusInside = function(topNode) {
    var activeElement = document && getActiveElement();
    if (!activeElement || activeElement.dataset && activeElement.dataset.focusGuard) {
      return false;
    }
    return getAllAffectedNodes(topNode).some(function(node5) {
      return contains(node5, activeElement) || focusInsideIframe(node5);
    });
  };

  // node_modules/focus-lock/dist/es2015/focusIsHidden.js
  var focusIsHidden = function() {
    var activeElement = document && getActiveElement();
    if (!activeElement) {
      return false;
    }
    return toArray(document.querySelectorAll("[".concat(FOCUS_ALLOW, "]"))).some(function(node5) {
      return contains(node5, activeElement);
    });
  };

  // node_modules/focus-lock/dist/es2015/utils/correctFocus.js
  var findSelectedRadio = function(node5, nodes2) {
    return nodes2.filter(isRadioElement).filter(function(el) {
      return el.name === node5.name;
    }).filter(function(el) {
      return el.checked;
    })[0] || node5;
  };
  var correctNode = function(node5, nodes2) {
    if (isRadioElement(node5) && node5.name) {
      return findSelectedRadio(node5, nodes2);
    }
    return node5;
  };
  var correctNodes = function(nodes2) {
    var resultSet = /* @__PURE__ */ new Set();
    nodes2.forEach(function(node5) {
      return resultSet.add(correctNode(node5, nodes2));
    });
    return nodes2.filter(function(node5) {
      return resultSet.has(node5);
    });
  };

  // node_modules/focus-lock/dist/es2015/utils/firstFocus.js
  var pickFirstFocus = function(nodes2) {
    if (nodes2[0] && nodes2.length > 1) {
      return correctNode(nodes2[0], nodes2);
    }
    return nodes2[0];
  };
  var pickFocusable = function(nodes2, index2) {
    if (nodes2.length > 1) {
      return nodes2.indexOf(correctNode(nodes2[index2], nodes2));
    }
    return index2;
  };

  // node_modules/focus-lock/dist/es2015/solver.js
  var NEW_FOCUS = "NEW_FOCUS";
  var newFocus = function(innerNodes, outerNodes, activeElement, lastNode) {
    var cnt = innerNodes.length;
    var firstFocus = innerNodes[0];
    var lastFocus = innerNodes[cnt - 1];
    var isOnGuard = isGuard(activeElement);
    if (activeElement && innerNodes.indexOf(activeElement) >= 0) {
      return void 0;
    }
    var activeIndex = activeElement !== void 0 ? outerNodes.indexOf(activeElement) : -1;
    var lastIndex = lastNode ? outerNodes.indexOf(lastNode) : activeIndex;
    var lastNodeInside = lastNode ? innerNodes.indexOf(lastNode) : -1;
    var indexDiff = activeIndex - lastIndex;
    var firstNodeIndex = outerNodes.indexOf(firstFocus);
    var lastNodeIndex = outerNodes.indexOf(lastFocus);
    var correctedNodes = correctNodes(outerNodes);
    var correctedIndex = activeElement !== void 0 ? correctedNodes.indexOf(activeElement) : -1;
    var correctedIndexDiff = correctedIndex - (lastNode ? correctedNodes.indexOf(lastNode) : activeIndex);
    var returnFirstNode = pickFocusable(innerNodes, 0);
    var returnLastNode = pickFocusable(innerNodes, cnt - 1);
    if (activeIndex === -1 || lastNodeInside === -1) {
      return NEW_FOCUS;
    }
    if (!indexDiff && lastNodeInside >= 0) {
      return lastNodeInside;
    }
    if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
      return returnLastNode;
    }
    if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
      return returnFirstNode;
    }
    if (indexDiff && Math.abs(correctedIndexDiff) > 1) {
      return lastNodeInside;
    }
    if (activeIndex <= firstNodeIndex) {
      return returnLastNode;
    }
    if (activeIndex > lastNodeIndex) {
      return returnFirstNode;
    }
    if (indexDiff) {
      if (Math.abs(indexDiff) > 1) {
        return lastNodeInside;
      }
      return (cnt + lastNodeInside + indexDiff) % cnt;
    }
    return void 0;
  };

  // node_modules/focus-lock/dist/es2015/utils/auto-focus.js
  var findAutoFocused = function(autoFocusables) {
    return function(node5) {
      var _a;
      var autofocus = (_a = getDataset(node5)) === null || _a === void 0 ? void 0 : _a.autofocus;
      return node5.autofocus || autofocus !== void 0 && autofocus !== "false" || autoFocusables.indexOf(node5) >= 0;
    };
  };
  var pickAutofocus = function(nodesIndexes, orderedNodes, groups) {
    var nodes2 = nodesIndexes.map(function(_a) {
      var node5 = _a.node;
      return node5;
    });
    var autoFocusable = filterAutoFocusable(nodes2.filter(findAutoFocused(groups)));
    if (autoFocusable && autoFocusable.length) {
      return pickFirstFocus(autoFocusable);
    }
    return pickFirstFocus(filterAutoFocusable(orderedNodes));
  };

  // node_modules/focus-lock/dist/es2015/utils/parenting.js
  var getParents = function(node5, parents) {
    if (parents === void 0) {
      parents = [];
    }
    parents.push(node5);
    if (node5.parentNode) {
      getParents(node5.parentNode.host || node5.parentNode, parents);
    }
    return parents;
  };
  var getCommonParent = function(nodeA, nodeB) {
    var parentsA = getParents(nodeA);
    var parentsB = getParents(nodeB);
    for (var i = 0; i < parentsA.length; i += 1) {
      var currentParent = parentsA[i];
      if (parentsB.indexOf(currentParent) >= 0) {
        return currentParent;
      }
    }
    return false;
  };
  var getTopCommonParent = function(baseActiveElement, leftEntry, rightEntries) {
    var activeElements = asArray(baseActiveElement);
    var leftEntries = asArray(leftEntry);
    var activeElement = activeElements[0];
    var topCommon = false;
    leftEntries.filter(Boolean).forEach(function(entry) {
      topCommon = getCommonParent(topCommon || entry, entry) || topCommon;
      rightEntries.filter(Boolean).forEach(function(subEntry) {
        var common = getCommonParent(activeElement, subEntry);
        if (common) {
          if (!topCommon || contains(common, topCommon)) {
            topCommon = common;
          } else {
            topCommon = getCommonParent(common, topCommon);
          }
        }
      });
    });
    return topCommon;
  };
  var allParentAutofocusables = function(entries, visibilityCache) {
    return entries.reduce(function(acc, node5) {
      return acc.concat(parentAutofocusables(node5, visibilityCache));
    }, []);
  };

  // node_modules/focus-lock/dist/es2015/focusMerge.js
  var reorderNodes = function(srcNodes, dstNodes) {
    var remap = /* @__PURE__ */ new Map();
    dstNodes.forEach(function(entity) {
      return remap.set(entity.node, entity);
    });
    return srcNodes.map(function(node5) {
      return remap.get(node5);
    }).filter(isDefined);
  };
  var getFocusMerge = function(topNode, lastNode) {
    var activeElement = document && getActiveElement();
    var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
    var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);
    var visibilityCache = /* @__PURE__ */ new Map();
    var anyFocusable = getAllTabbableNodes(entries, visibilityCache);
    var innerElements = getTabbableNodes(entries, visibilityCache).filter(function(_a) {
      var node5 = _a.node;
      return isNotAGuard(node5);
    });
    if (!innerElements[0]) {
      innerElements = anyFocusable;
      if (!innerElements[0]) {
        return void 0;
      }
    }
    var outerNodes = getAllTabbableNodes([commonParent], visibilityCache).map(function(_a) {
      var node5 = _a.node;
      return node5;
    });
    var orderedInnerElements = reorderNodes(outerNodes, innerElements);
    var innerNodes = orderedInnerElements.map(function(_a) {
      var node5 = _a.node;
      return node5;
    });
    var newId = newFocus(innerNodes, outerNodes, activeElement, lastNode);
    if (newId === NEW_FOCUS) {
      var focusNode = pickAutofocus(anyFocusable, innerNodes, allParentAutofocusables(entries, visibilityCache));
      if (focusNode) {
        return { node: focusNode };
      } else {
        console.warn("focus-lock: cannot find any node to move focus into");
        return void 0;
      }
    }
    if (newId === void 0) {
      return newId;
    }
    return orderedInnerElements[newId];
  };

  // node_modules/focus-lock/dist/es2015/focusables.js
  var getFocusabledIn = function(topNode) {
    var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
    var commonParent = getTopCommonParent(topNode, topNode, entries);
    var visibilityCache = /* @__PURE__ */ new Map();
    var outerNodes = getTabbableNodes([commonParent], visibilityCache, true);
    var innerElements = getTabbableNodes(entries, visibilityCache).filter(function(_a) {
      var node5 = _a.node;
      return isNotAGuard(node5);
    }).map(function(_a) {
      var node5 = _a.node;
      return node5;
    });
    return outerNodes.map(function(_a) {
      var node5 = _a.node, index2 = _a.index;
      return {
        node: node5,
        index: index2,
        lockItem: innerElements.indexOf(node5) >= 0,
        guard: isGuard(node5)
      };
    });
  };

  // node_modules/focus-lock/dist/es2015/setFocus.js
  var focusOn = function(target, focusOptions) {
    if ("focus" in target) {
      target.focus(focusOptions);
    }
    if ("contentWindow" in target && target.contentWindow) {
      target.contentWindow.focus();
    }
  };
  var guardCount = 0;
  var lockDisabled = false;
  var setFocus = function(topNode, lastNode, options) {
    if (options === void 0) {
      options = {};
    }
    var focusable = getFocusMerge(topNode, lastNode);
    if (lockDisabled) {
      return;
    }
    if (focusable) {
      if (guardCount > 2) {
        console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting");
        lockDisabled = true;
        setTimeout(function() {
          lockDisabled = false;
        }, 1);
        return;
      }
      guardCount++;
      focusOn(focusable.node, options.focusOptions);
      guardCount--;
    }
  };

  // node_modules/focus-lock/dist/es2015/index.js
  var es2015_default = setFocus;

  // node_modules/react-focus-lock/dist/es2015/util.js
  function deferAction(action) {
    var _window = window, setImmediate2 = _window.setImmediate;
    if (typeof setImmediate2 !== "undefined") {
      setImmediate2(action);
    } else {
      setTimeout(action, 1);
    }
  }
  var inlineProp = function inlineProp2(name, value) {
    var obj = {};
    obj[name] = value;
    return obj;
  };

  // node_modules/react-focus-lock/dist/es2015/Trap.js
  var focusOnBody = function focusOnBody2() {
    return document && document.activeElement === document.body;
  };
  var isFreeFocus = function isFreeFocus2() {
    return focusOnBody() || focusIsHidden();
  };
  var lastActiveTrap = null;
  var lastActiveFocus = null;
  var lastPortaledElement = null;
  var focusWasOutsideWindow = false;
  var defaultWhitelist = function defaultWhitelist2() {
    return true;
  };
  var focusWhitelisted = function focusWhitelisted2(activeElement) {
    return (lastActiveTrap.whiteList || defaultWhitelist)(activeElement);
  };
  var recordPortal = function recordPortal2(observerNode, portaledElement) {
    lastPortaledElement = {
      observerNode,
      portaledElement
    };
  };
  var focusIsPortaledPair = function focusIsPortaledPair2(element) {
    return lastPortaledElement && lastPortaledElement.portaledElement === element;
  };
  function autoGuard(startIndex, end, step, allNodes) {
    var lastGuard = null;
    var i = startIndex;
    do {
      var item = allNodes[i];
      if (item.guard) {
        if (item.node.dataset.focusAutoGuard) {
          lastGuard = item;
        }
      } else if (item.lockItem) {
        if (i !== startIndex) {
          return;
        }
        lastGuard = null;
      } else {
        break;
      }
    } while ((i += step) !== end);
    if (lastGuard) {
      lastGuard.node.tabIndex = 0;
    }
  }
  var extractRef = function extractRef2(ref) {
    return ref && "current" in ref ? ref.current : ref;
  };
  var focusWasOutside = function focusWasOutside2(crossFrameOption) {
    if (crossFrameOption) {
      return Boolean(focusWasOutsideWindow);
    }
    return focusWasOutsideWindow === "meanwhile";
  };
  var checkInHost = function checkInHost2(check, el, boundary) {
    return el && (el.host === check && (!el.activeElement || boundary.contains(el.activeElement)) || el.parentNode && checkInHost2(check, el.parentNode, boundary));
  };
  var withinHost = function withinHost2(activeElement, workingArea) {
    return workingArea.some(function(area) {
      return checkInHost(activeElement, area, area);
    });
  };
  var activateTrap = function activateTrap2() {
    var result = false;
    if (lastActiveTrap) {
      var _lastActiveTrap = lastActiveTrap, observed = _lastActiveTrap.observed, persistentFocus = _lastActiveTrap.persistentFocus, autoFocus = _lastActiveTrap.autoFocus, shards = _lastActiveTrap.shards, crossFrame = _lastActiveTrap.crossFrame, focusOptions = _lastActiveTrap.focusOptions;
      var workingNode = observed || lastPortaledElement && lastPortaledElement.portaledElement;
      var activeElement = document && document.activeElement;
      if (workingNode) {
        var workingArea = [workingNode].concat(shards.map(extractRef).filter(Boolean));
        if (!activeElement || focusWhitelisted(activeElement)) {
          if (persistentFocus || focusWasOutside(crossFrame) || !isFreeFocus() || !lastActiveFocus && autoFocus) {
            if (workingNode && !(focusInside(workingArea) || activeElement && withinHost(activeElement, workingArea) || focusIsPortaledPair(activeElement, workingNode))) {
              if (document && !lastActiveFocus && activeElement && !autoFocus) {
                if (activeElement.blur) {
                  activeElement.blur();
                }
                document.body.focus();
              } else {
                result = es2015_default(workingArea, lastActiveFocus, {
                  focusOptions
                });
                lastPortaledElement = {};
              }
            }
            focusWasOutsideWindow = false;
            lastActiveFocus = document && document.activeElement;
          }
        }
        if (document) {
          var newActiveElement = document && document.activeElement;
          var allNodes = getFocusabledIn(workingArea);
          var focusedIndex = allNodes.map(function(_ref2) {
            var node5 = _ref2.node;
            return node5;
          }).indexOf(newActiveElement);
          if (focusedIndex > -1) {
            allNodes.filter(function(_ref2) {
              var guard = _ref2.guard, node5 = _ref2.node;
              return guard && node5.dataset.focusAutoGuard;
            }).forEach(function(_ref3) {
              var node5 = _ref3.node;
              return node5.removeAttribute("tabIndex");
            });
            autoGuard(focusedIndex, allNodes.length, 1, allNodes);
            autoGuard(focusedIndex, -1, -1, allNodes);
          }
        }
      }
    }
    return result;
  };
  var onTrap = function onTrap2(event) {
    if (activateTrap() && event) {
      event.stopPropagation();
      event.preventDefault();
    }
  };
  var onBlur = function onBlur2() {
    return deferAction(activateTrap);
  };
  var onFocus = function onFocus2(event) {
    var source2 = event.target;
    var currentNode = event.currentTarget;
    if (!currentNode.contains(source2)) {
      recordPortal(currentNode, source2);
    }
  };
  var FocusWatcher = function FocusWatcher2() {
    return null;
  };
  var FocusTrap = function FocusTrap2(_ref4) {
    var children2 = _ref4.children;
    return /* @__PURE__ */ React20.createElement("div", {
      onBlur,
      onFocus
    }, children2);
  };
  FocusTrap.propTypes = true ? {
    children: import_prop_types3.default.node.isRequired
  } : {};
  var onWindowBlur = function onWindowBlur2() {
    focusWasOutsideWindow = "just";
    setTimeout(function() {
      focusWasOutsideWindow = "meanwhile";
    }, 0);
  };
  var attachHandler = function attachHandler2() {
    document.addEventListener("focusin", onTrap);
    document.addEventListener("focusout", onBlur);
    window.addEventListener("blur", onWindowBlur);
  };
  var detachHandler = function detachHandler2() {
    document.removeEventListener("focusin", onTrap);
    document.removeEventListener("focusout", onBlur);
    window.removeEventListener("blur", onWindowBlur);
  };
  function reducePropsToState(propsList) {
    return propsList.filter(function(_ref5) {
      var disabled = _ref5.disabled;
      return !disabled;
    });
  }
  function handleStateChangeOnClient(traps) {
    var trap = traps.slice(-1)[0];
    if (trap && !lastActiveTrap) {
      attachHandler();
    }
    var lastTrap = lastActiveTrap;
    var sameTrap = lastTrap && trap && trap.id === lastTrap.id;
    lastActiveTrap = trap;
    if (lastTrap && !sameTrap) {
      lastTrap.onDeactivation();
      if (!traps.filter(function(_ref6) {
        var id = _ref6.id;
        return id === lastTrap.id;
      }).length) {
        lastTrap.returnFocus(!trap);
      }
    }
    if (trap) {
      lastActiveFocus = null;
      if (!sameTrap || lastTrap.observed !== trap.observed) {
        trap.onActivation();
      }
      activateTrap(true);
      deferAction(activateTrap);
    } else {
      detachHandler();
      lastActiveFocus = null;
    }
  }
  mediumFocus.assignSyncMedium(onFocus);
  mediumBlur.assignMedium(onBlur);
  mediumEffect.assignMedium(function(cb) {
    return cb({
      moveFocusInside: es2015_default,
      focusInside
    });
  });
  var Trap_default = index_es_default(reducePropsToState, handleStateChangeOnClient)(FocusWatcher);

  // node_modules/react-focus-lock/dist/es2015/Combination.js
  var FocusLockCombination = /* @__PURE__ */ React21.forwardRef(function FocusLockUICombination(props, ref) {
    return /* @__PURE__ */ React21.createElement(Lock_default, _extends12({
      sideCar: Trap_default,
      ref
    }, props));
  });
  var _ref = Lock_default.propTypes || {};
  var sideCar = _ref.sideCar;
  var propTypes = _objectWithoutPropertiesLoose5(_ref, ["sideCar"]);
  FocusLockCombination.propTypes = true ? propTypes : {};
  var Combination_default = FocusLockCombination;

  // node_modules/react-focus-lock/dist/es2015/MoveFocusInside.js
  var React22 = __toESM(require_react());
  var import_prop_types4 = __toESM(require_prop_types());
  var useFocusInside = function useFocusInside2(observedRef) {
    React22.useEffect(function() {
      var enabled = true;
      mediumEffect.useMedium(function(car) {
        var observed = observedRef && observedRef.current;
        if (enabled && observed) {
          if (!car.focusInside(observed)) {
            car.moveFocusInside(observed, null);
          }
        }
      });
      return function() {
        enabled = false;
      };
    }, [observedRef]);
  };
  function MoveFocusInside(_ref2) {
    var isDisabled = _ref2.disabled, className = _ref2.className, children2 = _ref2.children;
    var ref = React22.useRef(null);
    useFocusInside(isDisabled ? void 0 : ref);
    return /* @__PURE__ */ React22.createElement("div", _extends12({}, inlineProp(FOCUS_AUTO, !isDisabled), {
      ref,
      className
    }), children2);
  }
  MoveFocusInside.propTypes = true ? {
    children: import_prop_types4.default.node.isRequired,
    disabled: import_prop_types4.default.bool,
    className: import_prop_types4.default.string
  } : {};
  MoveFocusInside.defaultProps = {
    disabled: false,
    className: void 0
  };
  var MoveFocusInside_default = MoveFocusInside;

  // node_modules/react-focus-lock/dist/es2015/index.js
  var es2015_default2 = Combination_default;

  // node_modules/baseui/esm/drawer/constants.js
  var SIZE2 = {
    default: "default",
    full: "full",
    auto: "auto"
  };
  var SIZE_DIMENSION = {
    default: "500px",
    full: "100%",
    auto: "auto"
  };
  var CLOSE_SOURCE = {
    closeButton: "closeButton",
    backdrop: "backdrop",
    escape: "escape"
  };
  var ANCHOR = {
    left: "left",
    right: "right",
    top: "top",
    bottom: "bottom"
  };

  // node_modules/baseui/esm/drawer/styled-components.js
  function ownKeys9(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread9(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys9(Object(source2), true).forEach(function(key) {
        _defineProperty13(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys9(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty13(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function getSizeStyles($size, $anchor) {
    var styles = {
      maxWidth: "100%",
      maxHeight: "100%",
      width: SIZE_DIMENSION.default,
      height: SIZE_DIMENSION.full
    };
    if ($anchor === ANCHOR.left || $anchor === ANCHOR.right) {
      styles.height = SIZE_DIMENSION.full;
      if (SIZE2[$size]) {
        styles.width = SIZE_DIMENSION[$size];
      } else if (typeof $size === "string") {
        styles.width = $size;
      }
    } else {
      styles.width = SIZE_DIMENSION.full;
      if (SIZE2[$size]) {
        styles.height = SIZE_DIMENSION[$size];
      } else if (typeof $size === "string") {
        styles.height = $size;
      }
    }
    return styles;
  }
  function getAnchorStyles(props) {
    var $anchor = props.$anchor, $isVisible = props.$isVisible, $size = props.$size;
    var sizeStyles = getSizeStyles($size, $anchor);
    var left = ANCHOR.left, right = ANCHOR.right, top = ANCHOR.top, bottom = ANCHOR.bottom;
    switch ($anchor) {
      case right: {
        return _objectSpread9({
          transform: $isVisible ? "translateX(0)" : "translateX(".concat(sizeStyles.width, ")"),
          right: $isVisible ? 0 : "-".concat(sizeStyles.width),
          top: 0
        }, sizeStyles);
      }
      case left: {
        return _objectSpread9({
          transform: $isVisible ? "translateX(0)" : "translateX(-".concat(sizeStyles.width, ")"),
          left: $isVisible ? 0 : "-".concat(sizeStyles.width),
          top: 0
        }, sizeStyles);
      }
      case bottom: {
        return _objectSpread9({
          transform: $isVisible ? "translateY(0)" : "translateY(".concat(sizeStyles.height, ")"),
          left: 0,
          bottom: $isVisible ? "0" : "-".concat(sizeStyles.height)
        }, sizeStyles);
      }
      case top: {
        return _objectSpread9({
          transform: $isVisible ? "translateY(0)" : "translateY(-".concat(sizeStyles.height, ")"),
          left: 0,
          top: $isVisible ? "0" : "-".concat(sizeStyles.height)
        }, sizeStyles);
      }
      default: {
        return {};
      }
    }
  }
  var StyledRoot = styled2("div", function(props) {
    return {
      position: "fixed",
      overflow: "auto",
      right: 0,
      bottom: 0,
      top: 0,
      left: 0
    };
  });
  StyledRoot.displayName = "StyledRoot";
  StyledRoot.displayName = "StyledRoot";
  var StyledBackdrop = styled2("div", function(props) {
    var $animating = props.$animating, $isOpen = props.$isOpen, $isVisible = props.$isVisible, $showBackdrop = props.$showBackdrop, $theme = props.$theme;
    return _objectSpread9({
      position: "fixed",
      right: 0,
      bottom: 0,
      top: 0,
      left: 0,
      backgroundColor: "rgba(0, 0, 0, 0.5)",
      WebkitTapHighlightColor: "transparent",
      touchAction: "none",
      opacity: $isVisible && $isOpen && $showBackdrop ? 1 : 0
    }, $animating ? {
      transitionProperty: "opacity",
      transitionDuration: $theme.animation.timing400,
      transitionTimingFunction: $theme.animation.easeOutCurve
    } : null);
  });
  StyledBackdrop.displayName = "StyledBackdrop";
  StyledBackdrop.displayName = "StyledBackdrop";
  var StyledDrawerContainer = styled2("div", function(props) {
    var $animating = props.$animating, $isOpen = props.$isOpen, $isVisible = props.$isVisible, $theme = props.$theme;
    return _objectSpread9(_objectSpread9({
      backgroundColor: $theme.colors.backgroundPrimary,
      borderTopLeftRadius: $theme.borders.surfaceBorderRadius,
      borderTopRightRadius: $theme.borders.surfaceBorderRadius,
      borderBottomRightRadius: $theme.borders.surfaceBorderRadius,
      borderBottomLeftRadius: $theme.borders.surfaceBorderRadius
    }, getAnchorStyles(props)), {}, {
      opacity: $isVisible && $isOpen ? 1 : 0,
      transitionProperty: $animating ? "opacity, transform" : null,
      transitionDuration: $animating ? $theme.animation.timing400 : null,
      transitionTimingFunction: $animating ? $theme.animation.easeOutCurve : null,
      display: "flex",
      position: "fixed"
    });
  });
  StyledDrawerContainer.displayName = "StyledDrawerContainer";
  StyledDrawerContainer.displayName = "StyledDrawerContainer";
  var StyledDrawerBody = styled2("div", function(props) {
    var $theme = props.$theme;
    return _objectSpread9(_objectSpread9({}, $theme.typography.font200), {}, {
      color: $theme.colors.contentPrimary,
      marginTop: $theme.sizing.scale900,
      marginBottom: $theme.sizing.scale900,
      marginLeft: $theme.sizing.scale900,
      marginRight: $theme.sizing.scale900,
      overflow: "auto",
      width: "100%"
    });
  });
  StyledDrawerBody.displayName = "StyledDrawerBody";
  StyledDrawerBody.displayName = "StyledDrawerBody";
  var StyledClose = styled2("button", function(props) {
    var _ref2;
    var $theme = props.$theme, $isFocusVisible = props.$isFocusVisible;
    var dir = $theme.direction === "rtl" ? "left" : "right";
    return _ref2 = {
      background: "transparent",
      outline: 0,
      paddingLeft: 0,
      paddingTop: 0,
      paddingRight: 0,
      paddingBottom: 0,
      fill: $theme.colors.primary,
      transitionProperty: "fill, border-color",
      transitionDuration: $theme.animation.timing200,
      borderLeftWidth: "1px",
      borderRightWidth: "1px",
      borderTopWidth: "1px",
      borderBottomWidth: "1px",
      borderLeftStyle: "solid",
      borderRightStyle: "solid",
      borderTopStyle: "solid",
      borderBottomStyle: "solid",
      borderLeftColor: "transparent",
      borderRightColor: "transparent",
      borderTopColor: "transparent",
      borderBottomColor: "transparent",
      ":hover": {
        fill: $theme.colors.primary600
      },
      ":focus": {
        outline: $isFocusVisible ? "3px solid ".concat($theme.colors.accent) : "none"
      },
      position: "absolute",
      top: $theme.sizing.scale500
    }, _defineProperty13(_ref2, dir, $theme.sizing.scale500), _defineProperty13(_ref2, "width", $theme.sizing.scale800), _defineProperty13(_ref2, "height", $theme.sizing.scale800), _defineProperty13(_ref2, "display", "flex"), _defineProperty13(_ref2, "justifyContent", "center"), _defineProperty13(_ref2, "alignItems", "center"), _defineProperty13(_ref2, "cursor", "pointer"), _ref2;
  });
  StyledClose.displayName = "StyledClose";
  StyledClose.displayName = "StyledClose";
  var Hidden = styled2("div", {
    display: "none"
  });
  Hidden.displayName = "Hidden";
  Hidden.displayName = "Hidden";

  // node_modules/baseui/esm/drawer/close-icon.js
  var React25 = __toESM(require_react());

  // node_modules/baseui/esm/icon/delete.js
  var React24 = __toESM(require_react());

  // node_modules/baseui/esm/icon/icon.js
  var React23 = __toESM(require_react());

  // node_modules/baseui/esm/icon/styled-components.js
  function getSvgStyles(_ref2) {
    var $theme = _ref2.$theme, $size = _ref2.$size, $color = _ref2.$color;
    var size = $theme.sizing.scale600;
    if ($size) {
      if ($theme.sizing[$size]) {
        size = $theme.sizing[$size];
      } else if (typeof $size === "number") {
        size = "".concat($size, "px");
      } else {
        size = $size;
      }
    }
    var color = "currentColor";
    if ($color) {
      if ($theme.colors[$color]) {
        color = $theme.colors[$color];
      } else {
        color = $color;
      }
    }
    return {
      display: "inline-block",
      fill: color,
      color,
      height: size,
      width: size
    };
  }
  var Svg = styled2("svg", getSvgStyles);
  Svg.displayName = "Svg";
  Svg.displayName = "Svg";

  // node_modules/baseui/esm/icon/omit-dollar-prefixed-keys.js
  function omitDollarPrefixedKeys(source2) {
    var result = {};
    for (var key in source2) {
      if (key[0] !== "$") {
        result[key] = source2[key];
      }
    }
    return result;
  }

  // node_modules/baseui/esm/icon/icon.js
  var _excluded6 = ["children", "title", "size", "color", "overrides"];
  function _extends13() {
    _extends13 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends13.apply(this, arguments);
  }
  function ownKeys10(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread10(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys10(Object(source2), true).forEach(function(key) {
        _defineProperty14(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys10(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty14(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _slicedToArray6(arr, i) {
    return _arrayWithHoles5(arr) || _iterableToArrayLimit5(arr, i) || _unsupportedIterableToArray5(arr, i) || _nonIterableRest5();
  }
  function _nonIterableRest5() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray5(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray5(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray5(o, minLen);
  }
  function _arrayLikeToArray5(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit5(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles5(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _objectWithoutProperties4(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose6(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose6(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  var Icon = function Icon2(props, ref) {
    var children2 = props.children, title = props.title, size = props.size, color = props.color, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, restProps = _objectWithoutProperties4(props, _excluded6);
    var _getOverrides = getOverrides(overrides.Svg, Svg), _getOverrides2 = _slicedToArray6(_getOverrides, 2), Svg2 = _getOverrides2[0], overrideProps = _getOverrides2[1];
    var passThroughProps = Svg2.__STYLETRON__ ? _objectSpread10(_objectSpread10({
      title,
      $color: color,
      $size: size
    }, restProps), overrideProps) : _objectSpread10(_objectSpread10({
      title,
      color,
      size
    }, omitDollarPrefixedKeys(restProps)), omitDollarPrefixedKeys(overrideProps));
    return /* @__PURE__ */ React23.createElement(Svg2, _extends13({
      "data-baseweb": "icon",
      ref
    }, passThroughProps), title ? /* @__PURE__ */ React23.createElement("title", null, title) : null, children2);
  };
  var icon_default = /* @__PURE__ */ React23.forwardRef(Icon);

  // node_modules/baseui/esm/icon/delete.js
  var _excluded7 = ["title", "size", "color", "overrides"];
  function _extends14() {
    _extends14 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends14.apply(this, arguments);
  }
  function _objectWithoutProperties5(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose7(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose7(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _slicedToArray7(arr, i) {
    return _arrayWithHoles6(arr) || _iterableToArrayLimit6(arr, i) || _unsupportedIterableToArray6(arr, i) || _nonIterableRest6();
  }
  function _nonIterableRest6() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray6(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray6(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray6(o, minLen);
  }
  function _arrayLikeToArray6(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit6(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles6(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function Delete(props, ref) {
    var _useStyletron = useStyletron2(), _useStyletron2 = _slicedToArray7(_useStyletron, 2), theme = _useStyletron2[1];
    var _props$title = props.title, title = _props$title === void 0 ? "Delete" : _props$title, size = props.size, color = props.color, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, restProps = _objectWithoutProperties5(props, _excluded7);
    var SvgOverride = mergeOverride(
      {
        component: theme.icons && theme.icons.Delete ? theme.icons.Delete : null
      },
      overrides && overrides.Svg ? toObjectOverride(overrides.Svg) : {}
    );
    return /* @__PURE__ */ React24.createElement(icon_default, _extends14({
      viewBox: "0 0 24 24",
      ref,
      title,
      size,
      color,
      overrides: {
        Svg: SvgOverride
      }
    }, restProps), /* @__PURE__ */ React24.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7.29289 7.29289C7.68342 6.90237 8.31658 6.90237 8.70711 7.29289L12 10.5858L15.2929 7.29289C15.6834 6.90237 16.3166 6.90237 16.7071 7.29289C17.0976 7.68342 17.0976 8.31658 16.7071 8.70711L13.4142 12L16.7071 15.2929C17.0976 15.6834 17.0976 16.3166 16.7071 16.7071C16.3166 17.0976 15.6834 17.0976 15.2929 16.7071L12 13.4142L8.70711 16.7071C8.31658 17.0976 7.68342 17.0976 7.29289 16.7071C6.90237 16.3166 6.90237 15.6834 7.29289 15.2929L10.5858 12L7.29289 8.70711C6.90237 8.31658 6.90237 7.68342 7.29289 7.29289Z"
    }));
  }
  var delete_default = /* @__PURE__ */ React24.forwardRef(Delete);

  // node_modules/baseui/esm/drawer/close-icon.js
  function CloseIcon(props) {
    return /* @__PURE__ */ React25.createElement(delete_default, {
      size: "inherit",
      color: "inherit",
      title: props.title
    });
  }

  // node_modules/baseui/esm/drawer/drawer.js
  function _typeof8(obj) {
    "@babel/helpers - typeof";
    return _typeof8 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof8(obj);
  }
  function _extends15() {
    _extends15 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends15.apply(this, arguments);
  }
  function _slicedToArray8(arr, i) {
    return _arrayWithHoles7(arr) || _iterableToArrayLimit7(arr, i) || _unsupportedIterableToArray7(arr, i) || _nonIterableRest7();
  }
  function _nonIterableRest7() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray7(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray7(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray7(o, minLen);
  }
  function _arrayLikeToArray7(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit7(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles7(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _classCallCheck5(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties5(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass5(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties5(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties5(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _inherits5(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass)
      _setPrototypeOf6(subClass, superClass);
  }
  function _setPrototypeOf6(o, p) {
    _setPrototypeOf6 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf13(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf6(o, p);
  }
  function _createSuper5(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct5();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf5(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf5(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn5(this, result);
    };
  }
  function _possibleConstructorReturn5(self2, call) {
    if (call && (_typeof8(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized5(self2);
  }
  function _assertThisInitialized5(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct5() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf5(o) {
    _getPrototypeOf5 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf12(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf5(o);
  }
  function _defineProperty15(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var Drawer = /* @__PURE__ */ function(_React$Component) {
    _inherits5(Drawer2, _React$Component);
    var _super = _createSuper5(Drawer2);
    function Drawer2() {
      var _this;
      _classCallCheck5(this, Drawer2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty15(_assertThisInitialized5(_this), "animateOutTimer", void 0);
      _defineProperty15(_assertThisInitialized5(_this), "animateStartTimer", void 0);
      _defineProperty15(_assertThisInitialized5(_this), "lastFocus", null);
      _defineProperty15(_assertThisInitialized5(_this), "lastMountNodeOverflowStyle", null);
      _defineProperty15(_assertThisInitialized5(_this), "_refs", {});
      _defineProperty15(_assertThisInitialized5(_this), "state", {
        isVisible: false,
        mounted: false,
        isFocusVisible: false
      });
      _defineProperty15(_assertThisInitialized5(_this), "handleFocus", function(event) {
        if (isFocusVisible(event)) {
          _this.setState({
            isFocusVisible: true
          });
        }
      });
      _defineProperty15(_assertThisInitialized5(_this), "handleBlur", function(event) {
        if (_this.state.isFocusVisible !== false) {
          _this.setState({
            isFocusVisible: false
          });
        }
      });
      _defineProperty15(_assertThisInitialized5(_this), "onEscape", function() {
        if (!_this.props.closeable) {
          return;
        }
        _this.triggerClose(CLOSE_SOURCE.escape);
      });
      _defineProperty15(_assertThisInitialized5(_this), "onBackdropClick", function(event) {
        if (_this.props.onBackdropClick) {
          _this.props.onBackdropClick(event);
        }
        if (!_this.props.closeable) {
          return;
        }
        _this.triggerClose(CLOSE_SOURCE.backdrop);
      });
      _defineProperty15(_assertThisInitialized5(_this), "onCloseClick", function() {
        _this.triggerClose(CLOSE_SOURCE.closeButton);
      });
      _defineProperty15(_assertThisInitialized5(_this), "animateOutComplete", function() {
        _this.setState({
          isVisible: false
        });
      });
      return _this;
    }
    _createClass5(Drawer2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.setState({
          mounted: true
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.resetMountNodeScroll();
        this.clearTimers();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        var isOpen = this.props.isOpen;
        if (isOpen !== prevProps.isOpen || isOpen && this.state.mounted && !prevState.mounted) {
          if (isOpen) {
            this.didOpen();
          } else {
            this.didClose();
          }
        }
      }
    }, {
      key: "disableMountNodeScroll",
      value: function disableMountNodeScroll() {
        if (this.props.showBackdrop) {
          var mountNode = this.getMountNode();
          this.lastMountNodeOverflowStyle = mountNode.style.overflow || "";
          mountNode.style.overflow = "hidden";
        }
      }
    }, {
      key: "resetMountNodeScroll",
      value: function resetMountNodeScroll() {
        if (this.props.showBackdrop) {
          var mountNode = this.getMountNode();
          var lastStyle = this.lastMountNodeOverflowStyle;
          if (mountNode && lastStyle !== null) {
            mountNode.style.overflow = lastStyle || "";
            this.lastMountNodeOverflowStyle = null;
          }
        }
      }
    }, {
      key: "getMountNode",
      value: function getMountNode() {
        var mountNode = this.props.mountNode;
        if (mountNode) {
          return mountNode;
        }
        return document.body;
      }
    }, {
      key: "clearTimers",
      value: function clearTimers() {
        if (this.animateOutTimer) {
          clearTimeout(this.animateOutTimer);
        }
        if (this.animateStartTimer) {
          cancelAnimationFrame(this.animateStartTimer);
        }
      }
    }, {
      key: "didOpen",
      value: function didOpen() {
        var _this2 = this;
        var rootRef = this.getRef("Root").current;
        if (rootRef) {
          rootRef.scrollTop = 0;
        }
        this.clearTimers();
        this.disableMountNodeScroll();
        this.animateStartTimer = requestAnimationFrame(function() {
          _this2.setState({
            isVisible: true
          });
        });
      }
    }, {
      key: "didClose",
      value: function didClose() {
        this.resetMountNodeScroll();
        this.animateOutTimer = setTimeout(this.animateOutComplete, 500);
      }
    }, {
      key: "triggerClose",
      value: function triggerClose(source2) {
        if (this.props.onClose && source2) {
          this.props.onClose({
            closeSource: source2
          });
        }
      }
    }, {
      key: "getSharedProps",
      value: function getSharedProps3() {
        var _this$props = this.props, animate = _this$props.animate, isOpen = _this$props.isOpen, size = _this$props.size, closeable = _this$props.closeable, anchor = _this$props.anchor, showBackdrop = _this$props.showBackdrop;
        return {
          $animating: animate,
          $isVisible: this.state.isVisible,
          $isOpen: !!isOpen,
          $size: size,
          $closeable: !!closeable,
          $anchor: anchor,
          $isFocusVisible: this.state.isFocusVisible,
          $showBackdrop: showBackdrop
        };
      }
    }, {
      key: "getChildren",
      value: function getChildren() {
        var children2 = this.props.children;
        return typeof children2 === "function" ? children2() : children2;
      }
    }, {
      key: "getRef",
      value: function getRef(component) {
        if (!this._refs[component]) {
          this._refs[component] = /* @__PURE__ */ React26.createRef();
        }
        return this._refs[component];
      }
    }, {
      key: "renderDrawer",
      value: function renderDrawer(renderedContent) {
        var _this3 = this;
        var _this$props2 = this.props, _this$props2$override = _this$props2.overrides, overrides = _this$props2$override === void 0 ? {} : _this$props2$override, closeable = _this$props2.closeable, autoFocus = _this$props2.autoFocus;
        var RootOverride = overrides.Root, DrawerContainerOverride = overrides.DrawerContainer, DrawerBodyOverride = overrides.DrawerBody, BackdropOverride = overrides.Backdrop, CloseOverride = overrides.Close;
        var _getOverrides = getOverrides(RootOverride, StyledRoot), _getOverrides2 = _slicedToArray8(_getOverrides, 2), Root3 = _getOverrides2[0], rootProps = _getOverrides2[1];
        var _getOverrides3 = getOverrides(BackdropOverride, StyledBackdrop), _getOverrides4 = _slicedToArray8(_getOverrides3, 2), Backdrop = _getOverrides4[0], backdropProps = _getOverrides4[1];
        var _getOverrides5 = getOverrides(DrawerContainerOverride, StyledDrawerContainer), _getOverrides6 = _slicedToArray8(_getOverrides5, 2), DrawerContainer = _getOverrides6[0], drawerContainerProps = _getOverrides6[1];
        var _getOverrides7 = getOverrides(DrawerBodyOverride, StyledDrawerBody), _getOverrides8 = _slicedToArray8(_getOverrides7, 2), DrawerBody = _getOverrides8[0], drawerBodyProps = _getOverrides8[1];
        var _getOverrides9 = getOverrides(CloseOverride, StyledClose), _getOverrides10 = _slicedToArray8(_getOverrides9, 2), Close = _getOverrides10[0], closeProps = _getOverrides10[1];
        var sharedProps = this.getSharedProps();
        return /* @__PURE__ */ React26.createElement(LocaleContext.Consumer, null, function(locale13) {
          return /* @__PURE__ */ React26.createElement(
            es2015_default2,
            {
              crossFrame: false,
              returnFocus: true,
              autoFocus,
              noFocusGuards: true
            },
            /* @__PURE__ */ React26.createElement(Root3, _extends15({
              "data-baseweb": "drawer",
              ref: _this3.getRef("Root")
            }, sharedProps, rootProps), /* @__PURE__ */ React26.createElement(Backdrop, _extends15({
              onClick: _this3.onBackdropClick
            }, sharedProps, backdropProps)), /* @__PURE__ */ React26.createElement(DrawerContainer, _extends15({}, sharedProps, drawerContainerProps), /* @__PURE__ */ React26.createElement(DrawerBody, _extends15({}, sharedProps, drawerBodyProps), renderedContent), closeable ? /* @__PURE__ */ React26.createElement(Close, _extends15({
              "aria-label": locale13.drawer.close,
              onClick: _this3.onCloseClick
            }, sharedProps, closeProps, {
              onFocus: forkFocus(closeProps, _this3.handleFocus),
              onBlur: forkBlur(closeProps, _this3.handleBlur)
            }), /* @__PURE__ */ React26.createElement(CloseIcon, {
              title: locale13.drawer.close
            })) : null))
          );
        });
      }
    }, {
      key: "render",
      value: function render() {
        var mountedAndOpen = this.state.mounted && (this.props.isOpen || this.state.isVisible);
        var renderedContent = mountedAndOpen || this.props.renderAll ? this.getChildren() : null;
        if (renderedContent) {
          if (mountedAndOpen) {
            return /* @__PURE__ */ React26.createElement(Layer, {
              onEscape: this.onEscape,
              mountNode: this.props.mountNode
            }, this.renderDrawer(renderedContent));
          } else {
            return /* @__PURE__ */ React26.createElement(Hidden, null, renderedContent);
          }
        }
        return null;
      }
    }]);
    return Drawer2;
  }(React26.Component);
  _defineProperty15(Drawer, "defaultProps", {
    animate: true,
    closeable: true,
    isOpen: false,
    overrides: {},
    size: SIZE2.default,
    anchor: ANCHOR.right,
    showBackdrop: true,
    autoFocus: true,
    renderAll: false
  });
  var drawer_default = Drawer;

  // node_modules/baseui/esm/icon/arrow-left.js
  var React27 = __toESM(require_react());
  var _excluded8 = ["title", "size", "color", "overrides"];
  function _extends16() {
    _extends16 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends16.apply(this, arguments);
  }
  function _objectWithoutProperties6(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose8(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose8(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _slicedToArray9(arr, i) {
    return _arrayWithHoles8(arr) || _iterableToArrayLimit8(arr, i) || _unsupportedIterableToArray8(arr, i) || _nonIterableRest8();
  }
  function _nonIterableRest8() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray8(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray8(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray8(o, minLen);
  }
  function _arrayLikeToArray8(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit8(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles8(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function ArrowLeft(props, ref) {
    var _useStyletron = useStyletron2(), _useStyletron2 = _slicedToArray9(_useStyletron, 2), theme = _useStyletron2[1];
    var _props$title = props.title, title = _props$title === void 0 ? "Arrow Left" : _props$title, size = props.size, color = props.color, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, restProps = _objectWithoutProperties6(props, _excluded8);
    var SvgOverride = mergeOverride(
      {
        component: theme.icons && theme.icons.ArrowLeft ? theme.icons.ArrowLeft : null
      },
      overrides && overrides.Svg ? toObjectOverride(overrides.Svg) : {}
    );
    return /* @__PURE__ */ React27.createElement(icon_default, _extends16({
      viewBox: "0 0 24 24",
      ref,
      title,
      size,
      color,
      overrides: {
        Svg: SvgOverride
      }
    }, restProps), /* @__PURE__ */ React27.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M6.29289 11.2929C5.90237 11.6834 5.90237 12.3166 6.29289 12.7071L10.2929 16.7071C10.6834 17.0976 11.3166 17.0976 11.7071 16.7071C12.0976 16.3166 12.0976 15.6834 11.7071 15.2929L9.41421 13H17C17.5523 13 18 12.5523 18 12C18 11.4477 17.5523 11 17 11H9.41421L11.7071 8.70711C12.0976 8.31658 12.0976 7.68342 11.7071 7.29289C11.3166 6.90237 10.6834 6.90237 10.2929 7.29289L6.29289 11.2929Z"
    }));
  }
  var arrow_left_default = /* @__PURE__ */ React27.forwardRef(ArrowLeft);

  // node_modules/baseui/esm/icon/menu.js
  var React28 = __toESM(require_react());
  var _excluded9 = ["title", "size", "color", "overrides"];
  function _extends17() {
    _extends17 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends17.apply(this, arguments);
  }
  function _objectWithoutProperties7(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose9(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose9(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _slicedToArray10(arr, i) {
    return _arrayWithHoles9(arr) || _iterableToArrayLimit9(arr, i) || _unsupportedIterableToArray9(arr, i) || _nonIterableRest9();
  }
  function _nonIterableRest9() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray9(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray9(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray9(o, minLen);
  }
  function _arrayLikeToArray9(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit9(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles9(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function Menu(props, ref) {
    var _useStyletron = useStyletron2(), _useStyletron2 = _slicedToArray10(_useStyletron, 2), theme = _useStyletron2[1];
    var _props$title = props.title, title = _props$title === void 0 ? "Menu" : _props$title, size = props.size, color = props.color, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, restProps = _objectWithoutProperties7(props, _excluded9);
    var SvgOverride = mergeOverride(
      {
        component: theme.icons && theme.icons.Menu ? theme.icons.Menu : null
      },
      overrides && overrides.Svg ? toObjectOverride(overrides.Svg) : {}
    );
    return /* @__PURE__ */ React28.createElement(icon_default, _extends17({
      viewBox: "0 0 24 24",
      ref,
      title,
      size,
      color,
      overrides: {
        Svg: SvgOverride
      }
    }, restProps), /* @__PURE__ */ React28.createElement("rect", {
      x: "4",
      y: "11",
      width: "16",
      height: "2",
      rx: "1"
    }), /* @__PURE__ */ React28.createElement("rect", {
      x: "4",
      y: "5",
      width: "16",
      height: "2",
      rx: "1"
    }), /* @__PURE__ */ React28.createElement("rect", {
      x: "4",
      y: "17",
      width: "16",
      height: "2",
      rx: "1"
    }));
  }
  var menu_default = /* @__PURE__ */ React28.forwardRef(Menu);

  // node_modules/baseui/esm/list/list-item.js
  var import_react5 = __toESM(require_react());

  // node_modules/baseui/esm/list/constants.js
  var ARTWORK_SIZES = {
    SMALL: "SMALL",
    MEDIUM: "MEDIUM",
    LARGE: "LARGE"
  };
  var SHAPE2 = {
    DEFAULT: "DEFAULT",
    ROUND: "ROUND"
  };

  // node_modules/baseui/esm/list/utils.js
  function artworkSizeToValue(artworkSize, isSublist) {
    if (isSublist) {
      switch (artworkSize) {
        case ARTWORK_SIZES.LARGE:
          return 24;
        case ARTWORK_SIZES.SMALL:
        default:
          return 16;
      }
    }
    switch (artworkSize) {
      case ARTWORK_SIZES.SMALL:
        return 16;
      case ARTWORK_SIZES.LARGE:
        return 36;
      case ARTWORK_SIZES.MEDIUM:
      default:
        return 24;
    }
  }

  // node_modules/baseui/esm/list/styled-components.js
  function ownKeys11(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread11(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys11(Object(source2), true).forEach(function(key) {
        _defineProperty16(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys11(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty16(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var StyledRoot2 = styled2("li", function(_ref2) {
    var $theme = _ref2.$theme, $shape = _ref2.$shape;
    return {
      alignItems: "center",
      backgroundColor: $theme.colors.backgroundPrimary,
      display: "flex",
      listStyleType: "none",
      width: "100%",
      borderTopLeftRadius: $shape === SHAPE2.ROUND ? $theme.borders.radius400 : 0,
      borderTopRightRadius: $shape === SHAPE2.ROUND ? $theme.borders.radius400 : 0,
      borderBottomLeftRadius: $shape === SHAPE2.ROUND ? $theme.borders.radius400 : 0,
      borderBottomRightRadius: $shape === SHAPE2.ROUND ? $theme.borders.radius400 : 0,
      overflow: "hidden"
    };
  });
  StyledRoot2.displayName = "StyledRoot";
  StyledRoot2.displayName = "StyledRoot";
  var StyledContent = styled2("div", function(_ref2) {
    var $mLeft = _ref2.$mLeft, $sublist = _ref2.$sublist, $theme = _ref2.$theme;
    return _objectSpread11(_objectSpread11({}, expandBorderStyles($theme.borders.border100)), {}, {
      alignItems: "center",
      borderTopStyle: "none",
      borderRightStyle: "none",
      borderLeftStyle: "none",
      display: "flex",
      flexGrow: 1,
      minHeight: $sublist ? "initial" : $theme.sizing.scale1600,
      justifyContent: "space-between"
    }, $theme.direction === "rtl" ? {
      paddingLeft: $theme.sizing.scale600,
      marginRight: $mLeft ? $theme.sizing.scale600 : null
    } : {
      paddingRight: $theme.sizing.scale600,
      marginLeft: $mLeft ? $theme.sizing.scale600 : null
    });
  });
  StyledContent.displayName = "StyledContent";
  StyledContent.displayName = "StyledContent";
  var StyledEndEnhancerContainer = styled2("div", {
    alignItems: "center",
    display: "flex"
  });
  StyledEndEnhancerContainer.displayName = "StyledEndEnhancerContainer";
  StyledEndEnhancerContainer.displayName = "StyledEndEnhancerContainer";
  var StyledArtworkContainer = styled2("div", function(_ref3) {
    var $artworkSize = _ref3.$artworkSize, $sublist = _ref3.$sublist, $theme = _ref3.$theme;
    var sizeValue = typeof $artworkSize === "number" ? $artworkSize : artworkSizeToValue($artworkSize, Boolean($sublist));
    if (sizeValue > 36) {
      return {
        alignItems: "center",
        display: "flex",
        flexShrink: 0,
        paddingLeft: $theme.sizing.scale600,
        paddingRight: $theme.sizing.scale600
      };
    }
    return {
      alignItems: "center",
      display: "flex",
      flexShrink: 0,
      justifyContent: "center",
      width: $theme.sizing.scale1600
    };
  });
  StyledArtworkContainer.displayName = "StyledArtworkContainer";
  StyledArtworkContainer.displayName = "StyledArtworkContainer";
  var StyledLabelContent = styled2("p", function(_ref4) {
    var $theme = _ref4.$theme;
    return _objectSpread11(_objectSpread11({}, $theme.typography.LabelMedium), {}, {
      color: $theme.colors.contentPrimary,
      marginTop: 0,
      marginBottom: 0
    });
  });
  StyledLabelContent.displayName = "StyledLabelContent";
  StyledLabelContent.displayName = "StyledLabelContent";
  var StyledLabelDescription = styled2("p", function(_ref5) {
    var $theme = _ref5.$theme;
    return _objectSpread11(_objectSpread11({}, $theme.typography.ParagraphSmall), {}, {
      color: $theme.colors.contentPrimary,
      marginTop: 0,
      marginBottom: 0
    });
  });
  StyledLabelDescription.displayName = "StyledLabelDescription";
  StyledLabelDescription.displayName = "StyledLabelDescription";
  var StyledLabelSublistContent = styled2("p", function(_ref6) {
    var $theme = _ref6.$theme;
    return _objectSpread11(_objectSpread11({}, $theme.typography.LabelMedium), {}, {
      color: $theme.colors.contentPrimary,
      marginTop: $theme.sizing.scale500,
      marginBottom: $theme.sizing.scale500
    });
  });
  StyledLabelSublistContent.displayName = "StyledLabelSublistContent";
  StyledLabelSublistContent.displayName = "StyledLabelSublistContent";
  var StyledHeadingRoot = styled2("div", function(_ref7) {
    var $theme = _ref7.$theme;
    return {
      display: "flex",
      alignItems: "center",
      width: "100%",
      backgroundColor: $theme.colors.backgroundPrimary,
      overflow: "hidden",
      minHeight: $theme.sizing.scale1600
    };
  });
  StyledHeadingRoot.displayName = "StyledHeadingRoot";
  StyledHeadingRoot.displayName = "StyledHeadingRoot";
  var StyledHeadingContent = styled2("div", function(_ref8) {
    var $theme = _ref8.$theme;
    return _objectSpread11({
      flexGrow: 1,
      width: "100%",
      minWidth: 0,
      paddingTop: $theme.sizing.scale600,
      paddingBottom: $theme.sizing.scale300
    }, $theme.direction === "rtl" ? {
      paddingLeft: $theme.sizing.scale600,
      marginRight: $theme.sizing.scale600
    } : {
      paddingRight: $theme.sizing.scale600,
      marginLeft: $theme.sizing.scale600
    });
  });
  StyledHeadingContent.displayName = "StyledHeadingContent";
  StyledHeadingContent.displayName = "StyledHeadingContent";
  var StyledHeadingContentRow = styled2("div", {
    display: "flex",
    justifyContent: "space-between",
    width: "100%"
  });
  StyledHeadingContentRow.displayName = "StyledHeadingContentRow";
  StyledHeadingContentRow.displayName = "StyledHeadingContentRow";
  var StyledHeadingMainHeading = styled2("p", function(_ref9) {
    var _ref9$$maxLines = _ref9.$maxLines, $maxLines = _ref9$$maxLines === void 0 ? 1 : _ref9$$maxLines, $theme = _ref9.$theme;
    return _objectSpread11(_objectSpread11({}, $theme.typography.HeadingSmall), {}, {
      color: $theme.colors.contentPrimary,
      marginTop: 0,
      marginBottom: 0,
      marginRight: $theme.sizing.scale600,
      display: "-webkit-box",
      "-webkit-line-clamp": $maxLines,
      "-webkit-box-orient": "vertical",
      overflow: "hidden"
    });
  });
  StyledHeadingMainHeading.displayName = "StyledHeadingMainHeading";
  StyledHeadingMainHeading.displayName = "StyledHeadingMainHeading";
  var StyledHeadingSubHeading = styled2("p", function(_ref10) {
    var _ref10$$maxLines = _ref10.$maxLines, $maxLines = _ref10$$maxLines === void 0 ? 1 : _ref10$$maxLines, $theme = _ref10.$theme;
    return _objectSpread11(_objectSpread11({}, $theme.typography.ParagraphLarge), {}, {
      color: $theme.colors.contentPrimary,
      marginTop: 0,
      marginBottom: 0,
      marginRight: $theme.sizing.scale600,
      display: "-webkit-box",
      "-webkit-line-clamp": $maxLines,
      "-webkit-box-orient": "vertical",
      overflow: "hidden"
    });
  });
  StyledHeadingSubHeading.displayName = "StyledHeadingSubHeading";
  StyledHeadingSubHeading.displayName = "StyledHeadingSubHeading";
  var StyledHeadingEndEnhancerContainer = styled2("div", function(_ref11) {
    var $isText = _ref11.$isText, $theme = _ref11.$theme;
    return _objectSpread11(_objectSpread11({}, $theme.typography.LabelMedium), {}, {
      display: "flex",
      alignItems: $isText ? "flex-end" : "center",
      whiteSpace: "nowrap",
      overflow: "hidden",
      textOverflow: "ellipsis"
    });
  });
  StyledHeadingEndEnhancerContainer.displayName = "StyledHeadingEndEnhancerContainer";
  StyledHeadingEndEnhancerContainer.displayName = "StyledHeadingEndEnhancerContainer";
  var StyledHeadingEndEnhancerDescriptionContainer = styled2("p", function(_ref12) {
    var $theme = _ref12.$theme;
    return _objectSpread11(_objectSpread11({}, $theme.typography.ParagraphMedium), {}, {
      marginTop: 0,
      marginBottom: 0,
      display: "flex",
      alignItems: "flex-start",
      whiteSpace: "nowrap",
      overflow: "hidden",
      textOverflow: "ellipsis"
    });
  });
  StyledHeadingEndEnhancerDescriptionContainer.displayName = "StyledHeadingEndEnhancerDescriptionContainer";
  StyledHeadingEndEnhancerDescriptionContainer.displayName = "StyledHeadingEndEnhancerDescriptionContainer";

  // node_modules/baseui/esm/list/list-item.js
  function _extends18() {
    _extends18 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends18.apply(this, arguments);
  }
  function _slicedToArray11(arr, i) {
    return _arrayWithHoles10(arr) || _iterableToArrayLimit10(arr, i) || _unsupportedIterableToArray10(arr, i) || _nonIterableRest10();
  }
  function _nonIterableRest10() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray10(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray10(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray10(o, minLen);
  }
  function _arrayLikeToArray10(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit10(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles10(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  var ListItem = /* @__PURE__ */ import_react5.default.forwardRef(function(props, ref) {
    var _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides;
    var Artwork = props.artwork;
    var EndEnhancer2 = props.endEnhancer;
    var _getOverrides = getOverrides(overrides.Root, StyledRoot2), _getOverrides2 = _slicedToArray11(_getOverrides, 2), Root3 = _getOverrides2[0], rootProps = _getOverrides2[1];
    var _getOverrides3 = getOverrides(overrides.ArtworkContainer, StyledArtworkContainer), _getOverrides4 = _slicedToArray11(_getOverrides3, 2), ArtworkContainer = _getOverrides4[0], artworkContainerProps = _getOverrides4[1];
    var _getOverrides5 = getOverrides(overrides.Content, StyledContent), _getOverrides6 = _slicedToArray11(_getOverrides5, 2), Content = _getOverrides6[0], contentProps = _getOverrides6[1];
    var _getOverrides7 = getOverrides(overrides.EndEnhancerContainer, StyledEndEnhancerContainer), _getOverrides8 = _slicedToArray11(_getOverrides7, 2), EndEnhancerContainer = _getOverrides8[0], endEnhancerContainerProps = _getOverrides8[1];
    var artworkSize = import_react5.default.useMemo(function() {
      if (props.sublist) {
        var size = props.artworkSize || ARTWORK_SIZES.SMALL;
        if (props.artworkSize === ARTWORK_SIZES.MEDIUM) {
          size = ARTWORK_SIZES.SMALL;
          if (true) {
            console.warn("When ListItem sublist prop is true, artworkSize MEDIUM is aliased to SMALL");
          }
        }
        return size;
      } else {
        return props.artworkSize || ARTWORK_SIZES.MEDIUM;
      }
    }, [props.artworkSize, props.sublist]);
    return /* @__PURE__ */ import_react5.default.createElement(
      Root3,
      _extends18({
        ref,
        $shape: props.shape || SHAPE2.DEFAULT,
        "aria-label": props["aria-label"],
        "aria-selected": props["aria-selected"],
        id: props.id,
        role: props.role
      }, rootProps),
      Artwork && /* @__PURE__ */ import_react5.default.createElement(ArtworkContainer, _extends18({
        $artworkSize: artworkSize,
        $sublist: Boolean(props.sublist)
      }, artworkContainerProps), /* @__PURE__ */ import_react5.default.createElement(Artwork, {
        size: typeof artworkSize === "number" ? artworkSize : artworkSizeToValue(artworkSize, Boolean(props.sublist))
      })),
      /* @__PURE__ */ import_react5.default.createElement(Content, _extends18({
        $mLeft: !Artwork,
        $sublist: !!props.sublist
      }, contentProps), props.children, EndEnhancer2 && EndEnhancer2 !== 0 && /* @__PURE__ */ import_react5.default.createElement(EndEnhancerContainer, endEnhancerContainerProps, /* @__PURE__ */ import_react5.default.createElement(EndEnhancer2, null)))
    );
  });
  ListItem.displayName = "ListItem";
  var list_item_default = ListItem;

  // node_modules/baseui/esm/list/list-item-label.js
  var import_react6 = __toESM(require_react());
  function _slicedToArray12(arr, i) {
    return _arrayWithHoles11(arr) || _iterableToArrayLimit11(arr, i) || _unsupportedIterableToArray11(arr, i) || _nonIterableRest11();
  }
  function _nonIterableRest11() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray11(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray11(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray11(o, minLen);
  }
  function _arrayLikeToArray11(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit11(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles11(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function ListItemLabel(props) {
    var _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides;
    var _getOverrides = getOverrides(overrides.LabelSublistContent, StyledLabelSublistContent), _getOverrides2 = _slicedToArray12(_getOverrides, 2), LabelSublistContent = _getOverrides2[0], labelSublistContentProps = _getOverrides2[1];
    var _getOverrides3 = getOverrides(overrides.LabelContent, StyledLabelContent), _getOverrides4 = _slicedToArray12(_getOverrides3, 2), LabelContent = _getOverrides4[0], labelContentProps = _getOverrides4[1];
    var _getOverrides5 = getOverrides(overrides.LabelDescription, StyledLabelDescription), _getOverrides6 = _slicedToArray12(_getOverrides5, 2), LabelDescription = _getOverrides6[0], labelDescriptionProps = _getOverrides6[1];
    if (props.sublist) {
      return /* @__PURE__ */ import_react6.default.createElement(LabelSublistContent, labelSublistContentProps, props.children);
    }
    return /* @__PURE__ */ import_react6.default.createElement("div", null, /* @__PURE__ */ import_react6.default.createElement(LabelContent, labelContentProps, props.children), props.description && /* @__PURE__ */ import_react6.default.createElement(LabelDescription, labelDescriptionProps, props.description));
  }
  var list_item_label_default = ListItemLabel;

  // node_modules/baseui/esm/list/menu-adapter.js
  var React31 = __toESM(require_react());
  var MenuAdapter = /* @__PURE__ */ React31.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React31.createElement(list_item_default, {
      ref,
      sublist: props.sublist || props.$size === "compact",
      "aria-label": props["aria-label"],
      "aria-selected": props["aria-selected"],
      artwork: props.artwork,
      artworkSize: props.artworkSize,
      endEnhancer: props.endEnhancer,
      id: props.id,
      role: props.role,
      overrides: mergeOverrides({
        Root: {
          props: {
            onMouseEnter: props.onMouseEnter,
            onClick: props.onClick
          },
          style: function style(_ref2) {
            var $theme = _ref2.$theme;
            return {
              backgroundColor: props.$isHighlighted ? $theme.colors.menuFillHover : null,
              cursor: props.$disabled ? "not-allowed" : "pointer"
            };
          }
        }
      }, props.overrides)
    }, props.children);
  });
  MenuAdapter.displayName = "MenuAdapter";
  var menu_adapter_default = MenuAdapter;

  // node_modules/baseui/esm/menu/stateful-menu.js
  var React41 = __toESM(require_react());

  // node_modules/baseui/esm/menu/menu.js
  var React39 = __toESM(require_react());

  // node_modules/baseui/esm/menu/styled-components.js
  var React32 = __toESM(require_react());

  // node_modules/baseui/esm/menu/constants.js
  var STATE_CHANGE_TYPES = {
    click: "click",
    moveUp: "moveUp",
    moveDown: "moveDown",
    mouseEnter: "mouseEnter",
    mouseLeave: "mouseLeave",
    focus: "focus",
    reset: "reset",
    character: "character",
    enter: "enter"
  };
  var KEY_STRINGS = {
    ArrowUp: "ArrowUp",
    ArrowDown: "ArrowDown",
    ArrowLeft: "ArrowLeft",
    ArrowRight: "ArrowRight",
    Enter: "Enter",
    Space: " ",
    Escape: "Escape",
    Backspace: "Backspace",
    Home: "Home",
    End: "End"
  };
  var OPTION_LIST_SIZE = {
    default: "default",
    compact: "compact"
  };

  // node_modules/baseui/esm/menu/styled-components.js
  var _excluded10 = ["item"];
  function _objectWithoutProperties8(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose10(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose10(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function ownKeys12(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread12(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys12(Object(source2), true).forEach(function(key) {
        _defineProperty17(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys12(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty17(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var StyledList = styled2("ul", function(_ref2) {
    var $theme = _ref2.$theme, $isFocusVisible = _ref2.$isFocusVisible;
    return {
      backgroundColor: $theme.colors.menuFill,
      position: "relative",
      marginTop: 0,
      marginBottom: 0,
      marginLeft: 0,
      marginRight: 0,
      paddingTop: $theme.sizing.scale300,
      paddingBottom: $theme.sizing.scale300,
      paddingLeft: 0,
      paddingRight: 0,
      borderTopLeftRadius: $theme.borders.popoverBorderRadius,
      borderTopRightRadius: $theme.borders.popoverBorderRadius,
      borderBottomRightRadius: $theme.borders.popoverBorderRadius,
      borderBottomLeftRadius: $theme.borders.popoverBorderRadius,
      boxShadow: $theme.lighting.shadow600,
      overflow: "auto",
      ":focus": {
        outline: $isFocusVisible ? "3px solid ".concat($theme.colors.accent) : "none"
      }
    };
  });
  StyledList.displayName = "StyledList";
  StyledList.displayName = "StyledList";
  function getFontColor(props) {
    if (props.$disabled) {
      return props.$theme.colors.menuFontDisabled;
    }
    if (props.$isHighlighted && props.$isFocused) {
      return props.$theme.colors.menuFontHighlighted;
    }
    if (props.$isHighlighted && !props.$isFocused) {
      return props.$theme.colors.menuFontSelected;
    }
    return props.$theme.colors.menuFontDefault;
  }
  function getBackgroundColor(props) {
    if (props.$disabled) {
      return "transparent";
    }
    if (props.$isHighlighted) {
      return props.$theme.colors.menuFillHover;
    }
    return "transparent";
  }
  var StyledEmptyState = styled2("li", function(props) {
    var $theme = props.$theme, $size = props.$size;
    return _objectSpread12(_objectSpread12({}, $size === OPTION_LIST_SIZE.compact ? $theme.typography.font100 : $theme.typography.font200), {}, {
      position: "relative",
      display: "block",
      color: $theme.colors.menuFontDisabled,
      textAlign: "center",
      cursor: "not-allowed",
      backgroundColor: "transparent",
      marginBottom: 0,
      paddingTop: $theme.sizing.scale800,
      paddingBottom: $theme.sizing.scale800,
      paddingRight: $theme.sizing.scale800,
      paddingLeft: $theme.sizing.scale800
    });
  });
  StyledEmptyState.displayName = "StyledEmptyState";
  StyledEmptyState.displayName = "StyledEmptyState";
  var StyledOptgroupHeader = styled2("li", function(props) {
    var paddingX = props.$theme.sizing.scale300;
    var paddingY = props.$theme.sizing.scale200;
    return _objectSpread12(_objectSpread12({}, props.$theme.typography.font250), {}, {
      color: props.$theme.colors.contentPrimary,
      paddingTop: paddingY,
      paddingBottom: paddingY,
      paddingRight: paddingX,
      paddingLeft: paddingX
    });
  });
  StyledOptgroupHeader.displayName = "StyledOptgroupHeader";
  StyledOptgroupHeader.displayName = "StyledOptgroupHeader";
  var StyledListItemAnchor = styled2("a", function(props) {
    return {
      display: "block",
      color: getFontColor(props)
    };
  });
  StyledListItemAnchor.displayName = "StyledListItemAnchor";
  StyledListItemAnchor.displayName = "StyledListItemAnchor";
  var StyledListItemElement = styled2("li", function(props) {
    var $disabled = props.$disabled, $theme = props.$theme, $size = props.$size;
    return _objectSpread12(_objectSpread12({}, $size === OPTION_LIST_SIZE.compact ? $theme.typography.font100 : $theme.typography.font200), {}, {
      boxSizing: "border-box",
      position: "relative",
      display: "block",
      color: getFontColor(props),
      cursor: $disabled ? "not-allowed" : "pointer",
      backgroundColor: getBackgroundColor(props),
      transitionProperty: "color, background-color",
      transitionDuration: $theme.animation.timing200,
      transitionTimingFunction: $theme.animation.easeOutCurve,
      marginBottom: 0,
      paddingTop: $size === OPTION_LIST_SIZE.compact ? $theme.sizing.scale100 : $theme.sizing.scale300,
      paddingBottom: $size === OPTION_LIST_SIZE.compact ? $theme.sizing.scale100 : $theme.sizing.scale300,
      paddingRight: $size === OPTION_LIST_SIZE.compact ? $theme.sizing.scale900 : $theme.sizing.scale600,
      paddingLeft: $size === OPTION_LIST_SIZE.compact ? $theme.sizing.scale900 : $theme.sizing.scale600,
      ":focus": {
        outline: "none"
      }
    });
  });
  StyledListItemElement.displayName = "StyledListItemElement";
  StyledListItemElement.displayName = "StyledListItemElement";
  var StyledListItem = withWrapper2(StyledListItemElement, function(Styled) {
    return function StyledListItem2(_ref2) {
      var item = _ref2.item, restProps = _objectWithoutProperties8(_ref2, _excluded10);
      return /* @__PURE__ */ React32.createElement(Styled, restProps);
    };
  });
  var StyledListItemProfile = styled2("li", function(_ref3) {
    var $theme = _ref3.$theme;
    return {
      position: "relative",
      display: "flex",
      alignItems: "center",
      cursor: "pointer",
      paddingTop: $theme.sizing.scale300,
      paddingBottom: $theme.sizing.scale300,
      paddingRight: $theme.sizing.scale800,
      paddingLeft: $theme.sizing.scale800,
      transitionProperty: "color, background-color",
      transitionDuration: $theme.animation.timing200,
      transitionTimingFunction: $theme.animation.easeOutCurve,
      ":hover": {
        backgroundColor: $theme.colors.menuFillHover
      }
    };
  });
  StyledListItemProfile.displayName = "StyledListItemProfile";
  StyledListItemProfile.displayName = "StyledListItemProfile";
  var StyledProfileImgContainer = styled2("div", {
    width: "60px",
    height: "60px",
    display: "flex",
    justifyContent: "center",
    alignItems: "center"
  });
  StyledProfileImgContainer.displayName = "StyledProfileImgContainer";
  StyledProfileImgContainer.displayName = "StyledProfileImgContainer";
  var StyledProfileImg = styled2("img", {
    width: "100%",
    height: "100%",
    borderTopLeftRadius: "50%",
    borderTopRightRadius: "50%",
    borderBottomRightRadius: "50%",
    borderBottomLeftRadius: "50%"
  });
  StyledProfileImg.displayName = "StyledProfileImg";
  StyledProfileImg.displayName = "StyledProfileImg";
  var StyledProfileLabelsContainer = styled2("div", function(_ref4) {
    var _ref4$$theme = _ref4.$theme, direction = _ref4$$theme.direction, sizing3 = _ref4$$theme.sizing;
    return _objectSpread12({
      alignSelf: direction === "rtl" ? "flex-end" : "flex-start",
      display: "flex",
      flexDirection: "column"
    }, direction === "rtl" ? {
      marginRight: sizing3.scale600
    } : {
      marginLeft: sizing3.scale600
    });
  });
  StyledProfileLabelsContainer.displayName = "StyledProfileLabelsContainer";
  StyledProfileLabelsContainer.displayName = "StyledProfileLabelsContainer";
  var StyledProfileTitle = styled2("h6", function(_ref5) {
    var $theme = _ref5.$theme;
    return _objectSpread12(_objectSpread12({}, $theme.typography.font350), {}, {
      color: $theme.colors.contentPrimary,
      marginTop: 0,
      marginBottom: 0,
      marginLeft: 0,
      marginRight: 0
    });
  });
  StyledProfileTitle.displayName = "StyledProfileTitle";
  StyledProfileTitle.displayName = "StyledProfileTitle";
  var StyledProfileSubtitle = styled2("p", function(_ref6) {
    var $theme = _ref6.$theme;
    return _objectSpread12(_objectSpread12({}, $theme.typography.font200), {}, {
      color: $theme.colors.contentPrimary,
      marginTop: 0,
      marginBottom: 0,
      marginLeft: 0,
      marginRight: 0
    });
  });
  StyledProfileSubtitle.displayName = "StyledProfileSubtitle";
  StyledProfileSubtitle.displayName = "StyledProfileSubtitle";
  var StyledProfileBody = styled2("p", function(_ref7) {
    var $theme = _ref7.$theme;
    return _objectSpread12(_objectSpread12({}, $theme.typography.font100), {}, {
      color: $theme.colors.contentPrimary,
      marginTop: 0,
      marginBottom: 0,
      marginLeft: 0,
      marginRight: 0
    });
  });
  StyledProfileBody.displayName = "StyledProfileBody";
  StyledProfileBody.displayName = "StyledProfileBody";
  var StyledMenuDivider = styled2("li", function(_ref8) {
    var $theme = _ref8.$theme;
    return {
      color: $theme.colors.contentPrimary,
      borderBottomWidth: $theme.borders.border300.borderWidth,
      borderBottomStyle: $theme.borders.border300.borderStyle,
      borderBottomColor: $theme.borders.border300.borderColor,
      marginTop: $theme.sizing.scale100,
      marginBottom: $theme.sizing.scale100,
      marginLeft: $theme.sizing.scale500,
      marginRight: $theme.sizing.scale500,
      listStyle: "none",
      height: 0
    };
  });
  StyledMenuDivider.displayName = "StyledMenuDivider";
  StyledProfileBody.displayName = "StyledMenuDivider";

  // node_modules/baseui/esm/menu/option-list.js
  var React38 = __toESM(require_react());

  // node_modules/baseui/esm/menu/maybe-child-menu.js
  var React37 = __toESM(require_react());

  // node_modules/baseui/esm/menu/nested-menus.js
  var React33 = __toESM(require_react());
  var NestedMenuContext = /* @__PURE__ */ React33.createContext({
    addMenuToNesting: function addMenuToNesting() {
    },
    removeMenuFromNesting: function removeMenuFromNesting() {
    },
    getParentMenu: function getParentMenu() {
    },
    getChildMenu: function getChildMenu() {
    },
    nestedMenuHoverIndex: -1,
    isNestedMenuVisible: function isNestedMenuVisible() {
      return false;
    },
    mountRef: {
      current: null
    }
  });

  // node_modules/baseui/esm/popover/stateful-popover.js
  var React36 = __toESM(require_react());

  // node_modules/baseui/esm/popover/constants.js
  var PLACEMENT = {
    auto: "auto",
    topLeft: "topLeft",
    top: "top",
    topRight: "topRight",
    rightTop: "rightTop",
    right: "right",
    rightBottom: "rightBottom",
    bottomRight: "bottomRight",
    bottom: "bottom",
    bottomLeft: "bottomLeft",
    leftBottom: "leftBottom",
    left: "left",
    leftTop: "leftTop"
  };
  var TRIGGER_TYPE = {
    click: "click",
    hover: "hover"
  };
  var STATE_CHANGE_TYPE = {
    open: "open",
    close: "close"
  };
  var ACCESSIBILITY_TYPE = {
    none: "none",
    menu: "menu",
    tooltip: "tooltip"
  };
  var POPOVER_MARGIN = 8;
  var ARROW_SIZE = 6;
  var ANIMATE_OUT_TIME = 0;
  var ANIMATE_IN_TIME = 20;
  var ARROW_WIDTH = Math.ceil(Math.sqrt(Math.pow(ARROW_SIZE * 2, 2) / 2));

  // node_modules/baseui/esm/popover/stateful-container.js
  var React34 = __toESM(require_react());
  function _typeof9(obj) {
    "@babel/helpers - typeof";
    return _typeof9 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof9(obj);
  }
  function ownKeys13(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread13(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys13(Object(source2), true).forEach(function(key) {
        _defineProperty18(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys13(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _classCallCheck6(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties6(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass6(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties6(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties6(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _inherits6(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass)
      _setPrototypeOf7(subClass, superClass);
  }
  function _setPrototypeOf7(o, p) {
    _setPrototypeOf7 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf13(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf7(o, p);
  }
  function _createSuper6(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct6();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf6(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf6(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn6(this, result);
    };
  }
  function _possibleConstructorReturn6(self2, call) {
    if (call && (_typeof9(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized6(self2);
  }
  function _assertThisInitialized6(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct6() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf6(o) {
    _getPrototypeOf6 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf12(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf6(o);
  }
  function _defineProperty18(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var defaultStateReducer = function defaultStateReducer2(type, nextState) {
    return nextState;
  };
  var StatefulContainer = /* @__PURE__ */ function(_React$Component) {
    _inherits6(StatefulContainer2, _React$Component);
    var _super = _createSuper6(StatefulContainer2);
    function StatefulContainer2() {
      var _this;
      _classCallCheck6(this, StatefulContainer2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty18(_assertThisInitialized6(_this), "state", _objectSpread13({
        isOpen: false
      }, _this.props.initialState));
      _defineProperty18(_assertThisInitialized6(_this), "onBlur", function(e) {
        if (_this.props.onBlur) {
          _this.props.onBlur(e);
        }
        if (_this.props.focusLock || _this.props.autoFocus) {
          return;
        }
        _this.close();
      });
      _defineProperty18(_assertThisInitialized6(_this), "onClick", function(e) {
        if (_this.props.onClick) {
          _this.props.onClick(e);
        }
        if (_this.state.isOpen) {
          _this.close();
        } else {
          _this.open();
        }
      });
      _defineProperty18(_assertThisInitialized6(_this), "onClickOutside", function() {
        _this.close();
      });
      _defineProperty18(_assertThisInitialized6(_this), "onEsc", function() {
        _this.close();
      });
      _defineProperty18(_assertThisInitialized6(_this), "onFocus", function(e) {
        if (_this.props.onFocus) {
          _this.props.onFocus(e);
        }
        if (isFocusVisible(e)) {
          _this.open();
        }
      });
      _defineProperty18(_assertThisInitialized6(_this), "onMouseEnter", function(e) {
        if (_this.props.onMouseEnter) {
          _this.props.onMouseEnter(e);
        }
        _this.open();
      });
      _defineProperty18(_assertThisInitialized6(_this), "onMouseLeave", function(e) {
        if (_this.props.onMouseLeave) {
          _this.props.onMouseLeave(e);
        }
        _this.close();
      });
      _defineProperty18(_assertThisInitialized6(_this), "onContentClose", function() {
        _this.close();
      });
      _defineProperty18(_assertThisInitialized6(_this), "renderContent", function() {
        var content = _this.props.content;
        if (typeof content === "function") {
          return content({
            close: _this.onContentClose
          });
        }
        return content;
      });
      return _this;
    }
    _createClass6(StatefulContainer2, [{
      key: "open",
      value: function open() {
        this.internalSetState(STATE_CHANGE_TYPE.open, {
          isOpen: true
        });
        if (this.props.onOpen) {
          this.props.onOpen();
        }
      }
    }, {
      key: "close",
      value: function close() {
        this.internalSetState(STATE_CHANGE_TYPE.close, {
          isOpen: false
        });
        if (this.props.onClose) {
          this.props.onClose();
        }
      }
    }, {
      key: "internalSetState",
      value: function internalSetState(type, changes) {
        var stateReducer2 = this.props.stateReducer;
        if (typeof stateReducer2 !== "function") {
          this.setState(changes);
          return;
        }
        this.setState(function(prevState) {
          return stateReducer2(type, changes, prevState);
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props, accessibilityType = _this$props.accessibilityType, autoFocus = _this$props.autoFocus, animateOutTime = _this$props.animateOutTime, dismissOnClickOutside = _this$props.dismissOnClickOutside, dismissOnEsc = _this$props.dismissOnEsc, focusLock = _this$props.focusLock, ignoreBoundary = _this$props.ignoreBoundary, mountNode = _this$props.mountNode, onBlur5 = _this$props.onBlur, onClick = _this$props.onClick, onFocus5 = _this$props.onFocus, onMouseEnter = _this$props.onMouseEnter, onMouseLeave = _this$props.onMouseLeave, onMouseEnterDelay = _this$props.onMouseEnterDelay, onMouseLeaveDelay = _this$props.onMouseLeaveDelay, overrides = _this$props.overrides, placement = _this$props.placement, popperOptions = _this$props.popperOptions, renderAll = _this$props.renderAll, returnFocus = _this$props.returnFocus, showArrow = _this$props.showArrow, triggerType = _this$props.triggerType, popoverMargin = _this$props.popoverMargin, focusOptions = _this$props.focusOptions;
        var popoverProps = {
          accessibilityType,
          animateOutTime,
          autoFocus,
          content: this.renderContent,
          focusLock,
          ignoreBoundary,
          isOpen: this.state.isOpen,
          mountNode,
          onBlur: onBlur5,
          onClick,
          onFocus: onFocus5,
          onMouseEnter,
          onMouseLeave,
          onMouseEnterDelay,
          onMouseLeaveDelay,
          overrides,
          placement,
          popperOptions,
          renderAll,
          returnFocus,
          showArrow,
          triggerType,
          popoverMargin,
          focusOptions
        };
        if (dismissOnClickOutside) {
          popoverProps.onClickOutside = this.onClickOutside;
        }
        if (dismissOnEsc) {
          popoverProps.onEsc = this.onEsc;
        }
        if (triggerType === TRIGGER_TYPE.hover) {
          popoverProps.onBlur = this.onBlur;
          popoverProps.onFocus = this.onFocus;
          popoverProps.onMouseEnter = this.onMouseEnter;
          popoverProps.onMouseLeave = this.onMouseLeave;
        } else {
          popoverProps.onClick = this.onClick;
        }
        return this.props.children(popoverProps);
      }
    }]);
    return StatefulContainer2;
  }(React34.Component);
  _defineProperty18(StatefulContainer, "defaultProps", {
    accessibilityType: ACCESSIBILITY_TYPE.menu,
    ignoreBoundary: false,
    overrides: {},
    onMouseEnterDelay: 200,
    onMouseLeaveDelay: 200,
    placement: PLACEMENT.auto,
    popperOptions: {},
    showArrow: false,
    triggerType: TRIGGER_TYPE.click,
    dismissOnClickOutside: true,
    dismissOnEsc: true,
    stateReducer: defaultStateReducer,
    popoverMargin: POPOVER_MARGIN
  });
  var stateful_container_default = StatefulContainer;

  // node_modules/baseui/esm/popover/popover.js
  var React35 = __toESM(require_react());

  // node_modules/baseui/esm/popover/utils.js
  function ownKeys14(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread14(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys14(Object(source2), true).forEach(function(key) {
        _defineProperty19(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys14(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty19(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _slicedToArray13(arr, i) {
    return _arrayWithHoles12(arr) || _iterableToArrayLimit12(arr, i) || _unsupportedIterableToArray12(arr, i) || _nonIterableRest12();
  }
  function _nonIterableRest12() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray12(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray12(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray12(o, minLen);
  }
  function _arrayLikeToArray12(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit12(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles12(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  var OPPOSITE_POSITIONS = {
    top: "bottom",
    bottom: "top",
    right: "left",
    left: "right"
  };
  function getOppositePosition(position2) {
    return OPPOSITE_POSITIONS[position2];
  }
  function isVerticalPosition(position2) {
    return position2 === "top" || position2 === "bottom";
  }
  function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  function fromPopperPlacement(placement) {
    var popoverPlacement = placement.replace(/(top|bottom)-start$/, "$1Left").replace(/(top|bottom)-end$/, "$1Right").replace(/(left|right)-start$/, "$1Top").replace(/(left|right)-end$/, "$1Bottom");
    return PLACEMENT[popoverPlacement] || null;
  }
  function splitPlacement(placement) {
    var matches = placement.match(/^([a-z]+)([A-Z][a-z]+)?/) || [];
    return matches.slice(1, 3).filter(Boolean).map(function(s) {
      return s.toLowerCase();
    });
  }
  function getPopoverMarginStyles(arrowSize, placement, popoverMargin) {
    var _splitPlacement = splitPlacement(placement), _splitPlacement2 = _slicedToArray13(_splitPlacement, 1), position2 = _splitPlacement2[0];
    var opposite = getOppositePosition(position2);
    if (!opposite) {
      return null;
    }
    var property = "margin".concat(capitalize(opposite));
    return _defineProperty19({}, property, "".concat(arrowSize + popoverMargin, "px"));
  }
  function getStartPosition(offset2, placement, arrowSize, popoverMargin) {
    offset2 = _objectSpread14({}, offset2);
    var _splitPlacement3 = splitPlacement(placement), _splitPlacement4 = _slicedToArray13(_splitPlacement3, 1), position2 = _splitPlacement4[0];
    var margin = (arrowSize > 0 ? arrowSize : popoverMargin) * 2;
    if (isVerticalPosition(position2)) {
      offset2.top += position2 === "top" ? margin : -margin;
    } else {
      offset2.left += position2 === "left" ? margin : -margin;
    }
    return "translate3d(".concat(offset2.left, "px, ").concat(offset2.top, "px, 0)");
  }
  function getEndPosition(offset2) {
    return "translate3d(".concat(offset2.left, "px, ").concat(offset2.top, "px, 0)");
  }
  function getArrowPositionStyles(offsets, placement) {
    var _ref2;
    var _splitPlacement5 = splitPlacement(placement), _splitPlacement6 = _slicedToArray13(_splitPlacement5, 1), position2 = _splitPlacement6[0];
    var oppositePosition = getOppositePosition(position2);
    if (!oppositePosition) {
      return null;
    }
    var alignmentProperty = isVerticalPosition(position2) ? "left" : "top";
    return _ref2 = {}, _defineProperty19(_ref2, alignmentProperty, "".concat(offsets[alignmentProperty], "px")), _defineProperty19(_ref2, oppositePosition, "-".concat(ARROW_SIZE - 2, "px")), _ref2;
  }

  // node_modules/baseui/esm/popover/styled-components.js
  function ownKeys15(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread15(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys15(Object(source2), true).forEach(function(key) {
        _defineProperty20(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys15(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty20(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function getBodyStyles(props) {
    var $animationDuration = props.$animationDuration, $isOpen = props.$isOpen, $isAnimating = props.$isAnimating, $placement = props.$placement, $popoverOffset = props.$popoverOffset, $showArrow = props.$showArrow, $theme = props.$theme, $popoverMargin = props.$popoverMargin, $isHoverTrigger = props.$isHoverTrigger;
    return _objectSpread15(_objectSpread15({
      position: "absolute",
      top: 0,
      left: 0,
      backgroundColor: $theme.colors.backgroundTertiary,
      borderTopLeftRadius: $theme.borders.popoverBorderRadius,
      borderTopRightRadius: $theme.borders.popoverBorderRadius,
      borderBottomRightRadius: $theme.borders.popoverBorderRadius,
      borderBottomLeftRadius: $theme.borders.popoverBorderRadius,
      boxShadow: $theme.lighting.shadow600,
      transitionProperty: "opacity,transform",
      transitionDuration: $isAnimating ? $isOpen ? "0.1s" : "".concat($animationDuration, "ms") : "0s",
      transitionTimingFunction: $isOpen ? $theme.animation.easeOutCurve : $theme.animation.easeInCurve,
      opacity: $isAnimating && $isOpen ? 1 : 0,
      transform: $isAnimating && $isOpen ? getEndPosition($popoverOffset) : getStartPosition($popoverOffset, $placement, $showArrow ? ARROW_SIZE : 0, $popoverMargin)
    }, getPopoverMarginStyles($showArrow ? ARROW_SIZE : 0, $placement, $popoverMargin)), $isHoverTrigger ? {
      animationDuration: ".1s",
      animationName: {
        "0%": {
          pointerEvents: "none"
        },
        "99%": {
          pointerEvents: "none"
        },
        "100%": {
          pointerEvents: "auto"
        }
      }
    } : {});
  }
  var Body = styled2("div", getBodyStyles);
  Body.displayName = "Body";
  Body.displayName = "Body";
  function getArrowStyles(props) {
    var $arrowOffset = props.$arrowOffset, $placement = props.$placement, $theme = props.$theme;
    return _objectSpread15({
      backgroundColor: $theme.colors.backgroundTertiary,
      boxShadow: $theme.lighting.shadow600,
      width: "".concat(ARROW_WIDTH, "px"),
      height: "".concat(ARROW_WIDTH, "px"),
      transform: "rotate(45deg)",
      position: "absolute"
    }, getArrowPositionStyles($arrowOffset, $placement));
  }
  var Arrow = styled2("div", getArrowStyles);
  Arrow.displayName = "Arrow";
  Arrow.displayName = "Arrow";
  function getInnerStyles(_ref2) {
    var $theme = _ref2.$theme;
    return {
      backgroundColor: $theme.colors.backgroundTertiary,
      borderTopLeftRadius: $theme.borders.popoverBorderRadius,
      borderTopRightRadius: $theme.borders.popoverBorderRadius,
      borderBottomRightRadius: $theme.borders.popoverBorderRadius,
      borderBottomLeftRadius: $theme.borders.popoverBorderRadius,
      color: $theme.colors.contentPrimary,
      position: "relative"
    };
  }
  var Inner = styled2("div", getInnerStyles);
  Inner.displayName = "Inner";
  Inner.displayName = "Inner";
  var Padding = styled2("div", {
    paddingLeft: "12px",
    paddingTop: "12px",
    paddingRight: "12px",
    paddingBottom: "12px"
  });
  Padding.displayName = "Padding";
  Padding.displayName = "Padding";
  var Hidden2 = styled2("div", {
    display: "none"
  });
  Hidden2.displayName = "Hidden";
  Hidden2.displayName = "Hidden";

  // node_modules/baseui/esm/popover/default-props.js
  var baseDefaultProps = {
    accessibilityType: ACCESSIBILITY_TYPE.menu,
    focusLock: false,
    autoFocus: true,
    returnFocus: true,
    ignoreBoundary: false,
    overrides: {},
    onMouseEnterDelay: 200,
    onMouseLeaveDelay: 200,
    placement: PLACEMENT.auto,
    showArrow: false,
    triggerType: TRIGGER_TYPE.click,
    renderAll: false
  };
  var default_props_default = baseDefaultProps;

  // node_modules/baseui/esm/popover/popover.js
  function ownKeys16(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread16(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys16(Object(source2), true).forEach(function(key) {
        _defineProperty21(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys16(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _extends19() {
    _extends19 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends19.apply(this, arguments);
  }
  function _typeof10(obj) {
    "@babel/helpers - typeof";
    return _typeof10 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof10(obj);
  }
  function _classCallCheck7(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties7(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass7(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties7(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties7(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _inherits7(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass)
      _setPrototypeOf8(subClass, superClass);
  }
  function _setPrototypeOf8(o, p) {
    _setPrototypeOf8 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf13(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf8(o, p);
  }
  function _createSuper7(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct7();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf7(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf7(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn7(this, result);
    };
  }
  function _possibleConstructorReturn7(self2, call) {
    if (call && (_typeof10(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized7(self2);
  }
  function _assertThisInitialized7(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct7() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf7(o) {
    _getPrototypeOf7 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf12(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf7(o);
  }
  function _defineProperty21(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var PopoverInner = /* @__PURE__ */ function(_React$Component) {
    _inherits7(PopoverInner2, _React$Component);
    var _super = _createSuper7(PopoverInner2);
    function PopoverInner2() {
      var _this;
      _classCallCheck7(this, PopoverInner2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty21(_assertThisInitialized7(_this), "animateInTimer", void 0);
      _defineProperty21(_assertThisInitialized7(_this), "animateOutTimer", void 0);
      _defineProperty21(_assertThisInitialized7(_this), "animateOutCompleteTimer", void 0);
      _defineProperty21(_assertThisInitialized7(_this), "onMouseEnterTimer", void 0);
      _defineProperty21(_assertThisInitialized7(_this), "onMouseLeaveTimer", void 0);
      _defineProperty21(_assertThisInitialized7(_this), "anchorRef", /* @__PURE__ */ React35.createRef());
      _defineProperty21(_assertThisInitialized7(_this), "popperRef", /* @__PURE__ */ React35.createRef());
      _defineProperty21(_assertThisInitialized7(_this), "arrowRef", /* @__PURE__ */ React35.createRef());
      _defineProperty21(_assertThisInitialized7(_this), "state", _this.getDefaultState(_this.props));
      _defineProperty21(_assertThisInitialized7(_this), "animateIn", function() {
        if (_this.props.isOpen) {
          _this.setState({
            isAnimating: true
          });
        }
      });
      _defineProperty21(_assertThisInitialized7(_this), "animateOut", function() {
        if (!_this.props.isOpen) {
          _this.setState({
            isAnimating: true
          });
          _this.animateOutCompleteTimer = setTimeout(function() {
            _this.setState({
              isAnimating: false,
              placement: _this.props.placement
            });
          }, _this.props.animateOutTime || ANIMATE_OUT_TIME);
        }
      });
      _defineProperty21(_assertThisInitialized7(_this), "onAnchorClick", function(e) {
        if (_this.props.onClick) {
          _this.props.onClick(e);
        }
      });
      _defineProperty21(_assertThisInitialized7(_this), "onAnchorMouseEnter", function(e) {
        if (_this.onMouseLeaveTimer) {
          clearTimeout(_this.onMouseLeaveTimer);
        }
        _this.triggerOnMouseEnterWithDelay(e);
      });
      _defineProperty21(_assertThisInitialized7(_this), "onAnchorMouseLeave", function(e) {
        if (_this.onMouseEnterTimer) {
          clearTimeout(_this.onMouseEnterTimer);
        }
        _this.triggerOnMouseLeaveWithDelay(e);
      });
      _defineProperty21(_assertThisInitialized7(_this), "onPopoverMouseEnter", function() {
        if (_this.onMouseLeaveTimer) {
          clearTimeout(_this.onMouseLeaveTimer);
        }
      });
      _defineProperty21(_assertThisInitialized7(_this), "onPopoverMouseLeave", function(e) {
        _this.triggerOnMouseLeaveWithDelay(e);
      });
      _defineProperty21(_assertThisInitialized7(_this), "onPopperUpdate", function(normalizedOffsets, data) {
        var placement = fromPopperPlacement(data.placement) || PLACEMENT.top;
        _this.setState({
          arrowOffset: normalizedOffsets.arrow,
          popoverOffset: normalizedOffsets.popper,
          placement
        });
        _this.animateInTimer = setTimeout(_this.animateIn, ANIMATE_IN_TIME);
        return data;
      });
      _defineProperty21(_assertThisInitialized7(_this), "triggerOnMouseLeave", function(e) {
        if (_this.props.onMouseLeave) {
          _this.props.onMouseLeave(e);
        }
      });
      _defineProperty21(_assertThisInitialized7(_this), "triggerOnMouseEnter", function(e) {
        if (_this.props.onMouseEnter) {
          _this.props.onMouseEnter(e);
        }
      });
      _defineProperty21(_assertThisInitialized7(_this), "onDocumentClick", function(evt) {
        var target = evt.composedPath ? evt.composedPath()[0] : evt.target;
        var popper = _this.popperRef.current;
        var anchor = _this.anchorRef.current;
        if (!popper || popper === target || target instanceof Node && popper.contains(target)) {
          return;
        }
        if (!anchor || anchor === target || target instanceof Node && anchor.contains(target)) {
          return;
        }
        if (_this.props.onClickOutside) {
          _this.props.onClickOutside(evt);
        }
      });
      return _this;
    }
    _createClass7(PopoverInner2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.setState({
          isMounted: true
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        this.init(prevProps, prevState);
        if (this.props.accessibilityType !== ACCESSIBILITY_TYPE.tooltip && this.props.autoFocus && !this.state.autoFocusAfterPositioning && this.popperRef.current !== null && this.popperRef.current.getBoundingClientRect().top > 0) {
          this.setState({
            autoFocusAfterPositioning: true
          });
        }
        if (true) {
          if (!this.anchorRef.current) {
            console.warn("[baseui][Popover] ref has not been passed to the Popper's anchor element.\n              See how to pass the ref to an anchor element in the Popover example\n              https://baseweb.design/components/popover/#anchor-ref-handling-example");
          }
        }
      }
    }, {
      key: "init",
      value: function init(prevProps, prevState) {
        if (this.props.isOpen !== prevProps.isOpen || this.state.isMounted !== prevState.isMounted || this.state.isLayerMounted !== prevState.isLayerMounted) {
          if (this.props.isOpen && this.state.isLayerMounted) {
            this.clearTimers();
            return;
          }
          if (!this.props.isOpen && prevProps.isOpen) {
            this.animateOutTimer = setTimeout(this.animateOut, 20);
            return;
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.clearTimers();
      }
    }, {
      key: "getDefaultState",
      value: function getDefaultState(props) {
        return {
          isAnimating: false,
          arrowOffset: {
            left: 0,
            top: 0
          },
          popoverOffset: {
            left: 0,
            top: 0
          },
          placement: props.placement,
          isMounted: false,
          isLayerMounted: false,
          autoFocusAfterPositioning: false
        };
      }
    }, {
      key: "clearTimers",
      value: function clearTimers() {
        [this.animateInTimer, this.animateOutTimer, this.animateOutCompleteTimer, this.onMouseEnterTimer, this.onMouseLeaveTimer].forEach(function(timerId) {
          if (timerId) {
            clearTimeout(timerId);
          }
        });
      }
    }, {
      key: "triggerOnMouseLeaveWithDelay",
      value: function triggerOnMouseLeaveWithDelay(e) {
        var _this2 = this;
        var onMouseLeaveDelay = this.props.onMouseLeaveDelay;
        if (onMouseLeaveDelay) {
          this.onMouseLeaveTimer = setTimeout(function() {
            return _this2.triggerOnMouseLeave(e);
          }, onMouseLeaveDelay);
          return;
        }
        this.triggerOnMouseLeave(e);
      }
    }, {
      key: "triggerOnMouseEnterWithDelay",
      value: function triggerOnMouseEnterWithDelay(e) {
        var _this3 = this;
        var onMouseEnterDelay = this.props.onMouseEnterDelay;
        if (onMouseEnterDelay) {
          this.onMouseEnterTimer = setTimeout(function() {
            return _this3.triggerOnMouseEnter(e);
          }, onMouseEnterDelay);
          return;
        }
        this.triggerOnMouseEnter(e);
      }
    }, {
      key: "isClickTrigger",
      value: function isClickTrigger() {
        return this.props.triggerType === TRIGGER_TYPE.click;
      }
    }, {
      key: "isHoverTrigger",
      value: function isHoverTrigger() {
        return this.props.triggerType === TRIGGER_TYPE.hover;
      }
    }, {
      key: "isAccessibilityTypeMenu",
      value: function isAccessibilityTypeMenu() {
        return this.props.accessibilityType === ACCESSIBILITY_TYPE.menu;
      }
    }, {
      key: "isAccessibilityTypeTooltip",
      value: function isAccessibilityTypeTooltip() {
        return this.props.accessibilityType === ACCESSIBILITY_TYPE.tooltip;
      }
    }, {
      key: "getAnchorIdAttr",
      value: function getAnchorIdAttr() {
        var popoverId = this.getPopoverIdAttr();
        return popoverId ? "".concat(popoverId, "__anchor") : null;
      }
    }, {
      key: "getPopoverIdAttr",
      value: function getPopoverIdAttr() {
        return this.props.id || null;
      }
    }, {
      key: "getAnchorProps",
      value: function getAnchorProps() {
        var isOpen = this.props.isOpen;
        var anchorProps = {
          ref: this.anchorRef
        };
        var popoverId = this.getPopoverIdAttr();
        if (this.isAccessibilityTypeMenu()) {
          var relationAttr = this.isClickTrigger() ? "aria-controls" : "aria-owns";
          anchorProps[relationAttr] = isOpen ? popoverId : null;
          anchorProps["aria-haspopup"] = true;
          anchorProps["aria-expanded"] = Boolean(isOpen);
        } else if (this.isAccessibilityTypeTooltip()) {
          anchorProps.id = this.getAnchorIdAttr();
          anchorProps["aria-describedby"] = isOpen ? popoverId : null;
        }
        if (this.isHoverTrigger()) {
          anchorProps.onMouseEnter = this.onAnchorMouseEnter;
          anchorProps.onMouseLeave = this.onAnchorMouseLeave;
          anchorProps.onBlur = this.props.onBlur;
          anchorProps.onFocus = this.props.onFocus;
        } else {
          anchorProps.onClick = this.onAnchorClick;
        }
        return anchorProps;
      }
    }, {
      key: "getPopoverBodyProps",
      value: function getPopoverBodyProps() {
        var bodyProps = {};
        var popoverId = this.getPopoverIdAttr();
        if (this.isAccessibilityTypeMenu()) {
          bodyProps.id = popoverId;
        } else if (this.isAccessibilityTypeTooltip()) {
          bodyProps.id = popoverId;
          bodyProps.role = "tooltip";
        }
        if (this.isHoverTrigger()) {
          bodyProps.onMouseEnter = this.onPopoverMouseEnter;
          bodyProps.onMouseLeave = this.onPopoverMouseLeave;
        }
        return bodyProps;
      }
    }, {
      key: "getSharedProps",
      value: function getSharedProps3() {
        var _this$props = this.props, isOpen = _this$props.isOpen, showArrow = _this$props.showArrow, _this$props$popoverMa = _this$props.popoverMargin, popoverMargin = _this$props$popoverMa === void 0 ? POPOVER_MARGIN : _this$props$popoverMa;
        var _this$state = this.state, isAnimating = _this$state.isAnimating, arrowOffset = _this$state.arrowOffset, popoverOffset = _this$state.popoverOffset, placement = _this$state.placement;
        return {
          $showArrow: !!showArrow,
          $arrowOffset: arrowOffset,
          $popoverOffset: popoverOffset,
          $placement: placement,
          $isAnimating: isAnimating,
          $animationDuration: this.props.animateOutTime || ANIMATE_OUT_TIME,
          $isOpen: isOpen,
          $popoverMargin: popoverMargin,
          $isHoverTrigger: this.isHoverTrigger()
        };
      }
    }, {
      key: "getAnchorFromChildren",
      value: function getAnchorFromChildren() {
        var children2 = this.props.children;
        var childArray = React35.Children.toArray(children2);
        if (childArray.length !== 1) {
          console.error("[baseui] Exactly 1 child must be passed to Popover/Tooltip, found ".concat(childArray.length, " children"));
        }
        return childArray[0];
      }
    }, {
      key: "renderAnchor",
      value: function renderAnchor() {
        var anchor = this.getAnchorFromChildren();
        if (!anchor) {
          return null;
        }
        var isValidElement5 = /* @__PURE__ */ React35.isValidElement(anchor);
        var anchorProps = this.getAnchorProps();
        if (_typeof10(anchor) === "object" && isValidElement5) {
          return /* @__PURE__ */ React35.cloneElement(anchor, anchorProps);
        }
        return /* @__PURE__ */ React35.createElement("span", _extends19({
          key: "popover-anchor"
        }, anchorProps), anchor);
      }
    }, {
      key: "renderPopover",
      value: function renderPopover(renderedContent) {
        var _this$props2 = this.props, showArrow = _this$props2.showArrow, _this$props2$override = _this$props2.overrides, overrides = _this$props2$override === void 0 ? {} : _this$props2$override;
        var ArrowOverride = overrides.Arrow, BodyOverride = overrides.Body, InnerOverride = overrides.Inner;
        var Arrow2 = getOverride(ArrowOverride) || Arrow;
        var Body2 = getOverride(BodyOverride) || Body;
        var Inner2 = getOverride(InnerOverride) || Inner;
        var sharedProps = this.getSharedProps();
        var bodyProps = this.getPopoverBodyProps();
        return /* @__PURE__ */ React35.createElement(Body2, _extends19({
          key: "popover-body",
          ref: this.popperRef,
          "data-baseweb": this.props["data-baseweb"] || "popover"
        }, bodyProps, sharedProps, getOverrideProps(BodyOverride)), showArrow ? /* @__PURE__ */ React35.createElement(Arrow2, _extends19({
          key: "popover-arrow",
          ref: this.arrowRef
        }, sharedProps, getOverrideProps(ArrowOverride))) : null, /* @__PURE__ */ React35.createElement(Inner2, _extends19({}, sharedProps, getOverrideProps(InnerOverride)), renderedContent));
      }
    }, {
      key: "renderContent",
      value: function renderContent() {
        var content = this.props.content;
        return typeof content === "function" ? content() : content;
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;
        var mountedAndOpen = this.state.isMounted && (this.props.isOpen || this.state.isAnimating);
        var rendered = [this.renderAnchor()];
        var renderedContent = mountedAndOpen || this.props.renderAll ? this.renderContent() : null;
        var defaultPopperOptions = {
          modifiers: {
            preventOverflow: {
              enabled: !this.props.ignoreBoundary,
              padding: 0
            }
          }
        };
        if (renderedContent) {
          if (mountedAndOpen) {
            rendered.push(/* @__PURE__ */ React35.createElement(Layer, {
              key: "new-layer",
              mountNode: this.props.mountNode,
              onEscape: this.props.onEsc,
              onDocumentClick: this.isHoverTrigger() ? void 0 : this.onDocumentClick,
              isHoverLayer: this.isHoverTrigger(),
              onMount: function onMount() {
                return _this4.setState({
                  isLayerMounted: true
                });
              },
              onUnmount: function onUnmount() {
                return _this4.setState({
                  isLayerMounted: false
                });
              }
            }, /* @__PURE__ */ React35.createElement(tether_default, {
              anchorRef: this.anchorRef.current,
              arrowRef: this.arrowRef.current,
              popperRef: this.popperRef.current,
              popperOptions: _objectSpread16(_objectSpread16({}, defaultPopperOptions), this.props.popperOptions),
              onPopperUpdate: this.onPopperUpdate,
              placement: this.state.placement
            }, this.props.focusLock && this.props.accessibilityType !== ACCESSIBILITY_TYPE.tooltip ? /* @__PURE__ */ React35.createElement(es2015_default2, {
              disabled: !this.props.focusLock,
              noFocusGuards: false,
              returnFocus: !this.isHoverTrigger() && this.props.returnFocus,
              autoFocus: this.state.autoFocusAfterPositioning,
              crossFrame: false,
              focusOptions: this.props.focusOptions
            }, this.renderPopover(renderedContent)) : /* @__PURE__ */ React35.createElement(MoveFocusInside_default, {
              disabled: !this.props.autoFocus || !this.state.autoFocusAfterPositioning
            }, this.renderPopover(renderedContent)))));
          } else {
            rendered.push(/* @__PURE__ */ React35.createElement(Hidden2, {
              key: "hidden-layer"
            }, renderedContent));
          }
        }
        return rendered;
      }
    }]);
    return PopoverInner2;
  }(React35.Component);
  _defineProperty21(PopoverInner, "defaultProps", default_props_default);
  var Popover = function Popover2(props) {
    var innerRef = props.innerRef;
    var gID = useUID();
    return /* @__PURE__ */ React35.createElement(PopoverInner, _extends19({
      id: props.id || gID,
      ref: innerRef
    }, props));
  };
  Popover.defaultProps = default_props_default;
  var popover_default = Popover;

  // node_modules/baseui/esm/popover/stateful-popover.js
  var _excluded11 = ["children"];
  function _objectWithoutProperties9(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose11(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose11(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function StatefulPopover(props) {
    var children2 = props.children, restProps = _objectWithoutProperties9(props, _excluded11);
    return /* @__PURE__ */ React36.createElement(stateful_container_default, restProps, function(popoverProps) {
      return /* @__PURE__ */ React36.createElement(popover_default, popoverProps, children2);
    });
  }
  StatefulPopover.defaultProps = {
    accessibilityType: ACCESSIBILITY_TYPE.menu,
    ignoreBoundary: false,
    overrides: {},
    onMouseEnterDelay: 200,
    onMouseLeaveDelay: 200,
    placement: PLACEMENT.auto,
    showArrow: false,
    triggerType: TRIGGER_TYPE.click,
    dismissOnClickOutside: true,
    dismissOnEsc: true,
    stateReducer: function stateReducer(_, nextState) {
      return nextState;
    },
    popoverMargin: POPOVER_MARGIN
  };
  var stateful_popover_default = StatefulPopover;

  // node_modules/baseui/esm/menu/maybe-child-menu.js
  function _extends20() {
    _extends20 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends20.apply(this, arguments);
  }
  function _slicedToArray14(arr, i) {
    return _arrayWithHoles13(arr) || _iterableToArrayLimit13(arr, i) || _unsupportedIterableToArray13(arr, i) || _nonIterableRest13();
  }
  function _nonIterableRest13() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray13(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray13(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray13(o, minLen);
  }
  function _arrayLikeToArray13(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit13(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles13(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  var MaybeChildMenu = function MaybeChildMenu2(props) {
    if (!props.getChildMenu) {
      return props.children;
    }
    var ChildMenu = props.getChildMenu(props.item);
    if (!ChildMenu) {
      return props.children;
    }
    var _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides;
    var _getOverrides = getOverrides(overrides.ChildMenuPopover, popover_default), _getOverrides2 = _slicedToArray14(_getOverrides, 2), PopoverOverride = _getOverrides2[0], popoverProps = _getOverrides2[1];
    return /* @__PURE__ */ React37.createElement(NestedMenuContext.Consumer, null, function(ctx) {
      return /* @__PURE__ */ React37.createElement(PopoverOverride, _extends20({
        focusLock: false,
        autoFocus: false,
        isOpen: props.isOpen,
        renderAll: props.renderAll,
        content: ChildMenu,
        ignoreBoundary: true,
        mountNode: ctx.mountRef.current ? ctx.mountRef.current : void 0,
        onClick: props.onClick,
        onMouseEnterDelay: 30,
        onMouseLeaveDelay: 30,
        onEsc: props.resetParentMenu,
        placement: "rightTop"
      }, popoverProps, {
        overrides: mergeOverrides({
          Body: {
            props: {
              onKeyDown: function onKeyDown2(e) {
                if (e.keyCode === 9) {
                  e.preventDefault();
                }
              }
            }
          }
        }, popoverProps.overrides)
      }), props.children);
    });
  };
  var maybe_child_menu_default = MaybeChildMenu;

  // node_modules/baseui/esm/menu/option-list.js
  var _excluded12 = ["getChildMenu", "getItemLabel", "item", "onClick", "onMouseEnter", "overrides", "renderHrefAsAnchor", "resetMenu", "size", "$isHighlighted", "renderAll"];
  function ownKeys17(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread17(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys17(Object(source2), true).forEach(function(key) {
        _defineProperty22(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys17(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty22(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _extends21() {
    _extends21 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends21.apply(this, arguments);
  }
  function _slicedToArray15(arr, i) {
    return _arrayWithHoles14(arr) || _iterableToArrayLimit14(arr, i) || _unsupportedIterableToArray14(arr, i) || _nonIterableRest14();
  }
  function _nonIterableRest14() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray14(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray14(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray14(o, minLen);
  }
  function _arrayLikeToArray14(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit14(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles14(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _objectWithoutProperties10(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose12(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose12(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function OptionList(props, ref) {
    var getChildMenu3 = props.getChildMenu, _props$getItemLabel = props.getItemLabel, getItemLabel = _props$getItemLabel === void 0 ? function(item2) {
      return item2 ? item2.label : "";
    } : _props$getItemLabel, item = props.item, _props$onClick = props.onClick, onClick = _props$onClick === void 0 ? function() {
    } : _props$onClick, _props$onMouseEnter = props.onMouseEnter, onMouseEnter = _props$onMouseEnter === void 0 ? function() {
    } : _props$onMouseEnter, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, _props$renderHrefAsAn = props.renderHrefAsAnchor, renderHrefAsAnchor = _props$renderHrefAsAn === void 0 ? true : _props$renderHrefAsAn, _props$resetMenu = props.resetMenu, resetMenu = _props$resetMenu === void 0 ? function() {
    } : _props$resetMenu, _props$size = props.size, size = _props$size === void 0 ? OPTION_LIST_SIZE.default : _props$size, $isHighlighted = props.$isHighlighted, renderAll = props.renderAll, restProps = _objectWithoutProperties10(props, _excluded12);
    var _getOverrides = getOverrides(overrides.ListItem, StyledListItem), _getOverrides2 = _slicedToArray15(_getOverrides, 2), ListItem2 = _getOverrides2[0], listItemProps = _getOverrides2[1];
    var _getOverrides3 = getOverrides(overrides.ListItemAnchor, StyledListItemAnchor), _getOverrides4 = _slicedToArray15(_getOverrides3, 2), ListItemAnchor = _getOverrides4[0], listItemAnchorProps = _getOverrides4[1];
    var getItem = function getItem2(item2) {
      if (item2.href && renderHrefAsAnchor) {
        return /* @__PURE__ */ React38.createElement(ListItemAnchor, _extends21({
          $item: item2,
          href: item2.href
        }, listItemAnchorProps), getItemLabel(item2));
      } else {
        return /* @__PURE__ */ React38.createElement(React38.Fragment, null, getItemLabel(item2));
      }
    };
    return /* @__PURE__ */ React38.createElement(LocaleContext.Consumer, null, function(locale13) {
      return /* @__PURE__ */ React38.createElement(maybe_child_menu_default, {
        getChildMenu: getChildMenu3,
        isOpen: !!$isHighlighted,
        item,
        resetParentMenu: resetMenu,
        renderAll,
        onClick,
        overrides
      }, /* @__PURE__ */ React38.createElement(ListItem2, _extends21({
        ref,
        "aria-label": getChildMenu3 && getChildMenu3(item) ? locale13.menu.parentMenuItemAriaLabel : null,
        item,
        onClick,
        onMouseEnter,
        $size: size,
        $isHighlighted
      }, restProps, listItemProps), getItem(_objectSpread17({
        isHighlighted: $isHighlighted
      }, item))));
    });
  }
  function areEqualShallow(a, b) {
    if (!a || !b)
      return false;
    for (var key in a) {
      if (a[key] !== b[key]) {
        return false;
      }
    }
    return true;
  }
  function compare(prevProps, nextProps) {
    return prevProps.$isHighlighted === nextProps.$isHighlighted && prevProps.$isFocused === nextProps.$isFocused && areEqualShallow(prevProps.item, nextProps.item) && areEqualShallow(prevProps.overrides, nextProps.overrides) && prevProps.size === nextProps.size && prevProps.getItemLabel === nextProps.getItemLabel && prevProps.getChildMenu === nextProps.getChildMenu && prevProps.resetMenu === nextProps.resetMenu;
  }
  var forwarded = /* @__PURE__ */ React38.forwardRef(OptionList);
  forwarded.displayName = "OptionList";
  var option_list_default = /* @__PURE__ */ React38.memo(forwarded, compare);

  // node_modules/baseui/esm/menu/menu.js
  var _excluded13 = ["disabled", "isFocused", "isHighlighted", "resetMenu"];
  function _objectWithoutProperties11(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose13(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose13(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _extends22() {
    _extends22 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends22.apply(this, arguments);
  }
  function _slicedToArray16(arr, i) {
    return _arrayWithHoles15(arr) || _iterableToArrayLimit15(arr, i) || _unsupportedIterableToArray15(arr, i) || _nonIterableRest15();
  }
  function _nonIterableRest15() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray15(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray15(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray15(o, minLen);
  }
  function _arrayLikeToArray15(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit15(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles15(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function Menu2(props) {
    var _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, _props$ariaLabel = props["aria-label"], ariaLabel = _props$ariaLabel === void 0 ? "Menu" : _props$ariaLabel, _props$rootRef = props.rootRef, rootRef = _props$rootRef === void 0 ? /* @__PURE__ */ React39.createRef() : _props$rootRef, _props$focusMenu = props.focusMenu, focusMenu = _props$focusMenu === void 0 ? function() {
    } : _props$focusMenu, _props$unfocusMenu = props.unfocusMenu, unfocusMenu = _props$unfocusMenu === void 0 ? function() {
    } : _props$unfocusMenu, _props$handleMouseLea = props.handleMouseLeave, handleMouseLeave = _props$handleMouseLea === void 0 ? function() {
    } : _props$handleMouseLea, _props$handleKeyDown = props.handleKeyDown, handleKeyDown2 = _props$handleKeyDown === void 0 ? function(event) {
    } : _props$handleKeyDown, _props$renderAll = props.renderAll, renderAll = _props$renderAll === void 0 ? false : _props$renderAll;
    var _React$useState = React39.useState(false), _React$useState2 = _slicedToArray16(_React$useState, 2), focusVisible = _React$useState2[0], setFocusVisible = _React$useState2[1];
    var handleFocus = function handleFocus2(event) {
      if (isFocusVisible(event)) {
        setFocusVisible(true);
      }
    };
    var handleBlur = function handleBlur2(event) {
      if (focusVisible !== false) {
        setFocusVisible(false);
      }
    };
    var _getOverrides = getOverrides(overrides.List, StyledList), _getOverrides2 = _slicedToArray16(_getOverrides, 2), List = _getOverrides2[0], listProps = _getOverrides2[1];
    var _getOverrides3 = getOverrides(overrides.Option, option_list_default), _getOverrides4 = _slicedToArray16(_getOverrides3, 2), Option = _getOverrides4[0], optionProps = _getOverrides4[1];
    var _getOverrides5 = getOverrides(overrides.EmptyState, StyledEmptyState), _getOverrides6 = _slicedToArray16(_getOverrides5, 2), EmptyState = _getOverrides6[0], emptyStateProps = _getOverrides6[1];
    var _getOverrides7 = getOverrides(overrides.OptgroupHeader, StyledOptgroupHeader), _getOverrides8 = _slicedToArray16(_getOverrides7, 2), OptgroupHeader = _getOverrides8[0], optgroupHeaderProps = _getOverrides8[1];
    var _getOverrides9 = getOverrides(overrides.MenuDivider, StyledMenuDivider), _getOverrides10 = _slicedToArray16(_getOverrides9, 2), MenuDivider = _getOverrides10[0], menuDividerProps = _getOverrides10[1];
    var groupedItems = Array.isArray(props.items) ? {
      __ungrouped: props.items
    } : props.items;
    var optgroups = Object.keys(groupedItems);
    var _optgroups$reduce = optgroups.reduce(function(_ref2, optgroup) {
      var _ref22 = _slicedToArray16(_ref2, 2), els = _ref22[0], itemIndex = _ref22[1];
      if (optgroup !== "__ungrouped") {
        els.push(/* @__PURE__ */ React39.createElement(OptgroupHeader, _extends22({
          key: optgroup
        }, optgroupHeaderProps), optgroup));
      }
      var groupItems = groupedItems[optgroup].map(function(item, index2) {
        itemIndex = itemIndex + 1;
        var _props$getRequiredIte = props.getRequiredItemProps, getRequiredItemProps2 = _props$getRequiredIte === void 0 ? function(item2, index3) {
          return {};
        } : _props$getRequiredIte;
        if (item.divider === true) {
          return /* @__PURE__ */ React39.createElement(MenuDivider, menuDividerProps);
        }
        var _getRequiredItemProps = getRequiredItemProps2(item, itemIndex), disabled = _getRequiredItemProps.disabled, isFocused = _getRequiredItemProps.isFocused, isHighlighted = _getRequiredItemProps.isHighlighted, _getRequiredItemProps2 = _getRequiredItemProps.resetMenu, resetMenu = _getRequiredItemProps2 === void 0 ? function() {
        } : _getRequiredItemProps2, restProps = _objectWithoutProperties11(_getRequiredItemProps, _excluded13);
        return /* @__PURE__ */ React39.createElement(Option, _extends22({
          renderAll,
          key: itemIndex,
          item,
          overrides: props.overrides,
          resetMenu,
          role: "option",
          $disabled: disabled,
          $isFocused: isFocused,
          $isHighlighted: isHighlighted,
          "aria-disabled": disabled,
          "aria-selected": isHighlighted && isFocused
        }, restProps, optionProps));
      });
      return [els.concat(groupItems), itemIndex];
    }, [[], -1]), _optgroups$reduce2 = _slicedToArray16(_optgroups$reduce, 1), elements = _optgroups$reduce2[0];
    var isEmpty2 = optgroups.every(function(optgroup) {
      return !groupedItems[optgroup].length;
    });
    return /* @__PURE__ */ React39.createElement(LocaleContext.Consumer, null, function(locale13) {
      return /* @__PURE__ */ React39.createElement(List, _extends22({
        "aria-activedescendant": props.activedescendantId || null,
        role: "listbox",
        "aria-label": ariaLabel,
        ref: rootRef,
        onMouseEnter: focusMenu,
        onMouseLeave: handleMouseLeave,
        onMouseOver: focusMenu,
        onFocus: forkFocus({
          onFocus: focusMenu
        }, handleFocus),
        onBlur: forkBlur({
          onBlur: unfocusMenu
        }, handleBlur),
        onKeyDown: function onKeyDown2(event) {
          if (props.isFocused) {
            handleKeyDown2(event);
          }
        },
        tabIndex: 0,
        "data-baseweb": "menu",
        $isFocusVisible: focusVisible
      }, listProps), isEmpty2 ? /* @__PURE__ */ React39.createElement(EmptyState, _extends22({
        "aria-live": "polite",
        "aria-atomic": true
      }, emptyStateProps), props.noResultsMsg || locale13.menu.noResultsMsg) : elements);
    });
  }

  // node_modules/baseui/esm/menu/stateful-container.js
  var React40 = __toESM(require_react());

  // node_modules/baseui/esm/menu/utils.js
  function scrollItemIntoView(child, parent2, isFirst, isLast) {
    var scrollAlignInView = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "auto";
    if (!child)
      return;
    var childRect = child.getBoundingClientRect();
    var parentRect = parent2.getBoundingClientRect();
    if (childRect.bottom > parentRect.bottom) {
      if (isLast) {
        parent2.scrollTop = parent2.scrollHeight - parentRect.height;
      } else {
        var targetBottom = child.offsetTop + childRect.height;
        parent2.scrollTop = targetBottom - (scrollAlignInView === "center" ? Math.round((parentRect.height + childRect.height) / 2) : parentRect.height);
      }
    } else if (childRect.top < parentRect.top) {
      if (isFirst) {
        parent2.scrollTop = 0;
      } else {
        parent2.scrollTop = child.offsetTop - (scrollAlignInView === "center" ? Math.round((parentRect.height - childRect.height) / 2) : 0);
      }
    }
  }

  // node_modules/baseui/esm/menu/stateful-container.js
  function _typeof11(obj) {
    "@babel/helpers - typeof";
    return _typeof11 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof11(obj);
  }
  var _excluded14 = ["disabled"];
  var _excluded23 = ["initialState", "stateReducer", "children", "onItemSelect", "addMenuToNesting", "removeMenuFromNesting", "getParentMenu", "getChildMenu", "forceHighlight"];
  function _extends23() {
    _extends23 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends23.apply(this, arguments);
  }
  function _objectWithoutProperties12(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose14(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose14(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function ownKeys18(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread18(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys18(Object(source2), true).forEach(function(key) {
        _defineProperty23(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys18(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _classCallCheck8(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties8(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass8(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties8(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties8(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _inherits8(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass)
      _setPrototypeOf9(subClass, superClass);
  }
  function _setPrototypeOf9(o, p) {
    _setPrototypeOf9 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf13(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf9(o, p);
  }
  function _createSuper8(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct8();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf8(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf8(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn8(this, result);
    };
  }
  function _possibleConstructorReturn8(self2, call) {
    if (call && (_typeof11(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized8(self2);
  }
  function _assertThisInitialized8(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct8() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf8(o) {
    _getPrototypeOf8 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf12(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf8(o);
  }
  function _defineProperty23(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var DEFAULT_PROPS = {
    initialState: {
      highlightedIndex: -1,
      isFocused: false
    },
    typeAhead: true,
    keyboardControlNode: {
      current: null
    },
    stateReducer: function(changeType, changes) {
      return changes;
    },
    onItemSelect: function onItemSelect() {
    },
    getRequiredItemProps: function getRequiredItemProps() {
      return {};
    },
    children: function children() {
      return null;
    },
    addMenuToNesting: function addMenuToNesting2() {
    },
    removeMenuFromNesting: function removeMenuFromNesting2() {
    },
    getParentMenu: function getParentMenu2() {
    },
    getChildMenu: function getChildMenu2() {
    },
    nestedMenuHoverIndex: -1,
    isNestedMenuVisible: function isNestedMenuVisible2() {
      return false;
    },
    forceHighlight: false
  };
  var MenuStatefulContainerInner = /* @__PURE__ */ function(_React$Component) {
    _inherits8(MenuStatefulContainerInner2, _React$Component);
    var _super = _createSuper8(MenuStatefulContainerInner2);
    function MenuStatefulContainerInner2() {
      var _this;
      _classCallCheck8(this, MenuStatefulContainerInner2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty23(_assertThisInitialized8(_this), "state", _objectSpread18(_objectSpread18({}, _this.constructor.defaultProps.initialState), _this.props.initialState));
      _defineProperty23(_assertThisInitialized8(_this), "rootRef", /* @__PURE__ */ React40.createRef());
      _defineProperty23(_assertThisInitialized8(_this), "keyboardControlNode", _this.props.keyboardControlNode.current);
      _defineProperty23(_assertThisInitialized8(_this), "refList", []);
      _defineProperty23(_assertThisInitialized8(_this), "optionIds", []);
      _defineProperty23(_assertThisInitialized8(_this), "typeAheadChars", "");
      _defineProperty23(_assertThisInitialized8(_this), "typeAheadTimeOut", null);
      _defineProperty23(_assertThisInitialized8(_this), "onKeyDown", function(event) {
        switch (event.key) {
          case KEY_STRINGS.ArrowUp:
          case KEY_STRINGS.ArrowDown:
          case KEY_STRINGS.ArrowLeft:
          case KEY_STRINGS.ArrowRight:
          case KEY_STRINGS.Home:
          case KEY_STRINGS.End:
            _this.handleArrowKey(event);
            break;
          case KEY_STRINGS.Enter:
            if (event.keyCode === 229) {
              break;
            }
            _this.handleEnterKey(event);
            break;
          default:
            if (_this.props.typeAhead) {
              clearTimeout(_this.typeAheadTimeOut);
              _this.handleAlphaDown(event);
            }
            break;
        }
      });
      _defineProperty23(_assertThisInitialized8(_this), "handleAlphaDown", function(event) {
        var rootRef = _this.props.rootRef ? _this.props.rootRef : _this.rootRef;
        var prevIndex = _this.state.highlightedIndex;
        _this.typeAheadChars += event.key;
        _this.typeAheadTimeOut = setTimeout(function() {
          _this.typeAheadChars = "";
        }, 500);
        var nextIndex2 = prevIndex;
        var list = _this.getItems();
        if (list.length === 0 || !("label" in list[0]))
          return;
        var notMatch = true;
        for (var n = 0; n < list.length; n++) {
          var label = list[n].label;
          if (label && label.toUpperCase && label.toUpperCase().indexOf(_this.typeAheadChars.toUpperCase()) === 0) {
            nextIndex2 = n;
            notMatch = false;
            break;
          }
        }
        if (notMatch) {
          for (var _n = 0; _n < list.length; _n++) {
            var _label = list[_n].label;
            if (_label && _label.toUpperCase && _label.toUpperCase().indexOf(_this.typeAheadChars.toUpperCase()) > 0) {
              nextIndex2 = _n;
              break;
            }
          }
        }
        _this.internalSetState(STATE_CHANGE_TYPES.character, {
          highlightedIndex: nextIndex2
        });
        if (_this.refList[nextIndex2]) {
          scrollItemIntoView(_this.refList[nextIndex2].current, rootRef.current, nextIndex2 === 0, nextIndex2 === list.length - 1);
        }
      });
      _defineProperty23(_assertThisInitialized8(_this), "handleArrowKey", function(event) {
        var rootRef = _this.props.rootRef ? _this.props.rootRef : _this.rootRef;
        var prevIndex = _this.state.highlightedIndex;
        var nextIndex2 = prevIndex;
        if (event.key === KEY_STRINGS.ArrowUp) {
          event.preventDefault();
          nextIndex2 = Math.max(0, prevIndex - 1);
          _this.internalSetState(STATE_CHANGE_TYPES.moveUp, {
            highlightedIndex: nextIndex2
          });
        } else if (event.key === KEY_STRINGS.ArrowDown) {
          event.preventDefault();
          nextIndex2 = Math.min(prevIndex + 1, _this.getItems().length - 1);
          _this.internalSetState(STATE_CHANGE_TYPES.moveDown, {
            highlightedIndex: nextIndex2
          });
        } else if (event.key === KEY_STRINGS.Home) {
          event.preventDefault();
          nextIndex2 = 0;
          _this.internalSetState(STATE_CHANGE_TYPES.moveUp, {
            highlightedIndex: nextIndex2
          });
        } else if (event.key === KEY_STRINGS.End) {
          event.preventDefault();
          nextIndex2 = _this.getItems().length - 1;
          _this.internalSetState(STATE_CHANGE_TYPES.moveDown, {
            highlightedIndex: nextIndex2
          });
        } else if (event.key === KEY_STRINGS.ArrowLeft) {
          if (_this.props.getParentMenu) {
            var parent2 = _this.props.getParentMenu(rootRef);
            if (parent2 && parent2.current) {
              parent2.current.focus();
            }
          }
        } else if (event.key === KEY_STRINGS.ArrowRight) {
          if (_this.props.getChildMenu) {
            var child = _this.props.getChildMenu(rootRef);
            if (child && child.current) {
              child.current.focus();
            }
          }
        }
        if (_this.refList[nextIndex2]) {
          scrollItemIntoView(_this.refList[nextIndex2].current, rootRef.current, nextIndex2 === 0, nextIndex2 === _this.getItems().length - 1);
        }
      });
      _defineProperty23(_assertThisInitialized8(_this), "handleEnterKey", function(event) {
        var onItemSelect2 = _this.props.onItemSelect;
        var highlightedIndex = _this.state.highlightedIndex;
        var items = _this.getItems();
        if (items[highlightedIndex] && onItemSelect2 && !items[highlightedIndex].disabled) {
          event.preventDefault();
          onItemSelect2({
            item: items[highlightedIndex],
            event
          });
        }
      });
      _defineProperty23(_assertThisInitialized8(_this), "handleItemClick", function(index2, item, event) {
        if (_this.props.onItemSelect && !item.disabled) {
          _this.props.onItemSelect({
            item,
            event
          });
          _this.internalSetState(STATE_CHANGE_TYPES.click, {
            highlightedIndex: index2,
            activedescendantId: _this.optionIds[index2]
          });
        }
      });
      _defineProperty23(_assertThisInitialized8(_this), "handleMouseEnter", function(index2) {
        _this.internalSetState(STATE_CHANGE_TYPES.mouseEnter, {
          highlightedIndex: index2,
          activedescendantId: _this.optionIds[index2]
        });
      });
      _defineProperty23(_assertThisInitialized8(_this), "handleMouseLeave", function(event) {
      });
      _defineProperty23(_assertThisInitialized8(_this), "getRequiredItemProps", function(item, index2) {
        var itemRef = _this.refList[index2];
        if (!itemRef) {
          itemRef = /* @__PURE__ */ React40.createRef();
          _this.refList[index2] = itemRef;
          _this.optionIds[index2] = _this.props.uidSeed(index2);
        }
        var _this$props$getRequir = _this.props.getRequiredItemProps(item, index2), disabledVal = _this$props$getRequir.disabled, requiredItemProps = _objectWithoutProperties12(_this$props$getRequir, _excluded14);
        var disabled = typeof disabledVal === "boolean" ? disabledVal : !!item.disabled;
        return _objectSpread18(_objectSpread18({
          id: requiredItemProps.id || _this.optionIds[index2],
          disabled,
          ref: itemRef,
          isFocused: _this.state.isFocused,
          isHighlighted: _this.state.highlightedIndex === index2,
          resetMenu: _this.resetMenu
        }, disabled ? {} : {
          onClick: _this.handleItemClick.bind(_assertThisInitialized8(_this), index2, item),
          onMouseEnter: _this.handleMouseEnter.bind(_assertThisInitialized8(_this), index2)
        }), requiredItemProps);
      });
      _defineProperty23(_assertThisInitialized8(_this), "focusMenu", function(event) {
        var rootRef = _this.props.rootRef ? _this.props.rootRef : _this.rootRef;
        if (!_this.state.isFocused && rootRef.current && rootRef.current.contains(event.target)) {
          if (_this.state.highlightedIndex < 0) {
            _this.internalSetState(STATE_CHANGE_TYPES.focus, {
              isFocused: true,
              highlightedIndex: 0
            });
          } else {
            _this.internalSetState(STATE_CHANGE_TYPES.focus, {
              isFocused: true
            });
          }
          rootRef.current.focus();
        }
      });
      _defineProperty23(_assertThisInitialized8(_this), "unfocusMenu", function() {
        _this.internalSetState(STATE_CHANGE_TYPES.focus, {
          isFocused: false
        });
      });
      _defineProperty23(_assertThisInitialized8(_this), "resetMenu", function() {
        _this.internalSetState(STATE_CHANGE_TYPES.reset, {
          isFocused: false,
          highlightedIndex: -1,
          activedescendantId: null
        });
      });
      return _this;
    }
    _createClass8(MenuStatefulContainerInner2, [{
      key: "getItems",
      value: function getItems() {
        var _this2 = this;
        if (Array.isArray(this.props.items)) {
          return this.props.items;
        }
        var optgroups = Object.keys(this.props.items);
        return optgroups.reduce(function(output, optgroup) {
          return output.concat(_this2.props.items[optgroup]);
        }, []);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var rootRef = this.props.rootRef ? this.props.rootRef : this.rootRef;
        if (typeof document !== "undefined") {
          if (rootRef.current && this.state.highlightedIndex > -1 && this.refList[this.state.highlightedIndex]) {
            scrollItemIntoView(this.refList[this.state.highlightedIndex].current, rootRef.current, this.state.highlightedIndex === 0, this.state.highlightedIndex === this.getItems().length - 1, "center");
          }
          if (this.state.isFocused) {
            if (this.keyboardControlNode) {
              this.keyboardControlNode.addEventListener("keydown", this.onKeyDown);
            }
          }
        }
        this.props.addMenuToNesting && this.props.addMenuToNesting(rootRef);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var rootRef = this.props.rootRef ? this.props.rootRef : this.rootRef;
        if (typeof document !== "undefined") {
          if (this.keyboardControlNode)
            this.keyboardControlNode.removeEventListener("keydown", this.onKeyDown);
        }
        if (this.props.removeMenuFromNesting) {
          this.props.removeMenuFromNesting(rootRef);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (typeof document !== "undefined") {
          if (!prevState.isFocused && this.state.isFocused) {
            if (this.keyboardControlNode)
              this.keyboardControlNode.addEventListener("keydown", this.onKeyDown);
          } else if (prevState.isFocused && !this.state.isFocused) {
            if (this.keyboardControlNode)
              this.keyboardControlNode.removeEventListener("keydown", this.onKeyDown);
          }
        }
        var range = this.getItems().length;
        if (this.props.forceHighlight && this.state.highlightedIndex === -1 && range > 0) {
          this.internalSetState(STATE_CHANGE_TYPES.enter, {
            highlightedIndex: 0
          });
        }
        if (range === 0 && this.state.highlightedIndex !== -1) {
          this.internalSetState(STATE_CHANGE_TYPES.enter, {
            highlightedIndex: -1
          });
        } else if (this.state.highlightedIndex >= range) {
          this.internalSetState(STATE_CHANGE_TYPES.enter, {
            highlightedIndex: 0
          });
        }
        if (this.props.isNestedMenuVisible && this.props.nestedMenuHoverIndex !== prevProps.nestedMenuHoverIndex && !this.props.isNestedMenuVisible(this.rootRef) && !this.props.forceHighlight) {
          this.setState({
            highlightedIndex: -1
          });
        }
      }
    }, {
      key: "internalSetState",
      value: function internalSetState(changeType, changes) {
        var stateReducer2 = this.props.stateReducer;
        if (this.props.onActiveDescendantChange && typeof changes.highlightedIndex === "number" && this.state.highlightedIndex !== changes.highlightedIndex) {
          this.props.onActiveDescendantChange(this.optionIds[changes.highlightedIndex]);
        }
        this.setState(stateReducer2(changeType, changes, this.state));
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;
        var _this$props = this.props, initialState = _this$props.initialState, stateReducer2 = _this$props.stateReducer, children2 = _this$props.children, onItemSelect2 = _this$props.onItemSelect, addMenuToNesting3 = _this$props.addMenuToNesting, removeMenuFromNesting3 = _this$props.removeMenuFromNesting, getParentMenu3 = _this$props.getParentMenu, getChildMenu3 = _this$props.getChildMenu, forceHighlight = _this$props.forceHighlight, restProps = _objectWithoutProperties12(_this$props, _excluded23);
        return this.props.children(_objectSpread18(_objectSpread18({}, restProps), {}, {
          rootRef: this.props.rootRef ? this.props.rootRef : this.rootRef,
          activedescendantId: this.optionIds[this.state.highlightedIndex],
          getRequiredItemProps: function getRequiredItemProps2(item, index2) {
            return _this3.getRequiredItemProps(item, index2);
          },
          handleMouseLeave: this.handleMouseLeave,
          highlightedIndex: this.state.highlightedIndex,
          isFocused: this.state.isFocused,
          handleKeyDown: this.props.keyboardControlNode.current ? function(event) {
          } : this.onKeyDown,
          focusMenu: this.focusMenu,
          unfocusMenu: this.unfocusMenu
        }));
      }
    }]);
    return MenuStatefulContainerInner2;
  }(React40.Component);
  _defineProperty23(MenuStatefulContainerInner, "defaultProps", DEFAULT_PROPS);
  var MenuStatefulContainer = function MenuStatefulContainer2(props) {
    return /* @__PURE__ */ React40.createElement(MenuStatefulContainerInner, _extends23({
      uidSeed: useUIDSeed()
    }, props));
  };
  MenuStatefulContainer.defaultProps = DEFAULT_PROPS;
  var stateful_container_default2 = MenuStatefulContainer;

  // node_modules/baseui/esm/menu/stateful-menu.js
  function _typeof12(obj) {
    "@babel/helpers - typeof";
    return _typeof12 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof12(obj);
  }
  var _excluded15 = ["overrides"];
  function _extends24() {
    _extends24 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends24.apply(this, arguments);
  }
  function _objectWithoutProperties13(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose15(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose15(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _classCallCheck9(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties9(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass9(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties9(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties9(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _inherits9(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass)
      _setPrototypeOf10(subClass, superClass);
  }
  function _setPrototypeOf10(o, p) {
    _setPrototypeOf10 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf13(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf10(o, p);
  }
  function _createSuper9(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct9();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf9(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf9(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn9(this, result);
    };
  }
  function _possibleConstructorReturn9(self2, call) {
    if (call && (_typeof12(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized9(self2);
  }
  function _assertThisInitialized9(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct9() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf9(o) {
    _getPrototypeOf9 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf12(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf9(o);
  }
  var StatefulMenu = /* @__PURE__ */ function(_React$PureComponent) {
    _inherits9(StatefulMenu2, _React$PureComponent);
    var _super = _createSuper9(StatefulMenu2);
    function StatefulMenu2() {
      _classCallCheck9(this, StatefulMenu2);
      return _super.apply(this, arguments);
    }
    _createClass9(StatefulMenu2, [{
      key: "render",
      value: function render() {
        var _this$props = this.props, overrides = _this$props.overrides, props = _objectWithoutProperties13(_this$props, _excluded15);
        return /* @__PURE__ */ React41.createElement(NestedMenuContext.Consumer, null, function(ctx) {
          return /* @__PURE__ */ React41.createElement(stateful_container_default2, _extends24({}, ctx, props), function(renderProps) {
            return /* @__PURE__ */ React41.createElement(Menu2, _extends24({}, renderProps, {
              overrides
            }));
          });
        });
      }
    }]);
    return StatefulMenu2;
  }(React41.PureComponent);

  // node_modules/baseui/esm/app-nav-bar/styled-components.js
  function ownKeys19(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread19(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys19(Object(source2), true).forEach(function(key) {
        _defineProperty24(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys19(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty24(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var StyledButton = styled2("button", function(_ref2) {
    var $theme = _ref2.$theme, $isFocusVisible = _ref2.$isFocusVisible;
    return {
      boxSizing: "border-box",
      display: "flex",
      flexDirection: "row",
      flexWrap: "nowrap",
      justifyContent: "center",
      alignItems: "center",
      backgroundColor: "transparent",
      color: $theme.colors.contentPrimary,
      borderLeftWidth: 0,
      borderTopWidth: 0,
      borderRightWidth: 0,
      borderBottomWidth: 0,
      paddingTop: "0",
      paddingBottom: "0",
      paddingLeft: "0",
      paddingRight: "0",
      marginLeft: 0,
      marginTop: 0,
      marginRight: 0,
      marginBottom: 0,
      outline: $isFocusVisible ? "3px solid ".concat($theme.colors.accent) : "none",
      outlineOffset: "-3px",
      WebkitAppearance: "none",
      cursor: "pointer"
    };
  });
  StyledButton.displayName = "StyledButton";
  StyledButton.displayName = "StyledButton";
  var StyledRoot3 = styled2("div", function(props) {
    var $theme = props.$theme;
    var mediaQueries = getMediaQueries($theme.breakpoints);
    var breakpoints2 = Object.values($theme.breakpoints).sort();
    var margins = [];
    if (Array.isArray($theme.grid.margins)) {
      for (var i = 0; i < breakpoints2.length; i++) {
        var margin = $theme.grid.margins[i];
        if (margin == null) {
          margins.push($theme.grid.margins[$theme.grid.margins.length - 1]);
        } else {
          margins.push(margin);
        }
      }
    } else {
      for (var _i = 0; _i < breakpoints2.length; _i++) {
        margins.push($theme.grid.margins);
      }
    }
    var style = _objectSpread19(_objectSpread19({}, $theme.typography.font300), {}, {
      boxSizing: "border-box",
      backgroundColor: $theme.colors.backgroundPrimary,
      borderBottomWidth: "1px",
      borderBottomStyle: "solid",
      borderBottomColor: "".concat($theme.colors.borderOpaque),
      paddingInlineStart: margins[0] + "px",
      paddingInlineEnd: margins[0] + "px"
    });
    for (var _i2 = 1; _i2 < mediaQueries.length; _i2++) {
      var _margin = Array.isArray($theme.grid.margins) ? $theme.grid.margins[_i2] : $theme.grid.margins;
      style[mediaQueries[_i2]] = {
        paddingInlineStart: _margin + "px",
        paddingInlineEnd: _margin + "px"
      };
    }
    return style;
  });
  StyledRoot3.displayName = "StyledRoot";
  StyledRoot3.displayName = "StyledRoot";
  var StyledSubnavContainer = styled2("div", {});
  StyledSubnavContainer.displayName = "StyledSubnavContainer";
  StyledSubnavContainer.displayName = "StyledSubnavContainer";
  var StyledSpacing = styled2("div", function(props) {
    var $theme = props.$theme;
    return _defineProperty24({
      boxSizing: "border-box",
      height: "100%",
      display: "flex",
      alignItems: "center",
      paddingTop: $theme.sizing.scale400,
      paddingBottom: $theme.sizing.scale400
    }, $theme.mediaQuery.medium, {
      paddingTop: $theme.sizing.scale700,
      paddingBottom: $theme.sizing.scale700
    });
  });
  StyledSpacing.displayName = "StyledSpacing";
  StyledSpacing.displayName = "StyledSpacing";
  var StyledAppName = styled2("div", function(_ref3) {
    var $theme = _ref3.$theme;
    return _objectSpread19(_objectSpread19({}, $theme.typography.font550), {}, _defineProperty24({
      color: $theme.colors.primary,
      textDecoration: "none"
    }, $theme.mediaQuery.medium, _objectSpread19({}, $theme.typography.font650)));
  });
  StyledAppName.displayName = "StyledAppName";
  StyledAppName.displayName = "StyledAppName";
  var StyledSideMenuButton = withStyle2(StyledButton, function(_ref4) {
    var $theme = _ref4.$theme;
    return _objectSpread19(_objectSpread19({}, $theme.direction === "rtl" ? {
      marginLeft: $theme.sizing.scale600
    } : {
      marginRight: $theme.sizing.scale600
    }), {}, {
      paddingTop: $theme.sizing.scale100,
      paddingBottom: $theme.sizing.scale100,
      paddingLeft: $theme.sizing.scale100,
      paddingRight: $theme.sizing.scale100
    });
  });
  StyledSideMenuButton.displayName = "StyledSideMenuButton";
  StyledSideMenuButton.displayName = "StyledSideMenuButton";
  var StyledPrimaryMenuContainer = styled2("div", function(_ref5) {
    var $theme = _ref5.$theme;
    return {
      boxSizing: "border-box",
      height: "100%",
      display: "flex",
      flexDirection: "row",
      flexGrow: 1,
      flexWrap: "nowrap",
      justifyContent: "flex-end",
      alignItems: "stretch",
      paddingInlineEnd: $theme.sizing.scale1000
    };
  });
  StyledPrimaryMenuContainer.displayName = "StyledPrimaryMenuContainer";
  StyledPrimaryMenuContainer.displayName = "StyledPrimaryMenuContainer";
  var StyledMainMenuItem = styled2("div", function(props) {
    var $active = props.$active, $isFocusVisible = props.$isFocusVisible, $kind = props.$kind, _props$$theme = props.$theme, colors2 = _props$$theme.colors, sizing3 = _props$$theme.sizing, direction = _props$$theme.direction;
    return {
      boxSizing: "border-box",
      display: "flex",
      alignItems: "center",
      color: $active ? colors2.contentPrimary : colors2.contentTertiary,
      marginLeft: sizing3.scale700,
      marginRight: sizing3.scale700,
      paddingTop: $kind === KIND.secondary ? sizing3.scale750 : "0",
      paddingBottom: $kind === KIND.secondary ? sizing3.scale750 : "0",
      outline: $isFocusVisible ? "3px solid ".concat(colors2.accent) : "none",
      outlineOffset: "-3px",
      borderBottomWidth: "2px",
      borderBottomStyle: "solid",
      borderBottomColor: $active && !$isFocusVisible ? colors2.primary : "transparent",
      cursor: $active ? "default" : "pointer",
      whiteSpace: $kind === KIND.secondary ? "nowrap" : "initial",
      ":first-child": _objectSpread19({}, direction === "rtl" ? {
        marginRight: "0"
      } : {
        marginLeft: "0"
      }),
      ":last-child": _objectSpread19({}, direction === "rtl" ? {
        marginLeft: "0"
      } : {
        marginRight: "0"
      }),
      ":hover": {
        color: colors2.primary
      }
    };
  });
  StyledMainMenuItem.displayName = "StyledMainMenuItem";
  StyledMainMenuItem.displayName = "StyledMainMenuItem";
  var StyledSecondaryMenuContainer = styled2("div", function(_ref6) {
    var $theme = _ref6.$theme;
    return {
      boxSizing: "border-box",
      height: "100%",
      display: "flex",
      flexDirection: "row",
      flexWrap: "nowrap",
      justifyContent: "flex-start",
      margin: "auto",
      maxWidth: "".concat($theme.grid.maxWidth, "px"),
      alignItems: "stretch",
      overflow: "auto"
    };
  });
  StyledSecondaryMenuContainer.displayName = "StyledSecondaryMenuContainer";
  StyledSecondaryMenuContainer.displayName = "StyledSecondaryMenuContainer";
  var StyledUserMenuButton = StyledButton;
  StyledUserMenuButton.displayName = "StyledUserMenuButton";
  var StyledUserMenuProfileListItem = withStyle2(StyledListItem, function(_ref7) {
    var $theme = _ref7.$theme;
    return _objectSpread19({
      paddingTop: "0",
      paddingBottom: "0"
    }, $theme.direction === "rtl" ? {
      paddingLeft: "0"
    } : {
      paddingRight: "0"
    });
  });
  StyledUserMenuProfileListItem.displayName = "StyledUserMenuProfileListItem";
  StyledUserMenuProfileListItem.displayName = "StyledUserMenuProfileListItem";
  var StyledUserProfileTileContainer = styled2("div", function(_ref8) {
    var $theme = _ref8.$theme;
    return {
      boxSizing: "border-box",
      height: "100%",
      display: "flex",
      flexDirection: "row",
      flexWrap: "nowrap",
      justifyContent: "flex-start",
      paddingTop: $theme.sizing.scale650,
      paddingBottom: $theme.sizing.scale650
    };
  });
  StyledUserProfileTileContainer.displayName = "StyledUserProfileTileContainer";
  StyledUserProfileTileContainer.displayName = "StyledUserProfileTileContainer";
  var StyledUserProfilePictureContainer = styled2("div", function(_ref9) {
    var $theme = _ref9.$theme;
    return _objectSpread19({}, $theme.direction === "rtl" ? {
      marginLeft: $theme.sizing.scale600
    } : {
      marginRight: $theme.sizing.scale600
    });
  });
  StyledUserProfilePictureContainer.displayName = "StyledUserProfilePictureContainer";
  StyledUserProfilePictureContainer.displayName = "StyledUserProfilePictureContainer";
  var StyledUserProfileInfoContainer = styled2("div", function(_ref10) {
    var $theme = _ref10.$theme;
    return {
      boxSizing: "border-box",
      alignSelf: "center"
    };
  });
  StyledUserProfileInfoContainer.displayName = "StyledUserProfileInfoContainer";
  StyledUserProfileInfoContainer.displayName = "StyledUserProfileInfoContainer";
  var StyledDesktopMenuContainer = styled2("div", function(_ref11) {
    var $theme = _ref11.$theme;
    return {};
  });
  StyledDesktopMenuContainer.displayName = "StyledDesktopMenuContainer";
  StyledDesktopMenuContainer.displayName = "StyledDesktopMenuContainer";
  var StyledDesktopMenu = styled2("div", function(_ref12) {
    var $theme = _ref12.$theme;
    return {
      alignItems: "center",
      display: "flex",
      justifyContent: "space-between",
      margin: "auto",
      maxWidth: "".concat($theme.grid.maxWidth, "px"),
      paddingBlockStart: "18px",
      paddingBlockEnd: "18px"
    };
  });
  StyledDesktopMenu.displayName = "StyledDesktopMenu";
  StyledDesktopMenu.displayName = "StyledDesktopMenu";

  // node_modules/baseui/esm/app-nav-bar/user-profile-tile.js
  var React45 = __toESM(require_react());

  // node_modules/baseui/esm/avatar/avatar.js
  var React42 = __toESM(require_react());

  // node_modules/baseui/esm/avatar/styled-components.js
  function ownKeys20(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread20(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys20(Object(source2), true).forEach(function(key) {
        _defineProperty25(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys20(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty25(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function getSize2(props) {
    var $size = props.$size, $theme = props.$theme;
    var defaultSize = $theme.sizing.scale1000;
    var size = $size || defaultSize;
    return $theme.sizing[size] || size;
  }
  var Avatar = styled2("img", function(props) {
    var themedSize = getSize2(props);
    return {
      borderTopLeftRadius: "50%",
      borderTopRightRadius: "50%",
      borderBottomRightRadius: "50%",
      borderBottomLeftRadius: "50%",
      boxSizing: "border-box",
      display: props.$imageLoaded ? "block" : "none",
      height: themedSize,
      width: themedSize,
      objectFit: "cover"
    };
  });
  Avatar.displayName = "Avatar";
  Avatar.displayName = "Avatar";
  var Initials = styled2("div", function(props) {
    return _objectSpread20(_objectSpread20({}, props.$theme.typography.font300), {}, {
      color: props.$theme.colors.mono100,
      alignItems: "center",
      display: "flex",
      justifyContent: "center",
      height: "100%"
    });
  });
  Initials.displayName = "Initials";
  Initials.displayName = "Initials";
  var Root = styled2("div", function(props) {
    var $didImageFailToLoad = props.$didImageFailToLoad;
    var themedSize = getSize2(props);
    return {
      backgroundColor: $didImageFailToLoad ? props.$theme.colors.primary : null,
      borderTopLeftRadius: "50%",
      borderTopRightRadius: "50%",
      borderBottomRightRadius: "50%",
      borderBottomLeftRadius: "50%",
      boxSizing: "border-box",
      display: "inline-block",
      height: $didImageFailToLoad ? themedSize : null,
      width: $didImageFailToLoad ? themedSize : null
    };
  });
  Root.displayName = "Root";
  Root.displayName = "Root";

  // node_modules/baseui/esm/avatar/avatar.js
  function _extends25() {
    _extends25 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends25.apply(this, arguments);
  }
  function _slicedToArray17(arr, i) {
    return _arrayWithHoles16(arr) || _iterableToArrayLimit16(arr, i) || _unsupportedIterableToArray16(arr, i) || _nonIterableRest16();
  }
  function _nonIterableRest16() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray16(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray16(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray16(o, minLen);
  }
  function _arrayLikeToArray16(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit16(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles16(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function getInitials(name) {
    var words = name.split(" ");
    var initials = words.map(function(word) {
      return word[0];
    });
    return initials.slice(0, 2).join("").toUpperCase();
  }
  function Avatar2(_ref2) {
    var initials = _ref2.initials, _ref$name = _ref2.name, name = _ref$name === void 0 ? "" : _ref$name, _ref$overrides = _ref2.overrides, overrides = _ref$overrides === void 0 ? {} : _ref$overrides, _ref$size = _ref2.size, size = _ref$size === void 0 ? "scale1000" : _ref$size, src = _ref2.src;
    var imageRef = React42.useRef(null);
    var _React$useState = React42.useState(false), _React$useState2 = _slicedToArray17(_React$useState, 2), imageLoaded = _React$useState2[0], setImageLoaded = _React$useState2[1];
    function handleLoad() {
      setImageLoaded(true);
    }
    function handleError() {
      setImageLoaded(false);
    }
    React42.useEffect(function() {
      setImageLoaded(false);
      if (imageRef.current) {
        if (typeof src === "string") {
          imageRef.current.src = src;
          imageRef.current.onload = handleLoad;
          imageRef.current.onerror = handleError;
        }
      }
      return function() {
        if (imageRef.current) {
          imageRef.current.onload = null;
          imageRef.current.onerror = null;
        }
      };
    }, [src]);
    var _getOverrides = getOverrides(overrides.Avatar, Avatar), _getOverrides2 = _slicedToArray17(_getOverrides, 2), Avatar3 = _getOverrides2[0], avatarProps = _getOverrides2[1];
    var _getOverrides3 = getOverrides(overrides.Initials, Initials), _getOverrides4 = _slicedToArray17(_getOverrides3, 2), Initials2 = _getOverrides4[0], initialsProps = _getOverrides4[1];
    var _getOverrides5 = getOverrides(overrides.Root, Root), _getOverrides6 = _slicedToArray17(_getOverrides5, 2), Root3 = _getOverrides6[0], rootProps = _getOverrides6[1];
    return /* @__PURE__ */ React42.createElement(Root3, _extends25({
      "aria-label": imageLoaded ? null : name,
      role: imageLoaded ? null : "img",
      $didImageFailToLoad: !imageLoaded,
      $size: size,
      "data-baseweb": "avatar"
    }, rootProps), /* @__PURE__ */ React42.createElement(Avatar3, _extends25({
      ref: imageRef,
      alt: name,
      $imageLoaded: imageLoaded,
      $size: size
    }, avatarProps)), !imageLoaded && /* @__PURE__ */ React42.createElement(Initials2, initialsProps, initials || getInitials(name)));
  }

  // node_modules/baseui/esm/typography/index.js
  var React44 = __toESM(require_react());

  // node_modules/baseui/esm/block/block.js
  var React43 = __toESM(require_react());

  // node_modules/baseui/esm/block/styled-components.js
  function constrainToNull(value) {
    if (value === void 0) {
      return null;
    }
    return value;
  }
  function build(breakpoints2) {
    var styles = {};
    var mediaQueries = getMediaQueries(breakpoints2);
    return {
      apply: function apply2(_ref2) {
        var property = _ref2.property, _ref$transform = _ref2.transform, transform = _ref$transform === void 0 ? function(x) {
          return x;
        } : _ref$transform, value = _ref2.value;
        if (value === null || value === void 0) {
          return;
        }
        if (Array.isArray(value)) {
          value.forEach(function(v, index2) {
            if (index2 === 0) {
              styles[property] = constrainToNull(transform(v));
              return;
            }
            var mediaQuery2 = mediaQueries[index2 - 1];
            if (!styles[mediaQuery2]) {
              styles[mediaQuery2] = {};
            }
            styles[mediaQuery2][property] = constrainToNull(transform(v));
          });
        } else {
          styles[property] = constrainToNull(transform(value));
        }
      },
      value: function value() {
        return styles;
      }
    };
  }
  function getFontValue(obj, key) {
    if (!obj)
      return;
    return obj[key];
  }
  var StyledBlock = styled2("div", function(props) {
    var _props$$theme = props.$theme, breakpoints2 = _props$$theme.breakpoints, colors2 = _props$$theme.colors, typography = _props$$theme.typography, sizing3 = _props$$theme.sizing;
    var get2 = function get3(obj, key) {
      return obj[key];
    };
    var getScale = function getScale2(size) {
      return sizing3[size] || size;
    };
    var styles = build(breakpoints2);
    styles.apply({
      property: "color",
      value: get2(props, "$color"),
      transform: function transform(color) {
        return colors2[color] || color;
      }
    });
    styles.apply({
      property: "backgroundAttachment",
      value: get2(props, "$backgroundAttachment")
    });
    styles.apply({
      property: "backgroundClip",
      value: get2(props, "$backgroundClip")
    });
    styles.apply({
      property: "backgroundColor",
      value: get2(props, "$backgroundColor"),
      transform: function transform(backgroundColor) {
        return colors2[backgroundColor] || backgroundColor;
      }
    });
    styles.apply({
      property: "backgroundImage",
      value: get2(props, "$backgroundImage")
    });
    styles.apply({
      property: "backgroundOrigin",
      value: get2(props, "$backgroundOrigin")
    });
    styles.apply({
      property: "backgroundPosition",
      value: get2(props, "$backgroundPosition")
    });
    styles.apply({
      property: "backgroundRepeat",
      value: get2(props, "$backgroundRepeat")
    });
    styles.apply({
      property: "backgroundSize",
      value: get2(props, "$backgroundSize")
    });
    styles.apply({
      property: "fontFamily",
      value: get2(props, "$font"),
      transform: function transform(font) {
        return getFontValue(typography[font], "fontFamily");
      }
    });
    styles.apply({
      property: "fontWeight",
      value: get2(props, "$font"),
      transform: function transform(font) {
        return getFontValue(typography[font], "fontWeight");
      }
    });
    styles.apply({
      property: "fontSize",
      value: get2(props, "$font"),
      transform: function transform(font) {
        return getFontValue(typography[font], "fontSize");
      }
    });
    styles.apply({
      property: "lineHeight",
      value: get2(props, "$font"),
      transform: function transform(font) {
        return getFontValue(typography[font], "lineHeight");
      }
    });
    styles.apply({
      property: "alignContent",
      value: get2(props, "$alignContent")
    });
    styles.apply({
      property: "alignItems",
      value: get2(props, "$alignItems")
    });
    styles.apply({
      property: "alignSelf",
      value: get2(props, "$alignSelf")
    });
    styles.apply({
      property: "display",
      value: get2(props, "$display")
    });
    styles.apply({
      property: "flex",
      value: get2(props, "$flex")
    });
    styles.apply({
      property: "flexDirection",
      value: get2(props, "$flexDirection")
    });
    styles.apply({
      property: "grid",
      value: get2(props, "$grid")
    });
    styles.apply({
      property: "gridArea",
      value: get2(props, "$gridArea")
    });
    styles.apply({
      property: "gridAutoColumns",
      value: get2(props, "$gridAutoColumns")
    });
    styles.apply({
      property: "gridAutoFlow",
      value: get2(props, "$gridAutoFlow")
    });
    styles.apply({
      property: "gridAutoRows",
      value: get2(props, "$gridAutoRows")
    });
    styles.apply({
      property: "gridColumn",
      value: get2(props, "$gridColumn")
    });
    styles.apply({
      property: "gridColumnEnd",
      value: get2(props, "$gridColumnEnd")
    });
    styles.apply({
      property: "gridColumnGap",
      value: get2(props, "$gridColumnGap"),
      transform: getScale
    });
    styles.apply({
      property: "gridColumnStart",
      value: get2(props, "$gridColumnStart")
    });
    styles.apply({
      property: "gridGap",
      value: get2(props, "$gridGap"),
      transform: getScale
    });
    styles.apply({
      property: "gridRow",
      value: get2(props, "$gridRow")
    });
    styles.apply({
      property: "gridRowEnd",
      value: get2(props, "$gridRowEnd")
    });
    styles.apply({
      property: "gridRowGap",
      value: get2(props, "$gridRowGap"),
      transform: getScale
    });
    styles.apply({
      property: "gridRowStart",
      value: get2(props, "$gridRowStart")
    });
    styles.apply({
      property: "gridTemplate",
      value: get2(props, "$gridTemplate")
    });
    styles.apply({
      property: "gridTemplateAreas",
      value: get2(props, "$gridTemplateAreas")
    });
    styles.apply({
      property: "gridTemplateColumns",
      value: get2(props, "$gridTemplateColumns")
    });
    styles.apply({
      property: "gridTemplateRows",
      value: get2(props, "$gridTemplateRows")
    });
    styles.apply({
      property: "justifyContent",
      value: get2(props, "$justifyContent")
    });
    styles.apply({
      property: "justifyItems",
      value: get2(props, "$justifyItems")
    });
    styles.apply({
      property: "justifySelf",
      value: get2(props, "$justifySelf")
    });
    styles.apply({
      property: "position",
      value: get2(props, "$position")
    });
    styles.apply({
      property: "width",
      value: get2(props, "$width"),
      transform: getScale
    });
    styles.apply({
      property: "minWidth",
      value: get2(props, "$minWidth"),
      transform: getScale
    });
    styles.apply({
      property: "maxWidth",
      value: get2(props, "$maxWidth"),
      transform: getScale
    });
    styles.apply({
      property: "height",
      value: get2(props, "$height"),
      transform: getScale
    });
    styles.apply({
      property: "minHeight",
      value: get2(props, "$minHeight"),
      transform: getScale
    });
    styles.apply({
      property: "maxHeight",
      value: get2(props, "$maxHeight"),
      transform: getScale
    });
    styles.apply({
      property: "overflowX",
      value: get2(props, "$overflow"),
      transform: function transform(overflow) {
        if (overflow === "scrollX") {
          return "scroll";
        }
        return null;
      }
    });
    styles.apply({
      property: "overflowY",
      value: get2(props, "$overflow"),
      transform: function transform(overflow) {
        if (overflow === "scrollY") {
          return "scroll";
        }
        return null;
      }
    });
    styles.apply({
      property: "overflow",
      value: get2(props, "$overflow"),
      transform: function transform(overflow) {
        if (overflow !== "scrollX" && overflow !== "scrollY") {
          return overflow;
        }
        return null;
      }
    });
    styles.apply({
      property: "margin",
      value: get2(props, "$margin"),
      transform: getScale
    });
    styles.apply({
      property: "marginTop",
      value: get2(props, "$marginTop"),
      transform: getScale
    });
    styles.apply({
      property: "marginRight",
      value: get2(props, "$marginRight"),
      transform: getScale
    });
    styles.apply({
      property: "marginBottom",
      value: get2(props, "$marginBottom"),
      transform: getScale
    });
    styles.apply({
      property: "marginLeft",
      value: get2(props, "$marginLeft"),
      transform: getScale
    });
    styles.apply({
      property: "padding",
      value: get2(props, "$padding"),
      transform: getScale
    });
    styles.apply({
      property: "paddingTop",
      value: get2(props, "$paddingTop"),
      transform: getScale
    });
    styles.apply({
      property: "paddingRight",
      value: get2(props, "$paddingRight"),
      transform: getScale
    });
    styles.apply({
      property: "paddingBottom",
      value: get2(props, "$paddingBottom"),
      transform: getScale
    });
    styles.apply({
      property: "paddingLeft",
      value: get2(props, "$paddingLeft"),
      transform: getScale
    });
    styles.apply({
      property: "placeContent",
      value: get2(props, "$placeContent")
    });
    styles.apply({
      property: "placeItems",
      value: get2(props, "$placeItems")
    });
    styles.apply({
      property: "placeSelf",
      value: get2(props, "$placeSelf")
    });
    styles.apply({
      property: "flexWrap",
      value: get2(props, "$flexWrap"),
      transform: function transform() {
        return "wrap";
      }
    });
    styles.apply({
      property: "top",
      value: get2(props, "$top"),
      transform: getScale
    });
    styles.apply({
      property: "right",
      value: get2(props, "$right"),
      transform: getScale
    });
    styles.apply({
      property: "left",
      value: get2(props, "$left"),
      transform: getScale
    });
    styles.apply({
      property: "bottom",
      value: get2(props, "$bottom"),
      transform: getScale
    });
    styles.apply({
      property: "textOverflow",
      value: get2(props, "$textOverflow")
    });
    styles.apply({
      property: "whiteSpace",
      value: get2(props, "$whiteSpace")
    });
    return styles.value();
  });
  StyledBlock.displayName = "StyledBlock";
  StyledBlock.displayName = "StyledBlock";

  // node_modules/baseui/esm/block/block.js
  var _excluded16 = ["forwardedRef", "children", "as", "overrides", "color", "backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPosition", "backgroundRepeat", "backgroundSize", "font", "alignContent", "alignItems", "alignSelf", "flexDirection", "display", "flex", "grid", "gridArea", "gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridColumn", "gridColumnEnd", "gridColumnGap", "gridColumnStart", "gridGap", "gridRow", "gridRowEnd", "gridRowGap", "gridRowStart", "gridTemplate", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows", "justifyContent", "justifyItems", "justifySelf", "position", "width", "minWidth", "maxWidth", "height", "minHeight", "maxHeight", "overflow", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "placeContent", "placeItems", "placeSelf", "flexWrap", "left", "top", "right", "bottom", "textOverflow", "whiteSpace"];
  function _extends26() {
    _extends26 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends26.apply(this, arguments);
  }
  function _slicedToArray18(arr, i) {
    return _arrayWithHoles17(arr) || _iterableToArrayLimit17(arr, i) || _unsupportedIterableToArray17(arr, i) || _nonIterableRest17();
  }
  function _nonIterableRest17() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray17(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray17(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray17(o, minLen);
  }
  function _arrayLikeToArray17(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit17(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles17(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _objectWithoutProperties14(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose16(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose16(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  var Block = function Block2(_ref2) {
    var forwardedRef = _ref2.forwardedRef, children2 = _ref2.children, _ref$as = _ref2.as, as = _ref$as === void 0 ? "div" : _ref$as, _ref$overrides = _ref2.overrides, overrides = _ref$overrides === void 0 ? {} : _ref$overrides, color = _ref2.color, backgroundAttachment = _ref2.backgroundAttachment, backgroundClip2 = _ref2.backgroundClip, backgroundColor = _ref2.backgroundColor, backgroundImage = _ref2.backgroundImage, backgroundOrigin = _ref2.backgroundOrigin, backgroundPosition = _ref2.backgroundPosition, backgroundRepeat = _ref2.backgroundRepeat, backgroundSize = _ref2.backgroundSize, font = _ref2.font, alignContent = _ref2.alignContent, alignItems = _ref2.alignItems, alignSelf2 = _ref2.alignSelf, flexDirection = _ref2.flexDirection, display = _ref2.display, flex2 = _ref2.flex, grid3 = _ref2.grid, gridArea = _ref2.gridArea, gridAutoColumns = _ref2.gridAutoColumns, gridAutoFlow = _ref2.gridAutoFlow, gridAutoRows = _ref2.gridAutoRows, gridColumn2 = _ref2.gridColumn, gridColumnEnd2 = _ref2.gridColumnEnd, gridColumnGap = _ref2.gridColumnGap, gridColumnStart2 = _ref2.gridColumnStart, gridGap = _ref2.gridGap, gridRow2 = _ref2.gridRow, gridRowEnd2 = _ref2.gridRowEnd, gridRowGap = _ref2.gridRowGap, gridRowStart2 = _ref2.gridRowStart, gridTemplate = _ref2.gridTemplate, gridTemplateAreas = _ref2.gridTemplateAreas, gridTemplateColumns2 = _ref2.gridTemplateColumns, gridTemplateRows2 = _ref2.gridTemplateRows, justifyContent = _ref2.justifyContent, justifyItems = _ref2.justifyItems, justifySelf2 = _ref2.justifySelf, position2 = _ref2.position, width = _ref2.width, minWidth2 = _ref2.minWidth, maxWidth2 = _ref2.maxWidth, height = _ref2.height, minHeight2 = _ref2.minHeight, maxHeight2 = _ref2.maxHeight, overflow = _ref2.overflow, margin = _ref2.margin, marginTop = _ref2.marginTop, marginRight = _ref2.marginRight, marginBottom = _ref2.marginBottom, marginLeft = _ref2.marginLeft, padding = _ref2.padding, paddingTop = _ref2.paddingTop, paddingRight = _ref2.paddingRight, paddingBottom = _ref2.paddingBottom, paddingLeft = _ref2.paddingLeft, placeContent = _ref2.placeContent, placeItems = _ref2.placeItems, placeSelf = _ref2.placeSelf, flexWrap = _ref2.flexWrap, left = _ref2.left, top = _ref2.top, right = _ref2.right, bottom = _ref2.bottom, textOverflow = _ref2.textOverflow, whiteSpace = _ref2.whiteSpace, restProps = _objectWithoutProperties14(_ref2, _excluded16);
    var _getOverrides = getOverrides(overrides.Block, StyledBlock), _getOverrides2 = _slicedToArray18(_getOverrides, 2), BaseBlock = _getOverrides2[0], baseBlockProps = _getOverrides2[1];
    return /* @__PURE__ */ React43.createElement(
      BaseBlock,
      _extends26({
        ref: forwardedRef,
        $as: as,
        $color: color,
        $backgroundAttachment: backgroundAttachment,
        $backgroundClip: backgroundClip2,
        $backgroundColor: backgroundColor,
        $backgroundImage: backgroundImage,
        $backgroundOrigin: backgroundOrigin,
        $backgroundPosition: backgroundPosition,
        $backgroundRepeat: backgroundRepeat,
        $backgroundSize: backgroundSize,
        $font: font,
        $alignContent: alignContent,
        $alignItems: alignItems,
        $alignSelf: alignSelf2,
        $flexDirection: flexDirection,
        $display: display,
        $flex: flex2,
        $grid: grid3,
        $gridArea: gridArea,
        $gridAutoColumns: gridAutoColumns,
        $gridAutoFlow: gridAutoFlow,
        $gridAutoRows: gridAutoRows,
        $gridColumn: gridColumn2,
        $gridColumnEnd: gridColumnEnd2,
        $gridColumnGap: gridColumnGap,
        $gridColumnStart: gridColumnStart2,
        $gridGap: gridGap,
        $gridRow: gridRow2,
        $gridRowEnd: gridRowEnd2,
        $gridRowGap: gridRowGap,
        $gridRowStart: gridRowStart2,
        $gridTemplate: gridTemplate,
        $gridTemplateAreas: gridTemplateAreas,
        $gridTemplateColumns: gridTemplateColumns2,
        $gridTemplateRows: gridTemplateRows2,
        $justifyContent: justifyContent,
        $justifyItems: justifyItems,
        $justifySelf: justifySelf2,
        $position: position2,
        $width: width,
        $minWidth: minWidth2,
        $maxWidth: maxWidth2,
        $height: height,
        $minHeight: minHeight2,
        $maxHeight: maxHeight2,
        $overflow: overflow,
        $margin: margin,
        $marginTop: marginTop,
        $marginRight: marginRight,
        $marginBottom: marginBottom,
        $marginLeft: marginLeft,
        $padding: padding,
        $paddingTop: paddingTop,
        $paddingRight: paddingRight,
        $paddingBottom: paddingBottom,
        $paddingLeft: paddingLeft,
        $placeContent: placeContent,
        $placeItems: placeItems,
        $placeSelf: placeSelf,
        $flexWrap: flexWrap,
        $left: left,
        $top: top,
        $right: right,
        $bottom: bottom,
        $textOverflow: textOverflow,
        $whiteSpace: whiteSpace,
        "data-baseweb": "block"
      }, restProps, baseBlockProps),
      children2
    );
  };
  var BlockComponent = /* @__PURE__ */ React43.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React43.createElement(Block, _extends26({}, props, {
      forwardedRef: ref
    }));
  });
  BlockComponent.displayName = "Block";
  var block_default = BlockComponent;

  // node_modules/baseui/esm/typography/index.js
  function _extends27() {
    _extends27 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends27.apply(this, arguments);
  }
  var DisplayLarge = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-displaylarge"
    }, props, {
      font: props.font || "DisplayLarge",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  DisplayLarge.displayName = "DisplayLarge";
  var DisplayMedium = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-displaymedium"
    }, props, {
      font: props.font || "DisplayMedium",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  DisplayMedium.displayName = "DisplayMedium";
  var DisplaySmall = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-displaysmall"
    }, props, {
      font: props.font || "DisplaySmall",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  DisplaySmall.displayName = "DisplaySmall";
  var DisplayXSmall = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-displayxsmall"
    }, props, {
      font: props.font || "DisplayXSmall",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  DisplayXSmall.displayName = "DisplayXSmall";
  var HeadingXXLarge = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-headingxxlarge",
      as: props.as || "h1"
    }, props, {
      font: props.font || "HeadingXXLarge",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  HeadingXXLarge.displayName = "HeadingXXLarge";
  var HeadingXLarge = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-headingxlarge",
      as: props.as || "h2"
    }, props, {
      font: props.font || "HeadingXLarge",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  HeadingXLarge.displayName = "HeadingXLarge";
  var HeadingLarge = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-headinglarge",
      as: props.as || "h3"
    }, props, {
      font: props.font || "HeadingLarge",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  HeadingLarge.displayName = "HeadingLarge";
  var HeadingMedium = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-headingmedium",
      as: props.as || "h4"
    }, props, {
      font: props.font || "HeadingMedium",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  HeadingMedium.displayName = "HeadingMedium";
  var HeadingSmall = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-headingsmall",
      as: props.as || "h5"
    }, props, {
      font: props.font || "HeadingSmall",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  HeadingSmall.displayName = "HeadingSmall";
  var HeadingXSmall = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-headingxsmall",
      as: props.as || "h6"
    }, props, {
      font: props.font || "HeadingXSmall",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  HeadingXSmall.displayName = "HeadingXSmall";
  var LabelLarge = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-labellarge"
    }, props, {
      font: props.font || "LabelLarge",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  LabelLarge.displayName = "LabelLarge";
  var LabelMedium = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-labelmedium"
    }, props, {
      font: props.font || "LabelMedium",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  LabelMedium.displayName = "LabelMedium";
  var LabelSmall = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-labelsmall"
    }, props, {
      font: props.font || "LabelSmall",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  LabelSmall.displayName = "LabelSmall";
  var LabelXSmall = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-labelxsmall"
    }, props, {
      font: props.font || "LabelXSmall",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  LabelXSmall.displayName = "LabelXSmall";
  var ParagraphLarge = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-paragraphlarge",
      as: props.as || "p"
    }, props, {
      font: props.font || "ParagraphLarge",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  ParagraphLarge.displayName = "ParagraphLarge";
  var ParagraphMedium = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-paragraphmedium",
      as: props.as || "p"
    }, props, {
      font: props.font || "ParagraphMedium",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  ParagraphMedium.displayName = "ParagraphMedium";
  var ParagraphSmall = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-paragraphsmall",
      as: props.as || "p"
    }, props, {
      font: props.font || "ParagraphSmall",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  ParagraphSmall.displayName = "ParagraphSmall";
  var ParagraphXSmall = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-paragraphxsmall",
      as: props.as || "p"
    }, props, {
      font: props.font || "ParagraphXSmall",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  ParagraphXSmall.displayName = "ParagraphXSmall";
  var MonoDisplayLarge = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monodisplaylarge"
    }, props, {
      font: props.font || "MonoDisplayLarge",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoDisplayLarge.displayName = "MonoDisplayLarge";
  var MonoDisplayMedium = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monodisplaymedium"
    }, props, {
      font: props.font || "MonoDisplayMedium",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoDisplayMedium.displayName = "MonoDisplayMedium";
  var MonoDisplaySmall = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monodisplaysmall"
    }, props, {
      font: props.font || "MonoDisplaySmall",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoDisplaySmall.displayName = "MonoDisplaySmall";
  var MonoDisplayXSmall = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monodisplayxsmall"
    }, props, {
      font: props.font || "MonoDisplayXSmall",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoDisplayXSmall.displayName = "MonoDisplayXSmall";
  var MonoHeadingXXLarge = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monoheadingxxlarge",
      as: props.as || "h1"
    }, props, {
      font: props.font || "MonoHeadingXXLarge",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoHeadingXXLarge.displayName = "MonoHeadingXXLarge";
  var MonoHeadingXLarge = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monoheadingxlarge",
      as: props.as || "h2"
    }, props, {
      font: props.font || "MonoHeadingXLarge",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoHeadingXLarge.displayName = "MonoHeadingXLarge";
  var MonoHeadingLarge = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monoheadinglarge",
      as: props.as || "h3"
    }, props, {
      font: props.font || "MonoHeadingLarge",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoHeadingLarge.displayName = "MonoHeadingLarge";
  var MonoHeadingMedium = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monoheadingmedium",
      as: props.as || "h4"
    }, props, {
      font: props.font || "MonoHeadingMedium",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoHeadingMedium.displayName = "MonoHeadingMedium";
  var MonoHeadingSmall = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monoheadingsmall",
      as: props.as || "h5"
    }, props, {
      font: props.font || "MonoHeadingSmall",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoHeadingSmall.displayName = "MonoHeadingSmall";
  var MonoHeadingXSmall = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monoheadingxsmall",
      as: props.as || "h6"
    }, props, {
      font: props.font || "MonoHeadingXSmall",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoHeadingXSmall.displayName = "MonoHeadingXSmall";
  var MonoLabelLarge = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monolabellarge"
    }, props, {
      font: props.font || "MonoLabelLarge",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoLabelLarge.displayName = "MonoLabelLarge";
  var MonoLabelMedium = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monolabelmedium"
    }, props, {
      font: props.font || "MonoLabelMedium",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoLabelMedium.displayName = "MonoLabelMedium";
  var MonoLabelSmall = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monolabelsmall"
    }, props, {
      font: props.font || "MonoLabelSmall",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoLabelSmall.displayName = "MonoLabelSmall";
  var MonoLabelXSmall = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monolabelxsmall"
    }, props, {
      font: props.font || "MonoLabelXSmall",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoLabelXSmall.displayName = "MonoLabelXSmall";
  var MonoParagraphLarge = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monoparagraphlarge",
      as: props.as || "p"
    }, props, {
      font: props.font || "MonoParagraphLarge",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoParagraphLarge.displayName = "MonoParagraphLarge";
  var MonoParagraphMedium = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monoparagraphmedium",
      as: props.as || "p"
    }, props, {
      font: props.font || "MonoParagraphMedium",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoParagraphMedium.displayName = "MonoParagraphMedium";
  var MonoParagraphSmall = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monoparagraphsmall",
      as: props.as || "p"
    }, props, {
      font: props.font || "MonoParagraphSmall",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoParagraphSmall.displayName = "MonoParagraphSmall";
  var MonoParagraphXSmall = /* @__PURE__ */ React44.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React44.createElement(block_default, _extends27({
      "data-baseweb": "typo-monoparagraphxsmall",
      as: props.as || "p"
    }, props, {
      font: props.font || "MonoParagraphXSmall",
      color: props.color || "contentPrimary",
      ref
    }));
  });
  MonoParagraphXSmall.displayName = "MonoParagraphXSmall";

  // node_modules/baseui/esm/app-nav-bar/user-profile-tile.js
  function _slicedToArray19(arr, i) {
    return _arrayWithHoles18(arr) || _iterableToArrayLimit18(arr, i) || _unsupportedIterableToArray18(arr, i) || _nonIterableRest18();
  }
  function _nonIterableRest18() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray18(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray18(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray18(o, minLen);
  }
  function _arrayLikeToArray18(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit18(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles18(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function UserProfileTile(props) {
    var _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, username = props.username, usernameSubtitle = props.usernameSubtitle, userImgUrl = props.userImgUrl;
    var _getOverrides = getOverrides(overrides.UserProfileTileContainer, StyledUserProfileTileContainer), _getOverrides2 = _slicedToArray19(_getOverrides, 2), UserProfileTileContainer = _getOverrides2[0], userProfileTileContainerProps = _getOverrides2[1];
    var _getOverrides3 = getOverrides(overrides.UserProfilePictureContainer, StyledUserProfilePictureContainer), _getOverrides4 = _slicedToArray19(_getOverrides3, 2), UserProfilePictureContainer = _getOverrides4[0], userProfilePictureContainerProps = _getOverrides4[1];
    var _getOverrides5 = getOverrides(overrides.UserProfileInfoContainer, StyledUserProfileInfoContainer), _getOverrides6 = _slicedToArray19(_getOverrides5, 2), UserProfileInfoContainer = _getOverrides6[0], userProfileInfoContainerProps = _getOverrides6[1];
    return /* @__PURE__ */ React45.createElement(UserProfileTileContainer, userProfileTileContainerProps, /* @__PURE__ */ React45.createElement(UserProfilePictureContainer, userProfilePictureContainerProps, /* @__PURE__ */ React45.createElement(Avatar2, {
      name: username || "",
      src: userImgUrl,
      size: "48px"
    })), /* @__PURE__ */ React45.createElement(UserProfileInfoContainer, userProfileInfoContainerProps, /* @__PURE__ */ React45.createElement(LabelMedium, null, username), usernameSubtitle ? /* @__PURE__ */ React45.createElement(ParagraphSmall, {
      marginTop: "0",
      marginBottom: "0"
    }, usernameSubtitle) : null));
  }

  // node_modules/baseui/esm/app-nav-bar/utils.js
  function defaultMapItemToNode(item) {
    if (true) {
      if (!item.label) {
        throw Error("There needs to be an unique item.label. You can implement a custom mapping with the mapItemToNode prop.");
      }
    }
    return item.label;
  }
  function mapItemsActive(items, predicate) {
    return items.map(function(current) {
      if (predicate(current)) {
        current.active = true;
      } else {
        current.active = false;
      }
      if (current.children) {
        current.children = mapItemsActive(current.children, predicate);
        if (current.children.some(function(child) {
          return child.active;
        })) {
          current.active = true;
        }
      }
      return current;
    });
  }

  // node_modules/baseui/esm/app-nav-bar/mobile-menu.js
  var _excluded17 = ["item", "mapItemToNode", "overrides"];
  var _excluded24 = ["mainItems", "userItems", "mapItemToNode", "overrides"];
  function ownKeys21(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread21(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys21(Object(source2), true).forEach(function(key) {
        _defineProperty26(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys21(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty26(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toConsumableArray2(arr) {
    return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray19(arr) || _nonIterableSpread2();
  }
  function _nonIterableSpread2() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArray2(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }
  function _arrayWithoutHoles2(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray19(arr);
  }
  function _extends28() {
    _extends28 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends28.apply(this, arguments);
  }
  function _slicedToArray20(arr, i) {
    return _arrayWithHoles19(arr) || _iterableToArrayLimit19(arr, i) || _unsupportedIterableToArray19(arr, i) || _nonIterableRest19();
  }
  function _nonIterableRest19() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray19(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray19(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray19(o, minLen);
  }
  function _arrayLikeToArray19(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit19(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles19(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _objectWithoutProperties15(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose17(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose17(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  var USER_TITLE_ITEM = "USER_TITLE_ITEM";
  var USER_MENU_ITEM = "USER_MENU_ITEM";
  var PARENT_MENU_ITEM = "PARENT_MENU_ITEM";
  var MobileNavMenuItem = /* @__PURE__ */ React46.forwardRef(function(props, ref) {
    var item = props.item, _props$mapItemToNode = props.mapItemToNode, mapItemToNode = _props$mapItemToNode === void 0 ? defaultMapItemToNode : _props$mapItemToNode, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, restProps = _objectWithoutProperties15(props, _excluded17);
    var _getOverrides = getOverrides(overrides.UserMenuProfileListItem, StyledUserMenuProfileListItem), _getOverrides2 = _slicedToArray20(_getOverrides, 2), UserMenuProfileListItem = _getOverrides2[0], userMenuProfileListItemProps = _getOverrides2[1];
    if (item.PARENT_MENU_ITEM) {
      return /* @__PURE__ */ React46.createElement(menu_adapter_default, _extends28({}, restProps, {
        ref,
        artwork: item.navExitIcon || arrow_left_default,
        artworkSize: ARTWORK_SIZES.LARGE
      }), /* @__PURE__ */ React46.createElement(list_item_label_default, null, item.label));
    }
    if (item.USER_TITLE_ITEM) {
      return /* @__PURE__ */ React46.createElement(UserMenuProfileListItem, _extends28({}, restProps, userMenuProfileListItemProps, {
        ref
      }), /* @__PURE__ */ React46.createElement(UserProfileTile, item.item));
    }
    return /* @__PURE__ */ React46.createElement(menu_adapter_default, _extends28({}, restProps, {
      ref,
      artwork: item.icon || null,
      artworkSize: ARTWORK_SIZES.LARGE
    }), /* @__PURE__ */ React46.createElement(list_item_label_default, null, mapItemToNode(item)));
  });
  function MobileMenu(props) {
    var _ref2;
    var _props$mainItems = props.mainItems, mainItems = _props$mainItems === void 0 ? [] : _props$mainItems, _props$userItems = props.userItems, userItems = _props$userItems === void 0 ? [] : _props$userItems, mapItemToNode = props.mapItemToNode, _props$overrides2 = props.overrides, overrides = _props$overrides2 === void 0 ? {} : _props$overrides2, rest = _objectWithoutProperties15(props, _excluded24);
    var items = [].concat(_toConsumableArray2(userItems.length ? [(_ref2 = {
      item: _objectSpread21({}, rest),
      label: props.username
    }, _defineProperty26(_ref2, USER_TITLE_ITEM, true), _defineProperty26(_ref2, "children", userItems.map(function(item) {
      return _objectSpread21(_objectSpread21({}, item), {}, _defineProperty26({}, USER_MENU_ITEM, true));
    })), _ref2)] : []), _toConsumableArray2(mainItems));
    var _React$useState = React46.useState(false), _React$useState2 = _slicedToArray20(_React$useState, 2), isOpen = _React$useState2[0], setIsOpen = _React$useState2[1];
    var _React$useState3 = React46.useState(items), _React$useState4 = _slicedToArray20(_React$useState3, 2), currentNavItems = _React$useState4[0], setCurrentNavItems = _React$useState4[1];
    var _React$useState5 = React46.useState([]), _React$useState6 = _slicedToArray20(_React$useState5, 2), ancestorNavItems = _React$useState6[0], setAncestorNavItems = _React$useState6[1];
    var toggleMenu = function toggleMenu2() {
      setIsOpen(!isOpen);
    };
    var _getOverrides3 = getOverrides(overrides.SideMenuButton, button_default), _getOverrides4 = _slicedToArray20(_getOverrides3, 2), SideMenuButton = _getOverrides4[0], sideMenuButtonProps = _getOverrides4[1];
    sideMenuButtonProps.overrides = mergeOverrides({
      BaseButton: {
        component: StyledSideMenuButton
      }
    }, sideMenuButtonProps.overrides);
    var _getOverrides5 = getOverrides(overrides.MobileDrawer, drawer_default), _getOverrides6 = _slicedToArray20(_getOverrides5, 2), MobileDrawer = _getOverrides6[0], drawerProps = _getOverrides6[1];
    drawerProps.overrides = mergeOverrides({
      DrawerBody: {
        style: function style(_ref22) {
          var $theme = _ref22.$theme;
          return {
            marginTop: "0px",
            marginBottom: "0px",
            marginLeft: "0px",
            marginRight: "0px"
          };
        }
      },
      Close: function Close() {
        return null;
      }
    }, drawerProps.overrides);
    var _getOverrides7 = getOverrides(overrides.MobileMenu, StatefulMenu), _getOverrides8 = _slicedToArray20(_getOverrides7, 2), MobileMenu2 = _getOverrides8[0], menuProps = _getOverrides8[1];
    menuProps.overrides = mergeOverrides({
      List: {
        style: {
          paddingTop: "0",
          paddingBottom: "0",
          minHeight: "100vh",
          boxShadow: "none"
        }
      },
      ListItem: /* @__PURE__ */ React46.forwardRef(function(listItemProps, ref) {
        return /* @__PURE__ */ React46.createElement(MobileNavMenuItem, _extends28({
          ref
        }, listItemProps, {
          mapItemToNode,
          overrides
        }));
      })
    }, menuProps.overrides);
    return /* @__PURE__ */ React46.createElement(React46.Fragment, null, /* @__PURE__ */ React46.createElement(SideMenuButton, _extends28({
      onClick: toggleMenu
    }, sideMenuButtonProps), /* @__PURE__ */ React46.createElement(menu_default, {
      size: "24px"
    })), /* @__PURE__ */ React46.createElement(MobileDrawer, _extends28({
      anchor: ANCHOR.left,
      isOpen,
      onClose: toggleMenu,
      size: "75%"
    }, drawerProps), /* @__PURE__ */ React46.createElement(MobileMenu2, _extends28({
      items: currentNavItems,
      onItemSelect: function onItemSelect2(_ref3) {
        var item = _ref3.item;
        if (item.PARENT_MENU_ITEM) {
          var updatedAncestorNavItems = ancestorNavItems.slice(0, ancestorNavItems.length - 1);
          var isTopLevel = !updatedAncestorNavItems.length;
          if (isTopLevel) {
            setCurrentNavItems(items);
          } else {
            var newParentItem = _objectSpread21(_objectSpread21({}, updatedAncestorNavItems[updatedAncestorNavItems.length - 1]), {}, _defineProperty26({}, PARENT_MENU_ITEM, true));
            setCurrentNavItems([newParentItem].concat(_toConsumableArray2(newParentItem.children)));
          }
          setAncestorNavItems(updatedAncestorNavItems);
          return;
        }
        if (item.USER_MENU_ITEM && props.onUserItemSelect) {
          props.onUserItemSelect(item);
        } else if (!item.USER_TITLE_ITEM && props.onMainItemSelect) {
          props.onMainItemSelect(item);
        }
        if (item.children && item.children.length) {
          var parentItem = _objectSpread21(_objectSpread21({}, item), {}, _defineProperty26({}, PARENT_MENU_ITEM, true));
          setAncestorNavItems([].concat(_toConsumableArray2(ancestorNavItems), [item]));
          setCurrentNavItems([parentItem].concat(_toConsumableArray2(item.children)));
          return;
        }
        toggleMenu();
      }
    }, menuProps))));
  }

  // node_modules/baseui/esm/app-nav-bar/user-menu.js
  var React49 = __toESM(require_react());

  // node_modules/baseui/esm/icon/chevron-down.js
  var React47 = __toESM(require_react());
  var _excluded18 = ["title", "size", "color", "overrides"];
  function _extends29() {
    _extends29 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends29.apply(this, arguments);
  }
  function _objectWithoutProperties16(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose18(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose18(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _slicedToArray21(arr, i) {
    return _arrayWithHoles20(arr) || _iterableToArrayLimit20(arr, i) || _unsupportedIterableToArray20(arr, i) || _nonIterableRest20();
  }
  function _nonIterableRest20() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray20(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray20(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray20(o, minLen);
  }
  function _arrayLikeToArray20(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit20(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles20(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function ChevronDown(props, ref) {
    var _useStyletron = useStyletron2(), _useStyletron2 = _slicedToArray21(_useStyletron, 2), theme = _useStyletron2[1];
    var _props$title = props.title, title = _props$title === void 0 ? "Down" : _props$title, size = props.size, color = props.color, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, restProps = _objectWithoutProperties16(props, _excluded18);
    var SvgOverride = mergeOverride(
      {
        component: theme.icons && theme.icons.ChevronDown ? theme.icons.ChevronDown : null
      },
      overrides && overrides.Svg ? toObjectOverride(overrides.Svg) : {}
    );
    return /* @__PURE__ */ React47.createElement(icon_default, _extends29({
      viewBox: "0 0 24 24",
      ref,
      title,
      size,
      color,
      overrides: {
        Svg: SvgOverride
      }
    }, restProps), /* @__PURE__ */ React47.createElement("path", {
      transform: "rotate(270, 12, 12)",
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M9 12C9 12.2652 9.10536 12.5196 9.29289 12.7071L13.2929 16.7071C13.6834 17.0976 14.3166 17.0976 14.7071 16.7071C15.0976 16.3166 15.0976 15.6834 14.7071 15.2929L11.4142 12L14.7071 8.70711C15.0976 8.31658 15.0976 7.68342 14.7071 7.29289C14.3166 6.90237 13.6834 6.90237 13.2929 7.29289L9.29289 11.2929C9.10536 11.4804 9 11.7348 9 12Z"
    }));
  }
  var chevron_down_default = /* @__PURE__ */ React47.forwardRef(ChevronDown);

  // node_modules/baseui/esm/icon/chevron-up.js
  var React48 = __toESM(require_react());
  var _excluded19 = ["title", "size", "color", "overrides"];
  function _extends30() {
    _extends30 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends30.apply(this, arguments);
  }
  function _objectWithoutProperties17(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose19(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose19(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _slicedToArray22(arr, i) {
    return _arrayWithHoles21(arr) || _iterableToArrayLimit21(arr, i) || _unsupportedIterableToArray21(arr, i) || _nonIterableRest21();
  }
  function _nonIterableRest21() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray21(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray21(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray21(o, minLen);
  }
  function _arrayLikeToArray21(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit21(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles21(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function ChevronUp(props, ref) {
    var _useStyletron = useStyletron2(), _useStyletron2 = _slicedToArray22(_useStyletron, 2), theme = _useStyletron2[1];
    var _props$title = props.title, title = _props$title === void 0 ? "Up" : _props$title, size = props.size, color = props.color, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, restProps = _objectWithoutProperties17(props, _excluded19);
    var SvgOverride = mergeOverride(
      {
        component: theme.icons && theme.icons.ChevronUp ? theme.icons.ChevronUp : null
      },
      overrides && overrides.Svg ? toObjectOverride(overrides.Svg) : {}
    );
    return /* @__PURE__ */ React48.createElement(icon_default, _extends30({
      viewBox: "0 0 24 24",
      ref,
      title,
      size,
      color,
      overrides: {
        Svg: SvgOverride
      }
    }, restProps), /* @__PURE__ */ React48.createElement("path", {
      transform: "rotate(90, 12, 12)",
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M9 12C9 12.2652 9.10536 12.5196 9.29289 12.7071L13.2929 16.7071C13.6834 17.0976 14.3166 17.0976 14.7071 16.7071C15.0976 16.3166 15.0976 15.6834 14.7071 15.2929L11.4142 12L14.7071 8.70711C15.0976 8.31658 15.0976 7.68342 14.7071 7.29289C14.3166 6.90237 13.6834 6.90237 13.2929 7.29289L9.29289 11.2929C9.10536 11.4804 9 11.7348 9 12Z"
    }));
  }
  var chevron_up_default = /* @__PURE__ */ React48.forwardRef(ChevronUp);

  // node_modules/baseui/esm/app-nav-bar/user-menu.js
  var _excluded20 = ["children"];
  function _objectWithoutProperties18(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose20(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose20(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _slicedToArray23(arr, i) {
    return _arrayWithHoles22(arr) || _iterableToArrayLimit22(arr, i) || _unsupportedIterableToArray22(arr, i) || _nonIterableRest22();
  }
  function _nonIterableRest22() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray22(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray22(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray22(o, minLen);
  }
  function _arrayLikeToArray22(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit22(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles22(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _extends31() {
    _extends31 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends31.apply(this, arguments);
  }
  var MENU_ITEM_WIDTH = "275px";
  var UserMenuListItem = /* @__PURE__ */ React49.forwardRef(function(props, ref) {
    var item = props.item, _props$mapItemToNode = props.mapItemToNode, mapItemToNode = _props$mapItemToNode === void 0 ? defaultMapItemToNode : _props$mapItemToNode;
    return /* @__PURE__ */ React49.createElement(menu_adapter_default, _extends31({}, props, {
      ref,
      artwork: item.icon || null,
      artworkSize: ARTWORK_SIZES.LARGE
    }), /* @__PURE__ */ React49.createElement(list_item_label_default, null, mapItemToNode(item)));
  });
  var svgStyleOverride = function svgStyleOverride2(_ref2) {
    var $theme = _ref2.$theme;
    return {
      paddingLeft: $theme.sizing.scale200
    };
  };
  function UserMenuComponent(props) {
    var _React$useState = React49.useState(false), _React$useState2 = _slicedToArray23(_React$useState, 2), isOpen = _React$useState2[0], setIsOpen = _React$useState2[1];
    var _props$userItems = props.userItems, userItems = _props$userItems === void 0 ? [] : _props$userItems, username = props.username, userImgUrl = props.userImgUrl, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides;
    var _getOverrides = getOverrides(overrides.UserMenuProfileListItem, StyledUserMenuProfileListItem), _getOverrides2 = _slicedToArray23(_getOverrides, 2), UserMenuProfileListItem = _getOverrides2[0], userMenuProfileListItemProps = _getOverrides2[1];
    var _getOverrides3 = getOverrides(overrides.UserMenuButton, button_default), _getOverrides4 = _slicedToArray23(_getOverrides3, 2), UserMenuButton = _getOverrides4[0], userMenuButtonProps = _getOverrides4[1];
    userMenuButtonProps.overrides = mergeOverrides({
      BaseButton: {
        component: StyledUserMenuButton
      }
    }, userMenuButtonProps.overrides);
    var _getOverrides5 = getOverrides(overrides.UserMenu, StatefulMenu), _getOverrides6 = _slicedToArray23(_getOverrides5, 2), UserMenu = _getOverrides6[0], userMenuProps = _getOverrides6[1];
    userMenuProps.overrides = mergeOverrides({
      List: {
        component: /* @__PURE__ */ React49.forwardRef(function(_ref2, ref) {
          var children2 = _ref2.children, restProps = _objectWithoutProperties18(_ref2, _excluded20);
          return /* @__PURE__ */ React49.createElement(StyledList, _extends31({}, restProps, {
            ref
          }), /* @__PURE__ */ React49.createElement(UserMenuProfileListItem, userMenuProfileListItemProps, /* @__PURE__ */ React49.createElement(UserProfileTile, {
            username: props.username,
            usernameSubtitle: props.usernameSubtitle,
            userImgUrl: props.userImgUrl,
            overrides
          })), children2);
        }),
        style: {
          width: MENU_ITEM_WIDTH
        }
      },
      ListItem: /* @__PURE__ */ React49.forwardRef(function(listItemProps, ref) {
        return /* @__PURE__ */ React49.createElement(UserMenuListItem, _extends31({
          ref
        }, listItemProps, {
          mapItemToNode: props.mapItemToNode
        }));
      })
    }, userMenuProps.overrides);
    return /* @__PURE__ */ React49.createElement(stateful_popover_default, {
      content: function content(_ref3) {
        var close = _ref3.close;
        return /* @__PURE__ */ React49.createElement(UserMenu, _extends31({
          items: userItems,
          onItemSelect: function onItemSelect2(_ref4) {
            var item = _ref4.item;
            props.onItemSelect(item);
            close();
          }
        }, userMenuProps));
      },
      autoFocus: false,
      dismissOnEsc: true,
      dismissOnClickOutside: true,
      onOpen: function onOpen() {
        return setIsOpen(true);
      },
      onClose: function onClose() {
        return setIsOpen(false);
      },
      placement: PLACEMENT.bottomRight,
      popperOptions: {
        modifiers: {
          flip: {
            enabled: false
          }
        }
      },
      triggerType: TRIGGER_TYPE.click
    }, /* @__PURE__ */ React49.createElement(UserMenuButton, userMenuButtonProps, /* @__PURE__ */ React49.createElement(Avatar2, {
      name: username || "",
      src: userImgUrl,
      size: "32px"
    }), isOpen ? /* @__PURE__ */ React49.createElement(chevron_up_default, {
      size: 28,
      overrides: {
        Svg: {
          style: svgStyleOverride
        }
      }
    }) : /* @__PURE__ */ React49.createElement(chevron_down_default, {
      size: 28,
      overrides: {
        Svg: {
          style: svgStyleOverride
        }
      }
    })));
  }

  // node_modules/baseui/esm/app-nav-bar/app-nav-bar.js
  function _defineProperty27(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _extends32() {
    _extends32 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends32.apply(this, arguments);
  }
  function _slicedToArray24(arr, i) {
    return _arrayWithHoles23(arr) || _iterableToArrayLimit23(arr, i) || _unsupportedIterableToArray23(arr, i) || _nonIterableRest23();
  }
  function _nonIterableRest23() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray23(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray23(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray23(o, minLen);
  }
  function _arrayLikeToArray23(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit23(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles23(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function MainMenuItem(props) {
    var item = props.item, _props$kind = props.kind, kind = _props$kind === void 0 ? KIND.primary : _props$kind, mapItemToNode = props.mapItemToNode, onSelect = props.onSelect, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides;
    var _React$useState = React50.useState(false), _React$useState2 = _slicedToArray24(_React$useState, 2), focusVisible = _React$useState2[0], setFocusVisible = _React$useState2[1];
    function handleFocus(event) {
      if (isFocusVisible(event)) {
        setFocusVisible(true);
      }
    }
    function handleBlur(event) {
      if (focusVisible) {
        setFocusVisible(false);
      }
    }
    function handleClick(event) {
      if (onSelect) {
        onSelect(item);
      }
    }
    function handleKeyDown2(event) {
      if (event.key === "Enter" && onSelect) {
        onSelect(item);
      }
    }
    var _getOverrides = getOverrides(overrides.MainMenuItem, StyledMainMenuItem), _getOverrides2 = _slicedToArray24(_getOverrides, 2), MainMenuItemElement = _getOverrides2[0], mainMenuItemElementProps = _getOverrides2[1];
    return /* @__PURE__ */ React50.createElement(MainMenuItemElement, _extends32({
      $active: item.active,
      $isFocusVisible: focusVisible,
      $kind: kind,
      "aria-selected": item.active,
      onFocus: handleFocus,
      onBlur: handleBlur,
      onClick: handleClick,
      onKeyDown: handleKeyDown2,
      tabIndex: 0
    }, mainMenuItemElementProps), mapItemToNode(item));
  }
  function SecondaryMenu(props) {
    var _props$items = props.items, items = _props$items === void 0 ? [] : _props$items, mapItemToNode = props.mapItemToNode, onSelect = props.onSelect, _props$overrides2 = props.overrides, overrides = _props$overrides2 === void 0 ? {} : _props$overrides2;
    var _getOverrides3 = getOverrides(overrides.SecondaryMenuContainer, StyledSecondaryMenuContainer), _getOverrides4 = _slicedToArray24(_getOverrides3, 2), SecondaryMenuContainer = _getOverrides4[0], secondaryMenuContainerProps = _getOverrides4[1];
    return /* @__PURE__ */ React50.createElement(SecondaryMenuContainer, _extends32({
      role: "navigation",
      "aria-label": "Secondary navigation"
    }, secondaryMenuContainerProps), items.map(function(item, index2) {
      return /* @__PURE__ */ React50.createElement(MainMenuItem, {
        mapItemToNode,
        item,
        kind: KIND.secondary,
        key: index2,
        onSelect,
        overrides
      });
    }));
  }
  function AppNavBar(props) {
    var _useStyletron = useStyletron2(), _useStyletron2 = _slicedToArray24(_useStyletron, 2), css = _useStyletron2[0], theme = _useStyletron2[1];
    var title = props.title, _props$mapItemToNode = props.mapItemToNode, mapItemToNode = _props$mapItemToNode === void 0 ? defaultMapItemToNode : _props$mapItemToNode, _props$onMainItemSele = props.onMainItemSelect, onMainItemSelect = _props$onMainItemSele === void 0 ? function(item) {
    } : _props$onMainItemSele, _props$onUserItemSele = props.onUserItemSelect, onUserItemSelect = _props$onUserItemSele === void 0 ? function(item) {
    } : _props$onUserItemSele, _props$overrides3 = props.overrides, overrides = _props$overrides3 === void 0 ? {} : _props$overrides3, _props$userItems = props.userItems, userItems = _props$userItems === void 0 ? [] : _props$userItems, username = props.username, usernameSubtitle = props.usernameSubtitle, userImgUrl = props.userImgUrl;
    var mainItems = React50.useMemo(function() {
      if (props.isMainItemActive) {
        return mapItemsActive(props.mainItems || [], props.isMainItemActive);
      }
      return props.mainItems || [];
    }, [props.mainItems, props.isMainItemActive]);
    var _getOverrides5 = getOverrides(overrides.Root, StyledRoot3), _getOverrides6 = _slicedToArray24(_getOverrides5, 2), Root3 = _getOverrides6[0], rootProps = _getOverrides6[1];
    var _getOverrides7 = getOverrides(overrides.Spacing, StyledSpacing), _getOverrides8 = _slicedToArray24(_getOverrides7, 2), Spacing = _getOverrides8[0], spacingProps = _getOverrides8[1];
    var _getOverrides9 = getOverrides(overrides.AppName, StyledAppName), _getOverrides10 = _slicedToArray24(_getOverrides9, 2), AppName = _getOverrides10[0], appNameProps = _getOverrides10[1];
    var _getOverrides11 = getOverrides(overrides.PrimaryMenuContainer, StyledPrimaryMenuContainer), _getOverrides12 = _slicedToArray24(_getOverrides11, 2), PrimaryMenuContainer = _getOverrides12[0], primaryMenuContainerProps = _getOverrides12[1];
    var _getOverrides13 = getOverrides(overrides.DesktopMenuContainer, StyledDesktopMenuContainer), _getOverrides14 = _slicedToArray24(_getOverrides13, 2), DesktopMenuContainer = _getOverrides14[0], desktopMenuContainerProps = _getOverrides14[1];
    var _getOverrides15 = getOverrides(overrides.DesktopMenu, StyledDesktopMenu), _getOverrides16 = _slicedToArray24(_getOverrides15, 2), DesktopMenu = _getOverrides16[0], desktopMenuProps = _getOverrides16[1];
    var secondaryMenu;
    var desktopSubNavPosition = POSITION.horizontal;
    var mobileSubNavPosition = POSITION.vertical;
    return /* @__PURE__ */ React50.createElement(Root3, _extends32({}, rootProps, {
      "data-baseweb": "app-nav-bar"
    }), /* @__PURE__ */ React50.createElement("div", {
      className: css(_defineProperty27({}, "@media screen and (min-width: ".concat(theme.breakpoints.large, "px)"), {
        display: "none"
      }))
    }, /* @__PURE__ */ React50.createElement(Spacing, spacingProps, mainItems.length || userItems.length ? /* @__PURE__ */ React50.createElement(MobileMenu, props) : null, /* @__PURE__ */ React50.createElement(AppName, appNameProps, title)), secondaryMenu && mobileSubNavPosition === POSITION.horizontal && /* @__PURE__ */ React50.createElement(SecondaryMenu, {
      items: secondaryMenu,
      mapItemToNode,
      onSelect: onMainItemSelect,
      overrides
    })), /* @__PURE__ */ React50.createElement("div", {
      className: css(_defineProperty27({}, "@media screen and (max-width: ".concat(theme.breakpoints.large - 1, "px)"), {
        display: "none"
      }))
    }, /* @__PURE__ */ React50.createElement(DesktopMenuContainer, desktopMenuContainerProps, /* @__PURE__ */ React50.createElement(DesktopMenu, desktopMenuProps, /* @__PURE__ */ React50.createElement(AppName, appNameProps, title), /* @__PURE__ */ React50.createElement(PrimaryMenuContainer, _extends32({
      role: "navigation",
      "aria-label": "Main navigation"
    }, primaryMenuContainerProps), mainItems.map(function(item, index2) {
      if (item.active && item.children && item.children.length) {
        secondaryMenu = item.children;
        if (item.navPosition) {
          desktopSubNavPosition = item.navPosition.desktop || desktopSubNavPosition;
          mobileSubNavPosition = item.navPosition.mobile || mobileSubNavPosition;
        }
      }
      return /* @__PURE__ */ React50.createElement(MainMenuItem, {
        item,
        key: index2,
        mapItemToNode,
        onSelect: onMainItemSelect,
        overrides
      });
    })), userItems.length ? /* @__PURE__ */ React50.createElement(UserMenuComponent, {
      mapItemToNode,
      onItemSelect: onUserItemSelect,
      overrides,
      username,
      usernameSubtitle,
      userImgUrl,
      userItems
    }) : null)), secondaryMenu && desktopSubNavPosition === POSITION.horizontal && /* @__PURE__ */ React50.createElement(SecondaryMenu, {
      items: secondaryMenu,
      mapItemToNode,
      onSelect: onMainItemSelect,
      overrides
    })));
  }

  // node_modules/baseui/esm/layout-grid/constants.js
  var _Object$freeze;
  function _defineProperty28(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var BEHAVIOR = Object.freeze({
    fluid: "fluid",
    fixed: "fixed"
  });
  var ALIGNMENT = Object.freeze({
    start: "flex-start",
    center: "center",
    end: "flex-end"
  });
  var STYLE = Object.freeze({
    default: "default",
    compact: "compact"
  });
  var STYLE_VALUES = Object.freeze((_Object$freeze = {}, _defineProperty28(_Object$freeze, STYLE.default, null), _defineProperty28(_Object$freeze, STYLE.compact, {
    columns: [4, 8, 12],
    gutters: [16, 16, 16],
    margins: [16, 24, 24],
    gaps: 0,
    unit: "px",
    maxWidth: 1280
  }), _Object$freeze));

  // node_modules/baseui/esm/layout-grid/styled-components.js
  function ownKeys22(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread22(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys22(Object(source2), true).forEach(function(key) {
        _defineProperty29(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys22(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty29(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var StyledGridWrapper = styled2("div", function(_ref2) {
    var $theme = _ref2.$theme, _ref$$behavior = _ref2.$behavior, $behavior = _ref$$behavior === void 0 ? BEHAVIOR.fixed : _ref$$behavior, _ref$$gridMargins = _ref2.$gridMargins, $gridMargins = _ref$$gridMargins === void 0 ? $theme.grid.margins : _ref$$gridMargins, _ref$$gridMaxWidth = _ref2.$gridMaxWidth, $gridMaxWidth = _ref$$gridMaxWidth === void 0 ? $theme.grid.maxWidth : _ref$$gridMaxWidth, _ref$$gridUnit = _ref2.$gridUnit, $gridUnit = _ref$$gridUnit === void 0 ? $theme.grid.unit : _ref$$gridUnit;
    return {
      margin: "auto",
      maxWidth: $behavior === BEHAVIOR.fixed ? "".concat($gridMaxWidth + 2 * getResponsiveNumber($gridMargins, Infinity) - 1).concat($gridUnit) : null
    };
  });
  StyledGridWrapper.displayName = "StyledGridWrapper";
  StyledGridWrapper.displayName = "StyledGridWrapper";
  var StyledGrid = styled2("div", function(_ref2) {
    var $theme = _ref2.$theme, _ref2$$align = _ref2.$align, $align = _ref2$$align === void 0 ? null : _ref2$$align, _ref2$$behavior = _ref2.$behavior, $behavior = _ref2$$behavior === void 0 ? BEHAVIOR.fixed : _ref2$$behavior, _ref2$$gridGutters = _ref2.$gridGutters, $gridGutters = _ref2$$gridGutters === void 0 ? $theme.grid.gutters : _ref2$$gridGutters, _ref2$$gridMargins = _ref2.$gridMargins, $gridMargins = _ref2$$gridMargins === void 0 ? $theme.grid.margins : _ref2$$gridMargins, _ref2$$gridMaxWidth = _ref2.$gridMaxWidth, $gridMaxWidth = _ref2$$gridMaxWidth === void 0 ? $theme.grid.maxWidth : _ref2$$gridMaxWidth, _ref2$$gridUnit = _ref2.$gridUnit, $gridUnit = _ref2$$gridUnit === void 0 ? $theme.grid.unit : _ref2$$gridUnit;
    var mediaQueries = getMediaQueries($theme.breakpoints);
    var gridStyles = mediaQueries.reduce(function(acc, cur, idx) {
      return _objectSpread22(_objectSpread22({}, acc), {}, _defineProperty29({}, cur, {
        paddingLeft: "".concat(getResponsiveNumber($gridMargins, idx)).concat($gridUnit),
        paddingRight: "".concat(getResponsiveNumber($gridMargins, idx)).concat($gridUnit),
        marginLeft: "-".concat(getResponsiveNumber($gridGutters, idx) / 2).concat($gridUnit),
        marginRight: "-".concat(getResponsiveNumber($gridGutters, idx) / 2).concat($gridUnit),
        alignItems: getResponsiveValue($align, idx)
      }));
    }, {
      paddingLeft: "".concat(getResponsiveNumber($gridMargins, 0)).concat($gridUnit),
      paddingRight: "".concat(getResponsiveNumber($gridMargins, 0)).concat($gridUnit),
      marginLeft: "-".concat(getResponsiveNumber($gridGutters, 0) / 2).concat($gridUnit),
      marginRight: "-".concat(getResponsiveNumber($gridGutters, 0) / 2).concat($gridUnit),
      alignItems: getResponsiveValue($align, 0)
    });
    return _objectSpread22({
      boxSizing: "border-box",
      display: "flex",
      flexWrap: "wrap",
      maxWidth: $behavior === BEHAVIOR.fixed ? "".concat($gridMaxWidth + 2 * getResponsiveNumber($gridMargins, Infinity) - 1).concat($gridUnit) : null
    }, gridStyles);
  });
  StyledGrid.displayName = "StyledGrid";
  StyledGrid.displayName = "StyledGrid";
  var StyledCell = styled2("div", function(_ref3) {
    var $theme = _ref3.$theme, _ref3$$align = _ref3.$align, $align = _ref3$$align === void 0 ? null : _ref3$$align, _ref3$$order = _ref3.$order, $order = _ref3$$order === void 0 ? null : _ref3$$order, _ref3$$gridColumns = _ref3.$gridColumns, $gridColumns = _ref3$$gridColumns === void 0 ? $theme.grid.columns : _ref3$$gridColumns, _ref3$$gridGaps = _ref3.$gridGaps, $gridGaps = _ref3$$gridGaps === void 0 ? $theme.grid.gaps : _ref3$$gridGaps, _ref3$$gridGutters = _ref3.$gridGutters, $gridGutters = _ref3$$gridGutters === void 0 ? $theme.grid.gutters : _ref3$$gridGutters, _ref3$$gridUnit = _ref3.$gridUnit, $gridUnit = _ref3$$gridUnit === void 0 ? $theme.grid.unit : _ref3$$gridUnit, _ref3$$skip = _ref3.$skip, $skip = _ref3$$skip === void 0 ? [0, 0, 0] : _ref3$$skip, _ref3$$span = _ref3.$span, $span = _ref3$$span === void 0 ? [1, 1, 1] : _ref3$$span;
    var mediaQueries = getMediaQueries($theme.breakpoints);
    var cellStyles = mediaQueries.reduce(function(acc, cur, idx) {
      if (getResponsiveNumber($span, idx) === 0) {
        return _objectSpread22(_objectSpread22({}, acc), {}, _defineProperty29({}, cur, {
          width: "0",
          paddingLeft: "0",
          paddingRight: "0",
          marginLeft: "0",
          marginRight: "0",
          display: "none"
        }));
      }
      return _objectSpread22(_objectSpread22({}, acc), {}, _defineProperty29({}, cur, {
        display: "block",
        width: "calc(".concat(100 / getResponsiveNumber($gridColumns, idx) * Math.min(getResponsiveNumber($span, idx), getResponsiveNumber($gridColumns, idx)), "% - ").concat(getResponsiveNumber($gridGutters, idx)).concat($gridUnit, ")"),
        marginLeft: "calc(".concat(100 / getResponsiveNumber($gridColumns, idx) * Math.min(getResponsiveNumber($skip, idx), getResponsiveNumber($gridColumns, idx) - 1), "% + ").concat(getResponsiveNumber($gridGutters, idx) / 2).concat($gridUnit, ")"),
        marginRight: "".concat(getResponsiveNumber($gridGutters, idx) / 2).concat($gridUnit),
        marginBottom: "".concat(getResponsiveNumber($gridGaps, idx)).concat($gridUnit),
        alignSelf: getResponsiveValue($align, idx),
        order: getResponsiveNumber($order, idx)
      }));
    }, {
      width: "100%",
      marginLeft: "".concat(getResponsiveNumber($gridGutters, 0) / 2).concat($gridUnit),
      marginRight: "".concat(getResponsiveNumber($gridGutters, 0) / 2).concat($gridUnit),
      marginBottom: "".concat(getResponsiveNumber($gridGaps, 0)).concat($gridUnit),
      alignSelf: getResponsiveValue($align, 0),
      order: getResponsiveNumber($order, 0)
    });
    return _objectSpread22({
      boxSizing: "border-box"
    }, cellStyles);
  });
  StyledCell.displayName = "StyledCell";
  StyledCell.displayName = "StyledCell";
  function getResponsiveNumber(responsive, i) {
    var res = getResponsiveValue(responsive, i);
    return typeof res === "number" ? res : 0;
  }
  function getResponsiveValue(responsive, i) {
    if (!responsive) {
      return null;
    }
    if (!Array.isArray(responsive)) {
      return responsive;
    }
    if (typeof responsive[i] === "undefined") {
      return responsive[responsive.length - 1];
    }
    return responsive[i];
  }

  // node_modules/baseui/esm/layout-grid/grid.js
  var React51 = __toESM(require_react());
  function _extends33() {
    _extends33 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends33.apply(this, arguments);
  }
  function ownKeys23(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread23(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys23(Object(source2), true).forEach(function(key) {
        _defineProperty30(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys23(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty30(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _slicedToArray25(arr, i) {
    return _arrayWithHoles24(arr) || _iterableToArrayLimit24(arr, i) || _unsupportedIterableToArray24(arr, i) || _nonIterableRest24();
  }
  function _nonIterableRest24() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray24(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray24(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray24(o, minLen);
  }
  function _arrayLikeToArray24(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit24(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles24(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  var GridContext = /* @__PURE__ */ React51.createContext({});
  function Grid(_ref2) {
    var align = _ref2.align, behavior = _ref2.behavior, children2 = _ref2.children, gridColumns = _ref2.gridColumns, gridGaps = _ref2.gridGaps, gridGutters = _ref2.gridGutters, gridMargins = _ref2.gridMargins, gridMaxWidth = _ref2.gridMaxWidth, _ref$gridStyle = _ref2.gridStyle, gridStyle = _ref$gridStyle === void 0 ? STYLE.default : _ref$gridStyle, gridUnit = _ref2.gridUnit, _ref$overrides = _ref2.overrides, overrides = _ref$overrides === void 0 ? {} : _ref$overrides;
    var _getOverrides = getOverrides(overrides.Grid, StyledGrid), _getOverrides2 = _slicedToArray25(_getOverrides, 2), StyledGrid2 = _getOverrides2[0], overrideProps = _getOverrides2[1];
    var _getOverrides3 = getOverrides(overrides.GridWrapper, StyledGridWrapper), _getOverrides4 = _slicedToArray25(_getOverrides3, 2), StyledGridWrapper2 = _getOverrides4[0], wrapperProps = _getOverrides4[1];
    var presetStyleValues = STYLE_VALUES[gridStyle];
    var gridStyleValues = presetStyleValues ? {
      $gridGutters: presetStyleValues.gutters,
      $gridMargins: presetStyleValues.margins,
      $gridMaxWidth: presetStyleValues.maxWidth,
      $gridUnit: presetStyleValues.unit
    } : {};
    var gridContextStyleValues = presetStyleValues && {
      gridColumns: presetStyleValues.columns,
      gridGaps: presetStyleValues.gaps,
      gridGutters: presetStyleValues.gutters,
      gridUnit: presetStyleValues.unit
    };
    return /* @__PURE__ */ React51.createElement(StyledGridWrapper2, _extends33({
      $behavior: behavior,
      $gridMargins: gridMargins != null ? gridMargins : gridStyleValues.$gridMargins,
      $gridMaxWidth: gridMaxWidth != null ? gridMaxWidth : gridStyleValues.$gridMaxWidth,
      $gridUnit: gridUnit != null ? gridUnit : gridStyleValues.$gridUnit
    }, wrapperProps), /* @__PURE__ */ React51.createElement(StyledGrid2, _extends33({
      $align: align,
      $behavior: behavior,
      $gridGutters: gridGutters != null ? gridGutters : gridStyleValues.$gridGutters,
      $gridMargins: gridMargins != null ? gridMargins : gridStyleValues.$gridMargins,
      $gridMaxWidth: gridMaxWidth != null ? gridMaxWidth : gridStyleValues.$gridMaxWidth,
      $gridUnit: gridUnit != null ? gridUnit : gridStyleValues.$gridUnit
    }, overrideProps), /* @__PURE__ */ React51.createElement(GridContext.Provider, {
      value: _objectSpread23({
        gridColumns,
        gridGaps,
        gridGutters,
        gridUnit
      }, gridContextStyleValues)
    }, children2)));
  }

  // node_modules/baseui/esm/layout-grid/cell.js
  var import_react7 = __toESM(require_react());
  function _extends34() {
    _extends34 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends34.apply(this, arguments);
  }
  function _slicedToArray26(arr, i) {
    return _arrayWithHoles25(arr) || _iterableToArrayLimit25(arr, i) || _unsupportedIterableToArray25(arr, i) || _nonIterableRest25();
  }
  function _nonIterableRest25() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray25(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray25(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray25(o, minLen);
  }
  function _arrayLikeToArray25(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit25(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles25(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function Cell(_ref2) {
    var align = _ref2.align, children2 = _ref2.children, gridColumns = _ref2.gridColumns, gridGaps = _ref2.gridGaps, gridGutters = _ref2.gridGutters, gridUnit = _ref2.gridUnit, order = _ref2.order, skip = _ref2.skip, span = _ref2.span, _ref$overrides = _ref2.overrides, overrides = _ref$overrides === void 0 ? {} : _ref$overrides;
    var _getOverrides = getOverrides(overrides.Cell, StyledCell), _getOverrides2 = _slicedToArray26(_getOverrides, 2), StyledCell2 = _getOverrides2[0], overrideProps = _getOverrides2[1];
    var gridContext = import_react7.default.useContext(GridContext);
    return /* @__PURE__ */ import_react7.default.createElement(StyledCell2, _extends34({
      $align: align,
      $gridColumns: gridColumns || gridContext.gridColumns,
      $gridGaps: gridGaps || gridContext.gridGaps,
      $gridGutters: gridGutters || gridContext.gridGutters,
      $gridUnit: gridUnit || gridContext.gridUnit,
      $order: order,
      $skip: skip,
      $span: span
    }, overrideProps), children2);
  }

  // node_modules/baseui/esm/utils/deprecated-component.js
  var React53 = __toESM(require_react());
  function _extends35() {
    _extends35 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends35.apply(this, arguments);
  }
  function deprecated_component_default(Component15, displayName) {
    var DeprecatedComponent = /* @__PURE__ */ React53.forwardRef(function(props, ref) {
      if (true) {
        console.warn("We have stabilized the ".concat(displayName, ' component, so you can drop the "Unstable_" prefix from your imports. We will remove the "Unstable_" exports soon, so please make these changes as soon as possible!'));
      }
      return /* @__PURE__ */ React53.createElement(Component15, _extends35({}, props, {
        ref
      }));
    });
    DeprecatedComponent.displayName = "DeprecatedComponent";
    return DeprecatedComponent;
  }

  // node_modules/baseui/esm/layout-grid/index.js
  var componentName = "Layout Grid (baseui/layout-grid)";
  var Unstable_StyledGrid = deprecated_component_default(StyledGrid, componentName);
  var Unstable_StyledCell = deprecated_component_default(StyledCell, componentName);
  var Unstable_Grid = deprecated_component_default(Grid, componentName);
  var Unstable_Cell = deprecated_component_default(Cell, componentName);

  // src/routes/layout/PageLayout.tsx
  var import_react8 = __toESM(require_react());

  // node_modules/baseui/esm/spinner/constants.js
  var SIZE3 = {
    small: "small",
    medium: "medium",
    large: "large"
  };

  // node_modules/baseui/esm/spinner/styled-components.js
  var spin = {
    from: {
      transform: "rotate(0deg)"
    },
    to: {
      transform: "rotate(360deg)"
    }
  };
  var StyledSpinner = styled2("i", function(_ref2) {
    var $theme = _ref2.$theme, _ref$$color = _ref2.$color, $color = _ref$$color === void 0 ? $theme.colors.contentAccent : _ref$$color, $borderWidth = _ref2.$borderWidth, _ref$$size = _ref2.$size, $size = _ref$$size === void 0 ? SIZE3.medium : _ref$$size;
    var borderSize = {
      large: $theme.sizing.scale300,
      medium: $theme.sizing.scale100,
      small: $theme.sizing.scale0
    }[$borderWidth || $size];
    var boxSize = {
      large: $theme.sizing.scale1000,
      medium: $theme.sizing.scale900,
      small: $theme.sizing.scale800
    }[$size];
    if (!borderSize) {
      borderSize = $theme.sizing[$borderWidth];
      if (!borderSize) {
        borderSize = "".concat(parseInt($borderWidth), "px");
      }
    }
    if (!boxSize) {
      boxSize = $theme.sizing[$size];
      if (!boxSize) {
        boxSize = "".concat(parseInt($size), "px");
      }
    }
    return {
      display: "block",
      animationName: spin,
      animationDuration: $theme.animation.timing1000,
      animationIterationCount: "infinite",
      animationTimingFunction: "linear",
      borderLeftStyle: "solid",
      borderRightStyle: "solid",
      borderTopStyle: "solid",
      borderBottomStyle: "solid",
      borderRadius: "50%",
      borderTopColor: $color,
      borderRightColor: $theme.colors.backgroundTertiary,
      borderBottomColor: $theme.colors.backgroundTertiary,
      borderLeftColor: $theme.colors.backgroundTertiary,
      borderLeftWidth: borderSize,
      borderRightWidth: borderSize,
      borderTopWidth: borderSize,
      borderBottomWidth: borderSize,
      width: boxSize,
      height: boxSize,
      cursor: "wait"
    };
  });
  StyledSpinner.displayName = "StyledSpinner";
  StyledSpinner.displayName = "StyledSpinner";

  // src/routes/layout/PageLayout.tsx
  var Centered = styled2("div", {
    boxSizing: "border-box",
    width: "100vw",
    position: "fixed",
    top: "0",
    left: "0"
  });
  var PageLayout = () => {
    const [css] = useStyletron2();
    const navigate = useNavigate();
    const controlledNavItem = (label, route, overrides) => ({
      label,
      info: {
        route
      },
      ...overrides
    });
    const mainItems = [
      controlledNavItem("Save", "/recipe/save"),
      controlledNavItem("Search", "/recipe/search")
    ];
    function handleUserItemSelect(item) {
      if (item.info?.route)
        navigate(item.info.route);
    }
    function handleMainItemSelect(item) {
      if (item.info?.route)
        navigate(item.info.route);
    }
    return /* @__PURE__ */ import_react8.default.createElement(import_react8.default.Fragment, null, /* @__PURE__ */ import_react8.default.createElement(Layer, null, /* @__PURE__ */ import_react8.default.createElement(Centered, null, /* @__PURE__ */ import_react8.default.createElement(
      AppNavBar,
      {
        title: /* @__PURE__ */ import_react8.default.createElement(
          "a",
          {
            href: "/",
            onClick: (e) => {
              e.stopPropagation();
              navigate("/");
            },
            className: css({
              userSelect: "none",
              textDecoration: "inherit",
              textColor: "inherit"
            })
          },
          /* @__PURE__ */ import_react8.default.createElement(DisplaySmall, null, "Cook Wherever")
        ),
        mainItems,
        onMainItemSelect: handleMainItemSelect,
        onUserItemSelect: handleUserItemSelect
      }
    ))), /* @__PURE__ */ import_react8.default.createElement(block_default, { height: ["80px"], backgroundColor: "background" }), /* @__PURE__ */ import_react8.default.createElement(Grid, null, /* @__PURE__ */ import_react8.default.createElement(Cell, { skip: [0, 1, 1], span: [4, 6, 10] }, /* @__PURE__ */ import_react8.default.createElement(import_react8.Suspense, { fallback: /* @__PURE__ */ import_react8.default.createElement(StyledSpinner, null) }, /* @__PURE__ */ import_react8.default.createElement(Outlet, null)))));
  };

  // src/routes/index.tsx
  var import_react9 = __toESM(require_react());
  var Home = () => {
    return /* @__PURE__ */ import_react9.default.createElement(import_react9.default.Fragment, null, /* @__PURE__ */ import_react9.default.createElement(DisplayLarge, null, "hello!"), /* @__PURE__ */ import_react9.default.createElement(Link, { to: "/recipe/save" }, "Save Recipe"));
  };

  // src/routes/Recipe/Search/index.tsx
  var import_react11 = __toESM(require_react());

  // node_modules/baseui/esm/input/constants.js
  var CUSTOM_INPUT_TYPE = {
    textarea: "textarea"
  };
  var ADJOINED = {
    none: "none",
    left: "left",
    right: "right",
    both: "both"
  };
  var SIZE4 = {
    mini: "mini",
    default: "default",
    compact: "compact",
    large: "large"
  };
  var ENHANCER_POSITION = {
    start: "start",
    end: "end"
  };

  // node_modules/baseui/esm/input/input.js
  var React60 = __toESM(require_react());

  // node_modules/baseui/esm/input/utils.js
  function getSharedProps2(props, state) {
    var disabled = props.disabled, error = props.error, positive = props.positive, adjoined = props.adjoined, size = props.size, required = props.required, resize = props.resize, readOnly = props.readOnly;
    var isFocused = state.isFocused;
    return {
      $isFocused: isFocused,
      $disabled: disabled,
      $error: error,
      $positive: positive,
      $adjoined: adjoined,
      $size: size,
      $required: required,
      $resize: resize,
      $isReadOnly: readOnly
    };
  }

  // node_modules/baseui/esm/input/base-input.js
  var React59 = __toESM(require_react());

  // node_modules/baseui/esm/icon/delete-alt.js
  var React56 = __toESM(require_react());
  var _excluded21 = ["title", "size", "color", "overrides"];
  function _extends36() {
    _extends36 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends36.apply(this, arguments);
  }
  function _objectWithoutProperties19(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose21(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose21(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _slicedToArray27(arr, i) {
    return _arrayWithHoles26(arr) || _iterableToArrayLimit26(arr, i) || _unsupportedIterableToArray26(arr, i) || _nonIterableRest26();
  }
  function _nonIterableRest26() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray26(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray26(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray26(o, minLen);
  }
  function _arrayLikeToArray26(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit26(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles26(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function DeleteAlt(props, ref) {
    var _useStyletron = useStyletron2(), _useStyletron2 = _slicedToArray27(_useStyletron, 2), theme = _useStyletron2[1];
    var _props$title = props.title, title = _props$title === void 0 ? "Delete Alt" : _props$title, size = props.size, color = props.color, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, restProps = _objectWithoutProperties19(props, _excluded21);
    var SvgOverride = mergeOverride(
      {
        component: theme.icons && theme.icons.DeleteAlt ? theme.icons.DeleteAlt : null
      },
      overrides && overrides.Svg ? toObjectOverride(overrides.Svg) : {}
    );
    return /* @__PURE__ */ React56.createElement(icon_default, _extends36({
      viewBox: "0 0 24 24",
      ref,
      title,
      size,
      color,
      overrides: {
        Svg: SvgOverride
      }
    }, restProps), /* @__PURE__ */ React56.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M12 20C16.4183 20 20 16.4183 20 12C20 7.58173 16.4183 4 12 4C7.58173 4 4 7.58173 4 12C4 16.4183 7.58173 20 12 20ZM10.0303 8.96967C9.73743 8.67679 9.26257 8.67679 8.96967 8.96967C8.67676 9.26257 8.67676 9.73743 8.96967 10.0303L10.9393 12L8.96967 13.9697C8.67676 14.2626 8.67676 14.7374 8.96967 15.0303C9.26257 15.3232 9.73743 15.3232 10.0303 15.0303L12 13.0607L13.9697 15.0303C14.2626 15.3232 14.7374 15.3232 15.0303 15.0303C15.3232 14.7374 15.3232 14.2626 15.0303 13.9697L13.0607 12L15.0303 10.0303C15.3232 9.73743 15.3232 9.26257 15.0303 8.96967C14.7374 8.67679 14.2626 8.67679 13.9697 8.96967L12 10.9393L10.0303 8.96967Z"
    }));
  }
  var delete_alt_default = /* @__PURE__ */ React56.forwardRef(DeleteAlt);

  // node_modules/baseui/esm/input/styled-components.js
  function ownKeys24(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread24(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys24(Object(source2), true).forEach(function(key) {
        _defineProperty31(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys24(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty31(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var StyledMaskToggleButton = styled2("button", function(_ref2) {
    var _SIZE$mini$SIZE$compa;
    var $theme = _ref2.$theme, $size = _ref2.$size, $isFocusVisible = _ref2.$isFocusVisible;
    var pad2 = (_SIZE$mini$SIZE$compa = {}, _defineProperty31(_SIZE$mini$SIZE$compa, SIZE4.mini, $theme.sizing.scale400), _defineProperty31(_SIZE$mini$SIZE$compa, SIZE4.compact, $theme.sizing.scale400), _defineProperty31(_SIZE$mini$SIZE$compa, SIZE4.default, $theme.sizing.scale300), _defineProperty31(_SIZE$mini$SIZE$compa, SIZE4.large, $theme.sizing.scale200), _SIZE$mini$SIZE$compa)[$size];
    return {
      display: "flex",
      alignItems: "center",
      borderTopStyle: "none",
      borderBottomStyle: "none",
      borderLeftStyle: "none",
      borderRightStyle: "none",
      background: "none",
      paddingLeft: pad2,
      paddingRight: pad2,
      outline: $isFocusVisible ? "solid 3px ".concat($theme.colors.accent) : "none",
      color: $theme.colors.contentPrimary
    };
  });
  StyledMaskToggleButton.displayName = "StyledMaskToggleButton";
  StyledMaskToggleButton.displayName = "StyledMaskToggleButton";
  var StyledClearIconContainer = styled2("div", function(_ref2) {
    var _SIZE$mini$SIZE$compa2;
    var _ref2$$alignTop = _ref2.$alignTop, $alignTop = _ref2$$alignTop === void 0 ? false : _ref2$$alignTop, $size = _ref2.$size, $theme = _ref2.$theme;
    var pad2 = (_SIZE$mini$SIZE$compa2 = {}, _defineProperty31(_SIZE$mini$SIZE$compa2, SIZE4.mini, $theme.sizing.scale200), _defineProperty31(_SIZE$mini$SIZE$compa2, SIZE4.compact, $theme.sizing.scale200), _defineProperty31(_SIZE$mini$SIZE$compa2, SIZE4.default, $theme.sizing.scale100), _defineProperty31(_SIZE$mini$SIZE$compa2, SIZE4.large, $theme.sizing.scale0), _SIZE$mini$SIZE$compa2)[$size];
    return {
      display: "flex",
      alignItems: $alignTop ? "flex-start" : "center",
      paddingLeft: pad2,
      paddingRight: pad2,
      paddingTop: $alignTop ? $theme.sizing.scale500 : "0px",
      color: $theme.colors.contentPrimary
    };
  });
  StyledClearIconContainer.displayName = "StyledClearIconContainer";
  StyledClearIconContainer.displayName = "StyledClearIconContainer";
  var StyledClearIcon = styled2(delete_alt_default, function(_ref3) {
    var $theme = _ref3.$theme, $isFocusVisible = _ref3.$isFocusVisible;
    return {
      cursor: "pointer",
      outline: $isFocusVisible ? "solid 3px ".concat($theme.colors.accent) : "none"
    };
  });
  StyledClearIcon.displayName = "StyledClearIcon";
  StyledClearIcon.displayName = "StyledClearIcon";
  function getInputPadding(size, sizing3) {
    var _SIZE$mini$SIZE$compa3;
    return (_SIZE$mini$SIZE$compa3 = {}, _defineProperty31(_SIZE$mini$SIZE$compa3, SIZE4.mini, {
      paddingTop: sizing3.scale100,
      paddingBottom: sizing3.scale100,
      paddingLeft: sizing3.scale550,
      paddingRight: sizing3.scale550
    }), _defineProperty31(_SIZE$mini$SIZE$compa3, SIZE4.compact, {
      paddingTop: sizing3.scale200,
      paddingBottom: sizing3.scale200,
      paddingLeft: sizing3.scale550,
      paddingRight: sizing3.scale550
    }), _defineProperty31(_SIZE$mini$SIZE$compa3, SIZE4.default, {
      paddingTop: sizing3.scale400,
      paddingBottom: sizing3.scale400,
      paddingLeft: sizing3.scale550,
      paddingRight: sizing3.scale550
    }), _defineProperty31(_SIZE$mini$SIZE$compa3, SIZE4.large, {
      paddingTop: sizing3.scale550,
      paddingBottom: sizing3.scale550,
      paddingLeft: sizing3.scale550,
      paddingRight: sizing3.scale550
    }), _SIZE$mini$SIZE$compa3)[size];
  }
  function getRootPadding(adjoined, size, sizing3, direction, hasIconTrailing) {
    var ifLeftPad = adjoined === ADJOINED.both || adjoined === ADJOINED.left && direction !== "rtl" || adjoined === ADJOINED.right && direction === "rtl" || hasIconTrailing && direction === "rtl";
    var ifRightPad = adjoined === ADJOINED.both || adjoined === ADJOINED.right && direction !== "rtl" || adjoined === ADJOINED.left && direction === "rtl" || hasIconTrailing && direction !== "rtl";
    return {
      paddingLeft: ifLeftPad ? sizing3.scale550 : "0px",
      paddingRight: ifRightPad ? sizing3.scale550 : "0px"
    };
  }
  function getFont(size, typography) {
    var _SIZE$mini$SIZE$compa4;
    return (_SIZE$mini$SIZE$compa4 = {}, _defineProperty31(_SIZE$mini$SIZE$compa4, SIZE4.mini, typography.font100), _defineProperty31(_SIZE$mini$SIZE$compa4, SIZE4.compact, typography.font200), _defineProperty31(_SIZE$mini$SIZE$compa4, SIZE4.default, typography.font300), _defineProperty31(_SIZE$mini$SIZE$compa4, SIZE4.large, typography.font400), _SIZE$mini$SIZE$compa4)[size];
  }
  function getRootColors($disabled, $isFocused, $error) {
    var $positive = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    var colors2 = arguments.length > 4 ? arguments[4] : void 0;
    if ($disabled) {
      return {
        borderLeftColor: colors2.inputFillDisabled,
        borderRightColor: colors2.inputFillDisabled,
        borderTopColor: colors2.inputFillDisabled,
        borderBottomColor: colors2.inputFillDisabled,
        backgroundColor: colors2.inputFillDisabled
      };
    }
    if ($isFocused) {
      return {
        borderLeftColor: colors2.borderSelected,
        borderRightColor: colors2.borderSelected,
        borderTopColor: colors2.borderSelected,
        borderBottomColor: colors2.borderSelected,
        backgroundColor: colors2.inputFillActive
      };
    }
    if ($error) {
      return {
        borderLeftColor: colors2.inputBorderError,
        borderRightColor: colors2.inputBorderError,
        borderTopColor: colors2.inputBorderError,
        borderBottomColor: colors2.inputBorderError,
        backgroundColor: colors2.inputFillError
      };
    }
    if ($positive) {
      return {
        borderLeftColor: colors2.inputBorderPositive,
        borderRightColor: colors2.inputBorderPositive,
        borderTopColor: colors2.inputBorderPositive,
        borderBottomColor: colors2.inputBorderPositive,
        backgroundColor: colors2.inputFillPositive
      };
    }
    return {
      borderLeftColor: colors2.inputBorder,
      borderRightColor: colors2.inputBorder,
      borderTopColor: colors2.inputBorder,
      borderBottomColor: colors2.inputBorder,
      backgroundColor: colors2.inputFill
    };
  }
  function getRootBorderRadius(size, borders2) {
    var radius = borders2.inputBorderRadius;
    if (size === SIZE4.mini) {
      radius = borders2.inputBorderRadiusMini;
    }
    return {
      borderTopLeftRadius: radius,
      borderBottomLeftRadius: radius,
      borderTopRightRadius: radius,
      borderBottomRightRadius: radius
    };
  }
  var getRootStyles = function getRootStyles2(props) {
    var $isFocused = props.$isFocused, $adjoined = props.$adjoined, $error = props.$error, $disabled = props.$disabled, $positive = props.$positive, $size = props.$size, $theme = props.$theme, _props$$theme = props.$theme, borders2 = _props$$theme.borders, colors2 = _props$$theme.colors, sizing3 = _props$$theme.sizing, typography = _props$$theme.typography, animation2 = _props$$theme.animation, $hasIconTrailing = props.$hasIconTrailing;
    return _objectSpread24(_objectSpread24(_objectSpread24(_objectSpread24({
      boxSizing: "border-box",
      display: "flex",
      overflow: "hidden",
      width: "100%",
      borderLeftWidth: "2px",
      borderRightWidth: "2px",
      borderTopWidth: "2px",
      borderBottomWidth: "2px",
      borderLeftStyle: "solid",
      borderRightStyle: "solid",
      borderTopStyle: "solid",
      borderBottomStyle: "solid",
      transitionProperty: "border",
      transitionDuration: animation2.timing200,
      transitionTimingFunction: animation2.easeOutCurve
    }, getRootBorderRadius($size, borders2)), getFont($size, typography)), getRootColors($disabled, $isFocused, $error, $positive, colors2)), getRootPadding($adjoined, $size, sizing3, $theme.direction, $hasIconTrailing));
  };
  var Root2 = styled2("div", getRootStyles);
  Root2.displayName = "Root";
  Root2.displayName = "Root";
  function getInputEnhancerPadding($size, sizing3) {
    var _SIZE$mini$SIZE$compa5;
    return (_SIZE$mini$SIZE$compa5 = {}, _defineProperty31(_SIZE$mini$SIZE$compa5, SIZE4.mini, {
      paddingRight: sizing3.scale400,
      paddingLeft: sizing3.scale400
    }), _defineProperty31(_SIZE$mini$SIZE$compa5, SIZE4.compact, {
      paddingRight: sizing3.scale400,
      paddingLeft: sizing3.scale400
    }), _defineProperty31(_SIZE$mini$SIZE$compa5, SIZE4.default, {
      paddingRight: sizing3.scale300,
      paddingLeft: sizing3.scale300
    }), _defineProperty31(_SIZE$mini$SIZE$compa5, SIZE4.large, {
      paddingRight: sizing3.scale200,
      paddingLeft: sizing3.scale200
    }), _SIZE$mini$SIZE$compa5)[$size];
  }
  function getInputEnhancerColors($disabled, $isFocused, $error, $positive, colors2) {
    if ($disabled) {
      return {
        color: colors2.inputEnhancerTextDisabled,
        backgroundColor: colors2.inputFillDisabled
      };
    }
    if ($isFocused) {
      return {
        color: colors2.contentPrimary,
        backgroundColor: colors2.inputFillActive
      };
    }
    if ($error) {
      return {
        color: colors2.contentPrimary,
        backgroundColor: colors2.inputFillError
      };
    }
    if ($positive) {
      return {
        color: colors2.contentPrimary,
        backgroundColor: colors2.inputFillPositive
      };
    }
    return {
      color: colors2.contentPrimary,
      backgroundColor: colors2.inputFill
    };
  }
  var InputEnhancer = styled2("div", function(props) {
    var $size = props.$size, $disabled = props.$disabled, $isFocused = props.$isFocused, $error = props.$error, $positive = props.$positive, _props$$theme2 = props.$theme, colors2 = _props$$theme2.colors, sizing3 = _props$$theme2.sizing, typography = _props$$theme2.typography, animation2 = _props$$theme2.animation;
    return _objectSpread24(_objectSpread24(_objectSpread24({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      transitionProperty: "color, background-color",
      transitionDuration: animation2.timing200,
      transitionTimingFunction: animation2.easeOutCurve
    }, getFont($size, typography)), getInputEnhancerPadding($size, sizing3)), getInputEnhancerColors($disabled, $isFocused, $error, $positive, colors2));
  });
  InputEnhancer.displayName = "InputEnhancer";
  InputEnhancer.displayName = "InputEnhancer";
  function getInputContainerColors($disabled, $isFocused, $error, $positive, colors2) {
    if ($disabled) {
      return {
        color: colors2.inputTextDisabled,
        backgroundColor: colors2.inputFillDisabled
      };
    }
    if ($isFocused) {
      return {
        color: colors2.contentPrimary,
        backgroundColor: colors2.inputFillActive
      };
    }
    if ($error) {
      return {
        color: colors2.contentPrimary,
        backgroundColor: colors2.inputFillError
      };
    }
    if ($positive) {
      return {
        color: colors2.contentPrimary,
        backgroundColor: colors2.inputFillPositive
      };
    }
    return {
      color: colors2.contentPrimary,
      backgroundColor: colors2.inputFill
    };
  }
  var getInputContainerStyles = function getInputContainerStyles2(props) {
    var $isFocused = props.$isFocused, $error = props.$error, $disabled = props.$disabled, $positive = props.$positive, $size = props.$size, _props$$theme3 = props.$theme, colors2 = _props$$theme3.colors, typography = _props$$theme3.typography, animation2 = _props$$theme3.animation;
    return _objectSpread24(_objectSpread24({
      display: "flex",
      width: "100%",
      transitionProperty: "background-color",
      transitionDuration: animation2.timing200,
      transitionTimingFunction: animation2.easeOutCurve
    }, getFont($size, typography)), getInputContainerColors($disabled, $isFocused, $error, $positive, colors2));
  };
  var InputContainer = styled2("div", getInputContainerStyles);
  InputContainer.displayName = "InputContainer";
  InputContainer.displayName = "InputContainer";
  function getInputColors($disabled, $isFocused, $error, colors2) {
    if ($disabled) {
      return {
        color: colors2.inputTextDisabled,
        "-webkit-text-fill-color": colors2.inputTextDisabled,
        caretColor: colors2.contentPrimary,
        "::placeholder": {
          color: colors2.inputPlaceholderDisabled
        }
      };
    }
    return {
      color: colors2.contentPrimary,
      caretColor: colors2.contentPrimary,
      "::placeholder": {
        color: colors2.inputPlaceholder
      }
    };
  }
  var getInputStyles = function getInputStyles2(props) {
    var $disabled = props.$disabled, $isFocused = props.$isFocused, $error = props.$error, $size = props.$size, _props$$theme4 = props.$theme, colors2 = _props$$theme4.colors, sizing3 = _props$$theme4.sizing, typography = _props$$theme4.typography;
    return _objectSpread24(_objectSpread24(_objectSpread24({
      boxSizing: "border-box",
      backgroundColor: "transparent",
      borderLeftWidth: 0,
      borderRightWidth: 0,
      borderTopWidth: 0,
      borderBottomWidth: 0,
      borderLeftStyle: "none",
      borderRightStyle: "none",
      borderTopStyle: "none",
      borderBottomStyle: "none",
      outline: "none",
      width: "100%",
      minWidth: 0,
      maxWidth: "100%",
      cursor: $disabled ? "not-allowed" : "text",
      margin: "0",
      paddingTop: "0",
      paddingBottom: "0",
      paddingLeft: "0",
      paddingRight: "0"
    }, getFont($size, typography)), getInputPadding($size, sizing3)), getInputColors($disabled, $isFocused, $error, colors2));
  };
  var Input = styled2("input", getInputStyles);
  Input.displayName = "Input";
  Input.displayName = "Input";

  // node_modules/baseui/esm/icon/hide.js
  var React57 = __toESM(require_react());
  var _excluded25 = ["title", "size", "color", "overrides"];
  function _extends37() {
    _extends37 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends37.apply(this, arguments);
  }
  function _objectWithoutProperties20(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose22(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose22(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _slicedToArray28(arr, i) {
    return _arrayWithHoles27(arr) || _iterableToArrayLimit27(arr, i) || _unsupportedIterableToArray27(arr, i) || _nonIterableRest27();
  }
  function _nonIterableRest27() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray27(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray27(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray27(o, minLen);
  }
  function _arrayLikeToArray27(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit27(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles27(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function Hide(props, ref) {
    var _useStyletron = useStyletron2(), _useStyletron2 = _slicedToArray28(_useStyletron, 2), theme = _useStyletron2[1];
    var _props$title = props.title, title = _props$title === void 0 ? "Hide" : _props$title, size = props.size, color = props.color, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, restProps = _objectWithoutProperties20(props, _excluded25);
    var SvgOverride = mergeOverride(
      {
        component: theme.icons && theme.icons.Hide ? theme.icons.Hide : null
      },
      overrides && overrides.Svg ? toObjectOverride(overrides.Svg) : {}
    );
    return /* @__PURE__ */ React57.createElement(icon_default, _extends37({
      viewBox: "0 0 20 20",
      ref,
      title,
      size,
      color,
      overrides: {
        Svg: SvgOverride
      }
    }, restProps), /* @__PURE__ */ React57.createElement("path", {
      d: "M12.81 4.36l-1.77 1.78a4 4 0 00-4.9 4.9l-2.76 2.75C2.06 12.79.96 11.49.2 10a11 11 0 0112.6-5.64zm3.8 1.85c1.33 1 2.43 2.3 3.2 3.79a11 11 0 01-12.62 5.64l1.77-1.78a4 4 0 004.9-4.9l2.76-2.75zm-.25-3.99l1.42 1.42L3.64 17.78l-1.42-1.42L16.36 2.22z"
    }));
  }
  var hide_default = /* @__PURE__ */ React57.forwardRef(Hide);

  // node_modules/baseui/esm/icon/show.js
  var React58 = __toESM(require_react());
  var _excluded26 = ["title", "size", "color", "overrides"];
  function _extends38() {
    _extends38 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends38.apply(this, arguments);
  }
  function _objectWithoutProperties21(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose23(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose23(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _slicedToArray29(arr, i) {
    return _arrayWithHoles28(arr) || _iterableToArrayLimit28(arr, i) || _unsupportedIterableToArray28(arr, i) || _nonIterableRest28();
  }
  function _nonIterableRest28() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray28(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray28(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray28(o, minLen);
  }
  function _arrayLikeToArray28(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit28(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles28(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function Show(props, ref) {
    var _useStyletron = useStyletron2(), _useStyletron2 = _slicedToArray29(_useStyletron, 2), theme = _useStyletron2[1];
    var _props$title = props.title, title = _props$title === void 0 ? "Show" : _props$title, size = props.size, color = props.color, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, restProps = _objectWithoutProperties21(props, _excluded26);
    var SvgOverride = mergeOverride(
      {
        component: theme.icons && theme.icons.Show ? theme.icons.Show : null
      },
      overrides && overrides.Svg ? toObjectOverride(overrides.Svg) : {}
    );
    return /* @__PURE__ */ React58.createElement(icon_default, _extends38({
      viewBox: "0 0 20 20",
      ref,
      title,
      size,
      color,
      overrides: {
        Svg: SvgOverride
      }
    }, restProps), /* @__PURE__ */ React58.createElement("path", {
      d: "M.2 10a11 11 0 0119.6 0A11 11 0 01.2 10zm9.8 4a4 4 0 100-8 4 4 0 000 8zm0-2a2 2 0 110-4 2 2 0 010 4z"
    }));
  }
  var show_default = /* @__PURE__ */ React58.forwardRef(Show);

  // node_modules/baseui/esm/utils/create-event.js
  function createEvent(eventName) {
    var event;
    if (typeof window.Event === "function") {
      event = new window.Event(eventName, {
        bubbles: true,
        cancelable: true
      });
    } else {
      event = document.createEvent("Event");
      event.initEvent(eventName, true, true);
    }
    return event;
  }

  // node_modules/baseui/esm/input/base-input.js
  function _typeof13(obj) {
    "@babel/helpers - typeof";
    return _typeof13 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof13(obj);
  }
  function _extends39() {
    _extends39 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends39.apply(this, arguments);
  }
  function _slicedToArray30(arr, i) {
    return _arrayWithHoles29(arr) || _iterableToArrayLimit29(arr, i) || _unsupportedIterableToArray29(arr, i) || _nonIterableRest29();
  }
  function _nonIterableRest29() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray29(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray29(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray29(o, minLen);
  }
  function _arrayLikeToArray29(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit29(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles29(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _classCallCheck10(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties10(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass10(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties10(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties10(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _inherits10(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass)
      _setPrototypeOf11(subClass, superClass);
  }
  function _setPrototypeOf11(o, p) {
    _setPrototypeOf11 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf13(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf11(o, p);
  }
  function _createSuper10(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct10();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf10(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf10(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn10(this, result);
    };
  }
  function _possibleConstructorReturn10(self2, call) {
    if (call && (_typeof13(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized10(self2);
  }
  function _assertThisInitialized10(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct10() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf10(o) {
    _getPrototypeOf10 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf12(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf10(o);
  }
  function _defineProperty32(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var NullComponent = function NullComponent2() {
    return null;
  };
  var BaseInput = /* @__PURE__ */ function(_React$Component) {
    _inherits10(BaseInput2, _React$Component);
    var _super = _createSuper10(BaseInput2);
    function BaseInput2() {
      var _this;
      _classCallCheck10(this, BaseInput2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty32(_assertThisInitialized10(_this), "inputRef", _this.props.inputRef || /* @__PURE__ */ React59.createRef());
      _defineProperty32(_assertThisInitialized10(_this), "state", {
        isFocused: _this.props.autoFocus || false,
        isMasked: _this.props.type === "password",
        initialType: _this.props.type,
        isFocusVisibleForClear: false,
        isFocusVisibleForMaskToggle: false
      });
      _defineProperty32(_assertThisInitialized10(_this), "onInputKeyDown", function(e) {
        if (_this.props.clearOnEscape && e.key === "Escape" && _this.inputRef.current && !_this.props.readOnly) {
          _this.clearValue();
          e.stopPropagation();
        }
      });
      _defineProperty32(_assertThisInitialized10(_this), "onClearIconClick", function() {
        if (_this.inputRef.current)
          _this.clearValue();
        if (_this.inputRef.current)
          _this.inputRef.current.focus();
      });
      _defineProperty32(_assertThisInitialized10(_this), "onFocus", function(e) {
        _this.setState({
          isFocused: true
        });
        _this.props.onFocus(e);
      });
      _defineProperty32(_assertThisInitialized10(_this), "onBlur", function(e) {
        _this.setState({
          isFocused: false
        });
        _this.props.onBlur(e);
      });
      _defineProperty32(_assertThisInitialized10(_this), "handleFocusForMaskToggle", function(event) {
        if (isFocusVisible(event)) {
          _this.setState({
            isFocusVisibleForMaskToggle: true
          });
        }
      });
      _defineProperty32(_assertThisInitialized10(_this), "handleBlurForMaskToggle", function(event) {
        if (_this.state.isFocusVisibleForMaskToggle !== false) {
          _this.setState({
            isFocusVisibleForMaskToggle: false
          });
        }
      });
      _defineProperty32(_assertThisInitialized10(_this), "handleFocusForClear", function(event) {
        if (isFocusVisible(event)) {
          _this.setState({
            isFocusVisibleForClear: true
          });
        }
      });
      _defineProperty32(_assertThisInitialized10(_this), "handleBlurForClear", function(event) {
        if (_this.state.isFocusVisibleForClear !== false) {
          _this.setState({
            isFocusVisibleForClear: false
          });
        }
      });
      return _this;
    }
    _createClass10(BaseInput2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props = this.props, autoFocus = _this$props.autoFocus, clearable = _this$props.clearable;
        if (this.inputRef.current) {
          if (autoFocus) {
            this.inputRef.current.focus();
          }
          if (clearable) {
            this.inputRef.current.addEventListener("keydown", this.onInputKeyDown);
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var clearable = this.props.clearable;
        if (clearable && this.inputRef.current) {
          this.inputRef.current.removeEventListener("keydown", this.onInputKeyDown);
        }
      }
    }, {
      key: "clearValue",
      value: function clearValue() {
        var input = this.inputRef.current;
        if (input) {
          var nativeInputValue = Object.getOwnPropertyDescriptor(this.props.type === CUSTOM_INPUT_TYPE.textarea ? HTMLTextAreaElement.prototype : HTMLInputElement.prototype, "value");
          if (nativeInputValue) {
            var nativeInputValueSetter = nativeInputValue.set;
            if (nativeInputValueSetter) {
              nativeInputValueSetter.call(input, "");
              var event = createEvent("input");
              input.dispatchEvent(event);
            }
          }
        }
      }
    }, {
      key: "getInputType",
      value: function getInputType() {
        if (this.props.type === "password") {
          return this.state.isMasked ? "password" : "text";
        } else {
          return this.props.type;
        }
      }
    }, {
      key: "renderMaskToggle",
      value: function renderMaskToggle() {
        var _SIZE$mini$SIZE$compa, _this2 = this;
        if (this.props.type !== "password")
          return null;
        var _getOverrides = getOverrides(this.props.overrides.MaskToggleButton, StyledMaskToggleButton), _getOverrides2 = _slicedToArray30(_getOverrides, 2), MaskToggleButton = _getOverrides2[0], maskToggleButtonProps = _getOverrides2[1];
        var _getOverrides3 = getOverrides(this.props.overrides.MaskToggleShowIcon, show_default), _getOverrides4 = _slicedToArray30(_getOverrides3, 2), MaskToggleShowIcon = _getOverrides4[0], maskToggleIconShowProps = _getOverrides4[1];
        var _getOverrides5 = getOverrides(this.props.overrides.MaskToggleHideIcon, hide_default), _getOverrides6 = _slicedToArray30(_getOverrides5, 2), MaskToggleHideIcon = _getOverrides6[0], maskToggleIconHideProps = _getOverrides6[1];
        var label = this.state.isMasked ? "Show password text" : "Hide password text";
        var iconSize = (_SIZE$mini$SIZE$compa = {}, _defineProperty32(_SIZE$mini$SIZE$compa, SIZE4.mini, "12px"), _defineProperty32(_SIZE$mini$SIZE$compa, SIZE4.compact, "16px"), _defineProperty32(_SIZE$mini$SIZE$compa, SIZE4.default, "20px"), _defineProperty32(_SIZE$mini$SIZE$compa, SIZE4.large, "24px"), _SIZE$mini$SIZE$compa)[this.props.size];
        return /* @__PURE__ */ React59.createElement(MaskToggleButton, _extends39({
          $size: this.props.size,
          $isFocusVisible: this.state.isFocusVisibleForMaskToggle,
          "aria-label": label,
          onClick: function onClick() {
            return _this2.setState(function(state) {
              return {
                isMasked: !state.isMasked
              };
            });
          },
          title: label,
          type: "button"
        }, maskToggleButtonProps, {
          onFocus: forkFocus(maskToggleButtonProps, this.handleFocusForMaskToggle),
          onBlur: forkBlur(maskToggleButtonProps, this.handleBlurForMaskToggle)
        }), this.state.isMasked ? /* @__PURE__ */ React59.createElement(MaskToggleShowIcon, _extends39({
          size: iconSize,
          title: label
        }, maskToggleIconShowProps)) : /* @__PURE__ */ React59.createElement(MaskToggleHideIcon, _extends39({
          size: iconSize,
          title: label
        }, maskToggleIconHideProps)));
      }
    }, {
      key: "renderClear",
      value: function renderClear() {
        var _SIZE$mini$SIZE$compa2, _this3 = this;
        var _this$props2 = this.props, clearable = _this$props2.clearable, value = _this$props2.value, disabled = _this$props2.disabled, readOnly = _this$props2.readOnly, _this$props2$override = _this$props2.overrides, overrides = _this$props2$override === void 0 ? {} : _this$props2$override;
        if (disabled || readOnly || !clearable || value == null || typeof value === "string" && value.length === 0) {
          return null;
        }
        var _getOverrides7 = getOverrides(overrides.ClearIconContainer, StyledClearIconContainer), _getOverrides8 = _slicedToArray30(_getOverrides7, 2), ClearIconContainer = _getOverrides8[0], clearIconContainerProps = _getOverrides8[1];
        var _getOverrides9 = getOverrides(overrides.ClearIcon, StyledClearIcon), _getOverrides10 = _slicedToArray30(_getOverrides9, 2), ClearIcon = _getOverrides10[0], clearIconProps = _getOverrides10[1];
        var ariaLabel = "Clear value";
        var sharedProps = getSharedProps2(this.props, this.state);
        var iconSize = (_SIZE$mini$SIZE$compa2 = {}, _defineProperty32(_SIZE$mini$SIZE$compa2, SIZE4.mini, "14px"), _defineProperty32(_SIZE$mini$SIZE$compa2, SIZE4.compact, "14px"), _defineProperty32(_SIZE$mini$SIZE$compa2, SIZE4.default, "16px"), _defineProperty32(_SIZE$mini$SIZE$compa2, SIZE4.large, "22px"), _SIZE$mini$SIZE$compa2)[this.props.size];
        return /* @__PURE__ */ React59.createElement(ClearIconContainer, _extends39({
          $alignTop: this.props.type === CUSTOM_INPUT_TYPE.textarea
        }, sharedProps, clearIconContainerProps), /* @__PURE__ */ React59.createElement(ClearIcon, _extends39({
          size: iconSize,
          tabIndex: 0,
          title: ariaLabel,
          "aria-label": ariaLabel,
          onClick: this.onClearIconClick,
          onKeyDown: function onKeyDown2(event) {
            if (event.key && (event.key === "Enter" || event.key === " ")) {
              event.preventDefault();
              _this3.onClearIconClick();
            }
          },
          role: "button",
          $isFocusVisible: this.state.isFocusVisibleForClear
        }, sharedProps, clearIconProps, {
          onFocus: forkFocus(clearIconProps, this.handleFocusForClear),
          onBlur: forkBlur(clearIconProps, this.handleBlurForClear)
        })));
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props$overrides = this.props.overrides, InputContainerOverride = _this$props$overrides.InputContainer, InputOverride = _this$props$overrides.Input, BeforeOverride = _this$props$overrides.Before, AfterOverride = _this$props$overrides.After;
        var autoComplete = this.state.initialType === "password" && this.props.autoComplete === BaseInput2.defaultProps.autoComplete ? "new-password" : this.props.autoComplete;
        var sharedProps = getSharedProps2(this.props, this.state);
        var _getOverrides11 = getOverrides(InputContainerOverride, InputContainer), _getOverrides12 = _slicedToArray30(_getOverrides11, 2), InputContainer2 = _getOverrides12[0], inputContainerProps = _getOverrides12[1];
        var _getOverrides13 = getOverrides(InputOverride, Input), _getOverrides14 = _slicedToArray30(_getOverrides13, 2), Input3 = _getOverrides14[0], inputProps = _getOverrides14[1];
        var _getOverrides15 = getOverrides(BeforeOverride, NullComponent), _getOverrides16 = _slicedToArray30(_getOverrides15, 2), Before = _getOverrides16[0], beforeProps = _getOverrides16[1];
        var _getOverrides17 = getOverrides(AfterOverride, NullComponent), _getOverrides18 = _slicedToArray30(_getOverrides17, 2), After = _getOverrides18[0], afterProps = _getOverrides18[1];
        return /* @__PURE__ */ React59.createElement(InputContainer2, _extends39({
          "data-baseweb": this.props["data-baseweb"] || "base-input"
        }, sharedProps, inputContainerProps), /* @__PURE__ */ React59.createElement(Before, _extends39({}, sharedProps, beforeProps)), /* @__PURE__ */ React59.createElement(Input3, _extends39({
          ref: this.inputRef,
          "aria-activedescendant": this.props["aria-activedescendant"],
          "aria-autocomplete": this.props["aria-autocomplete"],
          "aria-controls": this.props["aria-controls"],
          "aria-errormessage": this.props["aria-errormessage"],
          "aria-haspopup": this.props["aria-haspopup"],
          "aria-label": this.props["aria-label"],
          "aria-labelledby": this.props["aria-labelledby"],
          "aria-describedby": this.props["aria-describedby"],
          "aria-invalid": this.props.error,
          "aria-required": this.props.required,
          autoComplete,
          disabled: this.props.disabled,
          readOnly: this.props.readOnly,
          id: this.props.id,
          inputMode: this.props.inputMode,
          maxLength: this.props.maxLength,
          name: this.props.name,
          onBlur: this.onBlur,
          onChange: this.props.onChange,
          onFocus: this.onFocus,
          onKeyDown: this.props.onKeyDown,
          onKeyPress: this.props.onKeyPress,
          onKeyUp: this.props.onKeyUp,
          pattern: this.props.pattern,
          placeholder: this.props.placeholder,
          type: this.getInputType(),
          required: this.props.required,
          role: this.props.role,
          value: this.props.value,
          min: this.props.min,
          max: this.props.max,
          step: this.props.step,
          rows: this.props.type === CUSTOM_INPUT_TYPE.textarea ? this.props.rows : null
        }, sharedProps, inputProps)), this.renderClear(), this.renderMaskToggle(), /* @__PURE__ */ React59.createElement(After, _extends39({}, sharedProps, afterProps)));
      }
    }]);
    return BaseInput2;
  }(React59.Component);
  _defineProperty32(BaseInput, "defaultProps", {
    "aria-activedescendant": null,
    "aria-autocomplete": null,
    "aria-controls": null,
    "aria-errormessage": null,
    "aria-haspopup": null,
    "aria-label": null,
    "aria-labelledby": null,
    "aria-describedby": null,
    adjoined: ADJOINED.none,
    autoComplete: "on",
    autoFocus: false,
    disabled: false,
    error: false,
    positive: false,
    name: "",
    inputMode: "text",
    onBlur: function onBlur3() {
    },
    onChange: function onChange() {
    },
    onKeyDown: function onKeyDown() {
    },
    onKeyPress: function onKeyPress() {
    },
    onKeyUp: function onKeyUp() {
    },
    onFocus: function onFocus3() {
    },
    onClear: function onClear() {
    },
    clearable: false,
    clearOnEscape: true,
    overrides: {},
    pattern: null,
    placeholder: "",
    required: false,
    role: null,
    size: SIZE4.default,
    type: "text",
    readOnly: false
  });
  var base_input_default = BaseInput;

  // node_modules/baseui/esm/input/input.js
  function _typeof14(obj) {
    "@babel/helpers - typeof";
    return _typeof14 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof14(obj);
  }
  var _excluded27 = ["Root", "StartEnhancer", "EndEnhancer"];
  var _excluded28 = ["startEnhancer", "endEnhancer", "overrides"];
  function _extends40() {
    _extends40 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends40.apply(this, arguments);
  }
  function _slicedToArray31(arr, i) {
    return _arrayWithHoles30(arr) || _iterableToArrayLimit30(arr, i) || _unsupportedIterableToArray30(arr, i) || _nonIterableRest30();
  }
  function _nonIterableRest30() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray30(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray30(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray30(o, minLen);
  }
  function _arrayLikeToArray30(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit30(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles30(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _objectWithoutProperties22(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose24(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose24(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _classCallCheck11(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties11(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass11(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties11(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties11(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _inherits11(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass)
      _setPrototypeOf12(subClass, superClass);
  }
  function _setPrototypeOf12(o, p) {
    _setPrototypeOf12 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf13(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf12(o, p);
  }
  function _createSuper11(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct11();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf11(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf11(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn11(this, result);
    };
  }
  function _possibleConstructorReturn11(self2, call) {
    if (call && (_typeof14(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized11(self2);
  }
  function _assertThisInitialized11(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct11() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf11(o) {
    _getPrototypeOf11 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf12(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf11(o);
  }
  function _defineProperty33(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var Input2 = /* @__PURE__ */ function(_React$Component) {
    _inherits11(Input3, _React$Component);
    var _super = _createSuper11(Input3);
    function Input3() {
      var _this;
      _classCallCheck11(this, Input3);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty33(_assertThisInitialized11(_this), "state", {
        isFocused: _this.props.autoFocus || false
      });
      _defineProperty33(_assertThisInitialized11(_this), "onFocus", function(e) {
        _this.setState({
          isFocused: true
        });
        _this.props.onFocus(e);
      });
      _defineProperty33(_assertThisInitialized11(_this), "onBlur", function(e) {
        _this.setState({
          isFocused: false
        });
        _this.props.onBlur(e);
      });
      return _this;
    }
    _createClass11(Input3, [{
      key: "render",
      value: function render() {
        var _this$props = this.props, startEnhancer = _this$props.startEnhancer, endEnhancer = _this$props.endEnhancer, _this$props$overrides = _this$props.overrides, RootOverride = _this$props$overrides.Root, StartEnhancerOverride = _this$props$overrides.StartEnhancer, EndEnhancerOverride = _this$props$overrides.EndEnhancer, restOverrides = _objectWithoutProperties22(_this$props$overrides, _excluded27), restProps = _objectWithoutProperties22(_this$props, _excluded28);
        var _getOverrides = getOverrides(RootOverride, Root2), _getOverrides2 = _slicedToArray31(_getOverrides, 2), Root3 = _getOverrides2[0], rootProps = _getOverrides2[1];
        var _getOverrides3 = getOverrides(StartEnhancerOverride, InputEnhancer), _getOverrides4 = _slicedToArray31(_getOverrides3, 2), StartEnhancer2 = _getOverrides4[0], startEnhancerProps = _getOverrides4[1];
        var _getOverrides5 = getOverrides(EndEnhancerOverride, InputEnhancer), _getOverrides6 = _slicedToArray31(_getOverrides5, 2), EndEnhancer2 = _getOverrides6[0], endEnhancerProps = _getOverrides6[1];
        var sharedProps = getSharedProps2(this.props, this.state);
        if (true) {
          if (this.props.error && this.props.positive) {
            console.warn("[Input] `error` and `positive` are both set to `true`. `error` will take precedence but this may not be what you want.");
          }
        }
        return /* @__PURE__ */ React60.createElement(Root3, _extends40({
          "data-baseweb": "input"
        }, sharedProps, rootProps, {
          $adjoined: getAdjoinedProp(startEnhancer, endEnhancer),
          $hasIconTrailing: this.props.clearable || this.props.type == "password"
        }), isEnhancer(startEnhancer) && /* @__PURE__ */ React60.createElement(StartEnhancer2, _extends40({}, sharedProps, startEnhancerProps, {
          $position: ENHANCER_POSITION.start
        }), typeof startEnhancer === "function" ? startEnhancer(sharedProps) : startEnhancer), /* @__PURE__ */ React60.createElement(base_input_default, _extends40({}, restProps, {
          overrides: restOverrides,
          adjoined: getAdjoinedProp(startEnhancer, endEnhancer),
          onFocus: this.onFocus,
          onBlur: this.onBlur
        })), isEnhancer(endEnhancer) && /* @__PURE__ */ React60.createElement(EndEnhancer2, _extends40({}, sharedProps, endEnhancerProps, {
          $position: ENHANCER_POSITION.end
        }), typeof endEnhancer === "function" ? endEnhancer(sharedProps) : endEnhancer));
      }
    }]);
    return Input3;
  }(React60.Component);
  _defineProperty33(Input2, "defaultProps", {
    autoComplete: "on",
    autoFocus: false,
    disabled: false,
    name: "",
    onBlur: function onBlur4() {
    },
    onFocus: function onFocus4() {
    },
    overrides: {},
    required: false,
    size: SIZE4.default,
    startEnhancer: null,
    endEnhancer: null,
    clearable: false,
    type: "text",
    readOnly: false
  });
  function getAdjoinedProp(startEnhancer, endEnhancer) {
    if (isEnhancer(startEnhancer) && isEnhancer(endEnhancer)) {
      return ADJOINED.both;
    } else if (isEnhancer(startEnhancer)) {
      return ADJOINED.left;
    } else if (isEnhancer(endEnhancer)) {
      return ADJOINED.right;
    }
    return ADJOINED.none;
  }
  function isEnhancer(enhancer) {
    return Boolean(enhancer || enhancer === 0);
  }
  var input_default = Input2;

  // src/routes/Recipe/Search/__generated__/RecipeListQuery.graphql.ts
  var node2 = function() {
    var v0 = [
      {
        "defaultValue": null,
        "kind": "LocalArgument",
        "name": "search"
      }
    ], v1 = {
      "alias": null,
      "args": null,
      "kind": "ScalarField",
      "name": "name",
      "storageKey": null
    }, v2 = [
      {
        "alias": null,
        "args": [
          {
            "fields": [
              {
                "fields": [
                  {
                    "kind": "Variable",
                    "name": "_ilike",
                    "variableName": "search"
                  }
                ],
                "kind": "ObjectValue",
                "name": "name"
              }
            ],
            "kind": "ObjectValue",
            "name": "where"
          }
        ],
        "concreteType": "RecipeRecipe",
        "kind": "LinkedField",
        "name": "recipeRecipe",
        "plural": true,
        "selections": [
          {
            "alias": null,
            "args": null,
            "kind": "ScalarField",
            "name": "id",
            "storageKey": null
          },
          v1,
          {
            "alias": null,
            "args": null,
            "concreteType": "RecipeSourceProvider",
            "kind": "LinkedField",
            "name": "source_provider",
            "plural": false,
            "selections": [
              v1
            ],
            "storageKey": null
          }
        ],
        "storageKey": null
      }
    ];
    return {
      "fragment": {
        "argumentDefinitions": v0,
        "kind": "Fragment",
        "metadata": null,
        "name": "RecipeListQuery",
        "selections": v2,
        "type": "query_root",
        "abstractKey": null
      },
      "kind": "Request",
      "operation": {
        "argumentDefinitions": v0,
        "kind": "Operation",
        "name": "RecipeListQuery",
        "selections": v2
      },
      "params": {
        "cacheID": "ba2b727b8ee8e4b3b45efcd43f86a8de",
        "id": null,
        "metadata": {},
        "name": "RecipeListQuery",
        "operationKind": "query",
        "text": "query RecipeListQuery(\n  $search: String!\n) {\n  recipeRecipe(where: {name: {_ilike: $search}}) {\n    id\n    name\n    source_provider {\n      name\n    }\n  }\n}\n"
      }
    };
  }();
  node2.hash = "adfcb1aa11cbfaf4381731009722340e";
  var RecipeListQuery_graphql_default = node2;

  // src/routes/Recipe/Search/RecipeList.tsx
  var import_react10 = __toESM(require_react());
  var import_react_relay = __toESM(require_react_relay());

  // node_modules/baseui/esm/flex-grid/flex-grid.js
  var React62 = __toESM(require_react());

  // node_modules/baseui/esm/helpers/react-helpers.js
  var React61 = __toESM(require_react());
  var import_react_is2 = __toESM(require_react_is());
  function _toConsumableArray3(arr) {
    return _arrayWithoutHoles3(arr) || _iterableToArray3(arr) || _unsupportedIterableToArray31(arr) || _nonIterableSpread3();
  }
  function _nonIterableSpread3() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray31(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray31(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray31(o, minLen);
  }
  function _iterableToArray3(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }
  function _arrayWithoutHoles3(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray31(arr);
  }
  function _arrayLikeToArray31(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  var flattenFragments = function flattenFragments2(children2, ChildWrapper) {
    var depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    return React61.Children.toArray(children2).reduce(function(acc, child, i) {
      if ((0, import_react_is2.isFragment)(child)) {
        acc.push.apply(acc, _toConsumableArray3(flattenFragments2(child.props.children, ChildWrapper, depth + 1)));
      } else if (/* @__PURE__ */ React61.isValidElement(child)) {
        if (ChildWrapper) {
          acc.push(/* @__PURE__ */ React61.createElement(ChildWrapper, {
            key: "".concat(depth, ".").concat(i)
          }, child));
        } else {
          acc.push(child);
        }
      }
      return acc;
    }, []);
  };

  // node_modules/baseui/esm/flex-grid/flex-grid.js
  var _excluded29 = ["display", "flexWrap"];
  var _excluded210 = ["forwardedRef", "children", "as", "overrides", "flexGridColumnCount", "flexGridColumnGap", "flexGridRowGap"];
  function _slicedToArray32(arr, i) {
    return _arrayWithHoles31(arr) || _iterableToArrayLimit31(arr, i) || _unsupportedIterableToArray32(arr, i) || _nonIterableRest31();
  }
  function _nonIterableRest31() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray32(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray32(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray32(o, minLen);
  }
  function _arrayLikeToArray32(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit31(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles31(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _extends41() {
    _extends41 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends41.apply(this, arguments);
  }
  function _objectWithoutProperties23(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose25(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose25(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  var BaseFlexGrid = /* @__PURE__ */ React62.forwardRef(function(_ref2, ref) {
    var display = _ref2.display, flexWrap = _ref2.flexWrap, restProps = _objectWithoutProperties23(_ref2, _excluded29);
    return /* @__PURE__ */ React62.createElement(block_default, _extends41({
      display: display || "flex",
      flexWrap: flexWrap || flexWrap === false ? flexWrap : true,
      "data-baseweb": "flex-grid"
    }, restProps, {
      ref
    }));
  });
  BaseFlexGrid.displayName = "BaseFlexGrid";
  var FlexGrid = function FlexGrid2(_ref2) {
    var forwardedRef = _ref2.forwardedRef, children2 = _ref2.children, as = _ref2.as, overrides = _ref2.overrides, flexGridColumnCount = _ref2.flexGridColumnCount, flexGridColumnGap = _ref2.flexGridColumnGap, flexGridRowGap = _ref2.flexGridRowGap, restProps = _objectWithoutProperties23(_ref2, _excluded210);
    var _getOverrides = getOverrides(overrides && overrides.Block, BaseFlexGrid), _getOverrides2 = _slicedToArray32(_getOverrides, 2), FlexGrid3 = _getOverrides2[0], flexGridProps = _getOverrides2[1];
    return /* @__PURE__ */ React62.createElement(
      FlexGrid3,
      _extends41({
        ref: forwardedRef,
        as
      }, restProps, flexGridProps),
      flattenFragments(children2).map(function(child, flexGridItemIndex, _ref3) {
        var flexGridItemCount = _ref3.length;
        return /* @__PURE__ */ React62.cloneElement(child, {
          flexGridColumnCount,
          flexGridColumnGap,
          flexGridRowGap,
          flexGridItemIndex,
          flexGridItemCount
        });
      })
    );
  };
  var FlexGridComponent = /* @__PURE__ */ React62.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React62.createElement(FlexGrid, _extends41({}, props, {
      forwardedRef: ref
    }));
  });
  FlexGridComponent.displayName = "FlexGrid";
  var flex_grid_default = FlexGridComponent;

  // node_modules/baseui/esm/flex-grid/flex-grid-item.js
  var React63 = __toESM(require_react());
  var _excluded30 = ["forwardedRef", "children", "as", "overrides", "flexGridColumnCount", "flexGridColumnGap", "flexGridRowGap", "flexGridItemIndex", "flexGridItemCount"];
  function _extends42() {
    _extends42 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends42.apply(this, arguments);
  }
  function _objectWithoutProperties24(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose26(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose26(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _toConsumableArray4(arr) {
    return _arrayWithoutHoles4(arr) || _iterableToArray4(arr) || _unsupportedIterableToArray33(arr) || _nonIterableSpread4();
  }
  function _nonIterableSpread4() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray33(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray33(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray33(o, minLen);
  }
  function _iterableToArray4(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }
  function _arrayWithoutHoles4(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray33(arr);
  }
  function _arrayLikeToArray33(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function ownKeys25(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread25(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys25(Object(source2), true).forEach(function(key) {
        _defineProperty34(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys25(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty34(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var flexGridItemMediaQueryStyle = function flexGridItemMediaQueryStyle2(_ref2) {
    var _objectSpread28;
    var $theme = _ref2.$theme, colCount = _ref2.flexGridColumnCount, flexGridColumnGap = _ref2.flexGridColumnGap, flexGridRowGap = _ref2.flexGridRowGap, itemIndex = _ref2.flexGridItemIndex, itemCount = _ref2.flexGridItemCount;
    var colGap = $theme.sizing[flexGridColumnGap] || flexGridColumnGap || "0px";
    var colGapQuantity = parseFloat(colGap);
    var colGapUnit = colGap.match(/[a-zA-Z]+/)[0];
    var rowGap = $theme.sizing[flexGridRowGap] || flexGridRowGap || "0px";
    var rowGapQuantity = parseFloat(rowGap);
    var widthCalc = "(100% - ".concat((colCount - 1) * colGapQuantity).concat(colGapUnit, ") / ").concat(colCount);
    var marginDirection = $theme.direction === "rtl" ? "marginLeft" : "marginRight";
    return Object.freeze(_objectSpread25((_objectSpread28 = {
      width: "calc(".concat(widthCalc, " - .5px)")
    }, _defineProperty34(_objectSpread28, marginDirection, colGapQuantity && ((itemIndex + 1) % colCount !== 0 ? colGap : 0)), _defineProperty34(_objectSpread28, "marginBottom", rowGapQuantity && (~~(itemIndex / colCount) !== ~~((itemCount - 1) / colCount) ? rowGap : 0)), _objectSpread28), itemIndex === itemCount - 1 && (itemIndex + 1) % colCount !== 0 ? _defineProperty34({}, marginDirection, "calc(".concat(colCount - itemIndex % colCount - 1, " * (").concat(colGap, " + ").concat(widthCalc, "))")) : {}));
  };
  function getResponsiveValue2(responsive, i) {
    if (!responsive) {
      return null;
    }
    if (!Array.isArray(responsive)) {
      return responsive;
    }
    return responsive[i] || responsive[responsive.length - 1];
  }
  var flexGridItemStyle = function flexGridItemStyle2(_ref3) {
    var $flexGridColumnCount = _ref3.$flexGridColumnCount, $flexGridColumnGap = _ref3.$flexGridColumnGap, $flexGridRowGap = _ref3.$flexGridRowGap, $flexGridItemIndex = _ref3.$flexGridItemIndex, $flexGridItemCount = _ref3.$flexGridItemCount, $theme = _ref3.$theme;
    var baseFlexGridItemStyle = {
      flexGrow: 1
    };
    var mediaQueries = getMediaQueries($theme.breakpoints);
    var maxResponsiveLength = Math.max.apply(Math, _toConsumableArray4([$flexGridColumnCount, $flexGridColumnGap, $flexGridRowGap].map(function(r) {
      return Array.isArray(r) ? r.length : 0;
    })));
    if (maxResponsiveLength < 2) {
      return _objectSpread25(_objectSpread25({}, baseFlexGridItemStyle), flexGridItemMediaQueryStyle({
        $theme,
        flexGridColumnCount: getResponsiveValue2($flexGridColumnCount, 0) || 1,
        flexGridColumnGap: getResponsiveValue2($flexGridColumnGap, 0) || 0,
        flexGridRowGap: getResponsiveValue2($flexGridRowGap, 0) || 0,
        flexGridItemIndex: $flexGridItemIndex || 0,
        flexGridItemCount: $flexGridItemCount || 1
      }));
    }
    return _toConsumableArray4(Array(maxResponsiveLength).keys()).reduce(function(acc, i) {
      var flexGridColumnCountValue = getResponsiveValue2($flexGridColumnCount, i);
      var flexGridColumnGapValue = getResponsiveValue2($flexGridColumnGap, i);
      var flexGridRowGapValue = getResponsiveValue2($flexGridRowGap, i);
      var mediaQuery2 = i === 0 ? getMediaQuery(0) : mediaQueries[i - 1];
      if (mediaQuery2) {
        acc[mediaQuery2] = flexGridItemMediaQueryStyle({
          $theme,
          flexGridColumnCount: flexGridColumnCountValue || 1,
          flexGridColumnGap: flexGridColumnGapValue || 0,
          flexGridRowGap: flexGridRowGapValue || 0,
          flexGridItemIndex: $flexGridItemIndex || 0,
          flexGridItemCount: $flexGridItemCount || 1
        });
      }
      return acc;
    }, baseFlexGridItemStyle);
  };
  var FlexGridItem = function FlexGridItem2(_ref4) {
    var forwardedRef = _ref4.forwardedRef, children2 = _ref4.children, as = _ref4.as, overrides = _ref4.overrides, flexGridColumnCount = _ref4.flexGridColumnCount, flexGridColumnGap = _ref4.flexGridColumnGap, flexGridRowGap = _ref4.flexGridRowGap, flexGridItemIndex = _ref4.flexGridItemIndex, flexGridItemCount = _ref4.flexGridItemCount, restProps = _objectWithoutProperties24(_ref4, _excluded30);
    var flexGridItemOverrides = {
      Block: {
        style: flexGridItemStyle
      }
    };
    var blockOverrides = overrides ? mergeOverrides(flexGridItemOverrides, overrides) : flexGridItemOverrides;
    return /* @__PURE__ */ React63.createElement(
      block_default,
      _extends42({
        ref: forwardedRef,
        as,
        overrides: blockOverrides,
        $flexGridColumnCount: flexGridColumnCount,
        $flexGridColumnGap: flexGridColumnGap,
        $flexGridRowGap: flexGridRowGap,
        $flexGridItemIndex: flexGridItemIndex,
        $flexGridItemCount: flexGridItemCount,
        "data-baseweb": "flex-grid-item"
      }, restProps),
      children2
    );
  };
  var FlexGridItemComponent = /* @__PURE__ */ React63.forwardRef(function(props, ref) {
    return /* @__PURE__ */ React63.createElement(FlexGridItem, _extends42({}, props, {
      forwardedRef: ref
    }));
  });
  FlexGridItemComponent.displayName = "FlexGridItem";
  var flex_grid_item_default = FlexGridItemComponent;

  // node_modules/baseui/esm/message-card/message-card.js
  var React64 = __toESM(require_react());

  // node_modules/baseui/esm/message-card/constants.js
  var _Object$freeze2;
  function _defineProperty35(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var BACKGROUND_COLOR_TYPE = Object.freeze({
    light: "light",
    dark: "dark"
  });
  var IMAGE_LAYOUT = Object.freeze({
    top: "top",
    trailing: "trailing"
  });
  var BUTTON_KIND = Object.freeze((_Object$freeze2 = {}, _defineProperty35(_Object$freeze2, KIND2.secondary, KIND2.secondary), _defineProperty35(_Object$freeze2, KIND2.tertiary, KIND2.tertiary), _Object$freeze2));

  // node_modules/baseui/esm/message-card/styled-components.js
  function ownKeys26(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread26(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys26(Object(source2), true).forEach(function(key) {
        _defineProperty36(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys26(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty36(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var StyledRoot4 = styled2("button", function(_ref2) {
    var $theme = _ref2.$theme, $backgroundColor = _ref2.$backgroundColor, $backgroundColorType = _ref2.$backgroundColorType, _ref$$imageLayout = _ref2.$imageLayout, $imageLayout = _ref$$imageLayout === void 0 ? IMAGE_LAYOUT.top : _ref$$imageLayout;
    var lightBackgroundStyle = {
      color: $theme.colors.contentOnColorInverse,
      borderStyle: "solid",
      borderWidth: $theme.sizing.scale0,
      borderColor: $theme.colors.borderOpaque
    };
    var darkBackgroundStyle = {
      color: $theme.colors.contentOnColor,
      border: "none"
    };
    return _objectSpread26(_objectSpread26({
      alignItems: "stretch",
      backgroundColor: $backgroundColor,
      borderRadius: $theme.borders.radius400,
      cursor: "pointer",
      display: "flex",
      flexDirection: $imageLayout === IMAGE_LAYOUT.top ? "column" : "row",
      overflow: "hidden",
      padding: "0",
      position: "relative",
      textAlign: "start",
      width: "100%",
      boxShadow: "inset 999px 999px 0px ".concat($theme.colors.backgroundOverlayArt)
    }, $backgroundColorType === BACKGROUND_COLOR_TYPE.light ? lightBackgroundStyle : darkBackgroundStyle), {}, {
      ":focus": {
        outlineWidth: "3px",
        outlineStyle: "solid",
        outlineColor: $theme.colors.borderAccent,
        outlineOffset: "-3px"
      },
      ":hover:after": {
        content: '""',
        width: "100%",
        height: "100%",
        zIndex: "1",
        position: "absolute",
        top: "0",
        left: "0",
        backgroundColor: $backgroundColorType === BACKGROUND_COLOR_TYPE.light ? "rgba(0, 0, 0, 0.04)" : "rgba(255, 255, 255, 0.10)"
      },
      ":active:after": {
        content: '""',
        width: "100%",
        height: "100%",
        zIndex: "1",
        position: "absolute",
        top: "0",
        left: "0",
        backgroundColor: $backgroundColorType === BACKGROUND_COLOR_TYPE.light ? "rgba(0, 0, 0, 0.08)" : "rgba(255, 255, 255, 0.20)"
      }
    });
  });
  StyledRoot4.displayName = "StyledRoot";
  var StyledImage = styled2("div", function(_ref2) {
    var _ref2$$imageLayout = _ref2.$imageLayout, $imageLayout = _ref2$$imageLayout === void 0 ? IMAGE_LAYOUT.top : _ref2$$imageLayout, _ref2$$backgroundPosi = _ref2.$backgroundPosition, $backgroundPosition = _ref2$$backgroundPosi === void 0 ? "center" : _ref2$$backgroundPosi, $src = _ref2.$src;
    return _objectSpread26({
      backgroundImage: "url(".concat($src, ")"),
      backgroundSize: "cover",
      backgroundPosition: $backgroundPosition
    }, $imageLayout === IMAGE_LAYOUT.top ? {
      height: "132px",
      width: "100%"
    } : {
      width: "112px",
      order: "1"
    });
  });
  StyledImage.displayName = "StyledImage";
  var StyledContentContainer = styled2("div", function(_ref3) {
    var $theme = _ref3.$theme;
    return {
      width: "100%",
      boxSizing: "border-box",
      paddingTop: $theme.sizing.scale600,
      paddingRight: $theme.sizing.scale300,
      paddingBottom: $theme.sizing.scale600,
      paddingLeft: $theme.sizing.scale600
    };
  });
  StyledContentContainer.displayName = "StyledContentContainer";
  var StyledHeadingContainer = styled2("div", function(_ref4) {
    var $theme = _ref4.$theme;
    return _objectSpread26({}, $theme.typography.HeadingXSmall);
  });
  StyledHeadingContainer.displayName = "StyledHeadingContainer";
  var StyledParagraphContainer = styled2("div", function(_ref5) {
    var $theme = _ref5.$theme;
    return _objectSpread26(_objectSpread26({}, $theme.typography.ParagraphSmall), {}, {
      marginTop: $theme.sizing.scale100
    });
  });
  StyledParagraphContainer.displayName = "StyledParagraphContainer";

  // node_modules/baseui/esm/message-card/utils.js
  var LIGHT_COLORS = /* @__PURE__ */ new Set([colors_default.red50, colors_default.red100, colors_default.red200, colors_default.red300, colors_default.green50, colors_default.green100, colors_default.green200, colors_default.green300, colors_default.teal50, colors_default.teal100, colors_default.teal200, colors_default.teal300, colors_default.blue50, colors_default.blue100, colors_default.blue200, colors_default.blue300, colors_default.cobalt50, colors_default.cobalt100, colors_default.cobalt200, colors_default.purple50, colors_default.purple100, colors_default.purple200, colors_default.purple300, colors_default.magenta50, colors_default.magenta100, colors_default.magenta200, colors_default.magenta300, colors_default.brown50, colors_default.brown100, colors_default.brown200, colors_default.brown300, colors_default.orange50, colors_default.orange100, colors_default.orange200, colors_default.orange300, colors_default.orange400, colors_default.lime50, colors_default.lime100, colors_default.lime200, colors_default.lime300, colors_default.lime400, colors_default.platinum50, colors_default.platinum100, colors_default.platinum200, colors_default.platinum300, colors_default.platinum400, colors_default.yellow50, colors_default.yellow100, colors_default.yellow200, colors_default.yellow300, colors_default.yellow400, colors_default.yellow500, colors_default.white, colors_default.gray50, colors_default.gray100, colors_default.gray200, colors_default.gray300, colors_default.gray400]);
  var DARK_COLORS = /* @__PURE__ */ new Set([colors_default.red400, colors_default.red500, colors_default.red600, colors_default.red700, colors_default.green400, colors_default.green500, colors_default.green600, colors_default.green700, colors_default.teal400, colors_default.teal500, colors_default.teal600, colors_default.teal700, colors_default.blue400, colors_default.blue500, colors_default.blue600, colors_default.blue700, colors_default.cobalt300, colors_default.cobalt400, colors_default.cobalt500, colors_default.cobalt600, colors_default.cobalt700, colors_default.purple400, colors_default.purple500, colors_default.purple600, colors_default.purple700, colors_default.magenta400, colors_default.magenta500, colors_default.magenta600, colors_default.magenta700, colors_default.brown400, colors_default.brown500, colors_default.brown600, colors_default.brown700, colors_default.orange500, colors_default.orange600, colors_default.orange700, colors_default.lime500, colors_default.lime600, colors_default.lime700, colors_default.platinum500, colors_default.platinum600, colors_default.platinum700, colors_default.platinum800, colors_default.yellow600, colors_default.yellow700, colors_default.gray500, colors_default.gray600, colors_default.gray700, colors_default.gray800, colors_default.gray900, colors_default.black]);
  var POOR_CONTRAST_COLORS = /* @__PURE__ */ new Set([colors_default.red300, colors_default.gray500, colors_default.yellow600]);
  function getBackgroundColorType(backgroundColor) {
    if (POOR_CONTRAST_COLORS.has(backgroundColor)) {
      console.warn("The provided value for backgroundColor, ".concat(backgroundColor, ", is not supported because         it does not pass accessibility contrast tests for either white or black text."));
    }
    if (LIGHT_COLORS.has(backgroundColor)) {
      return BACKGROUND_COLOR_TYPE.light;
    }
    if (DARK_COLORS.has(backgroundColor)) {
      return BACKGROUND_COLOR_TYPE.dark;
    }
    return null;
  }

  // node_modules/baseui/esm/message-card/message-card.js
  var _excluded31 = ["children"];
  function ownKeys27(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread27(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys27(Object(source2), true).forEach(function(key) {
        _defineProperty37(target, key, source2[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys27(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
    return target;
  }
  function _defineProperty37(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _extends43() {
    _extends43 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends43.apply(this, arguments);
  }
  function _slicedToArray33(arr, i) {
    return _arrayWithHoles32(arr) || _iterableToArrayLimit32(arr, i) || _unsupportedIterableToArray34(arr, i) || _nonIterableRest32();
  }
  function _nonIterableRest32() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray34(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray34(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray34(o, minLen);
  }
  function _arrayLikeToArray34(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit32(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err2) {
      _d = true;
      _e = err2;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles32(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _objectWithoutProperties25(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose27(source2, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose27(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  var ButtonAlwaysLightTheme = function ButtonAlwaysLightTheme2(_ref2) {
    var children2 = _ref2.children, restProps = _objectWithoutProperties25(_ref2, _excluded31);
    return /* @__PURE__ */ React64.createElement(theme_provider_default, {
      theme: LightTheme
    }, /* @__PURE__ */ React64.createElement(button_default, restProps, children2));
  };
  var MessageCard = function MessageCard2(_ref2) {
    var _ref2$backgroundColor = _ref2.backgroundColor, backgroundColor = _ref2$backgroundColor === void 0 ? colors_default.white : _ref2$backgroundColor, backgroundColorTypeProp = _ref2.backgroundColorType, _ref2$buttonKind = _ref2.buttonKind, buttonKind = _ref2$buttonKind === void 0 ? BUTTON_KIND.secondary : _ref2$buttonKind, buttonLabel = _ref2.buttonLabel, heading = _ref2.heading, image = _ref2.image, onClick = _ref2.onClick, _ref2$overrides = _ref2.overrides, overrides = _ref2$overrides === void 0 ? {} : _ref2$overrides, paragraph = _ref2.paragraph;
    var _ref3 = image || {}, src = _ref3.src, _ref3$layout = _ref3.layout, layout = _ref3$layout === void 0 ? IMAGE_LAYOUT.top : _ref3$layout, backgroundPosition = _ref3.backgroundPosition, ariaLabel = _ref3.ariaLabel;
    var _getOverrides = getOverrides(overrides.Root, StyledRoot4), _getOverrides2 = _slicedToArray33(_getOverrides, 2), Root3 = _getOverrides2[0], RootProps = _getOverrides2[1];
    var _getOverrides3 = getOverrides(overrides.ContentContainer, StyledContentContainer), _getOverrides4 = _slicedToArray33(_getOverrides3, 2), ContentContainer = _getOverrides4[0], ContentContainerProps = _getOverrides4[1];
    var _getOverrides5 = getOverrides(overrides.HeadingContainer, StyledHeadingContainer), _getOverrides6 = _slicedToArray33(_getOverrides5, 2), HeadingContainer = _getOverrides6[0], HeadingContainerProps = _getOverrides6[1];
    var _getOverrides7 = getOverrides(overrides.ParagraphContainer, StyledParagraphContainer), _getOverrides8 = _slicedToArray33(_getOverrides7, 2), ParagraphContainer = _getOverrides8[0], ParagraphContainerProps = _getOverrides8[1];
    var _getOverrides9 = getOverrides(overrides.Image, StyledImage), _getOverrides10 = _slicedToArray33(_getOverrides9, 2), Image = _getOverrides10[0], ImageProps = _getOverrides10[1];
    var _getOverrides11 = getOverrides(overrides.Button, ButtonAlwaysLightTheme), _getOverrides12 = _slicedToArray33(_getOverrides11, 2), Button4 = _getOverrides12[0], ButtonProps = _getOverrides12[1];
    var _useStyletron = useStyletron2(), _useStyletron2 = _slicedToArray33(_useStyletron, 2), theme = _useStyletron2[1];
    var backgroundColorType = backgroundColorTypeProp || getBackgroundColorType(backgroundColor);
    if (!backgroundColorType) {
      backgroundColorType = BACKGROUND_COLOR_TYPE.dark;
      if (true) {
        console.warn("The provided value for 'backgroundColor', ".concat(backgroundColor, ", is not recognized as a         Base Web primitive color. Please use the 'backgroundColorType' prop to indicate whether         this color is light or dark so the rest of the component can be styled accordingly."));
      }
    }
    var buttonColors;
    if (buttonKind === BUTTON_KIND.tertiary && backgroundColorType === BACKGROUND_COLOR_TYPE.dark) {
      buttonColors = {
        color: theme.colors.contentOnColor,
        backgroundColor: theme.colors.buttonTertiaryFill
      };
    }
    if (buttonKind !== BUTTON_KIND.tertiary && backgroundColor !== colors_default.white) {
      buttonColors = {
        color: theme.colors.contentOnColorInverse,
        backgroundColor: theme.colors.backgroundAlwaysLight
      };
    }
    return /* @__PURE__ */ React64.createElement(Root3, _extends43({
      onClick,
      $backgroundColor: backgroundColor,
      $backgroundColorType: backgroundColorType,
      $imageLayout: layout
    }, RootProps), image && /* @__PURE__ */ React64.createElement(Image, _extends43({
      role: "img",
      "aria-label": ariaLabel,
      $src: src,
      $imageLayout: layout,
      $backgroundPosition: backgroundPosition
    }, ImageProps)), /* @__PURE__ */ React64.createElement(ContentContainer, ContentContainerProps, heading && /* @__PURE__ */ React64.createElement(HeadingContainer, HeadingContainerProps, heading), paragraph && /* @__PURE__ */ React64.createElement(ParagraphContainer, ParagraphContainerProps, paragraph), buttonLabel && /* @__PURE__ */ React64.createElement(Button4, _extends43({
      $as: "div",
      kind: buttonKind,
      shape: SHAPE.pill,
      size: SIZE.compact,
      role: "none",
      tabIndex: -1,
      colors: buttonColors,
      overrides: {
        BaseButton: {
          style: _objectSpread27({
            textAlign: "center",
            pointerEvents: "none"
          }, buttonKind === BUTTON_KIND.tertiary ? {
            marginTop: theme.sizing.scale100,
            transform: theme.direction === "rtl" ? "translateX(".concat(theme.sizing.scale500, ")") : "translateX(-".concat(theme.sizing.scale500, ")")
          } : {
            marginTop: theme.sizing.scale500
          })
        }
      }
    }, ButtonProps), buttonLabel)));
  };
  var message_card_default = MessageCard;

  // src/routes/Recipe/Search/RecipeList.tsx
  var RecipeList = ({ search }) => {
    const navigate = useNavigate();
    const data = (0, import_react_relay.useLazyLoadQuery)(
      (RecipeListQuery_graphql_default.hash && RecipeListQuery_graphql_default.hash !== "adfcb1aa11cbfaf4381731009722340e" && console.error("The definition of 'RecipeListQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data."), RecipeListQuery_graphql_default),
      {
        search: `%${search}%`
      }
    );
    const viewRecipe = (id) => {
      navigate(`/recipe/view/${id}`);
    };
    return /* @__PURE__ */ import_react10.default.createElement(
      flex_grid_default,
      {
        flexGridColumnCount: 3
      },
      data.recipeRecipe.map((r) => /* @__PURE__ */ import_react10.default.createElement(flex_grid_item_default, { key: r.id }, /* @__PURE__ */ import_react10.default.createElement(
        message_card_default,
        {
          heading: r.name,
          buttonLabel: "Make it!",
          onClick: () => viewRecipe(r.id),
          paragraph: r.source_provider.name
        }
      )))
    );
  };

  // src/routes/Recipe/Search/index.tsx
  var Search = () => {
    const [search, setSearch] = (0, import_react11.useState)("");
    const [doSearch, setDoSearch] = (0, import_react11.useState)("");
    const [css, theme] = useStyletron2();
    return /* @__PURE__ */ import_react11.default.createElement("div", null, /* @__PURE__ */ import_react11.default.createElement("div", { className: css({ display: "flex" }) }, /* @__PURE__ */ import_react11.default.createElement(
      input_default,
      {
        value: search,
        onChange: (e) => setSearch(e.target.value),
        placeholder: "recipe name",
        autoFocus: true
      }
    ), /* @__PURE__ */ import_react11.default.createElement(button_default, { onClick: () => setDoSearch(search) }, "Search")), /* @__PURE__ */ import_react11.default.createElement(RecipeList, { search: doSearch }));
  };

  // src/routes/Recipe/Save/index.tsx
  var import_react35 = __toESM(require_react());

  // src/routes/Recipe/Save/__generated__/RecipeFormMutation.graphql.ts
  var node3 = function() {
    var v0 = [
      {
        "defaultValue": null,
        "kind": "LocalArgument",
        "name": "object"
      }
    ], v1 = [
      {
        "alias": null,
        "args": [
          {
            "kind": "Variable",
            "name": "object",
            "variableName": "object"
          },
          {
            "kind": "Literal",
            "name": "onConflict",
            "value": {
              "constraint": "recipe_name_source_path_source_provider_id_key",
              "update_columns": [
                "name",
                "sourcePath",
                "imageUrl"
              ]
            }
          }
        ],
        "concreteType": "RecipeRecipe",
        "kind": "LinkedField",
        "name": "insertRecipeRecipeOne",
        "plural": false,
        "selections": [
          {
            "alias": null,
            "args": null,
            "kind": "ScalarField",
            "name": "id",
            "storageKey": null
          }
        ],
        "storageKey": null
      }
    ];
    return {
      "fragment": {
        "argumentDefinitions": v0,
        "kind": "Fragment",
        "metadata": null,
        "name": "RecipeFormMutation",
        "selections": v1,
        "type": "mutation_root",
        "abstractKey": null
      },
      "kind": "Request",
      "operation": {
        "argumentDefinitions": v0,
        "kind": "Operation",
        "name": "RecipeFormMutation",
        "selections": v1
      },
      "params": {
        "cacheID": "497d9d204cfd2f0d57db426e20efb631",
        "id": null,
        "metadata": {},
        "name": "RecipeFormMutation",
        "operationKind": "mutation",
        "text": "mutation RecipeFormMutation(\n  $object: RecipeRecipeInsertInput!\n) {\n  insertRecipeRecipeOne(object: $object, onConflict: {constraint: recipe_name_source_path_source_provider_id_key, update_columns: [name, sourcePath, imageUrl]}) {\n    id\n  }\n}\n"
      }
    };
  }();
  node3.hash = "d20fabb62ab779571c9332aa4f6d0fe8";
  var RecipeFormMutation_graphql_default = node3;

  // src/routes/Recipe/Save/RecipeForm.tsx
  var import_react34 = __toESM(require_react());
  var import_react_relay2 = __toESM(require_react_relay());

  // node_modules/lodash-es/_arrayMap.js
  function arrayMap(array, iteratee) {
    var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
    while (++index2 < length) {
      result[index2] = iteratee(array[index2], index2, array);
    }
    return result;
  }
  var arrayMap_default = arrayMap;

  // node_modules/lodash-es/_copyArray.js
  function copyArray(source2, array) {
    var index2 = -1, length = source2.length;
    array || (array = Array(length));
    while (++index2 < length) {
      array[index2] = source2[index2];
    }
    return array;
  }
  var copyArray_default = copyArray;

  // node_modules/lodash-es/isArray.js
  var isArray = Array.isArray;
  var isArray_default = isArray;

  // node_modules/lodash-es/_freeGlobal.js
  var freeGlobal = typeof window == "object" && window && window.Object === Object && window;
  var freeGlobal_default = freeGlobal;

  // node_modules/lodash-es/_root.js
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal_default || freeSelf || Function("return this")();
  var root_default = root;

  // node_modules/lodash-es/_Symbol.js
  var Symbol2 = root_default.Symbol;
  var Symbol_default = Symbol2;

  // node_modules/lodash-es/_getRawTag.js
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
      value[symToStringTag] = void 0;
      var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }
  var getRawTag_default = getRawTag;

  // node_modules/lodash-es/_objectToString.js
  var objectProto2 = Object.prototype;
  var nativeObjectToString2 = objectProto2.toString;
  function objectToString(value) {
    return nativeObjectToString2.call(value);
  }
  var objectToString_default = objectToString;

  // node_modules/lodash-es/_baseGetTag.js
  var nullTag = "[object Null]";
  var undefinedTag = "[object Undefined]";
  var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
  function baseGetTag(value) {
    if (value == null) {
      return value === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
  }
  var baseGetTag_default = baseGetTag;

  // node_modules/lodash-es/isObjectLike.js
  function isObjectLike(value) {
    return value != null && typeof value == "object";
  }
  var isObjectLike_default = isObjectLike;

  // node_modules/lodash-es/isSymbol.js
  var symbolTag = "[object Symbol]";
  function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag;
  }
  var isSymbol_default = isSymbol;

  // node_modules/lodash-es/isObject.js
  function isObject3(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
  }
  var isObject_default = isObject3;

  // node_modules/lodash-es/isFunction.js
  var asyncTag = "[object AsyncFunction]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var proxyTag = "[object Proxy]";
  function isFunction2(value) {
    if (!isObject_default(value)) {
      return false;
    }
    var tag = baseGetTag_default(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  var isFunction_default = isFunction2;

  // node_modules/lodash-es/_coreJsData.js
  var coreJsData = root_default["__core-js_shared__"];
  var coreJsData_default = coreJsData;

  // node_modules/lodash-es/_isMasked.js
  var maskSrcKey = function() {
    var uid2 = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
    return uid2 ? "Symbol(src)_1." + uid2 : "";
  }();
  function isMasked(func2) {
    return !!maskSrcKey && maskSrcKey in func2;
  }
  var isMasked_default = isMasked;

  // node_modules/lodash-es/_toSource.js
  var funcProto = Function.prototype;
  var funcToString = funcProto.toString;
  function toSource(func2) {
    if (func2 != null) {
      try {
        return funcToString.call(func2);
      } catch (e) {
      }
      try {
        return func2 + "";
      } catch (e) {
      }
    }
    return "";
  }
  var toSource_default = toSource;

  // node_modules/lodash-es/_baseIsNative.js
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto2 = Function.prototype;
  var objectProto3 = Object.prototype;
  var funcToString2 = funcProto2.toString;
  var hasOwnProperty2 = objectProto3.hasOwnProperty;
  var reIsNative = RegExp(
    "^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  function baseIsNative(value) {
    if (!isObject_default(value) || isMasked_default(value)) {
      return false;
    }
    var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource_default(value));
  }
  var baseIsNative_default = baseIsNative;

  // node_modules/lodash-es/_getValue.js
  function getValue(object2, key) {
    return object2 == null ? void 0 : object2[key];
  }
  var getValue_default = getValue;

  // node_modules/lodash-es/_getNative.js
  function getNative(object2, key) {
    var value = getValue_default(object2, key);
    return baseIsNative_default(value) ? value : void 0;
  }
  var getNative_default = getNative;

  // node_modules/lodash-es/_nativeCreate.js
  var nativeCreate = getNative_default(Object, "create");
  var nativeCreate_default = nativeCreate;

  // node_modules/lodash-es/_hashClear.js
  function hashClear() {
    this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
    this.size = 0;
  }
  var hashClear_default = hashClear;

  // node_modules/lodash-es/_hashDelete.js
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  var hashDelete_default = hashDelete;

  // node_modules/lodash-es/_hashGet.js
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var objectProto4 = Object.prototype;
  var hasOwnProperty3 = objectProto4.hasOwnProperty;
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate_default) {
      var result = data[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty3.call(data, key) ? data[key] : void 0;
  }
  var hashGet_default = hashGet;

  // node_modules/lodash-es/_hashHas.js
  var objectProto5 = Object.prototype;
  var hasOwnProperty4 = objectProto5.hasOwnProperty;
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty4.call(data, key);
  }
  var hashHas_default = hashHas;

  // node_modules/lodash-es/_hashSet.js
  var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value;
    return this;
  }
  var hashSet_default = hashSet;

  // node_modules/lodash-es/_Hash.js
  function Hash(entries) {
    var index2 = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index2 < length) {
      var entry = entries[index2];
      this.set(entry[0], entry[1]);
    }
  }
  Hash.prototype.clear = hashClear_default;
  Hash.prototype["delete"] = hashDelete_default;
  Hash.prototype.get = hashGet_default;
  Hash.prototype.has = hashHas_default;
  Hash.prototype.set = hashSet_default;
  var Hash_default = Hash;

  // node_modules/lodash-es/_listCacheClear.js
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  var listCacheClear_default = listCacheClear;

  // node_modules/lodash-es/eq.js
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  var eq_default = eq;

  // node_modules/lodash-es/_assocIndexOf.js
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq_default(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  var assocIndexOf_default = assocIndexOf;

  // node_modules/lodash-es/_listCacheDelete.js
  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;
  function listCacheDelete(key) {
    var data = this.__data__, index2 = assocIndexOf_default(data, key);
    if (index2 < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index2 == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index2, 1);
    }
    --this.size;
    return true;
  }
  var listCacheDelete_default = listCacheDelete;

  // node_modules/lodash-es/_listCacheGet.js
  function listCacheGet(key) {
    var data = this.__data__, index2 = assocIndexOf_default(data, key);
    return index2 < 0 ? void 0 : data[index2][1];
  }
  var listCacheGet_default = listCacheGet;

  // node_modules/lodash-es/_listCacheHas.js
  function listCacheHas(key) {
    return assocIndexOf_default(this.__data__, key) > -1;
  }
  var listCacheHas_default = listCacheHas;

  // node_modules/lodash-es/_listCacheSet.js
  function listCacheSet(key, value) {
    var data = this.__data__, index2 = assocIndexOf_default(data, key);
    if (index2 < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index2][1] = value;
    }
    return this;
  }
  var listCacheSet_default = listCacheSet;

  // node_modules/lodash-es/_ListCache.js
  function ListCache(entries) {
    var index2 = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index2 < length) {
      var entry = entries[index2];
      this.set(entry[0], entry[1]);
    }
  }
  ListCache.prototype.clear = listCacheClear_default;
  ListCache.prototype["delete"] = listCacheDelete_default;
  ListCache.prototype.get = listCacheGet_default;
  ListCache.prototype.has = listCacheHas_default;
  ListCache.prototype.set = listCacheSet_default;
  var ListCache_default = ListCache;

  // node_modules/lodash-es/_Map.js
  var Map2 = getNative_default(root_default, "Map");
  var Map_default = Map2;

  // node_modules/lodash-es/_mapCacheClear.js
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      "hash": new Hash_default(),
      "map": new (Map_default || ListCache_default)(),
      "string": new Hash_default()
    };
  }
  var mapCacheClear_default = mapCacheClear;

  // node_modules/lodash-es/_isKeyable.js
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  var isKeyable_default = isKeyable;

  // node_modules/lodash-es/_getMapData.js
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  var getMapData_default = getMapData;

  // node_modules/lodash-es/_mapCacheDelete.js
  function mapCacheDelete(key) {
    var result = getMapData_default(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  var mapCacheDelete_default = mapCacheDelete;

  // node_modules/lodash-es/_mapCacheGet.js
  function mapCacheGet(key) {
    return getMapData_default(this, key).get(key);
  }
  var mapCacheGet_default = mapCacheGet;

  // node_modules/lodash-es/_mapCacheHas.js
  function mapCacheHas(key) {
    return getMapData_default(this, key).has(key);
  }
  var mapCacheHas_default = mapCacheHas;

  // node_modules/lodash-es/_mapCacheSet.js
  function mapCacheSet(key, value) {
    var data = getMapData_default(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }
  var mapCacheSet_default = mapCacheSet;

  // node_modules/lodash-es/_MapCache.js
  function MapCache2(entries) {
    var index2 = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index2 < length) {
      var entry = entries[index2];
      this.set(entry[0], entry[1]);
    }
  }
  MapCache2.prototype.clear = mapCacheClear_default;
  MapCache2.prototype["delete"] = mapCacheDelete_default;
  MapCache2.prototype.get = mapCacheGet_default;
  MapCache2.prototype.has = mapCacheHas_default;
  MapCache2.prototype.set = mapCacheSet_default;
  var MapCache_default = MapCache2;

  // node_modules/lodash-es/memoize.js
  var FUNC_ERROR_TEXT = "Expected a function";
  function memoize(func2, resolver) {
    if (typeof func2 != "function" || resolver != null && typeof resolver != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
      if (cache2.has(key)) {
        return cache2.get(key);
      }
      var result = func2.apply(this, args);
      memoized.cache = cache2.set(key, result) || cache2;
      return result;
    };
    memoized.cache = new (memoize.Cache || MapCache_default)();
    return memoized;
  }
  memoize.Cache = MapCache_default;
  var memoize_default = memoize;

  // node_modules/lodash-es/_memoizeCapped.js
  var MAX_MEMOIZE_SIZE = 500;
  function memoizeCapped(func2) {
    var result = memoize_default(func2, function(key) {
      if (cache2.size === MAX_MEMOIZE_SIZE) {
        cache2.clear();
      }
      return key;
    });
    var cache2 = result.cache;
    return result;
  }
  var memoizeCapped_default = memoizeCapped;

  // node_modules/lodash-es/_stringToPath.js
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = memoizeCapped_default(function(string2) {
    var result = [];
    if (string2.charCodeAt(0) === 46) {
      result.push("");
    }
    string2.replace(rePropName, function(match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
    });
    return result;
  });
  var stringToPath_default = stringToPath;

  // node_modules/lodash-es/_toKey.js
  var INFINITY = 1 / 0;
  function toKey(value) {
    if (typeof value == "string" || isSymbol_default(value)) {
      return value;
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  var toKey_default = toKey;

  // node_modules/lodash-es/_baseToString.js
  var INFINITY2 = 1 / 0;
  var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
  var symbolToString = symbolProto ? symbolProto.toString : void 0;
  function baseToString(value) {
    if (typeof value == "string") {
      return value;
    }
    if (isArray_default(value)) {
      return arrayMap_default(value, baseToString) + "";
    }
    if (isSymbol_default(value)) {
      return symbolToString ? symbolToString.call(value) : "";
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY2 ? "-0" : result;
  }
  var baseToString_default = baseToString;

  // node_modules/lodash-es/toString.js
  function toString(value) {
    return value == null ? "" : baseToString_default(value);
  }
  var toString_default = toString;

  // node_modules/lodash-es/toPath.js
  function toPath(value) {
    if (isArray_default(value)) {
      return arrayMap_default(value, toKey_default);
    }
    return isSymbol_default(value) ? [value] : copyArray_default(stringToPath_default(toString_default(value)));
  }
  var toPath_default = toPath;

  // node_modules/lodash-es/_stackClear.js
  function stackClear() {
    this.__data__ = new ListCache_default();
    this.size = 0;
  }
  var stackClear_default = stackClear;

  // node_modules/lodash-es/_stackDelete.js
  function stackDelete(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
  }
  var stackDelete_default = stackDelete;

  // node_modules/lodash-es/_stackGet.js
  function stackGet(key) {
    return this.__data__.get(key);
  }
  var stackGet_default = stackGet;

  // node_modules/lodash-es/_stackHas.js
  function stackHas(key) {
    return this.__data__.has(key);
  }
  var stackHas_default = stackHas;

  // node_modules/lodash-es/_stackSet.js
  var LARGE_ARRAY_SIZE = 200;
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache_default) {
      var pairs = data.__data__;
      if (!Map_default || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache_default(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }
  var stackSet_default = stackSet;

  // node_modules/lodash-es/_Stack.js
  function Stack(entries) {
    var data = this.__data__ = new ListCache_default(entries);
    this.size = data.size;
  }
  Stack.prototype.clear = stackClear_default;
  Stack.prototype["delete"] = stackDelete_default;
  Stack.prototype.get = stackGet_default;
  Stack.prototype.has = stackHas_default;
  Stack.prototype.set = stackSet_default;
  var Stack_default = Stack;

  // node_modules/lodash-es/_setCacheAdd.js
  var HASH_UNDEFINED3 = "__lodash_hash_undefined__";
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED3);
    return this;
  }
  var setCacheAdd_default = setCacheAdd;

  // node_modules/lodash-es/_setCacheHas.js
  function setCacheHas(value) {
    return this.__data__.has(value);
  }
  var setCacheHas_default = setCacheHas;

  // node_modules/lodash-es/_SetCache.js
  function SetCache(values5) {
    var index2 = -1, length = values5 == null ? 0 : values5.length;
    this.__data__ = new MapCache_default();
    while (++index2 < length) {
      this.add(values5[index2]);
    }
  }
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd_default;
  SetCache.prototype.has = setCacheHas_default;
  var SetCache_default = SetCache;

  // node_modules/lodash-es/_arraySome.js
  function arraySome(array, predicate) {
    var index2 = -1, length = array == null ? 0 : array.length;
    while (++index2 < length) {
      if (predicate(array[index2], index2, array)) {
        return true;
      }
    }
    return false;
  }
  var arraySome_default = arraySome;

  // node_modules/lodash-es/_cacheHas.js
  function cacheHas(cache2, key) {
    return cache2.has(key);
  }
  var cacheHas_default = cacheHas;

  // node_modules/lodash-es/_equalArrays.js
  var COMPARE_PARTIAL_FLAG = 1;
  var COMPARE_UNORDERED_FLAG = 2;
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache_default() : void 0;
    stack.set(array, other);
    stack.set(other, array);
    while (++index2 < arrLength) {
      var arrValue = array[index2], othValue = other[index2];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index2, other, array, stack) : customizer(arrValue, othValue, index2, array, other, stack);
      }
      if (compared !== void 0) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      if (seen) {
        if (!arraySome_default(other, function(othValue2, othIndex) {
          if (!cacheHas_default(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }
    stack["delete"](array);
    stack["delete"](other);
    return result;
  }
  var equalArrays_default = equalArrays;

  // node_modules/lodash-es/_Uint8Array.js
  var Uint8Array2 = root_default.Uint8Array;
  var Uint8Array_default = Uint8Array2;

  // node_modules/lodash-es/_mapToArray.js
  function mapToArray(map) {
    var index2 = -1, result = Array(map.size);
    map.forEach(function(value, key) {
      result[++index2] = [key, value];
    });
    return result;
  }
  var mapToArray_default = mapToArray;

  // node_modules/lodash-es/_setToArray.js
  function setToArray(set2) {
    var index2 = -1, result = Array(set2.size);
    set2.forEach(function(value) {
      result[++index2] = value;
    });
    return result;
  }
  var setToArray_default = setToArray;

  // node_modules/lodash-es/_equalByTag.js
  var COMPARE_PARTIAL_FLAG2 = 1;
  var COMPARE_UNORDERED_FLAG2 = 2;
  var boolTag = "[object Boolean]";
  var dateTag = "[object Date]";
  var errorTag = "[object Error]";
  var mapTag = "[object Map]";
  var numberTag = "[object Number]";
  var regexpTag = "[object RegExp]";
  var setTag = "[object Set]";
  var stringTag = "[object String]";
  var symbolTag2 = "[object Symbol]";
  var arrayBufferTag = "[object ArrayBuffer]";
  var dataViewTag = "[object DataView]";
  var symbolProto2 = Symbol_default ? Symbol_default.prototype : void 0;
  var symbolValueOf = symbolProto2 ? symbolProto2.valueOf : void 0;
  function equalByTag(object2, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object2.byteLength != other.byteLength || object2.byteOffset != other.byteOffset) {
          return false;
        }
        object2 = object2.buffer;
        other = other.buffer;
      case arrayBufferTag:
        if (object2.byteLength != other.byteLength || !equalFunc(new Uint8Array_default(object2), new Uint8Array_default(other))) {
          return false;
        }
        return true;
      case boolTag:
      case dateTag:
      case numberTag:
        return eq_default(+object2, +other);
      case errorTag:
        return object2.name == other.name && object2.message == other.message;
      case regexpTag:
      case stringTag:
        return object2 == other + "";
      case mapTag:
        var convert = mapToArray_default;
      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG2;
        convert || (convert = setToArray_default);
        if (object2.size != other.size && !isPartial) {
          return false;
        }
        var stacked = stack.get(object2);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG2;
        stack.set(object2, other);
        var result = equalArrays_default(convert(object2), convert(other), bitmask, customizer, equalFunc, stack);
        stack["delete"](object2);
        return result;
      case symbolTag2:
        if (symbolValueOf) {
          return symbolValueOf.call(object2) == symbolValueOf.call(other);
        }
    }
    return false;
  }
  var equalByTag_default = equalByTag;

  // node_modules/lodash-es/_arrayPush.js
  function arrayPush(array, values5) {
    var index2 = -1, length = values5.length, offset2 = array.length;
    while (++index2 < length) {
      array[offset2 + index2] = values5[index2];
    }
    return array;
  }
  var arrayPush_default = arrayPush;

  // node_modules/lodash-es/_baseGetAllKeys.js
  function baseGetAllKeys(object2, keysFunc, symbolsFunc) {
    var result = keysFunc(object2);
    return isArray_default(object2) ? result : arrayPush_default(result, symbolsFunc(object2));
  }
  var baseGetAllKeys_default = baseGetAllKeys;

  // node_modules/lodash-es/_arrayFilter.js
  function arrayFilter(array, predicate) {
    var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while (++index2 < length) {
      var value = array[index2];
      if (predicate(value, index2, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }
  var arrayFilter_default = arrayFilter;

  // node_modules/lodash-es/stubArray.js
  function stubArray() {
    return [];
  }
  var stubArray_default = stubArray;

  // node_modules/lodash-es/_getSymbols.js
  var objectProto6 = Object.prototype;
  var propertyIsEnumerable = objectProto6.propertyIsEnumerable;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols ? stubArray_default : function(object2) {
    if (object2 == null) {
      return [];
    }
    object2 = Object(object2);
    return arrayFilter_default(nativeGetSymbols(object2), function(symbol) {
      return propertyIsEnumerable.call(object2, symbol);
    });
  };
  var getSymbols_default = getSymbols;

  // node_modules/lodash-es/_baseTimes.js
  function baseTimes(n, iteratee) {
    var index2 = -1, result = Array(n);
    while (++index2 < n) {
      result[index2] = iteratee(index2);
    }
    return result;
  }
  var baseTimes_default = baseTimes;

  // node_modules/lodash-es/_baseIsArguments.js
  var argsTag = "[object Arguments]";
  function baseIsArguments(value) {
    return isObjectLike_default(value) && baseGetTag_default(value) == argsTag;
  }
  var baseIsArguments_default = baseIsArguments;

  // node_modules/lodash-es/isArguments.js
  var objectProto7 = Object.prototype;
  var hasOwnProperty5 = objectProto7.hasOwnProperty;
  var propertyIsEnumerable2 = objectProto7.propertyIsEnumerable;
  var isArguments = baseIsArguments_default(function() {
    return arguments;
  }()) ? baseIsArguments_default : function(value) {
    return isObjectLike_default(value) && hasOwnProperty5.call(value, "callee") && !propertyIsEnumerable2.call(value, "callee");
  };
  var isArguments_default = isArguments;

  // node_modules/lodash-es/stubFalse.js
  function stubFalse() {
    return false;
  }
  var stubFalse_default = stubFalse;

  // node_modules/lodash-es/isBuffer.js
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer2 = moduleExports ? root_default.Buffer : void 0;
  var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
  var isBuffer = nativeIsBuffer || stubFalse_default;
  var isBuffer_default = isBuffer;

  // node_modules/lodash-es/_isIndex.js
  var MAX_SAFE_INTEGER = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  var isIndex_default = isIndex;

  // node_modules/lodash-es/isLength.js
  var MAX_SAFE_INTEGER2 = 9007199254740991;
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
  }
  var isLength_default = isLength;

  // node_modules/lodash-es/_baseIsTypedArray.js
  var argsTag2 = "[object Arguments]";
  var arrayTag = "[object Array]";
  var boolTag2 = "[object Boolean]";
  var dateTag2 = "[object Date]";
  var errorTag2 = "[object Error]";
  var funcTag2 = "[object Function]";
  var mapTag2 = "[object Map]";
  var numberTag2 = "[object Number]";
  var objectTag = "[object Object]";
  var regexpTag2 = "[object RegExp]";
  var setTag2 = "[object Set]";
  var stringTag2 = "[object String]";
  var weakMapTag = "[object WeakMap]";
  var arrayBufferTag2 = "[object ArrayBuffer]";
  var dataViewTag2 = "[object DataView]";
  var float32Tag = "[object Float32Array]";
  var float64Tag = "[object Float64Array]";
  var int8Tag = "[object Int8Array]";
  var int16Tag = "[object Int16Array]";
  var int32Tag = "[object Int32Array]";
  var uint8Tag = "[object Uint8Array]";
  var uint8ClampedTag = "[object Uint8ClampedArray]";
  var uint16Tag = "[object Uint16Array]";
  var uint32Tag = "[object Uint32Array]";
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag2] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag2] = typedArrayTags[boolTag2] = typedArrayTags[dataViewTag2] = typedArrayTags[dateTag2] = typedArrayTags[errorTag2] = typedArrayTags[funcTag2] = typedArrayTags[mapTag2] = typedArrayTags[numberTag2] = typedArrayTags[objectTag] = typedArrayTags[regexpTag2] = typedArrayTags[setTag2] = typedArrayTags[stringTag2] = typedArrayTags[weakMapTag] = false;
  function baseIsTypedArray(value) {
    return isObjectLike_default(value) && isLength_default(value.length) && !!typedArrayTags[baseGetTag_default(value)];
  }
  var baseIsTypedArray_default = baseIsTypedArray;

  // node_modules/lodash-es/_baseUnary.js
  function baseUnary(func2) {
    return function(value) {
      return func2(value);
    };
  }
  var baseUnary_default = baseUnary;

  // node_modules/lodash-es/_nodeUtil.js
  var freeExports2 = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule2 = freeExports2 && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
  var freeProcess = moduleExports2 && freeGlobal_default.process;
  var nodeUtil = function() {
    try {
      var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
      if (types) {
        return types;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {
    }
  }();
  var nodeUtil_default = nodeUtil;

  // node_modules/lodash-es/isTypedArray.js
  var nodeIsTypedArray = nodeUtil_default && nodeUtil_default.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary_default(nodeIsTypedArray) : baseIsTypedArray_default;
  var isTypedArray_default = isTypedArray;

  // node_modules/lodash-es/_arrayLikeKeys.js
  var objectProto8 = Object.prototype;
  var hasOwnProperty6 = objectProto8.hasOwnProperty;
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray_default(value), isArg = !isArr && isArguments_default(value), isBuff = !isArr && !isArg && isBuffer_default(value), isType = !isArr && !isArg && !isBuff && isTypedArray_default(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes_default(value.length, String) : [], length = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty6.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex_default(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  var arrayLikeKeys_default = arrayLikeKeys;

  // node_modules/lodash-es/_isPrototype.js
  var objectProto9 = Object.prototype;
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto9;
    return value === proto;
  }
  var isPrototype_default = isPrototype;

  // node_modules/lodash-es/_overArg.js
  function overArg(func2, transform) {
    return function(arg) {
      return func2(transform(arg));
    };
  }
  var overArg_default = overArg;

  // node_modules/lodash-es/_nativeKeys.js
  var nativeKeys = overArg_default(Object.keys, Object);
  var nativeKeys_default = nativeKeys;

  // node_modules/lodash-es/_baseKeys.js
  var objectProto10 = Object.prototype;
  var hasOwnProperty7 = objectProto10.hasOwnProperty;
  function baseKeys(object2) {
    if (!isPrototype_default(object2)) {
      return nativeKeys_default(object2);
    }
    var result = [];
    for (var key in Object(object2)) {
      if (hasOwnProperty7.call(object2, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  var baseKeys_default = baseKeys;

  // node_modules/lodash-es/isArrayLike.js
  function isArrayLike(value) {
    return value != null && isLength_default(value.length) && !isFunction_default(value);
  }
  var isArrayLike_default = isArrayLike;

  // node_modules/lodash-es/keys.js
  function keys(object2) {
    return isArrayLike_default(object2) ? arrayLikeKeys_default(object2) : baseKeys_default(object2);
  }
  var keys_default = keys;

  // node_modules/lodash-es/_getAllKeys.js
  function getAllKeys(object2) {
    return baseGetAllKeys_default(object2, keys_default, getSymbols_default);
  }
  var getAllKeys_default = getAllKeys;

  // node_modules/lodash-es/_equalObjects.js
  var COMPARE_PARTIAL_FLAG3 = 1;
  var objectProto11 = Object.prototype;
  var hasOwnProperty8 = objectProto11.hasOwnProperty;
  function equalObjects(object2, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG3, objProps = getAllKeys_default(object2), objLength = objProps.length, othProps = getAllKeys_default(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index2 = objLength;
    while (index2--) {
      var key = objProps[index2];
      if (!(isPartial ? key in other : hasOwnProperty8.call(other, key))) {
        return false;
      }
    }
    var objStacked = stack.get(object2);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object2;
    }
    var result = true;
    stack.set(object2, other);
    stack.set(other, object2);
    var skipCtor = isPartial;
    while (++index2 < objLength) {
      key = objProps[index2];
      var objValue = object2[key], othValue = other[key];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object2, stack) : customizer(objValue, othValue, key, object2, other, stack);
      }
      if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == "constructor");
    }
    if (result && !skipCtor) {
      var objCtor = object2.constructor, othCtor = other.constructor;
      if (objCtor != othCtor && ("constructor" in object2 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack["delete"](object2);
    stack["delete"](other);
    return result;
  }
  var equalObjects_default = equalObjects;

  // node_modules/lodash-es/_DataView.js
  var DataView = getNative_default(root_default, "DataView");
  var DataView_default = DataView;

  // node_modules/lodash-es/_Promise.js
  var Promise2 = getNative_default(root_default, "Promise");
  var Promise_default = Promise2;

  // node_modules/lodash-es/_Set.js
  var Set2 = getNative_default(root_default, "Set");
  var Set_default = Set2;

  // node_modules/lodash-es/_WeakMap.js
  var WeakMap2 = getNative_default(root_default, "WeakMap");
  var WeakMap_default = WeakMap2;

  // node_modules/lodash-es/_getTag.js
  var mapTag3 = "[object Map]";
  var objectTag2 = "[object Object]";
  var promiseTag = "[object Promise]";
  var setTag3 = "[object Set]";
  var weakMapTag2 = "[object WeakMap]";
  var dataViewTag3 = "[object DataView]";
  var dataViewCtorString = toSource_default(DataView_default);
  var mapCtorString = toSource_default(Map_default);
  var promiseCtorString = toSource_default(Promise_default);
  var setCtorString = toSource_default(Set_default);
  var weakMapCtorString = toSource_default(WeakMap_default);
  var getTag = baseGetTag_default;
  if (DataView_default && getTag(new DataView_default(new ArrayBuffer(1))) != dataViewTag3 || Map_default && getTag(new Map_default()) != mapTag3 || Promise_default && getTag(Promise_default.resolve()) != promiseTag || Set_default && getTag(new Set_default()) != setTag3 || WeakMap_default && getTag(new WeakMap_default()) != weakMapTag2) {
    getTag = function(value) {
      var result = baseGetTag_default(value), Ctor = result == objectTag2 ? value.constructor : void 0, ctorString = Ctor ? toSource_default(Ctor) : "";
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag3;
          case mapCtorString:
            return mapTag3;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag3;
          case weakMapCtorString:
            return weakMapTag2;
        }
      }
      return result;
    };
  }
  var getTag_default = getTag;

  // node_modules/lodash-es/_baseIsEqualDeep.js
  var COMPARE_PARTIAL_FLAG4 = 1;
  var argsTag3 = "[object Arguments]";
  var arrayTag2 = "[object Array]";
  var objectTag3 = "[object Object]";
  var objectProto12 = Object.prototype;
  var hasOwnProperty9 = objectProto12.hasOwnProperty;
  function baseIsEqualDeep(object2, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray_default(object2), othIsArr = isArray_default(other), objTag = objIsArr ? arrayTag2 : getTag_default(object2), othTag = othIsArr ? arrayTag2 : getTag_default(other);
    objTag = objTag == argsTag3 ? objectTag3 : objTag;
    othTag = othTag == argsTag3 ? objectTag3 : othTag;
    var objIsObj = objTag == objectTag3, othIsObj = othTag == objectTag3, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer_default(object2)) {
      if (!isBuffer_default(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack_default());
      return objIsArr || isTypedArray_default(object2) ? equalArrays_default(object2, other, bitmask, customizer, equalFunc, stack) : equalByTag_default(object2, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG4)) {
      var objIsWrapped = objIsObj && hasOwnProperty9.call(object2, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty9.call(other, "__wrapped__");
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object2.value() : object2, othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack_default());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack_default());
    return equalObjects_default(object2, other, bitmask, customizer, equalFunc, stack);
  }
  var baseIsEqualDeep_default = baseIsEqualDeep;

  // node_modules/lodash-es/_baseIsEqual.js
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !isObjectLike_default(value) && !isObjectLike_default(other)) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep_default(value, other, bitmask, customizer, baseIsEqual, stack);
  }
  var baseIsEqual_default = baseIsEqual;

  // node_modules/lodash-es/isEqualWith.js
  function isEqualWith(value, other, customizer) {
    customizer = typeof customizer == "function" ? customizer : void 0;
    var result = customizer ? customizer(value, other) : void 0;
    return result === void 0 ? baseIsEqual_default(value, other, void 0, customizer) : !!result;
  }
  var isEqualWith_default = isEqualWith;

  // node_modules/lodash-es/_isKey.js
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
  var reIsPlainProp = /^\w*$/;
  function isKey(value, object2) {
    if (isArray_default(value)) {
      return false;
    }
    var type = typeof value;
    if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol_default(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object2 != null && value in Object(object2);
  }
  var isKey_default = isKey;

  // node_modules/lodash-es/_castPath.js
  function castPath(value, object2) {
    if (isArray_default(value)) {
      return value;
    }
    return isKey_default(value, object2) ? [value] : stringToPath_default(toString_default(value));
  }
  var castPath_default = castPath;

  // node_modules/lodash-es/_baseGet.js
  function baseGet(object2, path) {
    path = castPath_default(path, object2);
    var index2 = 0, length = path.length;
    while (object2 != null && index2 < length) {
      object2 = object2[toKey_default(path[index2++])];
    }
    return index2 && index2 == length ? object2 : void 0;
  }
  var baseGet_default = baseGet;

  // node_modules/lodash-es/get.js
  function get(object2, path, defaultValue) {
    var result = object2 == null ? void 0 : baseGet_default(object2, path);
    return result === void 0 ? defaultValue : result;
  }
  var get_default = get;

  // node_modules/lodash-es/isEmpty.js
  var mapTag4 = "[object Map]";
  var setTag4 = "[object Set]";
  var objectProto13 = Object.prototype;
  var hasOwnProperty10 = objectProto13.hasOwnProperty;
  function isEmpty(value) {
    if (value == null) {
      return true;
    }
    if (isArrayLike_default(value) && (isArray_default(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer_default(value) || isTypedArray_default(value) || isArguments_default(value))) {
      return !value.length;
    }
    var tag = getTag_default(value);
    if (tag == mapTag4 || tag == setTag4) {
      return !value.size;
    }
    if (isPrototype_default(value)) {
      return !baseKeys_default(value).length;
    }
    for (var key in value) {
      if (hasOwnProperty10.call(value, key)) {
        return false;
      }
    }
    return true;
  }
  var isEmpty_default = isEmpty;

  // node_modules/@rjsf/utils/dist/utils.esm.js
  var import_jsonpointer = __toESM(require_jsonpointer());

  // node_modules/lodash-es/_arrayEach.js
  function arrayEach(array, iteratee) {
    var index2 = -1, length = array == null ? 0 : array.length;
    while (++index2 < length) {
      if (iteratee(array[index2], index2, array) === false) {
        break;
      }
    }
    return array;
  }
  var arrayEach_default = arrayEach;

  // node_modules/lodash-es/_defineProperty.js
  var defineProperty2 = function() {
    try {
      var func2 = getNative_default(Object, "defineProperty");
      func2({}, "", {});
      return func2;
    } catch (e) {
    }
  }();
  var defineProperty_default = defineProperty2;

  // node_modules/lodash-es/_baseAssignValue.js
  function baseAssignValue(object2, key, value) {
    if (key == "__proto__" && defineProperty_default) {
      defineProperty_default(object2, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
      });
    } else {
      object2[key] = value;
    }
  }
  var baseAssignValue_default = baseAssignValue;

  // node_modules/lodash-es/_assignValue.js
  var objectProto14 = Object.prototype;
  var hasOwnProperty11 = objectProto14.hasOwnProperty;
  function assignValue(object2, key, value) {
    var objValue = object2[key];
    if (!(hasOwnProperty11.call(object2, key) && eq_default(objValue, value)) || value === void 0 && !(key in object2)) {
      baseAssignValue_default(object2, key, value);
    }
  }
  var assignValue_default = assignValue;

  // node_modules/lodash-es/_copyObject.js
  function copyObject(source2, props, object2, customizer) {
    var isNew = !object2;
    object2 || (object2 = {});
    var index2 = -1, length = props.length;
    while (++index2 < length) {
      var key = props[index2];
      var newValue = customizer ? customizer(object2[key], source2[key], key, object2, source2) : void 0;
      if (newValue === void 0) {
        newValue = source2[key];
      }
      if (isNew) {
        baseAssignValue_default(object2, key, newValue);
      } else {
        assignValue_default(object2, key, newValue);
      }
    }
    return object2;
  }
  var copyObject_default = copyObject;

  // node_modules/lodash-es/_baseAssign.js
  function baseAssign(object2, source2) {
    return object2 && copyObject_default(source2, keys_default(source2), object2);
  }
  var baseAssign_default = baseAssign;

  // node_modules/lodash-es/_nativeKeysIn.js
  function nativeKeysIn(object2) {
    var result = [];
    if (object2 != null) {
      for (var key in Object(object2)) {
        result.push(key);
      }
    }
    return result;
  }
  var nativeKeysIn_default = nativeKeysIn;

  // node_modules/lodash-es/_baseKeysIn.js
  var objectProto15 = Object.prototype;
  var hasOwnProperty12 = objectProto15.hasOwnProperty;
  function baseKeysIn(object2) {
    if (!isObject_default(object2)) {
      return nativeKeysIn_default(object2);
    }
    var isProto = isPrototype_default(object2), result = [];
    for (var key in object2) {
      if (!(key == "constructor" && (isProto || !hasOwnProperty12.call(object2, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  var baseKeysIn_default = baseKeysIn;

  // node_modules/lodash-es/keysIn.js
  function keysIn(object2) {
    return isArrayLike_default(object2) ? arrayLikeKeys_default(object2, true) : baseKeysIn_default(object2);
  }
  var keysIn_default = keysIn;

  // node_modules/lodash-es/_baseAssignIn.js
  function baseAssignIn(object2, source2) {
    return object2 && copyObject_default(source2, keysIn_default(source2), object2);
  }
  var baseAssignIn_default = baseAssignIn;

  // node_modules/lodash-es/_cloneBuffer.js
  var freeExports3 = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule3 = freeExports3 && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports3 = freeModule3 && freeModule3.exports === freeExports3;
  var Buffer3 = moduleExports3 ? root_default.Buffer : void 0;
  var allocUnsafe = Buffer3 ? Buffer3.allocUnsafe : void 0;
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
  }
  var cloneBuffer_default = cloneBuffer;

  // node_modules/lodash-es/_copySymbols.js
  function copySymbols(source2, object2) {
    return copyObject_default(source2, getSymbols_default(source2), object2);
  }
  var copySymbols_default = copySymbols;

  // node_modules/lodash-es/_getPrototype.js
  var getPrototype = overArg_default(Object.getPrototypeOf, Object);
  var getPrototype_default = getPrototype;

  // node_modules/lodash-es/_getSymbolsIn.js
  var nativeGetSymbols2 = Object.getOwnPropertySymbols;
  var getSymbolsIn = !nativeGetSymbols2 ? stubArray_default : function(object2) {
    var result = [];
    while (object2) {
      arrayPush_default(result, getSymbols_default(object2));
      object2 = getPrototype_default(object2);
    }
    return result;
  };
  var getSymbolsIn_default = getSymbolsIn;

  // node_modules/lodash-es/_copySymbolsIn.js
  function copySymbolsIn(source2, object2) {
    return copyObject_default(source2, getSymbolsIn_default(source2), object2);
  }
  var copySymbolsIn_default = copySymbolsIn;

  // node_modules/lodash-es/_getAllKeysIn.js
  function getAllKeysIn(object2) {
    return baseGetAllKeys_default(object2, keysIn_default, getSymbolsIn_default);
  }
  var getAllKeysIn_default = getAllKeysIn;

  // node_modules/lodash-es/_initCloneArray.js
  var objectProto16 = Object.prototype;
  var hasOwnProperty13 = objectProto16.hasOwnProperty;
  function initCloneArray(array) {
    var length = array.length, result = new array.constructor(length);
    if (length && typeof array[0] == "string" && hasOwnProperty13.call(array, "index")) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }
  var initCloneArray_default = initCloneArray;

  // node_modules/lodash-es/_cloneArrayBuffer.js
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array_default(result).set(new Uint8Array_default(arrayBuffer));
    return result;
  }
  var cloneArrayBuffer_default = cloneArrayBuffer;

  // node_modules/lodash-es/_cloneDataView.js
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer_default(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }
  var cloneDataView_default = cloneDataView;

  // node_modules/lodash-es/_cloneRegExp.js
  var reFlags = /\w*$/;
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }
  var cloneRegExp_default = cloneRegExp;

  // node_modules/lodash-es/_cloneSymbol.js
  var symbolProto3 = Symbol_default ? Symbol_default.prototype : void 0;
  var symbolValueOf2 = symbolProto3 ? symbolProto3.valueOf : void 0;
  function cloneSymbol(symbol) {
    return symbolValueOf2 ? Object(symbolValueOf2.call(symbol)) : {};
  }
  var cloneSymbol_default = cloneSymbol;

  // node_modules/lodash-es/_cloneTypedArray.js
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer_default(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  var cloneTypedArray_default = cloneTypedArray;

  // node_modules/lodash-es/_initCloneByTag.js
  var boolTag3 = "[object Boolean]";
  var dateTag3 = "[object Date]";
  var mapTag5 = "[object Map]";
  var numberTag3 = "[object Number]";
  var regexpTag3 = "[object RegExp]";
  var setTag5 = "[object Set]";
  var stringTag3 = "[object String]";
  var symbolTag3 = "[object Symbol]";
  var arrayBufferTag3 = "[object ArrayBuffer]";
  var dataViewTag4 = "[object DataView]";
  var float32Tag2 = "[object Float32Array]";
  var float64Tag2 = "[object Float64Array]";
  var int8Tag2 = "[object Int8Array]";
  var int16Tag2 = "[object Int16Array]";
  var int32Tag2 = "[object Int32Array]";
  var uint8Tag2 = "[object Uint8Array]";
  var uint8ClampedTag2 = "[object Uint8ClampedArray]";
  var uint16Tag2 = "[object Uint16Array]";
  var uint32Tag2 = "[object Uint32Array]";
  function initCloneByTag(object2, tag, isDeep) {
    var Ctor = object2.constructor;
    switch (tag) {
      case arrayBufferTag3:
        return cloneArrayBuffer_default(object2);
      case boolTag3:
      case dateTag3:
        return new Ctor(+object2);
      case dataViewTag4:
        return cloneDataView_default(object2, isDeep);
      case float32Tag2:
      case float64Tag2:
      case int8Tag2:
      case int16Tag2:
      case int32Tag2:
      case uint8Tag2:
      case uint8ClampedTag2:
      case uint16Tag2:
      case uint32Tag2:
        return cloneTypedArray_default(object2, isDeep);
      case mapTag5:
        return new Ctor();
      case numberTag3:
      case stringTag3:
        return new Ctor(object2);
      case regexpTag3:
        return cloneRegExp_default(object2);
      case setTag5:
        return new Ctor();
      case symbolTag3:
        return cloneSymbol_default(object2);
    }
  }
  var initCloneByTag_default = initCloneByTag;

  // node_modules/lodash-es/_baseCreate.js
  var objectCreate = Object.create;
  var baseCreate = function() {
    function object2() {
    }
    return function(proto) {
      if (!isObject_default(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object2.prototype = proto;
      var result = new object2();
      object2.prototype = void 0;
      return result;
    };
  }();
  var baseCreate_default = baseCreate;

  // node_modules/lodash-es/_initCloneObject.js
  function initCloneObject(object2) {
    return typeof object2.constructor == "function" && !isPrototype_default(object2) ? baseCreate_default(getPrototype_default(object2)) : {};
  }
  var initCloneObject_default = initCloneObject;

  // node_modules/lodash-es/_baseIsMap.js
  var mapTag6 = "[object Map]";
  function baseIsMap(value) {
    return isObjectLike_default(value) && getTag_default(value) == mapTag6;
  }
  var baseIsMap_default = baseIsMap;

  // node_modules/lodash-es/isMap.js
  var nodeIsMap = nodeUtil_default && nodeUtil_default.isMap;
  var isMap = nodeIsMap ? baseUnary_default(nodeIsMap) : baseIsMap_default;
  var isMap_default = isMap;

  // node_modules/lodash-es/_baseIsSet.js
  var setTag6 = "[object Set]";
  function baseIsSet(value) {
    return isObjectLike_default(value) && getTag_default(value) == setTag6;
  }
  var baseIsSet_default = baseIsSet;

  // node_modules/lodash-es/isSet.js
  var nodeIsSet = nodeUtil_default && nodeUtil_default.isSet;
  var isSet = nodeIsSet ? baseUnary_default(nodeIsSet) : baseIsSet_default;
  var isSet_default = isSet;

  // node_modules/lodash-es/_baseClone.js
  var CLONE_DEEP_FLAG = 1;
  var CLONE_FLAT_FLAG = 2;
  var CLONE_SYMBOLS_FLAG = 4;
  var argsTag4 = "[object Arguments]";
  var arrayTag3 = "[object Array]";
  var boolTag4 = "[object Boolean]";
  var dateTag4 = "[object Date]";
  var errorTag3 = "[object Error]";
  var funcTag3 = "[object Function]";
  var genTag2 = "[object GeneratorFunction]";
  var mapTag7 = "[object Map]";
  var numberTag4 = "[object Number]";
  var objectTag4 = "[object Object]";
  var regexpTag4 = "[object RegExp]";
  var setTag7 = "[object Set]";
  var stringTag4 = "[object String]";
  var symbolTag4 = "[object Symbol]";
  var weakMapTag3 = "[object WeakMap]";
  var arrayBufferTag4 = "[object ArrayBuffer]";
  var dataViewTag5 = "[object DataView]";
  var float32Tag3 = "[object Float32Array]";
  var float64Tag3 = "[object Float64Array]";
  var int8Tag3 = "[object Int8Array]";
  var int16Tag3 = "[object Int16Array]";
  var int32Tag3 = "[object Int32Array]";
  var uint8Tag3 = "[object Uint8Array]";
  var uint8ClampedTag3 = "[object Uint8ClampedArray]";
  var uint16Tag3 = "[object Uint16Array]";
  var uint32Tag3 = "[object Uint32Array]";
  var cloneableTags = {};
  cloneableTags[argsTag4] = cloneableTags[arrayTag3] = cloneableTags[arrayBufferTag4] = cloneableTags[dataViewTag5] = cloneableTags[boolTag4] = cloneableTags[dateTag4] = cloneableTags[float32Tag3] = cloneableTags[float64Tag3] = cloneableTags[int8Tag3] = cloneableTags[int16Tag3] = cloneableTags[int32Tag3] = cloneableTags[mapTag7] = cloneableTags[numberTag4] = cloneableTags[objectTag4] = cloneableTags[regexpTag4] = cloneableTags[setTag7] = cloneableTags[stringTag4] = cloneableTags[symbolTag4] = cloneableTags[uint8Tag3] = cloneableTags[uint8ClampedTag3] = cloneableTags[uint16Tag3] = cloneableTags[uint32Tag3] = true;
  cloneableTags[errorTag3] = cloneableTags[funcTag3] = cloneableTags[weakMapTag3] = false;
  function baseClone(value, bitmask, customizer, key, object2, stack) {
    var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
    if (customizer) {
      result = object2 ? customizer(value, key, object2, stack) : customizer(value);
    }
    if (result !== void 0) {
      return result;
    }
    if (!isObject_default(value)) {
      return value;
    }
    var isArr = isArray_default(value);
    if (isArr) {
      result = initCloneArray_default(value);
      if (!isDeep) {
        return copyArray_default(value, result);
      }
    } else {
      var tag = getTag_default(value), isFunc = tag == funcTag3 || tag == genTag2;
      if (isBuffer_default(value)) {
        return cloneBuffer_default(value, isDeep);
      }
      if (tag == objectTag4 || tag == argsTag4 || isFunc && !object2) {
        result = isFlat || isFunc ? {} : initCloneObject_default(value);
        if (!isDeep) {
          return isFlat ? copySymbolsIn_default(value, baseAssignIn_default(result, value)) : copySymbols_default(value, baseAssign_default(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object2 ? value : {};
        }
        result = initCloneByTag_default(value, tag, isDeep);
      }
    }
    stack || (stack = new Stack_default());
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);
    if (isSet_default(value)) {
      value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap_default(value)) {
      value.forEach(function(subValue, key2) {
        result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
      });
    }
    var keysFunc = isFull ? isFlat ? getAllKeysIn_default : getAllKeys_default : isFlat ? keysIn_default : keys_default;
    var props = isArr ? void 0 : keysFunc(value);
    arrayEach_default(props || value, function(subValue, key2) {
      if (props) {
        key2 = subValue;
        subValue = value[key2];
      }
      assignValue_default(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
    });
    return result;
  }
  var baseClone_default = baseClone;

  // node_modules/lodash-es/last.js
  function last(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : void 0;
  }
  var last_default = last;

  // node_modules/lodash-es/_baseSlice.js
  function baseSlice(array, start, end) {
    var index2 = -1, length = array.length;
    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);
    while (++index2 < length) {
      result[index2] = array[index2 + start];
    }
    return result;
  }
  var baseSlice_default = baseSlice;

  // node_modules/lodash-es/_parent.js
  function parent(object2, path) {
    return path.length < 2 ? object2 : baseGet_default(object2, baseSlice_default(path, 0, -1));
  }
  var parent_default = parent;

  // node_modules/lodash-es/_baseUnset.js
  function baseUnset(object2, path) {
    path = castPath_default(path, object2);
    object2 = parent_default(object2, path);
    return object2 == null || delete object2[toKey_default(last_default(path))];
  }
  var baseUnset_default = baseUnset;

  // node_modules/lodash-es/isPlainObject.js
  var objectTag5 = "[object Object]";
  var funcProto3 = Function.prototype;
  var objectProto17 = Object.prototype;
  var funcToString3 = funcProto3.toString;
  var hasOwnProperty14 = objectProto17.hasOwnProperty;
  var objectCtorString = funcToString3.call(Object);
  function isPlainObject(value) {
    if (!isObjectLike_default(value) || baseGetTag_default(value) != objectTag5) {
      return false;
    }
    var proto = getPrototype_default(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty14.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString3.call(Ctor) == objectCtorString;
  }
  var isPlainObject_default = isPlainObject;

  // node_modules/lodash-es/_customOmitClone.js
  function customOmitClone(value) {
    return isPlainObject_default(value) ? void 0 : value;
  }
  var customOmitClone_default = customOmitClone;

  // node_modules/lodash-es/_isFlattenable.js
  var spreadableSymbol = Symbol_default ? Symbol_default.isConcatSpreadable : void 0;
  function isFlattenable(value) {
    return isArray_default(value) || isArguments_default(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }
  var isFlattenable_default = isFlattenable;

  // node_modules/lodash-es/_baseFlatten.js
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index2 = -1, length = array.length;
    predicate || (predicate = isFlattenable_default);
    result || (result = []);
    while (++index2 < length) {
      var value = array[index2];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush_default(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }
  var baseFlatten_default = baseFlatten;

  // node_modules/lodash-es/flatten.js
  function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten_default(array, 1) : [];
  }
  var flatten_default = flatten;

  // node_modules/lodash-es/_apply.js
  function apply(func2, thisArg, args) {
    switch (args.length) {
      case 0:
        return func2.call(thisArg);
      case 1:
        return func2.call(thisArg, args[0]);
      case 2:
        return func2.call(thisArg, args[0], args[1]);
      case 3:
        return func2.call(thisArg, args[0], args[1], args[2]);
    }
    return func2.apply(thisArg, args);
  }
  var apply_default = apply;

  // node_modules/lodash-es/_overRest.js
  var nativeMax = Math.max;
  function overRest(func2, start, transform) {
    start = nativeMax(start === void 0 ? func2.length - 1 : start, 0);
    return function() {
      var args = arguments, index2 = -1, length = nativeMax(args.length - start, 0), array = Array(length);
      while (++index2 < length) {
        array[index2] = args[start + index2];
      }
      index2 = -1;
      var otherArgs = Array(start + 1);
      while (++index2 < start) {
        otherArgs[index2] = args[index2];
      }
      otherArgs[start] = transform(array);
      return apply_default(func2, this, otherArgs);
    };
  }
  var overRest_default = overRest;

  // node_modules/lodash-es/constant.js
  function constant(value) {
    return function() {
      return value;
    };
  }
  var constant_default = constant;

  // node_modules/lodash-es/identity.js
  function identity(value) {
    return value;
  }
  var identity_default = identity;

  // node_modules/lodash-es/_baseSetToString.js
  var baseSetToString = !defineProperty_default ? identity_default : function(func2, string2) {
    return defineProperty_default(func2, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant_default(string2),
      "writable": true
    });
  };
  var baseSetToString_default = baseSetToString;

  // node_modules/lodash-es/_shortOut.js
  var HOT_COUNT = 800;
  var HOT_SPAN = 16;
  var nativeNow = Date.now;
  function shortOut(func2) {
    var count = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func2.apply(void 0, arguments);
    };
  }
  var shortOut_default = shortOut;

  // node_modules/lodash-es/_setToString.js
  var setToString = shortOut_default(baseSetToString_default);
  var setToString_default = setToString;

  // node_modules/lodash-es/_flatRest.js
  function flatRest(func2) {
    return setToString_default(overRest_default(func2, void 0, flatten_default), func2 + "");
  }
  var flatRest_default = flatRest;

  // node_modules/lodash-es/omit.js
  var CLONE_DEEP_FLAG2 = 1;
  var CLONE_FLAT_FLAG2 = 2;
  var CLONE_SYMBOLS_FLAG2 = 4;
  var omit = flatRest_default(function(object2, paths) {
    var result = {};
    if (object2 == null) {
      return result;
    }
    var isDeep = false;
    paths = arrayMap_default(paths, function(path) {
      path = castPath_default(path, object2);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    copyObject_default(object2, getAllKeysIn_default(object2), result);
    if (isDeep) {
      result = baseClone_default(result, CLONE_DEEP_FLAG2 | CLONE_FLAT_FLAG2 | CLONE_SYMBOLS_FLAG2, customOmitClone_default);
    }
    var length = paths.length;
    while (length--) {
      baseUnset_default(result, paths[length]);
    }
    return result;
  });
  var omit_default = omit;

  // node_modules/lodash-es/_baseSet.js
  function baseSet(object2, path, value, customizer) {
    if (!isObject_default(object2)) {
      return object2;
    }
    path = castPath_default(path, object2);
    var index2 = -1, length = path.length, lastIndex = length - 1, nested = object2;
    while (nested != null && ++index2 < length) {
      var key = toKey_default(path[index2]), newValue = value;
      if (key === "__proto__" || key === "constructor" || key === "prototype") {
        return object2;
      }
      if (index2 != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : void 0;
        if (newValue === void 0) {
          newValue = isObject_default(objValue) ? objValue : isIndex_default(path[index2 + 1]) ? [] : {};
        }
      }
      assignValue_default(nested, key, newValue);
      nested = nested[key];
    }
    return object2;
  }
  var baseSet_default = baseSet;

  // node_modules/lodash-es/set.js
  function set(object2, path, value) {
    return object2 == null ? object2 : baseSet_default(object2, path, value);
  }
  var set_default = set;

  // node_modules/@rjsf/utils/dist/utils.esm.js
  var import_json_schema_merge_allof = __toESM(require_src2());

  // node_modules/lodash-es/_baseRest.js
  function baseRest(func2, start) {
    return setToString_default(overRest_default(func2, start, identity_default), func2 + "");
  }
  var baseRest_default = baseRest;

  // node_modules/lodash-es/_baseFindIndex.js
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length, index2 = fromIndex + (fromRight ? 1 : -1);
    while (fromRight ? index2-- : ++index2 < length) {
      if (predicate(array[index2], index2, array)) {
        return index2;
      }
    }
    return -1;
  }
  var baseFindIndex_default = baseFindIndex;

  // node_modules/lodash-es/_baseIsNaN.js
  function baseIsNaN(value) {
    return value !== value;
  }
  var baseIsNaN_default = baseIsNaN;

  // node_modules/lodash-es/_strictIndexOf.js
  function strictIndexOf(array, value, fromIndex) {
    var index2 = fromIndex - 1, length = array.length;
    while (++index2 < length) {
      if (array[index2] === value) {
        return index2;
      }
    }
    return -1;
  }
  var strictIndexOf_default = strictIndexOf;

  // node_modules/lodash-es/_baseIndexOf.js
  function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf_default(array, value, fromIndex) : baseFindIndex_default(array, baseIsNaN_default, fromIndex);
  }
  var baseIndexOf_default = baseIndexOf;

  // node_modules/lodash-es/_arrayIncludes.js
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf_default(array, value, 0) > -1;
  }
  var arrayIncludes_default = arrayIncludes;

  // node_modules/lodash-es/_arrayIncludesWith.js
  function arrayIncludesWith(array, value, comparator) {
    var index2 = -1, length = array == null ? 0 : array.length;
    while (++index2 < length) {
      if (comparator(value, array[index2])) {
        return true;
      }
    }
    return false;
  }
  var arrayIncludesWith_default = arrayIncludesWith;

  // node_modules/lodash-es/noop.js
  function noop() {
  }
  var noop_default = noop;

  // node_modules/lodash-es/_createSet.js
  var INFINITY3 = 1 / 0;
  var createSet = !(Set_default && 1 / setToArray_default(new Set_default([, -0]))[1] == INFINITY3) ? noop_default : function(values5) {
    return new Set_default(values5);
  };
  var createSet_default = createSet;

  // node_modules/lodash-es/_baseUniq.js
  var LARGE_ARRAY_SIZE2 = 200;
  function baseUniq(array, iteratee, comparator) {
    var index2 = -1, includes = arrayIncludes_default, length = array.length, isCommon = true, result = [], seen = result;
    if (comparator) {
      isCommon = false;
      includes = arrayIncludesWith_default;
    } else if (length >= LARGE_ARRAY_SIZE2) {
      var set2 = iteratee ? null : createSet_default(array);
      if (set2) {
        return setToArray_default(set2);
      }
      isCommon = false;
      includes = cacheHas_default;
      seen = new SetCache_default();
    } else {
      seen = iteratee ? [] : result;
    }
    outer:
      while (++index2 < length) {
        var value = array[index2], computed = iteratee ? iteratee(value) : value;
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        } else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
    return result;
  }
  var baseUniq_default = baseUniq;

  // node_modules/lodash-es/isArrayLikeObject.js
  function isArrayLikeObject(value) {
    return isObjectLike_default(value) && isArrayLike_default(value);
  }
  var isArrayLikeObject_default = isArrayLikeObject;

  // node_modules/lodash-es/union.js
  var union = baseRest_default(function(arrays) {
    return baseUniq_default(baseFlatten_default(arrays, 1, isArrayLikeObject_default, true));
  });
  var union_default = union;

  // node_modules/@rjsf/utils/dist/utils.esm.js
  var import_react12 = __toESM(require_react());
  var import_react_is3 = __toESM(require_react_is3());
  function isObject4(thing) {
    if (typeof File !== "undefined" && thing instanceof File) {
      return false;
    }
    return typeof thing === "object" && thing !== null && !Array.isArray(thing);
  }
  function allowAdditionalItems(schema) {
    if (schema.additionalItems === true) {
      console.warn("additionalItems=true is currently not supported");
    }
    return isObject4(schema.additionalItems);
  }
  function asNumber(value) {
    if (value === "") {
      return void 0;
    }
    if (value === null) {
      return null;
    }
    if (/\.$/.test(value)) {
      return value;
    }
    if (/\.0$/.test(value)) {
      return value;
    }
    if (/\.\d*0$/.test(value)) {
      return value;
    }
    const n = Number(value);
    const valid = typeof n === "number" && !Number.isNaN(n);
    return valid ? n : value;
  }
  var ADDITIONAL_PROPERTY_FLAG = "__additional_property";
  var ADDITIONAL_PROPERTIES_KEY = "additionalProperties";
  var ALL_OF_KEY = "allOf";
  var ANY_OF_KEY = "anyOf";
  var CONST_KEY = "const";
  var DEFAULT_KEY = "default";
  var DEPENDENCIES_KEY = "dependencies";
  var ENUM_KEY = "enum";
  var ERRORS_KEY = "__errors";
  var ID_KEY = "$id";
  var ITEMS_KEY = "items";
  var NAME_KEY = "$name";
  var ONE_OF_KEY = "oneOf";
  var PROPERTIES_KEY = "properties";
  var REQUIRED_KEY = "required";
  var SUBMIT_BTN_OPTIONS_KEY = "submitButtonOptions";
  var REF_KEY = "$ref";
  var RJSF_ADDITONAL_PROPERTIES_FLAG = "__rjsf_additionalProperties";
  var UI_FIELD_KEY = "ui:field";
  var UI_WIDGET_KEY = "ui:widget";
  var UI_OPTIONS_KEY = "ui:options";
  function getUiOptions(uiSchema2) {
    if (uiSchema2 === void 0) {
      uiSchema2 = {};
    }
    return Object.keys(uiSchema2).filter((key) => key.indexOf("ui:") === 0).reduce((options, key) => {
      const value = uiSchema2[key];
      if (key === UI_WIDGET_KEY && isObject4(value)) {
        console.error("Setting options via ui:widget object is no longer supported, use ui:options instead");
        return options;
      }
      if (key === UI_OPTIONS_KEY && isObject4(value)) {
        return {
          ...options,
          ...value
        };
      }
      return {
        ...options,
        [key.substring(3)]: value
      };
    }, {});
  }
  function canExpand(schema, uiSchema2, formData) {
    if (uiSchema2 === void 0) {
      uiSchema2 = {};
    }
    if (!schema.additionalProperties) {
      return false;
    }
    const {
      expandable = true
    } = getUiOptions(uiSchema2);
    if (expandable === false) {
      return expandable;
    }
    if (schema.maxProperties !== void 0 && formData) {
      return Object.keys(formData).length < schema.maxProperties;
    }
    return true;
  }
  function deepEquals(a, b) {
    return isEqualWith_default(a, b, (obj, other) => {
      if (typeof obj === "function" && typeof other === "function") {
        return true;
      }
      return void 0;
    });
  }
  function splitKeyElementFromObject(key, object2) {
    const value = object2[key];
    const remaining = omit_default(object2, [key]);
    return [remaining, value];
  }
  function findSchemaDefinition($ref, rootSchema) {
    if (rootSchema === void 0) {
      rootSchema = {};
    }
    let ref = $ref || "";
    if (ref.startsWith("#")) {
      ref = decodeURIComponent(ref.substring(1));
    } else {
      throw new Error(`Could not find a definition for ${$ref}.`);
    }
    const current = import_jsonpointer.default.get(rootSchema, ref);
    if (current === void 0) {
      throw new Error(`Could not find a definition for ${$ref}.`);
    }
    if (current[REF_KEY]) {
      const [remaining, theRef] = splitKeyElementFromObject(REF_KEY, current);
      const subSchema = findSchemaDefinition(theRef, rootSchema);
      if (Object.keys(remaining).length > 0) {
        return {
          ...remaining,
          ...subSchema
        };
      }
      return subSchema;
    }
    return current;
  }
  function getMatchingOption(validator, formData, options, rootSchema) {
    if (formData === void 0) {
      return 0;
    }
    for (let i = 0; i < options.length; i++) {
      const option = options[i];
      if (option.properties) {
        const requiresAnyOf = {
          anyOf: Object.keys(option.properties).map((key) => ({
            required: [key]
          }))
        };
        let augmentedSchema;
        if (option.anyOf) {
          const {
            ...shallowClone
          } = option;
          if (!shallowClone.allOf) {
            shallowClone.allOf = [];
          } else {
            shallowClone.allOf = shallowClone.allOf.slice();
          }
          shallowClone.allOf.push(requiresAnyOf);
          augmentedSchema = shallowClone;
        } else {
          augmentedSchema = Object.assign({}, option, requiresAnyOf);
        }
        delete augmentedSchema.required;
        if (validator.isValid(augmentedSchema, formData, rootSchema)) {
          return i;
        }
      } else if (validator.isValid(option, formData, rootSchema)) {
        return i;
      }
    }
    return 0;
  }
  function guessType(value) {
    if (Array.isArray(value)) {
      return "array";
    }
    if (typeof value === "string") {
      return "string";
    }
    if (value == null) {
      return "null";
    }
    if (typeof value === "boolean") {
      return "boolean";
    }
    if (!isNaN(value)) {
      return "number";
    }
    if (typeof value === "object") {
      return "object";
    }
    return "string";
  }
  function getSchemaType(schema) {
    let {
      type
    } = schema;
    if (!type && schema.const) {
      return guessType(schema.const);
    }
    if (!type && schema.enum) {
      return "string";
    }
    if (!type && (schema.properties || schema.additionalProperties)) {
      return "object";
    }
    if (Array.isArray(type) && type.length === 2 && type.includes("null")) {
      type = type.find((type2) => type2 !== "null");
    }
    return type;
  }
  function isFixedItems(schema) {
    return Array.isArray(schema.items) && schema.items.length > 0 && schema.items.every((item) => isObject4(item));
  }
  function mergeDefaultsWithFormData(defaults, formData) {
    if (Array.isArray(formData)) {
      const defaultsArray = Array.isArray(defaults) ? defaults : [];
      const mapped = formData.map((value, idx) => {
        if (defaultsArray[idx]) {
          return mergeDefaultsWithFormData(defaultsArray[idx], value);
        }
        return value;
      });
      return mapped;
    }
    if (isObject4(formData)) {
      const acc = Object.assign({}, defaults);
      return Object.keys(formData).reduce((acc2, key) => {
        acc2[key] = mergeDefaultsWithFormData(defaults ? get_default(defaults, key) : {}, get_default(formData, key));
        return acc2;
      }, acc);
    }
    return formData;
  }
  function mergeObjects(obj1, obj2, concatArrays) {
    if (concatArrays === void 0) {
      concatArrays = false;
    }
    return Object.keys(obj2).reduce((acc, key) => {
      const left = obj1 ? obj1[key] : {}, right = obj2[key];
      if (obj1 && key in obj1 && isObject4(right)) {
        acc[key] = mergeObjects(left, right, concatArrays);
      } else if (concatArrays && Array.isArray(left) && Array.isArray(right)) {
        acc[key] = left.concat(right);
      } else {
        acc[key] = right;
      }
      return acc;
    }, Object.assign({}, obj1));
  }
  function isConstant(schema) {
    return Array.isArray(schema.enum) && schema.enum.length === 1 || CONST_KEY in schema;
  }
  function mergeSchemas(obj1, obj2) {
    const acc = Object.assign({}, obj1);
    return Object.keys(obj2).reduce((acc2, key) => {
      const left = obj1 ? obj1[key] : {}, right = obj2[key];
      if (obj1 && key in obj1 && isObject4(right)) {
        acc2[key] = mergeSchemas(left, right);
      } else if (obj1 && obj2 && (getSchemaType(obj1) === "object" || getSchemaType(obj2) === "object") && key === REQUIRED_KEY && Array.isArray(left) && Array.isArray(right)) {
        acc2[key] = union_default(left, right);
      } else {
        acc2[key] = right;
      }
      return acc2;
    }, acc);
  }
  function resolveCondition(validator, schema, rootSchema, formData) {
    const {
      if: expression,
      then,
      else: otherwise,
      ...resolvedSchemaLessConditional
    } = schema;
    const conditionalSchema = validator.isValid(expression, formData, rootSchema) ? then : otherwise;
    if (conditionalSchema && typeof conditionalSchema !== "boolean") {
      return retrieveSchema(validator, mergeSchemas(resolvedSchemaLessConditional, retrieveSchema(validator, conditionalSchema, rootSchema, formData)), rootSchema, formData);
    }
    return retrieveSchema(validator, resolvedSchemaLessConditional, rootSchema, formData);
  }
  function resolveSchema(validator, schema, rootSchema, formData) {
    if (rootSchema === void 0) {
      rootSchema = {};
    }
    if (REF_KEY in schema) {
      return resolveReference(validator, schema, rootSchema, formData);
    }
    if (DEPENDENCIES_KEY in schema) {
      const resolvedSchema = resolveDependencies(validator, schema, rootSchema, formData);
      return retrieveSchema(validator, resolvedSchema, rootSchema, formData);
    }
    if (ALL_OF_KEY in schema) {
      return {
        ...schema,
        allOf: schema.allOf.map((allOfSubschema) => retrieveSchema(validator, allOfSubschema, rootSchema, formData))
      };
    }
    return schema;
  }
  function resolveReference(validator, schema, rootSchema, formData) {
    const $refSchema = findSchemaDefinition(schema.$ref, rootSchema);
    const {
      $ref,
      ...localSchema
    } = schema;
    return retrieveSchema(validator, {
      ...$refSchema,
      ...localSchema
    }, rootSchema, formData);
  }
  function stubExistingAdditionalProperties(validator, theSchema, rootSchema, aFormData) {
    const schema = {
      ...theSchema,
      properties: {
        ...theSchema.properties
      }
    };
    const formData = aFormData && isObject4(aFormData) ? aFormData : {};
    Object.keys(formData).forEach((key) => {
      if (key in schema.properties) {
        return;
      }
      let additionalProperties = {};
      if (typeof schema.additionalProperties !== "boolean") {
        if (REF_KEY in schema.additionalProperties) {
          additionalProperties = retrieveSchema(validator, {
            $ref: get_default(schema.additionalProperties, [REF_KEY])
          }, rootSchema, formData);
        } else if ("type" in schema.additionalProperties) {
          additionalProperties = {
            ...schema.additionalProperties
          };
        } else {
          additionalProperties = {
            type: guessType(get_default(formData, [key]))
          };
        }
      } else {
        additionalProperties = {
          type: guessType(get_default(formData, [key]))
        };
      }
      schema.properties[key] = additionalProperties;
      set_default(schema.properties, [key, ADDITIONAL_PROPERTY_FLAG], true);
    });
    return schema;
  }
  function retrieveSchema(validator, schema, rootSchema, rawFormData) {
    if (rootSchema === void 0) {
      rootSchema = {};
    }
    if (!isObject4(schema)) {
      return {};
    }
    let resolvedSchema = resolveSchema(validator, schema, rootSchema, rawFormData);
    if ("if" in schema) {
      return resolveCondition(validator, schema, rootSchema, rawFormData);
    }
    const formData = rawFormData || {};
    if (resolvedSchema.properties) {
      const properties3 = {};
      Object.entries(resolvedSchema.properties).forEach((entries) => {
        const propName = entries[0];
        const propSchema = entries[1];
        const rawPropData = formData[propName];
        const propData = isObject4(rawPropData) ? rawPropData : {};
        const resolvedPropSchema = retrieveSchema(validator, propSchema, rootSchema, propData);
        properties3[propName] = resolvedPropSchema;
        if (propSchema !== resolvedPropSchema && resolvedSchema.properties !== properties3) {
          resolvedSchema = {
            ...resolvedSchema,
            properties: properties3
          };
        }
      });
    }
    if (ALL_OF_KEY in schema) {
      try {
        resolvedSchema = (0, import_json_schema_merge_allof.default)({
          ...resolvedSchema,
          allOf: resolvedSchema.allOf
        });
      } catch (e) {
        console.warn("could not merge subschemas in allOf:\n" + e);
        const {
          allOf,
          ...resolvedSchemaWithoutAllOf
        } = resolvedSchema;
        return resolvedSchemaWithoutAllOf;
      }
    }
    const hasAdditionalProperties = ADDITIONAL_PROPERTIES_KEY in resolvedSchema && resolvedSchema.additionalProperties !== false;
    if (hasAdditionalProperties) {
      return stubExistingAdditionalProperties(validator, resolvedSchema, rootSchema, formData);
    }
    return resolvedSchema;
  }
  function resolveDependencies(validator, schema, rootSchema, formData) {
    const {
      dependencies,
      ...remainingSchema
    } = schema;
    let resolvedSchema = remainingSchema;
    if (Array.isArray(resolvedSchema.oneOf)) {
      resolvedSchema = resolvedSchema.oneOf[getMatchingOption(validator, formData, resolvedSchema.oneOf, rootSchema)];
    } else if (Array.isArray(resolvedSchema.anyOf)) {
      resolvedSchema = resolvedSchema.anyOf[getMatchingOption(validator, formData, resolvedSchema.anyOf, rootSchema)];
    }
    return processDependencies(validator, dependencies, resolvedSchema, rootSchema, formData);
  }
  function processDependencies(validator, dependencies, resolvedSchema, rootSchema, formData) {
    let schema = resolvedSchema;
    for (const dependencyKey in dependencies) {
      if (get_default(formData, [dependencyKey]) === void 0) {
        continue;
      }
      if (schema.properties && !(dependencyKey in schema.properties)) {
        continue;
      }
      const [remainingDependencies, dependencyValue] = splitKeyElementFromObject(dependencyKey, dependencies);
      if (Array.isArray(dependencyValue)) {
        schema = withDependentProperties(schema, dependencyValue);
      } else if (isObject4(dependencyValue)) {
        schema = withDependentSchema(validator, schema, rootSchema, dependencyKey, dependencyValue, formData);
      }
      return processDependencies(validator, remainingDependencies, schema, rootSchema, formData);
    }
    return schema;
  }
  function withDependentProperties(schema, additionallyRequired) {
    if (!additionallyRequired) {
      return schema;
    }
    const required = Array.isArray(schema.required) ? Array.from(/* @__PURE__ */ new Set([...schema.required, ...additionallyRequired])) : additionallyRequired;
    return {
      ...schema,
      required
    };
  }
  function withDependentSchema(validator, schema, rootSchema, dependencyKey, dependencyValue, formData) {
    const {
      oneOf,
      ...dependentSchema
    } = retrieveSchema(validator, dependencyValue, rootSchema, formData);
    schema = mergeSchemas(schema, dependentSchema);
    if (oneOf === void 0) {
      return schema;
    }
    const resolvedOneOf = oneOf.map((subschema) => {
      if (typeof subschema === "boolean" || !(REF_KEY in subschema)) {
        return subschema;
      }
      return resolveReference(validator, subschema, rootSchema, formData);
    });
    return withExactlyOneSubschema(validator, schema, rootSchema, dependencyKey, resolvedOneOf, formData);
  }
  function withExactlyOneSubschema(validator, schema, rootSchema, dependencyKey, oneOf, formData) {
    const validSubschemas = oneOf.filter((subschema2) => {
      if (typeof subschema2 === "boolean" || !subschema2 || !subschema2.properties) {
        return false;
      }
      const {
        [dependencyKey]: conditionPropertySchema
      } = subschema2.properties;
      if (conditionPropertySchema) {
        const conditionSchema = {
          type: "object",
          properties: {
            [dependencyKey]: conditionPropertySchema
          }
        };
        const {
          errors
        } = validator.validateFormData(formData, conditionSchema);
        return errors.length === 0;
      }
      return false;
    });
    if (validSubschemas.length !== 1) {
      console.warn("ignoring oneOf in dependencies because there isn't exactly one subschema that is valid");
      return schema;
    }
    const subschema = validSubschemas[0];
    const [dependentSubschema] = splitKeyElementFromObject(dependencyKey, subschema.properties);
    const dependentSchema = {
      ...subschema,
      properties: dependentSubschema
    };
    return mergeSchemas(schema, retrieveSchema(validator, dependentSchema, rootSchema, formData));
  }
  function isSelect(validator, theSchema, rootSchema) {
    if (rootSchema === void 0) {
      rootSchema = {};
    }
    const schema = retrieveSchema(validator, theSchema, rootSchema, void 0);
    const altSchemas = schema.oneOf || schema.anyOf;
    if (Array.isArray(schema.enum)) {
      return true;
    }
    if (Array.isArray(altSchemas)) {
      return altSchemas.every((altSchemas2) => typeof altSchemas2 !== "boolean" && isConstant(altSchemas2));
    }
    return false;
  }
  function isMultiSelect(validator, schema, rootSchema) {
    if (!schema.uniqueItems || !schema.items || typeof schema.items === "boolean") {
      return false;
    }
    return isSelect(validator, schema.items, rootSchema);
  }
  var AdditionalItemsHandling;
  (function(AdditionalItemsHandling2) {
    AdditionalItemsHandling2[AdditionalItemsHandling2["Ignore"] = 0] = "Ignore";
    AdditionalItemsHandling2[AdditionalItemsHandling2["Invert"] = 1] = "Invert";
    AdditionalItemsHandling2[AdditionalItemsHandling2["Fallback"] = 2] = "Fallback";
  })(AdditionalItemsHandling || (AdditionalItemsHandling = {}));
  function getInnerSchemaForArrayItem(schema, additionalItems, idx) {
    if (additionalItems === void 0) {
      additionalItems = AdditionalItemsHandling.Ignore;
    }
    if (idx === void 0) {
      idx = -1;
    }
    if (idx >= 0) {
      if (Array.isArray(schema.items) && idx < schema.items.length) {
        const item = schema.items[idx];
        if (typeof item !== "boolean") {
          return item;
        }
      }
    } else if (schema.items && !Array.isArray(schema.items) && typeof schema.items !== "boolean") {
      return schema.items;
    }
    if (additionalItems !== AdditionalItemsHandling.Ignore && isObject4(schema.additionalItems)) {
      return schema.additionalItems;
    }
    return {};
  }
  function computeDefaults(validator, schema, parentDefaults, rootSchema, rawFormData, includeUndefinedValues) {
    if (rootSchema === void 0) {
      rootSchema = {};
    }
    if (includeUndefinedValues === void 0) {
      includeUndefinedValues = false;
    }
    const formData = isObject4(rawFormData) ? rawFormData : {};
    let defaults = parentDefaults;
    if (isObject4(defaults) && isObject4(schema.default)) {
      defaults = mergeObjects(defaults, schema.default);
    } else if (DEFAULT_KEY in schema) {
      defaults = schema.default;
    } else if (REF_KEY in schema) {
      const refSchema = findSchemaDefinition(schema[REF_KEY], rootSchema);
      return computeDefaults(validator, refSchema, defaults, rootSchema, formData, includeUndefinedValues);
    } else if (DEPENDENCIES_KEY in schema) {
      const resolvedSchema = resolveDependencies(validator, schema, rootSchema, formData);
      return computeDefaults(validator, resolvedSchema, defaults, rootSchema, formData, includeUndefinedValues);
    } else if (isFixedItems(schema)) {
      defaults = schema.items.map((itemSchema, idx) => computeDefaults(validator, itemSchema, Array.isArray(parentDefaults) ? parentDefaults[idx] : void 0, rootSchema, formData, includeUndefinedValues));
    } else if (ONE_OF_KEY in schema) {
      schema = schema.oneOf[getMatchingOption(validator, isEmpty_default(formData) ? void 0 : formData, schema.oneOf, rootSchema)];
    } else if (ANY_OF_KEY in schema) {
      schema = schema.anyOf[getMatchingOption(validator, isEmpty_default(formData) ? void 0 : formData, schema.anyOf, rootSchema)];
    }
    if (typeof defaults === "undefined") {
      defaults = schema.default;
    }
    switch (getSchemaType(schema)) {
      case "object":
        return Object.keys(schema.properties || {}).reduce((acc, key) => {
          const computedDefault = computeDefaults(validator, get_default(schema, [PROPERTIES_KEY, key]), get_default(defaults, [key]), rootSchema, get_default(formData, [key]), includeUndefinedValues);
          if (includeUndefinedValues || computedDefault !== void 0) {
            acc[key] = computedDefault;
          }
          return acc;
        }, {});
      case "array":
        if (Array.isArray(defaults)) {
          defaults = defaults.map((item, idx) => {
            const schemaItem = getInnerSchemaForArrayItem(schema, AdditionalItemsHandling.Fallback, idx);
            return computeDefaults(validator, schemaItem, item, rootSchema);
          });
        }
        if (Array.isArray(rawFormData)) {
          const schemaItem = getInnerSchemaForArrayItem(schema);
          defaults = rawFormData.map((item, idx) => {
            return computeDefaults(validator, schemaItem, get_default(defaults, [idx]), rootSchema, item);
          });
        }
        if (schema.minItems) {
          if (!isMultiSelect(validator, schema, rootSchema)) {
            const defaultsLength = Array.isArray(defaults) ? defaults.length : 0;
            if (schema.minItems > defaultsLength) {
              const defaultEntries = defaults || [];
              const fillerSchema = getInnerSchemaForArrayItem(schema, AdditionalItemsHandling.Invert);
              const fillerDefault = fillerSchema.default;
              const fillerEntries = new Array(schema.minItems - defaultsLength).fill(computeDefaults(validator, fillerSchema, fillerDefault, rootSchema));
              return defaultEntries.concat(fillerEntries);
            }
          }
          return defaults ? defaults : [];
        }
    }
    return defaults;
  }
  function getDefaultFormState(validator, theSchema, formData, rootSchema, includeUndefinedValues) {
    if (includeUndefinedValues === void 0) {
      includeUndefinedValues = false;
    }
    if (!isObject4(theSchema)) {
      throw new Error("Invalid schema: " + theSchema);
    }
    const schema = retrieveSchema(validator, theSchema, rootSchema, formData);
    const defaults = computeDefaults(validator, schema, void 0, rootSchema, formData, includeUndefinedValues);
    if (typeof formData === "undefined" || formData === null || typeof formData === "number" && isNaN(formData)) {
      return defaults;
    }
    if (isObject4(formData)) {
      return mergeDefaultsWithFormData(defaults, formData);
    }
    if (Array.isArray(formData)) {
      return mergeDefaultsWithFormData(defaults, formData);
    }
    return formData;
  }
  function isCustomWidget(uiSchema2) {
    if (uiSchema2 === void 0) {
      uiSchema2 = {};
    }
    return "widget" in getUiOptions(uiSchema2) && getUiOptions(uiSchema2)["widget"] !== "hidden";
  }
  function isFilesArray(validator, schema, uiSchema2, rootSchema) {
    if (uiSchema2 === void 0) {
      uiSchema2 = {};
    }
    if (uiSchema2[UI_WIDGET_KEY] === "files") {
      return true;
    }
    if (schema.items) {
      const itemsSchema = retrieveSchema(validator, schema.items, rootSchema);
      return itemsSchema.type === "string" && itemsSchema.format === "data-url";
    }
    return false;
  }
  function getDisplayLabel(validator, schema, uiSchema2, rootSchema) {
    if (uiSchema2 === void 0) {
      uiSchema2 = {};
    }
    const uiOptions = getUiOptions(uiSchema2);
    const {
      label = true
    } = uiOptions;
    let displayLabel = !!label;
    const schemaType = getSchemaType(schema);
    if (schemaType === "array") {
      displayLabel = isMultiSelect(validator, schema, rootSchema) || isFilesArray(validator, schema, uiSchema2, rootSchema) || isCustomWidget(uiSchema2);
    }
    if (schemaType === "object") {
      displayLabel = false;
    }
    if (schemaType === "boolean" && !uiSchema2[UI_WIDGET_KEY]) {
      displayLabel = false;
    }
    if (uiSchema2[UI_FIELD_KEY]) {
      displayLabel = false;
    }
    return displayLabel;
  }
  function mergeValidationData(validator, validationData, additionalErrorSchema) {
    if (!additionalErrorSchema) {
      return validationData;
    }
    const {
      errors: oldErrors,
      errorSchema: oldErrorSchema
    } = validationData;
    let errors = validator.toErrorList(additionalErrorSchema);
    let errorSchema = additionalErrorSchema;
    if (!isEmpty_default(oldErrorSchema)) {
      errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true);
      errors = [...oldErrors].concat(errors);
    }
    return {
      errorSchema,
      errors
    };
  }
  function toIdSchema(validator, schema, id, rootSchema, formData, idPrefix, idSeparator) {
    if (idPrefix === void 0) {
      idPrefix = "root";
    }
    if (idSeparator === void 0) {
      idSeparator = "_";
    }
    if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {
      const _schema = retrieveSchema(validator, schema, rootSchema, formData);
      return toIdSchema(validator, _schema, id, rootSchema, formData, idPrefix, idSeparator);
    }
    if (ITEMS_KEY in schema && !get_default(schema, [ITEMS_KEY, REF_KEY])) {
      return toIdSchema(validator, get_default(schema, ITEMS_KEY), id, rootSchema, formData, idPrefix, idSeparator);
    }
    const $id = id || idPrefix;
    const idSchema = {
      $id
    };
    if (schema.type === "object" && PROPERTIES_KEY in schema) {
      for (const name in schema.properties) {
        const field = get_default(schema, [PROPERTIES_KEY, name]);
        const fieldId = idSchema[ID_KEY] + idSeparator + name;
        idSchema[name] = toIdSchema(
          validator,
          isObject4(field) ? field : {},
          fieldId,
          rootSchema,
          get_default(formData, [name]),
          idPrefix,
          idSeparator
        );
      }
    }
    return idSchema;
  }
  function toPathSchema(validator, schema, name, rootSchema, formData) {
    if (name === void 0) {
      name = "";
    }
    if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {
      const _schema = retrieveSchema(validator, schema, rootSchema, formData);
      return toPathSchema(validator, _schema, name, rootSchema, formData);
    }
    const pathSchema = {
      [NAME_KEY]: name.replace(/^\./, "")
    };
    if (ADDITIONAL_PROPERTIES_KEY in schema && schema[ADDITIONAL_PROPERTIES_KEY] === true) {
      set_default(pathSchema, RJSF_ADDITONAL_PROPERTIES_FLAG, true);
    }
    if (ITEMS_KEY in schema && Array.isArray(formData)) {
      formData.forEach((element, i) => {
        pathSchema[i] = toPathSchema(validator, schema.items, `${name}.${i}`, rootSchema, element);
      });
    } else if (PROPERTIES_KEY in schema) {
      for (const property in schema.properties) {
        const field = get_default(schema, [PROPERTIES_KEY, property]);
        pathSchema[property] = toPathSchema(
          validator,
          field,
          `${name}.${property}`,
          rootSchema,
          get_default(formData, [property])
        );
      }
    }
    return pathSchema;
  }
  var SchemaUtils = class {
    constructor(validator, rootSchema) {
      this.rootSchema = void 0;
      this.validator = void 0;
      this.rootSchema = rootSchema;
      this.validator = validator;
    }
    getValidator() {
      return this.validator;
    }
    doesSchemaUtilsDiffer(validator, rootSchema) {
      if (!validator || !rootSchema) {
        return false;
      }
      return this.validator !== validator || !deepEquals(this.rootSchema, rootSchema);
    }
    getDefaultFormState(schema, formData, includeUndefinedValues) {
      if (includeUndefinedValues === void 0) {
        includeUndefinedValues = false;
      }
      return getDefaultFormState(this.validator, schema, formData, this.rootSchema, includeUndefinedValues);
    }
    getDisplayLabel(schema, uiSchema2) {
      return getDisplayLabel(this.validator, schema, uiSchema2, this.rootSchema);
    }
    getMatchingOption(formData, options) {
      return getMatchingOption(this.validator, formData, options, this.rootSchema);
    }
    isFilesArray(schema, uiSchema2) {
      return isFilesArray(this.validator, schema, uiSchema2, this.rootSchema);
    }
    isMultiSelect(schema) {
      return isMultiSelect(this.validator, schema, this.rootSchema);
    }
    isSelect(schema) {
      return isSelect(this.validator, schema, this.rootSchema);
    }
    mergeValidationData(validationData, additionalErrorSchema) {
      return mergeValidationData(this.validator, validationData, additionalErrorSchema);
    }
    retrieveSchema(schema, rawFormData) {
      return retrieveSchema(this.validator, schema, this.rootSchema, rawFormData);
    }
    toIdSchema(schema, id, formData, idPrefix, idSeparator) {
      if (idPrefix === void 0) {
        idPrefix = "root";
      }
      if (idSeparator === void 0) {
        idSeparator = "_";
      }
      return toIdSchema(this.validator, schema, id, this.rootSchema, formData, idPrefix, idSeparator);
    }
    toPathSchema(schema, name, formData) {
      return toPathSchema(this.validator, schema, name, this.rootSchema, formData);
    }
  };
  function createSchemaUtils(validator, rootSchema) {
    return new SchemaUtils(validator, rootSchema);
  }
  function dataURItoBlob(dataURI) {
    const splitted = dataURI.split(",");
    const params = splitted[0].split(";");
    const type = params[0].replace("data:", "");
    const properties3 = params.filter((param) => {
      return param.split("=")[0] === "name";
    });
    let name;
    if (properties3.length !== 1) {
      name = "unknown";
    } else {
      name = properties3[0].split("=")[1];
    }
    const binary = atob(splitted[1]);
    const array = [];
    for (let i = 0; i < binary.length; i++) {
      array.push(binary.charCodeAt(i));
    }
    const blob = new window.Blob([new Uint8Array(array)], {
      type
    });
    return {
      blob,
      name
    };
  }
  function rangeSpec(schema) {
    const spec = {};
    if (schema.multipleOf) {
      spec.step = schema.multipleOf;
    }
    if (schema.minimum || schema.minimum === 0) {
      spec.min = schema.minimum;
    }
    if (schema.maximum || schema.maximum === 0) {
      spec.max = schema.maximum;
    }
    return spec;
  }
  function getInputProps(schema, defaultType, options, autoDefaultStepAny) {
    if (options === void 0) {
      options = {};
    }
    if (autoDefaultStepAny === void 0) {
      autoDefaultStepAny = true;
    }
    const inputProps = {
      type: defaultType || "text",
      ...rangeSpec(schema)
    };
    if (options.inputType) {
      inputProps.type = options.inputType;
    } else if (!defaultType) {
      if (schema.type === "number") {
        inputProps.type = "number";
        if (autoDefaultStepAny && inputProps.step === void 0) {
          inputProps.step = "any";
        }
      } else if (schema.type === "integer") {
        inputProps.type = "number";
        if (inputProps.step === void 0) {
          inputProps.step = 1;
        }
      }
    }
    if (options.autocomplete) {
      inputProps.autoComplete = options.autocomplete;
    }
    return inputProps;
  }
  var DEFAULT_OPTIONS = {
    props: {
      disabled: false
    },
    submitText: "Submit",
    norender: false
  };
  function getSubmitButtonOptions(uiSchema2) {
    if (uiSchema2 === void 0) {
      uiSchema2 = {};
    }
    const uiOptions = getUiOptions(uiSchema2);
    if (uiOptions && uiOptions[SUBMIT_BTN_OPTIONS_KEY]) {
      const options = uiOptions[SUBMIT_BTN_OPTIONS_KEY];
      return {
        ...DEFAULT_OPTIONS,
        ...options
      };
    }
    return DEFAULT_OPTIONS;
  }
  function getTemplate(name, registry, uiOptions) {
    if (uiOptions === void 0) {
      uiOptions = {};
    }
    const {
      templates: templates2
    } = registry;
    if (name === "ButtonTemplates") {
      return templates2[name];
    }
    return uiOptions[name] || templates2[name];
  }
  var widgetMap = {
    boolean: {
      checkbox: "CheckboxWidget",
      radio: "RadioWidget",
      select: "SelectWidget",
      hidden: "HiddenWidget"
    },
    string: {
      text: "TextWidget",
      password: "PasswordWidget",
      email: "EmailWidget",
      hostname: "TextWidget",
      ipv4: "TextWidget",
      ipv6: "TextWidget",
      uri: "URLWidget",
      "data-url": "FileWidget",
      radio: "RadioWidget",
      select: "SelectWidget",
      textarea: "TextareaWidget",
      hidden: "HiddenWidget",
      date: "DateWidget",
      datetime: "DateTimeWidget",
      "date-time": "DateTimeWidget",
      "alt-date": "AltDateWidget",
      "alt-datetime": "AltDateTimeWidget",
      color: "ColorWidget",
      file: "FileWidget"
    },
    number: {
      text: "TextWidget",
      select: "SelectWidget",
      updown: "UpDownWidget",
      range: "RangeWidget",
      radio: "RadioWidget",
      hidden: "HiddenWidget"
    },
    integer: {
      text: "TextWidget",
      select: "SelectWidget",
      updown: "UpDownWidget",
      range: "RangeWidget",
      radio: "RadioWidget",
      hidden: "HiddenWidget"
    },
    array: {
      select: "SelectWidget",
      checkboxes: "CheckboxesWidget",
      files: "FileWidget",
      hidden: "HiddenWidget"
    }
  };
  function mergeWidgetOptions(AWidget) {
    let MergedWidget = get_default(AWidget, "MergedWidget");
    if (!MergedWidget) {
      const defaultOptions = AWidget.defaultProps && AWidget.defaultProps.options || {};
      MergedWidget = (_ref2) => {
        let {
          options,
          ...props
        } = _ref2;
        return /* @__PURE__ */ import_react12.default.createElement(AWidget, {
          options: {
            ...defaultOptions,
            ...options
          },
          ...props
        });
      };
      set_default(AWidget, "MergedWidget", MergedWidget);
    }
    return MergedWidget;
  }
  function getWidget(schema, widget, registeredWidgets) {
    if (registeredWidgets === void 0) {
      registeredWidgets = {};
    }
    const type = getSchemaType(schema);
    if (typeof widget === "function" || widget && import_react_is3.default.isForwardRef(/* @__PURE__ */ import_react12.default.createElement(widget)) || import_react_is3.default.isMemo(widget)) {
      return mergeWidgetOptions(widget);
    }
    if (typeof widget !== "string") {
      throw new Error(`Unsupported widget definition: ${typeof widget}`);
    }
    if (widget in registeredWidgets) {
      const registeredWidget = registeredWidgets[widget];
      return getWidget(schema, registeredWidget, registeredWidgets);
    }
    if (typeof type === "string") {
      if (!(type in widgetMap)) {
        throw new Error(`No widget for type '${type}'`);
      }
      if (widget in widgetMap[type]) {
        const registeredWidget = registeredWidgets[widgetMap[type][widget]];
        return getWidget(schema, registeredWidget, registeredWidgets);
      }
    }
    throw new Error(`No widget '${widget}' for type '${type}'`);
  }
  function hasWidget(schema, widget, registeredWidgets) {
    if (registeredWidgets === void 0) {
      registeredWidgets = {};
    }
    try {
      getWidget(schema, widget, registeredWidgets);
      return true;
    } catch (e) {
      const err2 = e;
      if (err2.message && (err2.message.startsWith("No widget") || err2.message.startsWith("Unsupported widget"))) {
        return false;
      }
      throw e;
    }
  }
  function localToUTC(dateString) {
    return dateString ? new Date(dateString).toJSON() : void 0;
  }
  function toConstant(schema) {
    if (ENUM_KEY in schema && Array.isArray(schema.enum) && schema.enum.length === 1) {
      return schema.enum[0];
    }
    if (CONST_KEY in schema) {
      return schema.const;
    }
    throw new Error("schema cannot be inferred as a constant");
  }
  function optionsList(schema) {
    const schemaWithEnumNames = schema;
    if (schemaWithEnumNames.enumNames && true) {
      console.warn("The enumNames property is deprecated and may be removed in a future major release.");
    }
    if (schema.enum) {
      return schema.enum.map((value, i) => {
        const label = schemaWithEnumNames.enumNames && schemaWithEnumNames.enumNames[i] || String(value);
        return {
          label,
          value
        };
      });
    }
    const altSchemas = schema.oneOf || schema.anyOf;
    return altSchemas && altSchemas.map((aSchemaDef) => {
      const aSchema = aSchemaDef;
      const value = toConstant(aSchema);
      const label = aSchema.title || String(value);
      return {
        schema: aSchema,
        label,
        value
      };
    });
  }
  function orderProperties(properties3, order) {
    if (!Array.isArray(order)) {
      return properties3;
    }
    const arrayToHash = (arr) => arr.reduce((prev, curr) => {
      prev[curr] = true;
      return prev;
    }, {});
    const errorPropList = (arr) => arr.length > 1 ? `properties '${arr.join("', '")}'` : `property '${arr[0]}'`;
    const propertyHash = arrayToHash(properties3);
    const orderFiltered = order.filter((prop) => prop === "*" || propertyHash[prop]);
    const orderHash = arrayToHash(orderFiltered);
    const rest = properties3.filter((prop) => !orderHash[prop]);
    const restIndex = orderFiltered.indexOf("*");
    if (restIndex === -1) {
      if (rest.length) {
        throw new Error(`uiSchema order list does not contain ${errorPropList(rest)}`);
      }
      return orderFiltered;
    }
    if (restIndex !== orderFiltered.lastIndexOf("*")) {
      throw new Error("uiSchema order list contains more than one wildcard item");
    }
    const complete = [...orderFiltered];
    complete.splice(restIndex, 1, ...rest);
    return complete;
  }
  function pad(num, width) {
    let s = String(num);
    while (s.length < width) {
      s = "0" + s;
    }
    return s;
  }
  function parseDateString(dateString, includeTime) {
    if (includeTime === void 0) {
      includeTime = true;
    }
    if (!dateString) {
      return {
        year: -1,
        month: -1,
        day: -1,
        hour: includeTime ? -1 : 0,
        minute: includeTime ? -1 : 0,
        second: includeTime ? -1 : 0
      };
    }
    const date = new Date(dateString);
    if (Number.isNaN(date.getTime())) {
      throw new Error("Unable to parse date " + dateString);
    }
    return {
      year: date.getUTCFullYear(),
      month: date.getUTCMonth() + 1,
      day: date.getUTCDate(),
      hour: includeTime ? date.getUTCHours() : 0,
      minute: includeTime ? date.getUTCMinutes() : 0,
      second: includeTime ? date.getUTCSeconds() : 0
    };
  }
  var nums = /* @__PURE__ */ new Set(["number", "integer"]);
  function processSelectValue(schema, value, options) {
    const {
      enum: schemaEnum,
      type,
      items
    } = schema;
    if (value === "") {
      return options && options.emptyValue !== void 0 ? options.emptyValue : void 0;
    }
    if (type === "array" && items && nums.has(get_default(items, "type"))) {
      return value.map(asNumber);
    }
    if (type === "boolean") {
      return value === "true";
    }
    if (nums.has(type)) {
      return asNumber(value);
    }
    if (Array.isArray(schemaEnum)) {
      if (schemaEnum.every((x) => nums.has(guessType(x)))) {
        return asNumber(value);
      }
      if (schemaEnum.every((x) => guessType(x) === "boolean")) {
        return value === "true";
      }
    }
    return value;
  }
  function schemaRequiresTrueValue(schema) {
    if (schema.const) {
      return true;
    }
    if (schema.enum && schema.enum.length === 1 && schema.enum[0] === true) {
      return true;
    }
    if (schema.anyOf && schema.anyOf.length === 1) {
      return schemaRequiresTrueValue(schema.anyOf[0]);
    }
    if (schema.oneOf && schema.oneOf.length === 1) {
      return schemaRequiresTrueValue(schema.oneOf[0]);
    }
    if (schema.allOf) {
      const schemaSome = (subSchema) => schemaRequiresTrueValue(subSchema);
      return schema.allOf.some(schemaSome);
    }
    return false;
  }
  function shouldRender(component, nextProps, nextState) {
    const {
      props,
      state
    } = component;
    return !deepEquals(props, nextProps) || !deepEquals(state, nextState);
  }
  function toDateString(dateObject, time) {
    if (time === void 0) {
      time = true;
    }
    const {
      year,
      month,
      day,
      hour = 0,
      minute = 0,
      second = 0
    } = dateObject;
    const utcTime = Date.UTC(year, month - 1, day, hour, minute, second);
    const datetime = new Date(utcTime).toJSON();
    return time ? datetime : datetime.slice(0, 10);
  }
  function utcToLocal(jsonDate) {
    if (!jsonDate) {
      return "";
    }
    const date = new Date(jsonDate);
    const yyyy = pad(date.getFullYear(), 4);
    const MM = pad(date.getMonth() + 1, 2);
    const dd = pad(date.getDate(), 2);
    const hh = pad(date.getHours(), 2);
    const mm = pad(date.getMinutes(), 2);
    const ss = pad(date.getSeconds(), 2);
    const SSS = pad(date.getMilliseconds(), 3);
    return `${yyyy}-${MM}-${dd}T${hh}:${mm}:${ss}.${SSS}`;
  }

  // node_modules/@rjsf/validator-ajv6/dist/validator-ajv6.esm.js
  var import_ajv = __toESM(require_ajv());
  var AJV_CONFIG = {
    errorDataPath: "property",
    allErrors: true,
    multipleOfPrecision: 8,
    schemaId: "auto",
    unknownFormats: "ignore"
  };
  var COLOR_FORMAT_REGEX = /^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/;
  var DATA_URL_FORMAT_REGEX = /^data:([a-z]+\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/;
  function createAjvInstance(additionalMetaSchemas, customFormats, ajvOptionsOverrides) {
    if (ajvOptionsOverrides === void 0) {
      ajvOptionsOverrides = {};
    }
    const ajv = new import_ajv.default({
      ...AJV_CONFIG,
      ...ajvOptionsOverrides
    });
    ajv.addFormat("data-url", DATA_URL_FORMAT_REGEX);
    ajv.addFormat("color", COLOR_FORMAT_REGEX);
    if (Array.isArray(additionalMetaSchemas)) {
      ajv.addMetaSchema(additionalMetaSchemas);
    }
    if (isObject_default(customFormats)) {
      Object.keys(customFormats).forEach((formatName) => {
        ajv.addFormat(formatName, customFormats[formatName]);
      });
    }
    return ajv;
  }
  var ROOT_SCHEMA_PREFIX = "__rjsf_rootSchema";
  var AJV6Validator = class {
    constructor(options) {
      this.ajv = void 0;
      const {
        additionalMetaSchemas,
        customFormats,
        ajvOptionsOverrides
      } = options;
      this.ajv = createAjvInstance(additionalMetaSchemas, customFormats, ajvOptionsOverrides);
    }
    toErrorSchema(errors) {
      if (!errors.length) {
        return {};
      }
      return errors.reduce((errorSchema, error) => {
        const {
          property,
          message
        } = error;
        const path = toPath_default(property);
        let parent2 = errorSchema;
        if (path.length > 0 && path[0] === "") {
          path.splice(0, 1);
        }
        for (const segment of path.slice(0)) {
          if (!(segment in parent2)) {
            parent2[segment] = {};
          }
          parent2 = parent2[segment];
        }
        if (Array.isArray(parent2.__errors)) {
          parent2.__errors = parent2.__errors.concat(message);
        } else {
          if (message) {
            parent2.__errors = [message];
          }
        }
        return errorSchema;
      }, {});
    }
    toErrorList(errorSchema, fieldPath) {
      if (fieldPath === void 0) {
        fieldPath = [];
      }
      if (!errorSchema) {
        return [];
      }
      let errorList = [];
      if (ERRORS_KEY in errorSchema) {
        errorList = errorList.concat(errorSchema.__errors.map((message) => {
          const property = `.${fieldPath.join(".")}`;
          return {
            property,
            message,
            stack: `${property} ${message}`
          };
        }));
      }
      return Object.keys(errorSchema).reduce((acc, key) => {
        if (key !== ERRORS_KEY) {
          acc = acc.concat(this.toErrorList(errorSchema[key], [...fieldPath, key]));
        }
        return acc;
      }, errorList);
    }
    createErrorHandler(formData) {
      const handler = {
        __errors: [],
        addError(message) {
          this.__errors.push(message);
        }
      };
      if (isObject4(formData)) {
        const formObject = formData;
        return Object.keys(formObject).reduce((acc, key) => {
          return {
            ...acc,
            [key]: this.createErrorHandler(formObject[key])
          };
        }, handler);
      }
      if (Array.isArray(formData)) {
        return formData.reduce((acc, value, key) => {
          return {
            ...acc,
            [key]: this.createErrorHandler(value)
          };
        }, handler);
      }
      return handler;
    }
    unwrapErrorHandler(errorHandler) {
      return Object.keys(errorHandler).reduce((acc, key) => {
        if (key === "addError") {
          return acc;
        } else if (key === ERRORS_KEY) {
          return {
            ...acc,
            [key]: errorHandler[key]
          };
        }
        return {
          ...acc,
          [key]: this.unwrapErrorHandler(errorHandler[key])
        };
      }, {});
    }
    transformRJSFValidationErrors(errors) {
      if (errors === void 0) {
        errors = [];
      }
      return errors.map((e) => {
        const {
          dataPath,
          keyword,
          message,
          params,
          schemaPath
        } = e;
        const property = `${dataPath}`;
        return {
          name: keyword,
          property,
          message,
          params,
          stack: `${property} ${message}`.trim(),
          schemaPath
        };
      });
    }
    rawValidation(schema, formData) {
      let validationError = void 0;
      try {
        this.ajv.validate(schema, formData);
      } catch (err2) {
        validationError = err2;
      }
      const errors = this.ajv.errors || void 0;
      this.ajv.errors = null;
      return {
        errors,
        validationError
      };
    }
    validateFormData(formData, schema, customValidate, transformErrors) {
      const rootSchema = schema;
      const newFormData = getDefaultFormState(this, schema, formData, rootSchema, true);
      const rawErrors = this.rawValidation(schema, newFormData);
      const {
        validationError
      } = rawErrors;
      let errors = this.transformRJSFValidationErrors(rawErrors.errors);
      const noProperMetaSchema = validationError && validationError.message && validationError.message.includes("no schema with key or ref ");
      if (noProperMetaSchema) {
        errors = [...errors, {
          stack: validationError.message
        }];
      }
      if (typeof transformErrors === "function") {
        errors = transformErrors(errors);
      }
      let errorSchema = this.toErrorSchema(errors);
      if (noProperMetaSchema) {
        errorSchema = {
          ...errorSchema,
          ...{
            $schema: {
              __errors: [validationError.message]
            }
          }
        };
      }
      if (typeof customValidate !== "function") {
        return {
          errors,
          errorSchema
        };
      }
      const errorHandler = customValidate(newFormData, this.createErrorHandler(newFormData));
      const userErrorSchema = this.unwrapErrorHandler(errorHandler);
      return mergeValidationData(this, {
        errors,
        errorSchema
      }, userErrorSchema);
    }
    withIdRefPrefixObject(node5) {
      for (const key in node5) {
        const realObj = node5;
        const value = realObj[key];
        if (key === REF_KEY && typeof value === "string" && value.startsWith("#")) {
          realObj[key] = ROOT_SCHEMA_PREFIX + value;
        } else {
          realObj[key] = this.withIdRefPrefix(value);
        }
      }
      return node5;
    }
    withIdRefPrefixArray(node5) {
      for (let i = 0; i < node5.length; i++) {
        node5[i] = this.withIdRefPrefix(node5[i]);
      }
      return node5;
    }
    isValid(schema, formData, rootSchema) {
      try {
        const result = this.ajv.addSchema(rootSchema, ROOT_SCHEMA_PREFIX).validate(this.withIdRefPrefix(schema), formData);
        return result;
      } catch (e) {
        return false;
      } finally {
        this.ajv.removeSchema(ROOT_SCHEMA_PREFIX);
      }
    }
    withIdRefPrefix(schemaNode) {
      if (schemaNode.constructor === Object) {
        return this.withIdRefPrefixObject({
          ...schemaNode
        });
      }
      if (Array.isArray(schemaNode)) {
        return this.withIdRefPrefixArray([...schemaNode]);
      }
      return schemaNode;
    }
  };
  function customizeValidator(options) {
    if (options === void 0) {
      options = {};
    }
    return new AJV6Validator(options);
  }
  var index = /* @__PURE__ */ customizeValidator();

  // node_modules/@rjsf/core/dist/core.esm.js
  var import_react13 = __toESM(require_react());

  // node_modules/lodash-es/_basePickBy.js
  function basePickBy(object2, paths, predicate) {
    var index2 = -1, length = paths.length, result = {};
    while (++index2 < length) {
      var path = paths[index2], value = baseGet_default(object2, path);
      if (predicate(value, path)) {
        baseSet_default(result, castPath_default(path, object2), value);
      }
    }
    return result;
  }
  var basePickBy_default = basePickBy;

  // node_modules/lodash-es/_baseHasIn.js
  function baseHasIn(object2, key) {
    return object2 != null && key in Object(object2);
  }
  var baseHasIn_default = baseHasIn;

  // node_modules/lodash-es/_hasPath.js
  function hasPath(object2, path, hasFunc) {
    path = castPath_default(path, object2);
    var index2 = -1, length = path.length, result = false;
    while (++index2 < length) {
      var key = toKey_default(path[index2]);
      if (!(result = object2 != null && hasFunc(object2, key))) {
        break;
      }
      object2 = object2[key];
    }
    if (result || ++index2 != length) {
      return result;
    }
    length = object2 == null ? 0 : object2.length;
    return !!length && isLength_default(length) && isIndex_default(key, length) && (isArray_default(object2) || isArguments_default(object2));
  }
  var hasPath_default = hasPath;

  // node_modules/lodash-es/hasIn.js
  function hasIn(object2, path) {
    return object2 != null && hasPath_default(object2, path, baseHasIn_default);
  }
  var hasIn_default = hasIn;

  // node_modules/lodash-es/_basePick.js
  function basePick(object2, paths) {
    return basePickBy_default(object2, paths, function(value, path) {
      return hasIn_default(object2, path);
    });
  }
  var basePick_default = basePick;

  // node_modules/lodash-es/pick.js
  var pick = flatRest_default(function(object2, paths) {
    return object2 == null ? {} : basePick_default(object2, paths);
  });
  var pick_default = pick;

  // node_modules/nanoid/index.browser.js
  var nanoid = (size = 21) => crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
    byte &= 63;
    if (byte < 36) {
      id += byte.toString(36);
    } else if (byte < 62) {
      id += (byte - 26).toString(36).toUpperCase();
    } else if (byte > 62) {
      id += "-";
    } else {
      id += "_";
    }
    return id;
  }, "");

  // node_modules/lodash-es/unset.js
  function unset(object2, path) {
    return object2 == null ? true : baseUnset_default(object2, path);
  }
  var unset_default = unset;

  // node_modules/lodash-es/_baseHas.js
  var objectProto18 = Object.prototype;
  var hasOwnProperty15 = objectProto18.hasOwnProperty;
  function baseHas(object2, key) {
    return object2 != null && hasOwnProperty15.call(object2, key);
  }
  var baseHas_default = baseHas;

  // node_modules/lodash-es/has.js
  function has(object2, path) {
    return object2 != null && hasPath_default(object2, path, baseHas_default);
  }
  var has_default = has;

  // node_modules/@rjsf/core/dist/core.esm.js
  function generateRowId() {
    return nanoid();
  }
  function generateKeyedFormData(formData) {
    return !Array.isArray(formData) ? [] : formData.map((item) => {
      return {
        key: generateRowId(),
        item
      };
    });
  }
  function keyedToPlainFormData(keyedFormData) {
    if (Array.isArray(keyedFormData)) {
      return keyedFormData.map((keyedItem) => keyedItem.item);
    }
    return [];
  }
  var ArrayField = class extends import_react13.Component {
    constructor(props) {
      super(props);
      this._getNewFormDataRow = () => {
        const {
          schema,
          registry
        } = this.props;
        const {
          schemaUtils
        } = registry;
        let itemSchema = schema.items;
        if (isFixedItems(schema) && allowAdditionalItems(schema)) {
          itemSchema = schema.additionalItems;
        }
        return schemaUtils.getDefaultFormState(itemSchema);
      };
      this.onAddClick = (event) => {
        if (event) {
          event.preventDefault();
        }
        const {
          onChange: onChange2
        } = this.props;
        const {
          keyedFormData
        } = this.state;
        const newKeyedFormDataRow = {
          key: generateRowId(),
          item: this._getNewFormDataRow()
        };
        const newKeyedFormData = [...keyedFormData, newKeyedFormDataRow];
        this.setState({
          keyedFormData: newKeyedFormData,
          updatedKeyedFormData: true
        }, () => onChange2(keyedToPlainFormData(newKeyedFormData)));
      };
      this.onAddIndexClick = (index2) => {
        return (event) => {
          if (event) {
            event.preventDefault();
          }
          const {
            onChange: onChange2
          } = this.props;
          const {
            keyedFormData
          } = this.state;
          const newKeyedFormDataRow = {
            key: generateRowId(),
            item: this._getNewFormDataRow()
          };
          const newKeyedFormData = [...keyedFormData];
          newKeyedFormData.splice(index2, 0, newKeyedFormDataRow);
          this.setState({
            keyedFormData: newKeyedFormData,
            updatedKeyedFormData: true
          }, () => onChange2(keyedToPlainFormData(newKeyedFormData)));
        };
      };
      this.onDropIndexClick = (index2) => {
        return (event) => {
          if (event) {
            event.preventDefault();
          }
          const {
            onChange: onChange2,
            errorSchema
          } = this.props;
          const {
            keyedFormData
          } = this.state;
          let newErrorSchema;
          if (errorSchema) {
            newErrorSchema = {};
            for (const idx in errorSchema) {
              const i = parseInt(idx);
              if (i < index2) {
                set_default(newErrorSchema, [i], errorSchema[idx]);
              } else if (i > index2) {
                set_default(newErrorSchema, [i - 1], errorSchema[idx]);
              }
            }
          }
          const newKeyedFormData = keyedFormData.filter((_, i) => i !== index2);
          this.setState({
            keyedFormData: newKeyedFormData,
            updatedKeyedFormData: true
          }, () => onChange2(keyedToPlainFormData(newKeyedFormData), newErrorSchema));
        };
      };
      this.onReorderClick = (index2, newIndex) => {
        return (event) => {
          if (event) {
            event.preventDefault();
            event.currentTarget.blur();
          }
          const {
            onChange: onChange2,
            errorSchema
          } = this.props;
          let newErrorSchema;
          if (this.props.errorSchema) {
            newErrorSchema = {};
            for (const idx in errorSchema) {
              const i = parseInt(idx);
              if (i == index2) {
                set_default(newErrorSchema, [newIndex], errorSchema[index2]);
              } else if (i == newIndex) {
                set_default(newErrorSchema, [index2], errorSchema[newIndex]);
              } else {
                set_default(newErrorSchema, [idx], errorSchema[i]);
              }
            }
          }
          const {
            keyedFormData
          } = this.state;
          function reOrderArray() {
            const _newKeyedFormData = keyedFormData.slice();
            _newKeyedFormData.splice(index2, 1);
            _newKeyedFormData.splice(newIndex, 0, keyedFormData[index2]);
            return _newKeyedFormData;
          }
          const newKeyedFormData = reOrderArray();
          this.setState({
            keyedFormData: newKeyedFormData
          }, () => onChange2(keyedToPlainFormData(newKeyedFormData), newErrorSchema));
        };
      };
      this.onChangeForIndex = (index2) => {
        return (value, newErrorSchema, id) => {
          const {
            formData,
            onChange: onChange2,
            errorSchema
          } = this.props;
          const arrayData = Array.isArray(formData) ? formData : [];
          const newFormData = arrayData.map((item, i) => {
            const jsonValue = typeof value === "undefined" ? null : value;
            return index2 === i ? jsonValue : item;
          });
          onChange2(newFormData, errorSchema && errorSchema && {
            ...errorSchema,
            [index2]: newErrorSchema
          }, id);
        };
      };
      this.onSelectChange = (value) => {
        const {
          onChange: onChange2,
          idSchema
        } = this.props;
        onChange2(value, void 0, idSchema && idSchema.$id);
      };
      const {
        formData: _formData = []
      } = props;
      const _keyedFormData = generateKeyedFormData(_formData);
      this.state = {
        keyedFormData: _keyedFormData,
        updatedKeyedFormData: false
      };
    }
    static getDerivedStateFromProps(nextProps, prevState) {
      if (prevState.updatedKeyedFormData) {
        return {
          updatedKeyedFormData: false
        };
      }
      const nextFormData = Array.isArray(nextProps.formData) ? nextProps.formData : [];
      const previousKeyedFormData = prevState.keyedFormData || [];
      const newKeyedFormData = nextFormData.length === previousKeyedFormData.length ? previousKeyedFormData.map((previousKeyedFormDatum, index2) => {
        return {
          key: previousKeyedFormDatum.key,
          item: nextFormData[index2]
        };
      }) : generateKeyedFormData(nextFormData);
      return {
        keyedFormData: newKeyedFormData
      };
    }
    get itemTitle() {
      const {
        schema
      } = this.props;
      return get_default(schema, [ITEMS_KEY, "title"], get_default(schema, [ITEMS_KEY, "description"], "Item"));
    }
    isItemRequired(itemSchema) {
      if (Array.isArray(itemSchema.type)) {
        return !itemSchema.type.includes("null");
      }
      return itemSchema.type !== "null";
    }
    canAddItem(formItems) {
      const {
        schema,
        uiSchema: uiSchema2
      } = this.props;
      let {
        addable
      } = getUiOptions(uiSchema2);
      if (addable !== false) {
        if (schema.maxItems !== void 0) {
          addable = formItems.length < schema.maxItems;
        } else {
          addable = true;
        }
      }
      return addable;
    }
    render() {
      const {
        schema,
        uiSchema: uiSchema2,
        idSchema,
        registry
      } = this.props;
      const {
        schemaUtils
      } = registry;
      if (!(ITEMS_KEY in schema)) {
        const uiOptions = getUiOptions(uiSchema2);
        const UnsupportedFieldTemplate = getTemplate("UnsupportedFieldTemplate", registry, uiOptions);
        return /* @__PURE__ */ import_react13.default.createElement(UnsupportedFieldTemplate, {
          schema,
          idSchema,
          reason: "Missing items definition",
          registry
        });
      }
      if (schemaUtils.isMultiSelect(schema)) {
        return this.renderMultiSelect();
      }
      if (isCustomWidget(uiSchema2)) {
        return this.renderCustomWidget();
      }
      if (isFixedItems(schema)) {
        return this.renderFixedArray();
      }
      if (schemaUtils.isFilesArray(schema, uiSchema2)) {
        return this.renderFiles();
      }
      return this.renderNormalArray();
    }
    renderNormalArray() {
      const {
        schema,
        uiSchema: uiSchema2 = {},
        errorSchema,
        idSchema,
        name,
        disabled = false,
        readonly = false,
        autofocus = false,
        required = false,
        registry,
        onBlur: onBlur5,
        onFocus: onFocus5,
        idPrefix,
        idSeparator = "_",
        rawErrors
      } = this.props;
      const {
        keyedFormData
      } = this.state;
      const title = schema.title === void 0 ? name : schema.title;
      const {
        schemaUtils,
        formContext
      } = registry;
      const uiOptions = getUiOptions(uiSchema2);
      const _schemaItems = isObject_default(schema.items) ? schema.items : {};
      const itemsSchema = schemaUtils.retrieveSchema(_schemaItems);
      const formData = keyedToPlainFormData(this.state.keyedFormData);
      const arrayProps = {
        canAdd: this.canAddItem(formData),
        items: keyedFormData.map((keyedItem, index2) => {
          const {
            key,
            item
          } = keyedItem;
          const itemCast = item;
          const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);
          const itemErrorSchema = errorSchema ? errorSchema[index2] : void 0;
          const itemIdPrefix = idSchema.$id + idSeparator + index2;
          const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);
          return this.renderArrayFieldItem({
            key,
            index: index2,
            name: name && `${name}-${index2}`,
            canMoveUp: index2 > 0,
            canMoveDown: index2 < formData.length - 1,
            itemSchema,
            itemIdSchema,
            itemErrorSchema,
            itemData: itemCast,
            itemUiSchema: uiSchema2.items,
            autofocus: autofocus && index2 === 0,
            onBlur: onBlur5,
            onFocus: onFocus5,
            rawErrors
          });
        }),
        className: `field field-array field-array-of-${itemsSchema.type}`,
        disabled,
        idSchema,
        uiSchema: uiSchema2,
        onAddClick: this.onAddClick,
        readonly,
        required,
        schema,
        title,
        formContext,
        formData,
        rawErrors,
        registry
      };
      const Template = getTemplate("ArrayFieldTemplate", registry, uiOptions);
      return /* @__PURE__ */ import_react13.default.createElement(Template, {
        ...arrayProps
      });
    }
    renderCustomWidget() {
      const {
        schema,
        idSchema,
        uiSchema: uiSchema2,
        disabled = false,
        readonly = false,
        autofocus = false,
        required = false,
        hideError,
        placeholder,
        onBlur: onBlur5,
        onFocus: onFocus5,
        formData: items = [],
        registry,
        rawErrors,
        name
      } = this.props;
      const {
        widgets: widgets2,
        formContext
      } = registry;
      const title = schema.title || name;
      const {
        widget,
        ...options
      } = getUiOptions(uiSchema2);
      const Widget = getWidget(schema, widget, widgets2);
      return /* @__PURE__ */ import_react13.default.createElement(Widget, {
        id: idSchema && idSchema.$id,
        multiple: true,
        onChange: this.onSelectChange,
        onBlur: onBlur5,
        onFocus: onFocus5,
        options,
        schema,
        uiSchema: uiSchema2,
        registry,
        value: items,
        disabled,
        readonly,
        hideError,
        required,
        label: title,
        placeholder,
        formContext,
        autofocus,
        rawErrors
      });
    }
    renderMultiSelect() {
      const {
        schema,
        idSchema,
        uiSchema: uiSchema2,
        formData: items = [],
        disabled = false,
        readonly = false,
        autofocus = false,
        required = false,
        placeholder,
        onBlur: onBlur5,
        onFocus: onFocus5,
        registry,
        rawErrors,
        name
      } = this.props;
      const {
        widgets: widgets2,
        schemaUtils,
        formContext
      } = registry;
      const itemsSchema = schemaUtils.retrieveSchema(schema.items, items);
      const title = schema.title || name;
      const enumOptions = optionsList(itemsSchema);
      const {
        widget = "select",
        ...options
      } = getUiOptions(uiSchema2);
      const Widget = getWidget(schema, widget, widgets2);
      return /* @__PURE__ */ import_react13.default.createElement(Widget, {
        id: idSchema && idSchema.$id,
        multiple: true,
        onChange: this.onSelectChange,
        onBlur: onBlur5,
        onFocus: onFocus5,
        options: {
          ...options,
          enumOptions
        },
        schema,
        uiSchema: uiSchema2,
        registry,
        value: items,
        disabled,
        readonly,
        required,
        label: title,
        placeholder,
        formContext,
        autofocus,
        rawErrors
      });
    }
    renderFiles() {
      const {
        schema,
        uiSchema: uiSchema2,
        idSchema,
        name,
        disabled = false,
        readonly = false,
        autofocus = false,
        required = false,
        onBlur: onBlur5,
        onFocus: onFocus5,
        registry,
        formData: items = [],
        rawErrors
      } = this.props;
      const title = schema.title || name;
      const {
        widgets: widgets2,
        formContext
      } = registry;
      const {
        widget = "files",
        ...options
      } = getUiOptions(uiSchema2);
      const Widget = getWidget(schema, widget, widgets2);
      return /* @__PURE__ */ import_react13.default.createElement(Widget, {
        options,
        id: idSchema && idSchema.$id,
        multiple: true,
        onChange: this.onSelectChange,
        onBlur: onBlur5,
        onFocus: onFocus5,
        schema,
        uiSchema: uiSchema2,
        title,
        value: items,
        disabled,
        readonly,
        required,
        registry,
        formContext,
        autofocus,
        rawErrors,
        label: ""
      });
    }
    renderFixedArray() {
      const {
        schema,
        uiSchema: uiSchema2 = {},
        formData = [],
        errorSchema,
        idPrefix,
        idSeparator = "_",
        idSchema,
        name,
        disabled = false,
        readonly = false,
        autofocus = false,
        required = false,
        registry,
        onBlur: onBlur5,
        onFocus: onFocus5,
        rawErrors
      } = this.props;
      const {
        keyedFormData
      } = this.state;
      let {
        formData: items = []
      } = this.props;
      const title = schema.title || name;
      const uiOptions = getUiOptions(uiSchema2);
      const {
        schemaUtils,
        formContext
      } = registry;
      const _schemaItems = isObject_default(schema.items) ? schema.items : [];
      const itemSchemas = _schemaItems.map((item, index2) => schemaUtils.retrieveSchema(item, formData[index2]));
      const additionalSchema = isObject_default(schema.additionalItems) ? schemaUtils.retrieveSchema(schema.additionalItems, formData) : null;
      if (!items || items.length < itemSchemas.length) {
        items = items || [];
        items = items.concat(new Array(itemSchemas.length - items.length));
      }
      const arrayProps = {
        canAdd: this.canAddItem(items) && !!additionalSchema,
        className: "field field-array field-array-fixed-items",
        disabled,
        idSchema,
        formData,
        items: keyedFormData.map((keyedItem, index2) => {
          const {
            key,
            item
          } = keyedItem;
          const itemCast = item;
          const additional = index2 >= itemSchemas.length;
          const itemSchema = additional && isObject_default(schema.additionalItems) ? schemaUtils.retrieveSchema(schema.additionalItems, itemCast) : itemSchemas[index2];
          const itemIdPrefix = idSchema.$id + idSeparator + index2;
          const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);
          const itemUiSchema = additional ? uiSchema2.additionalItems || {} : Array.isArray(uiSchema2.items) ? uiSchema2.items[index2] : uiSchema2.items || {};
          const itemErrorSchema = errorSchema ? errorSchema[index2] : void 0;
          return this.renderArrayFieldItem({
            key,
            index: index2,
            name: name && `${name}-${index2}`,
            canRemove: additional,
            canMoveUp: index2 >= itemSchemas.length + 1,
            canMoveDown: additional && index2 < items.length - 1,
            itemSchema,
            itemData: itemCast,
            itemUiSchema,
            itemIdSchema,
            itemErrorSchema,
            autofocus: autofocus && index2 === 0,
            onBlur: onBlur5,
            onFocus: onFocus5,
            rawErrors
          });
        }),
        onAddClick: this.onAddClick,
        readonly,
        required,
        registry,
        schema,
        uiSchema: uiSchema2,
        title,
        formContext,
        rawErrors
      };
      const Template = getTemplate("ArrayFieldTemplate", registry, uiOptions);
      return /* @__PURE__ */ import_react13.default.createElement(Template, {
        ...arrayProps
      });
    }
    renderArrayFieldItem(props) {
      const {
        key,
        index: index2,
        name,
        canRemove = true,
        canMoveUp = true,
        canMoveDown = true,
        itemSchema,
        itemData,
        itemUiSchema,
        itemIdSchema,
        itemErrorSchema,
        autofocus,
        onBlur: onBlur5,
        onFocus: onFocus5,
        rawErrors
      } = props;
      const {
        disabled,
        hideError,
        idPrefix,
        idSeparator,
        readonly,
        uiSchema: uiSchema2,
        registry,
        formContext
      } = this.props;
      const {
        fields: {
          ArraySchemaField,
          SchemaField: SchemaField2
        }
      } = registry;
      const ItemSchemaField = ArraySchemaField || SchemaField2;
      const {
        orderable = true,
        removable = true
      } = getUiOptions(uiSchema2);
      const has2 = {
        moveUp: orderable && canMoveUp,
        moveDown: orderable && canMoveDown,
        remove: removable && canRemove,
        toolbar: false
      };
      has2.toolbar = Object.keys(has2).some((key2) => has2[key2]);
      return {
        children: /* @__PURE__ */ import_react13.default.createElement(ItemSchemaField, {
          name,
          index: index2,
          schema: itemSchema,
          uiSchema: itemUiSchema,
          formData: itemData,
          formContext,
          errorSchema: itemErrorSchema,
          idPrefix,
          idSeparator,
          idSchema: itemIdSchema,
          required: this.isItemRequired(itemSchema),
          onChange: this.onChangeForIndex(index2),
          onBlur: onBlur5,
          onFocus: onFocus5,
          registry,
          disabled,
          readonly,
          hideError,
          autofocus,
          rawErrors
        }),
        className: "array-item",
        disabled,
        hasToolbar: has2.toolbar,
        hasMoveUp: has2.moveUp,
        hasMoveDown: has2.moveDown,
        hasRemove: has2.remove,
        index: index2,
        key,
        onAddIndexClick: this.onAddIndexClick,
        onDropIndexClick: this.onDropIndexClick,
        onReorderClick: this.onReorderClick,
        readonly,
        registry,
        uiSchema: itemUiSchema
      };
    }
  };
  function BooleanField(props) {
    const {
      schema,
      name,
      uiSchema: uiSchema2,
      idSchema,
      formData,
      registry,
      required,
      disabled,
      readonly,
      autofocus,
      onChange: onChange2,
      onFocus: onFocus5,
      onBlur: onBlur5,
      rawErrors
    } = props;
    const {
      title
    } = schema;
    const {
      widgets: widgets2,
      formContext
    } = registry;
    const {
      widget = "checkbox",
      ...options
    } = getUiOptions(uiSchema2);
    const Widget = getWidget(schema, widget, widgets2);
    let enumOptions;
    if (Array.isArray(schema.oneOf)) {
      enumOptions = optionsList({
        oneOf: schema.oneOf.map((option) => {
          if (isObject_default(option)) {
            return {
              ...option,
              title: option.title || (option.const === true ? "Yes" : "No")
            };
          }
          return void 0;
        }).filter((o) => o)
      });
    } else {
      const schemaWithEnumNames = schema;
      const enums = schema.enum ?? [true, false];
      if (!schemaWithEnumNames.enumNames && enums.length === 2 && enums.every((v) => typeof v === "boolean")) {
        enumOptions = [{
          value: enums[0],
          label: enums[0] ? "Yes" : "No"
        }, {
          value: enums[1],
          label: enums[1] ? "Yes" : "No"
        }];
      } else {
        enumOptions = optionsList({
          enum: enums,
          enumNames: schemaWithEnumNames.enumNames
        });
      }
    }
    return /* @__PURE__ */ import_react13.default.createElement(Widget, {
      options: {
        ...options,
        enumOptions
      },
      schema,
      uiSchema: uiSchema2,
      id: idSchema && idSchema.$id,
      onChange: onChange2,
      onFocus: onFocus5,
      onBlur: onBlur5,
      label: title === void 0 ? name : title,
      value: formData,
      required,
      disabled,
      readonly,
      registry,
      formContext,
      autofocus,
      rawErrors
    });
  }
  var AnyOfField = class extends import_react13.Component {
    constructor(props) {
      super(props);
      this.onOptionChange = (option) => {
        const selectedOption = parseInt(option, 10);
        const {
          formData,
          onChange: onChange2,
          options,
          registry
        } = this.props;
        const {
          schemaUtils
        } = registry;
        const newOption = schemaUtils.retrieveSchema(options[selectedOption], formData);
        let newFormData = void 0;
        if (guessType(formData) === "object" && (newOption.type === "object" || newOption.properties)) {
          newFormData = Object.assign({}, formData);
          const optionsToDiscard = options.slice();
          optionsToDiscard.splice(selectedOption, 1);
          for (const option2 of optionsToDiscard) {
            if (option2.properties) {
              for (const key in option2.properties) {
                if (key in newFormData) {
                  unset_default(newFormData, key);
                }
              }
            }
          }
        }
        onChange2(schemaUtils.getDefaultFormState(options[selectedOption], newFormData), void 0, this.getFieldId());
        this.setState({
          selectedOption: parseInt(option, 10)
        });
      };
      const {
        formData: _formData,
        options: _options
      } = this.props;
      this.state = {
        selectedOption: this.getMatchingOption(0, _formData, _options)
      };
    }
    componentDidUpdate(prevProps, prevState) {
      const {
        formData,
        options,
        idSchema
      } = this.props;
      const {
        selectedOption
      } = this.state;
      if (!deepEquals(formData, prevProps.formData) && idSchema.$id === prevProps.idSchema.$id) {
        const matchingOption = this.getMatchingOption(selectedOption, formData, options);
        if (!prevState || matchingOption === selectedOption) {
          return;
        }
        this.setState({
          selectedOption: matchingOption
        });
      }
    }
    getMatchingOption(selectedOption, formData, options) {
      const {
        schemaUtils
      } = this.props.registry;
      const option = schemaUtils.getMatchingOption(formData, options);
      if (option !== 0) {
        return option;
      }
      return selectedOption || 0;
    }
    getFieldId() {
      const {
        idSchema,
        schema
      } = this.props;
      return `${idSchema.$id}${schema.oneOf ? "__oneof_select" : "__anyof_select"}`;
    }
    render() {
      const {
        name,
        baseType,
        disabled = false,
        readonly = false,
        hideError = false,
        errorSchema = {},
        formData,
        formContext,
        idPrefix,
        idSeparator,
        idSchema,
        onBlur: onBlur5,
        onChange: onChange2,
        onFocus: onFocus5,
        options,
        registry,
        uiSchema: uiSchema2
      } = this.props;
      const {
        widgets: widgets2,
        fields: fields2
      } = registry;
      const {
        SchemaField: _SchemaField
      } = fields2;
      const {
        selectedOption
      } = this.state;
      const {
        widget = "select",
        ...uiOptions
      } = getUiOptions(uiSchema2);
      const Widget = getWidget({
        type: "number"
      }, widget, widgets2);
      const option = options[selectedOption] || null;
      let optionSchema;
      if (option) {
        optionSchema = option.type ? option : Object.assign({}, option, {
          type: baseType
        });
      }
      const enumOptions = options.map((option2, index2) => ({
        label: option2.title || `Option ${index2 + 1}`,
        value: index2
      }));
      return /* @__PURE__ */ import_react13.default.createElement("div", {
        className: "panel panel-default panel-body"
      }, /* @__PURE__ */ import_react13.default.createElement("div", {
        className: "form-group"
      }, /* @__PURE__ */ import_react13.default.createElement(Widget, {
        id: this.getFieldId(),
        schema: {
          type: "number",
          default: 0
        },
        onChange: this.onOptionChange,
        onBlur: onBlur5,
        onFocus: onFocus5,
        value: selectedOption,
        options: {
          enumOptions
        },
        registry,
        formContext,
        ...uiOptions,
        label: ""
      })), option !== null && /* @__PURE__ */ import_react13.default.createElement(_SchemaField, {
        name,
        schema: optionSchema,
        uiSchema: uiSchema2,
        errorSchema,
        idSchema,
        idPrefix,
        idSeparator,
        formData,
        formContext,
        onChange: onChange2,
        onBlur: onBlur5,
        onFocus: onFocus5,
        registry,
        disabled,
        readonly,
        hideError
      }));
    }
  };
  var trailingCharMatcherWithPrefix = /\.([0-9]*0)*$/;
  var trailingCharMatcher = /[0.]0*$/;
  function NumberField(props) {
    const {
      registry,
      onChange: onChange2,
      formData,
      value: initialValue
    } = props;
    const [lastValue, setLastValue] = (0, import_react13.useState)(initialValue);
    const {
      StringField: StringField2
    } = registry.fields;
    let value = formData;
    const handleChange = (0, import_react13.useCallback)((value2) => {
      setLastValue(value2);
      if (`${value2}`.charAt(0) === ".") {
        value2 = `0${value2}`;
      }
      const processed = typeof value2 === "string" && value2.match(trailingCharMatcherWithPrefix) ? asNumber(value2.replace(trailingCharMatcher, "")) : asNumber(value2);
      onChange2(processed);
    }, [onChange2]);
    if (typeof lastValue === "string" && typeof value === "number") {
      const re = new RegExp(`${value}`.replace(".", "\\.") + "\\.?0*$");
      if (lastValue.match(re)) {
        value = lastValue;
      }
    }
    return /* @__PURE__ */ import_react13.default.createElement(StringField2, {
      ...props,
      formData: value,
      onChange: handleChange
    });
  }
  var ObjectField = class extends import_react13.Component {
    constructor() {
      var _this;
      super(...arguments);
      _this = this;
      this.state = {
        wasPropertyKeyModified: false,
        additionalProperties: {}
      };
      this.onPropertyChange = function(name, addedByAdditionalProperties) {
        if (addedByAdditionalProperties === void 0) {
          addedByAdditionalProperties = false;
        }
        return (value, newErrorSchema, id) => {
          const {
            formData,
            onChange: onChange2,
            errorSchema
          } = _this.props;
          if (value === void 0 && addedByAdditionalProperties) {
            value = "";
          }
          const newFormData = {
            ...formData,
            [name]: value
          };
          onChange2(newFormData, errorSchema && errorSchema && {
            ...errorSchema,
            [name]: newErrorSchema
          }, id);
        };
      };
      this.onDropPropertyClick = (key) => {
        return (event) => {
          event.preventDefault();
          const {
            onChange: onChange2,
            formData
          } = this.props;
          const copiedFormData = {
            ...formData
          };
          unset_default(copiedFormData, key);
          onChange2(copiedFormData);
        };
      };
      this.getAvailableKey = (preferredKey, formData) => {
        const {
          uiSchema: uiSchema2
        } = this.props;
        const {
          duplicateKeySuffixSeparator = "-"
        } = getUiOptions(uiSchema2);
        let index2 = 0;
        let newKey = preferredKey;
        while (newKey in formData) {
          newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index2}`;
        }
        return newKey;
      };
      this.onKeyChange = (oldValue) => {
        return (value, newErrorSchema) => {
          if (oldValue === value) {
            return;
          }
          const {
            formData,
            onChange: onChange2,
            errorSchema
          } = this.props;
          value = this.getAvailableKey(value, formData);
          const newFormData = {
            ...formData
          };
          const newKeys = {
            [oldValue]: value
          };
          const keyValues = Object.keys(newFormData).map((key) => {
            const newKey = newKeys[key] || key;
            return {
              [newKey]: newFormData[key]
            };
          });
          const renamedObj = Object.assign({}, ...keyValues);
          this.setState({
            wasPropertyKeyModified: true
          });
          onChange2(renamedObj, errorSchema && errorSchema && {
            ...errorSchema,
            [value]: newErrorSchema
          });
        };
      };
      this.handleAddClick = (schema) => () => {
        if (!schema.additionalProperties) {
          return;
        }
        const {
          formData,
          onChange: onChange2,
          registry
        } = this.props;
        const newFormData = {
          ...formData
        };
        let type = void 0;
        if (isObject_default(schema.additionalProperties)) {
          type = schema.additionalProperties.type;
          if (REF_KEY in schema.additionalProperties) {
            const {
              schemaUtils
            } = registry;
            const refSchema = schemaUtils.retrieveSchema({
              $ref: schema.additionalProperties[REF_KEY]
            }, formData);
            type = refSchema.type;
          }
        }
        const newKey = this.getAvailableKey("newKey", newFormData);
        set_default(newFormData, newKey, this.getDefaultValue(type));
        onChange2(newFormData);
      };
    }
    isRequired(name) {
      const {
        schema
      } = this.props;
      return Array.isArray(schema.required) && schema.required.indexOf(name) !== -1;
    }
    getDefaultValue(type) {
      switch (type) {
        case "string":
          return "New Value";
        case "array":
          return [];
        case "boolean":
          return false;
        case "null":
          return null;
        case "number":
          return 0;
        case "object":
          return {};
        default:
          return "New Value";
      }
    }
    render() {
      const {
        schema: rawSchema,
        uiSchema: uiSchema2 = {},
        formData,
        errorSchema,
        idSchema,
        name,
        required = false,
        disabled = false,
        readonly = false,
        hideError,
        idPrefix,
        idSeparator,
        onBlur: onBlur5,
        onFocus: onFocus5,
        registry
      } = this.props;
      const {
        fields: fields2,
        formContext,
        schemaUtils
      } = registry;
      const {
        SchemaField: SchemaField2
      } = fields2;
      const schema = schemaUtils.retrieveSchema(rawSchema, formData);
      const uiOptions = getUiOptions(uiSchema2);
      const {
        properties: schemaProperties = {}
      } = schema;
      const title = schema.title === void 0 ? name : schema.title;
      const description = uiOptions.description || schema.description;
      let orderedProperties;
      try {
        const properties3 = Object.keys(schemaProperties);
        orderedProperties = orderProperties(properties3, uiOptions.order);
      } catch (err2) {
        return /* @__PURE__ */ import_react13.default.createElement("div", null, /* @__PURE__ */ import_react13.default.createElement("p", {
          className: "config-error",
          style: {
            color: "red"
          }
        }, "Invalid ", name || "root", " object field configuration:", /* @__PURE__ */ import_react13.default.createElement("em", null, err2.message), "."), /* @__PURE__ */ import_react13.default.createElement("pre", null, JSON.stringify(schema)));
      }
      const Template = getTemplate("ObjectFieldTemplate", registry, uiOptions);
      const templateProps = {
        title: uiOptions.title || title,
        description,
        properties: orderedProperties.map((name2) => {
          const addedByAdditionalProperties = has_default(schema, [PROPERTIES_KEY, name2, ADDITIONAL_PROPERTY_FLAG]);
          const fieldUiSchema = addedByAdditionalProperties ? uiSchema2.additionalProperties : uiSchema2[name2];
          const hidden = getUiOptions(fieldUiSchema).widget === "hidden";
          const fieldIdSchema = get_default(idSchema, [name2], {});
          return {
            content: /* @__PURE__ */ import_react13.default.createElement(SchemaField2, {
              key: name2,
              name: name2,
              required: this.isRequired(name2),
              schema: get_default(schema, [PROPERTIES_KEY, name2], {}),
              uiSchema: fieldUiSchema,
              errorSchema: get_default(errorSchema, name2),
              idSchema: fieldIdSchema,
              idPrefix,
              idSeparator,
              formData: get_default(formData, name2),
              formContext,
              wasPropertyKeyModified: this.state.wasPropertyKeyModified,
              onKeyChange: this.onKeyChange(name2),
              onChange: this.onPropertyChange(name2, addedByAdditionalProperties),
              onBlur: onBlur5,
              onFocus: onFocus5,
              registry,
              disabled,
              readonly,
              hideError,
              onDropPropertyClick: this.onDropPropertyClick
            }),
            name: name2,
            readonly,
            disabled,
            required,
            hidden
          };
        }),
        readonly,
        disabled,
        required,
        idSchema,
        uiSchema: uiSchema2,
        schema,
        formData,
        formContext,
        registry
      };
      return /* @__PURE__ */ import_react13.default.createElement(Template, {
        ...templateProps,
        onAddClick: this.handleAddClick
      });
    }
  };
  var COMPONENT_TYPES = {
    array: "ArrayField",
    boolean: "BooleanField",
    integer: "NumberField",
    number: "NumberField",
    object: "ObjectField",
    string: "StringField",
    null: "NullField"
  };
  function getFieldComponent(schema, uiOptions, idSchema, registry) {
    const field = uiOptions.field;
    const {
      fields: fields2
    } = registry;
    if (typeof field === "function") {
      return field;
    }
    if (typeof field === "string" && field in fields2) {
      return fields2[field];
    }
    const schemaType = getSchemaType(schema);
    const type = Array.isArray(schemaType) ? schemaType[0] : schemaType || "";
    const componentName2 = COMPONENT_TYPES[type];
    if (!componentName2 && (schema.anyOf || schema.oneOf)) {
      return () => null;
    }
    return componentName2 in fields2 ? fields2[componentName2] : () => {
      const UnsupportedFieldTemplate = getTemplate("UnsupportedFieldTemplate", registry, uiOptions);
      return /* @__PURE__ */ import_react13.default.createElement(UnsupportedFieldTemplate, {
        schema,
        idSchema,
        reason: `Unknown field type ${schema.type}`,
        registry
      });
    };
  }
  function SchemaFieldRender(props) {
    const {
      schema: _schema,
      idSchema: _idSchema,
      uiSchema: uiSchema2,
      formData,
      errorSchema,
      idPrefix,
      idSeparator,
      name,
      onChange: onChange2,
      onKeyChange,
      onDropPropertyClick,
      required,
      registry,
      wasPropertyKeyModified = false
    } = props;
    const {
      formContext,
      schemaUtils
    } = registry;
    const uiOptions = getUiOptions(uiSchema2);
    const FieldTemplate4 = getTemplate("FieldTemplate", registry, uiOptions);
    const DescriptionFieldTemplate = getTemplate("DescriptionFieldTemplate", registry, uiOptions);
    const FieldHelpTemplate3 = getTemplate("FieldHelpTemplate", registry, uiOptions);
    const FieldErrorTemplate3 = getTemplate("FieldErrorTemplate", registry, uiOptions);
    const schema = schemaUtils.retrieveSchema(_schema, formData);
    const fieldId = _idSchema[ID_KEY];
    const idSchema = mergeObjects(schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator), _idSchema);
    const handleFieldComponentChange = import_react13.default.useCallback((formData2, newErrorSchema, id2) => {
      const theId = id2 || fieldId;
      return onChange2(formData2, newErrorSchema, theId);
    }, [fieldId, onChange2]);
    const FieldComponent = getFieldComponent(schema, uiOptions, idSchema, registry);
    const disabled = Boolean(props.disabled || uiOptions.disabled);
    const readonly = Boolean(props.readonly || uiOptions.readonly || props.schema.readOnly || schema.readOnly);
    const uiSchemaHideError = uiOptions.hideError;
    const hideError = uiSchemaHideError === void 0 ? props.hideError : Boolean(uiSchemaHideError);
    const autofocus = Boolean(props.autofocus || uiOptions.autofocus);
    if (Object.keys(schema).length === 0) {
      return null;
    }
    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema2);
    const {
      __errors,
      ...fieldErrorSchema
    } = errorSchema || {};
    const fieldUiSchema = omit_default(uiSchema2, ["ui:classNames", "classNames"]);
    if ("ui:options" in fieldUiSchema) {
      fieldUiSchema["ui:options"] = omit_default(fieldUiSchema["ui:options"], ["classNames"]);
    }
    const field = /* @__PURE__ */ import_react13.default.createElement(FieldComponent, {
      ...props,
      onChange: handleFieldComponentChange,
      idSchema,
      schema,
      uiSchema: fieldUiSchema,
      disabled,
      readonly,
      hideError,
      autofocus,
      errorSchema: fieldErrorSchema,
      formContext,
      rawErrors: __errors
    });
    const id = idSchema[ID_KEY];
    let label;
    if (wasPropertyKeyModified) {
      label = name;
    } else {
      label = ADDITIONAL_PROPERTY_FLAG in schema ? name : uiOptions.title || props.schema.title || schema.title || name;
    }
    const description = uiOptions.description || props.schema.description || schema.description || "";
    const help = uiOptions.help;
    const hidden = uiOptions.widget === "hidden";
    const classNames24 = ["form-group", "field", `field-${schema.type}`];
    if (!hideError && __errors && __errors.length > 0) {
      classNames24.push("field-error has-error has-danger");
    }
    if (uiSchema2 !== null && uiSchema2 !== void 0 && uiSchema2.classNames) {
      if (true) {
        console.warn("'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.");
      }
      classNames24.push(uiSchema2.classNames);
    }
    if (uiOptions.classNames) {
      classNames24.push(uiOptions.classNames);
    }
    const helpComponent = /* @__PURE__ */ import_react13.default.createElement(FieldHelpTemplate3, {
      help,
      idSchema,
      schema,
      uiSchema: uiSchema2,
      hasErrors: !hideError && __errors && __errors.length > 0,
      registry
    });
    const errorsComponent = hideError ? void 0 : /* @__PURE__ */ import_react13.default.createElement(FieldErrorTemplate3, {
      errors: __errors,
      errorSchema,
      idSchema,
      schema,
      uiSchema: uiSchema2,
      registry
    });
    const fieldProps = {
      description: /* @__PURE__ */ import_react13.default.createElement(DescriptionFieldTemplate, {
        id: `${id}__description`,
        description,
        schema,
        uiSchema: uiSchema2,
        registry
      }),
      rawDescription: description,
      help: helpComponent,
      rawHelp: typeof help === "string" ? help : void 0,
      errors: errorsComponent,
      rawErrors: hideError ? void 0 : __errors,
      id,
      label,
      hidden,
      onChange: onChange2,
      onKeyChange,
      onDropPropertyClick,
      required,
      disabled,
      readonly,
      hideError,
      displayLabel,
      classNames: classNames24.join(" ").trim(),
      formContext,
      formData,
      schema,
      uiSchema: uiSchema2,
      registry
    };
    const _AnyOfField = registry.fields.AnyOfField;
    const _OneOfField = registry.fields.OneOfField;
    return /* @__PURE__ */ import_react13.default.createElement(FieldTemplate4, {
      ...fieldProps
    }, /* @__PURE__ */ import_react13.default.createElement(import_react13.default.Fragment, null, field, schema.anyOf && !(uiSchema2 !== null && uiSchema2 !== void 0 && uiSchema2["ui:field"]) && !schemaUtils.isSelect(schema) && /* @__PURE__ */ import_react13.default.createElement(_AnyOfField, {
      name,
      disabled,
      readonly,
      hideError,
      errorSchema,
      formData,
      formContext,
      idPrefix,
      idSchema,
      idSeparator,
      onBlur: props.onBlur,
      onChange: props.onChange,
      onFocus: props.onFocus,
      options: schema.anyOf.map((_schema2) => schemaUtils.retrieveSchema(isObject_default(_schema2) ? _schema2 : {}, formData)),
      baseType: schema.type,
      registry,
      schema,
      uiSchema: uiSchema2
    }), schema.oneOf && !(uiSchema2 !== null && uiSchema2 !== void 0 && uiSchema2["ui:field"]) && !schemaUtils.isSelect(schema) && /* @__PURE__ */ import_react13.default.createElement(_OneOfField, {
      name,
      disabled,
      readonly,
      hideError,
      errorSchema,
      formData,
      formContext,
      idPrefix,
      idSchema,
      idSeparator,
      onBlur: props.onBlur,
      onChange: props.onChange,
      onFocus: props.onFocus,
      options: schema.oneOf.map((_schema2) => schemaUtils.retrieveSchema(isObject_default(_schema2) ? _schema2 : {}, formData)),
      baseType: schema.type,
      registry,
      schema,
      uiSchema: uiSchema2
    })));
  }
  var SchemaField = class extends import_react13.default.Component {
    shouldComponentUpdate(nextProps) {
      return !deepEquals(this.props, nextProps);
    }
    render() {
      return /* @__PURE__ */ import_react13.default.createElement(SchemaFieldRender, {
        ...this.props
      });
    }
  };
  function StringField(props) {
    const {
      schema,
      name,
      uiSchema: uiSchema2,
      idSchema,
      formData,
      required,
      disabled = false,
      readonly = false,
      autofocus = false,
      onChange: onChange2,
      onBlur: onBlur5,
      onFocus: onFocus5,
      registry,
      rawErrors
    } = props;
    const {
      title,
      format
    } = schema;
    const {
      widgets: widgets2,
      formContext,
      schemaUtils
    } = registry;
    const enumOptions = schemaUtils.isSelect(schema) ? optionsList(schema) : void 0;
    let defaultWidget = enumOptions ? "select" : "text";
    if (format && hasWidget(schema, format, widgets2)) {
      defaultWidget = format;
    }
    const {
      widget = defaultWidget,
      placeholder = "",
      ...options
    } = getUiOptions(uiSchema2);
    const Widget = getWidget(schema, widget, widgets2);
    return /* @__PURE__ */ import_react13.default.createElement(Widget, {
      options: {
        ...options,
        enumOptions
      },
      schema,
      uiSchema: uiSchema2,
      id: idSchema && idSchema.$id,
      label: title === void 0 ? name : title,
      value: formData,
      onChange: onChange2,
      onBlur: onBlur5,
      onFocus: onFocus5,
      required,
      disabled,
      readonly,
      formContext,
      autofocus,
      registry,
      placeholder,
      rawErrors
    });
  }
  function NullField(props) {
    const {
      formData,
      onChange: onChange2
    } = props;
    (0, import_react13.useEffect)(() => {
      if (formData === void 0) {
        onChange2(null);
      }
    }, [formData, onChange2]);
    return null;
  }
  function fields() {
    return {
      AnyOfField,
      ArrayField,
      BooleanField,
      NumberField,
      ObjectField,
      OneOfField: AnyOfField,
      SchemaField,
      StringField,
      NullField
    };
  }
  function ArrayFieldDescriptionTemplate(props) {
    const {
      idSchema,
      description,
      registry,
      schema,
      uiSchema: uiSchema2
    } = props;
    const options = getUiOptions(uiSchema2);
    const {
      label: displayLabel = true
    } = options;
    if (!description || !displayLabel) {
      return null;
    }
    const DescriptionFieldTemplate = getTemplate("DescriptionFieldTemplate", registry, options);
    const id = `${idSchema.$id}__description`;
    return /* @__PURE__ */ import_react13.default.createElement(DescriptionFieldTemplate, {
      id,
      description,
      schema,
      uiSchema: uiSchema2,
      registry
    });
  }
  function ArrayFieldItemTemplate(props) {
    const {
      children: children2,
      className,
      disabled,
      hasToolbar,
      hasMoveDown,
      hasMoveUp,
      hasRemove,
      index: index2,
      onDropIndexClick,
      onReorderClick,
      readonly,
      registry,
      uiSchema: uiSchema2
    } = props;
    const {
      MoveDownButton: MoveDownButton3,
      MoveUpButton: MoveUpButton3,
      RemoveButton: RemoveButton3
    } = registry.templates.ButtonTemplates;
    const btnStyle = {
      flex: 1,
      paddingLeft: 6,
      paddingRight: 6,
      fontWeight: "bold"
    };
    return /* @__PURE__ */ import_react13.default.createElement("div", {
      className
    }, /* @__PURE__ */ import_react13.default.createElement("div", {
      className: hasToolbar ? "col-xs-9" : "col-xs-12"
    }, children2), hasToolbar && /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "col-xs-3 array-item-toolbox"
    }, /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "btn-group",
      style: {
        display: "flex",
        justifyContent: "space-around"
      }
    }, (hasMoveUp || hasMoveDown) && /* @__PURE__ */ import_react13.default.createElement(MoveUpButton3, {
      style: btnStyle,
      disabled: disabled || readonly || !hasMoveUp,
      onClick: onReorderClick(index2, index2 - 1),
      uiSchema: uiSchema2
    }), (hasMoveUp || hasMoveDown) && /* @__PURE__ */ import_react13.default.createElement(MoveDownButton3, {
      style: btnStyle,
      disabled: disabled || readonly || !hasMoveDown,
      onClick: onReorderClick(index2, index2 + 1),
      uiSchema: uiSchema2
    }), hasRemove && /* @__PURE__ */ import_react13.default.createElement(RemoveButton3, {
      style: btnStyle,
      disabled: disabled || readonly,
      onClick: onDropIndexClick(index2),
      uiSchema: uiSchema2
    }))));
  }
  function ArrayFieldTemplate(props) {
    const {
      canAdd,
      className,
      disabled,
      idSchema,
      uiSchema: uiSchema2,
      items,
      onAddClick,
      readonly,
      registry,
      required,
      schema,
      title
    } = props;
    const uiOptions = getUiOptions(uiSchema2);
    const ArrayFieldDescriptionTemplate2 = getTemplate("ArrayFieldDescriptionTemplate", registry, uiOptions);
    const ArrayFieldItemTemplate4 = getTemplate("ArrayFieldItemTemplate", registry, uiOptions);
    const ArrayFieldTitleTemplate2 = getTemplate("ArrayFieldTitleTemplate", registry, uiOptions);
    const {
      ButtonTemplates: {
        AddButton: AddButton4
      }
    } = registry.templates;
    return /* @__PURE__ */ import_react13.default.createElement("fieldset", {
      className,
      id: idSchema.$id
    }, /* @__PURE__ */ import_react13.default.createElement(ArrayFieldTitleTemplate2, {
      idSchema,
      title: uiOptions.title || title,
      required,
      schema,
      uiSchema: uiSchema2,
      registry
    }), /* @__PURE__ */ import_react13.default.createElement(ArrayFieldDescriptionTemplate2, {
      idSchema,
      description: uiOptions.description || schema.description,
      schema,
      uiSchema: uiSchema2,
      registry
    }), /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "row array-item-list"
    }, items && items.map((_ref2) => {
      let {
        key,
        ...itemProps
      } = _ref2;
      return /* @__PURE__ */ import_react13.default.createElement(ArrayFieldItemTemplate4, {
        key,
        ...itemProps
      });
    })), canAdd && /* @__PURE__ */ import_react13.default.createElement(AddButton4, {
      className: "array-item-add",
      onClick: onAddClick,
      disabled: disabled || readonly,
      uiSchema: uiSchema2
    }));
  }
  function ArrayFieldTitleTemplate(props) {
    const {
      idSchema,
      title,
      schema,
      uiSchema: uiSchema2,
      required,
      registry
    } = props;
    const options = getUiOptions(uiSchema2);
    const {
      label: displayLabel = true
    } = options;
    if (!title || !displayLabel) {
      return null;
    }
    const TitleFieldTemplate = getTemplate("TitleFieldTemplate", registry, options);
    const id = `${idSchema.$id}__title`;
    return /* @__PURE__ */ import_react13.default.createElement(TitleFieldTemplate, {
      id,
      title,
      required,
      schema,
      uiSchema: uiSchema2,
      registry
    });
  }
  function BaseInputTemplate(props) {
    const {
      id,
      value,
      readonly,
      disabled,
      autofocus,
      onBlur: onBlur5,
      onFocus: onFocus5,
      onChange: onChange2,
      options,
      schema,
      uiSchema: uiSchema2,
      formContext,
      registry,
      rawErrors,
      type,
      ...rest
    } = props;
    if (!id) {
      console.log("No id for", props);
      throw new Error(`no id for props ${JSON.stringify(props)}`);
    }
    const inputProps = {
      ...rest,
      ...getInputProps(schema, type, options)
    };
    let inputValue;
    if (inputProps.type === "number" || inputProps.type === "integer") {
      inputValue = value || value === 0 ? value : "";
    } else {
      inputValue = value == null ? "" : value;
    }
    const _onChange = (0, import_react13.useCallback)((_ref2) => {
      let {
        target: {
          value: value2
        }
      } = _ref2;
      return onChange2(value2 === "" ? options.emptyValue : value2);
    }, [onChange2, options]);
    const _onBlur = (0, import_react13.useCallback)((_ref2) => {
      let {
        target: {
          value: value2
        }
      } = _ref2;
      return onBlur5(id, value2);
    }, [onBlur5, id]);
    const _onFocus = (0, import_react13.useCallback)((_ref3) => {
      let {
        target: {
          value: value2
        }
      } = _ref3;
      return onFocus5(id, value2);
    }, [onFocus5, id]);
    return /* @__PURE__ */ import_react13.default.createElement(import_react13.default.Fragment, null, /* @__PURE__ */ import_react13.default.createElement("input", {
      id,
      name: id,
      className: "form-control",
      readOnly: readonly,
      disabled,
      autoFocus: autofocus,
      value: inputValue,
      ...inputProps,
      list: schema.examples ? `examples_${id}` : void 0,
      onChange: _onChange,
      onBlur: _onBlur,
      onFocus: _onFocus
    }), Array.isArray(schema.examples) && /* @__PURE__ */ import_react13.default.createElement("datalist", {
      key: `datalist_${id}`,
      id: `examples_${id}`
    }, [...new Set(schema.examples.concat(schema.default ? [schema.default] : []))].map((example) => /* @__PURE__ */ import_react13.default.createElement("option", {
      key: example,
      value: example
    }))));
  }
  function SubmitButton(_ref2) {
    let {
      uiSchema: uiSchema2
    } = _ref2;
    const {
      submitText,
      norender,
      props: submitButtonProps = {}
    } = getSubmitButtonOptions(uiSchema2);
    if (norender) {
      return null;
    }
    return /* @__PURE__ */ import_react13.default.createElement("div", null, /* @__PURE__ */ import_react13.default.createElement("button", {
      type: "submit",
      ...submitButtonProps,
      className: `btn btn-info ${submitButtonProps.className}`
    }, submitText));
  }
  function IconButton(props) {
    const {
      iconType = "default",
      icon,
      className,
      uiSchema: uiSchema2,
      ...otherProps
    } = props;
    return /* @__PURE__ */ import_react13.default.createElement("button", {
      type: "button",
      className: `btn btn-${iconType} ${className}`,
      ...otherProps
    }, /* @__PURE__ */ import_react13.default.createElement("i", {
      className: `glyphicon glyphicon-${icon}`
    }));
  }
  function MoveDownButton(props) {
    return /* @__PURE__ */ import_react13.default.createElement(IconButton, {
      title: "Move down",
      className: "array-item-move-down",
      ...props,
      icon: "arrow-down"
    });
  }
  function MoveUpButton(props) {
    return /* @__PURE__ */ import_react13.default.createElement(IconButton, {
      title: "Move up",
      className: "array-item-move-up",
      ...props,
      icon: "arrow-up"
    });
  }
  function RemoveButton(props) {
    return /* @__PURE__ */ import_react13.default.createElement(IconButton, {
      title: "Remove",
      className: "array-item-remove",
      ...props,
      iconType: "danger",
      icon: "remove"
    });
  }
  function AddButton(_ref2) {
    let {
      className,
      onClick,
      disabled
    } = _ref2;
    return /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "row"
    }, /* @__PURE__ */ import_react13.default.createElement("p", {
      className: `col-xs-3 col-xs-offset-9 text-right ${className}`
    }, /* @__PURE__ */ import_react13.default.createElement(IconButton, {
      iconType: "info",
      icon: "plus",
      className: "btn-add col-xs-12",
      title: "Add",
      onClick,
      disabled
    })));
  }
  function buttonTemplates() {
    return {
      SubmitButton,
      AddButton,
      MoveDownButton,
      MoveUpButton,
      RemoveButton
    };
  }
  function DescriptionField(props) {
    const {
      id,
      description
    } = props;
    if (!description) {
      return null;
    }
    if (typeof description === "string") {
      return /* @__PURE__ */ import_react13.default.createElement("p", {
        id,
        className: "field-description"
      }, description);
    } else {
      return /* @__PURE__ */ import_react13.default.createElement("div", {
        id,
        className: "field-description"
      }, description);
    }
  }
  function ErrorList(_ref2) {
    let {
      errors
    } = _ref2;
    return /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "panel panel-danger errors"
    }, /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "panel-heading"
    }, /* @__PURE__ */ import_react13.default.createElement("h3", {
      className: "panel-title"
    }, "Errors")), /* @__PURE__ */ import_react13.default.createElement("ul", {
      className: "list-group"
    }, errors.map((error, i) => {
      return /* @__PURE__ */ import_react13.default.createElement("li", {
        key: i,
        className: "list-group-item text-danger"
      }, error.stack);
    })));
  }
  var REQUIRED_FIELD_SYMBOL$1 = "*";
  function Label(props) {
    const {
      label,
      required,
      id
    } = props;
    if (!label) {
      return null;
    }
    return /* @__PURE__ */ import_react13.default.createElement("label", {
      className: "control-label",
      htmlFor: id
    }, label, required && /* @__PURE__ */ import_react13.default.createElement("span", {
      className: "required"
    }, REQUIRED_FIELD_SYMBOL$1));
  }
  function FieldTemplate(props) {
    const {
      id,
      label,
      children: children2,
      errors,
      help,
      description,
      hidden,
      required,
      displayLabel,
      registry,
      uiSchema: uiSchema2
    } = props;
    const uiOptions = getUiOptions(uiSchema2);
    const WrapIfAdditionalTemplate4 = getTemplate("WrapIfAdditionalTemplate", registry, uiOptions);
    if (hidden) {
      return /* @__PURE__ */ import_react13.default.createElement("div", {
        className: "hidden"
      }, children2);
    }
    return /* @__PURE__ */ import_react13.default.createElement(WrapIfAdditionalTemplate4, {
      ...props
    }, displayLabel && /* @__PURE__ */ import_react13.default.createElement(Label, {
      label,
      required,
      id
    }), displayLabel && description ? description : null, children2, errors, help);
  }
  function FieldErrorTemplate(props) {
    const {
      errors = [],
      idSchema
    } = props;
    if (errors.length === 0) {
      return null;
    }
    const id = `${idSchema.$id}__error`;
    return /* @__PURE__ */ import_react13.default.createElement("div", null, /* @__PURE__ */ import_react13.default.createElement("ul", {
      id,
      className: "error-detail bs-callout bs-callout-info"
    }, errors.filter((elem) => !!elem).map((error, index2) => {
      return /* @__PURE__ */ import_react13.default.createElement("li", {
        className: "text-danger",
        key: index2
      }, error);
    })));
  }
  function FieldHelpTemplate(props) {
    const {
      idSchema,
      help
    } = props;
    if (!help) {
      return null;
    }
    const id = `${idSchema.$id}__help`;
    if (typeof help === "string") {
      return /* @__PURE__ */ import_react13.default.createElement("p", {
        id,
        className: "help-block"
      }, help);
    }
    return /* @__PURE__ */ import_react13.default.createElement("div", {
      id,
      className: "help-block"
    }, help);
  }
  function ObjectFieldTemplate(props) {
    const {
      description,
      disabled,
      formData,
      idSchema,
      onAddClick,
      properties: properties3,
      readonly,
      registry,
      required,
      schema,
      title,
      uiSchema: uiSchema2
    } = props;
    const options = getUiOptions(uiSchema2);
    const TitleFieldTemplate = getTemplate("TitleFieldTemplate", registry, options);
    const DescriptionFieldTemplate = getTemplate("DescriptionFieldTemplate", registry, options);
    const {
      ButtonTemplates: {
        AddButton: AddButton4
      }
    } = registry.templates;
    return /* @__PURE__ */ import_react13.default.createElement("fieldset", {
      id: idSchema.$id
    }, (options.title || title) && /* @__PURE__ */ import_react13.default.createElement(TitleFieldTemplate, {
      id: `${idSchema.$id}__title`,
      title: options.title || title,
      required,
      schema,
      uiSchema: uiSchema2,
      registry
    }), (options.description || description) && /* @__PURE__ */ import_react13.default.createElement(DescriptionFieldTemplate, {
      id: `${idSchema.$id}__description`,
      description: options.description || description,
      schema,
      uiSchema: uiSchema2,
      registry
    }), properties3.map((prop) => prop.content), canExpand(schema, uiSchema2, formData) && /* @__PURE__ */ import_react13.default.createElement(AddButton4, {
      className: "object-property-expand",
      onClick: onAddClick(schema),
      disabled: disabled || readonly,
      uiSchema: uiSchema2
    }));
  }
  var REQUIRED_FIELD_SYMBOL = "*";
  function TitleField(props) {
    const {
      id,
      title,
      required
    } = props;
    return /* @__PURE__ */ import_react13.default.createElement("legend", {
      id
    }, title, required && /* @__PURE__ */ import_react13.default.createElement("span", {
      className: "required"
    }, REQUIRED_FIELD_SYMBOL));
  }
  function UnsupportedField(props) {
    const {
      schema,
      idSchema,
      reason
    } = props;
    return /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "unsupported-field"
    }, /* @__PURE__ */ import_react13.default.createElement("p", null, "Unsupported field schema", idSchema && idSchema.$id && /* @__PURE__ */ import_react13.default.createElement("span", null, " for", " field ", /* @__PURE__ */ import_react13.default.createElement("code", null, idSchema.$id)), reason && /* @__PURE__ */ import_react13.default.createElement("em", null, ": ", reason), "."), schema && /* @__PURE__ */ import_react13.default.createElement("pre", null, JSON.stringify(schema, null, 2)));
  }
  function WrapIfAdditionalTemplate(props) {
    const {
      id,
      classNames: classNames24,
      disabled,
      label,
      onKeyChange,
      onDropPropertyClick,
      readonly,
      required,
      schema,
      children: children2,
      uiSchema: uiSchema2,
      registry
    } = props;
    const {
      RemoveButton: RemoveButton3
    } = registry.templates.ButtonTemplates;
    const keyLabel = `${label} Key`;
    const additional = ADDITIONAL_PROPERTY_FLAG in schema;
    if (!additional) {
      return /* @__PURE__ */ import_react13.default.createElement("div", {
        className: classNames24
      }, children2);
    }
    return /* @__PURE__ */ import_react13.default.createElement("div", {
      className: classNames24
    }, /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "row"
    }, /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "col-xs-5 form-additional"
    }, /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "form-group"
    }, /* @__PURE__ */ import_react13.default.createElement(Label, {
      label: keyLabel,
      required,
      id: `${id}-key`
    }), /* @__PURE__ */ import_react13.default.createElement("input", {
      className: "form-control",
      type: "text",
      id: `${id}-key`,
      onBlur: (event) => onKeyChange(event.target.value),
      defaultValue: label
    }))), /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "form-additional form-group col-xs-5"
    }, children2), /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "col-xs-2"
    }, /* @__PURE__ */ import_react13.default.createElement(RemoveButton3, {
      className: "array-item-remove btn-block",
      style: {
        border: "0"
      },
      disabled: disabled || readonly,
      onClick: onDropPropertyClick(label),
      uiSchema: uiSchema2
    }))));
  }
  function templates() {
    return {
      ArrayFieldDescriptionTemplate,
      ArrayFieldItemTemplate,
      ArrayFieldTemplate,
      ArrayFieldTitleTemplate,
      ButtonTemplates: buttonTemplates(),
      BaseInputTemplate,
      DescriptionFieldTemplate: DescriptionField,
      ErrorListTemplate: ErrorList,
      FieldTemplate,
      FieldErrorTemplate,
      FieldHelpTemplate,
      ObjectFieldTemplate,
      TitleFieldTemplate: TitleField,
      UnsupportedFieldTemplate: UnsupportedField,
      WrapIfAdditionalTemplate
    };
  }
  function rangeOptions(start, stop) {
    const options = [];
    for (let i = start; i <= stop; i++) {
      options.push({
        value: i,
        label: pad(i, 2)
      });
    }
    return options;
  }
  function readyForChange(state) {
    return Object.values(state).every((value) => value !== -1);
  }
  function dateElementProps(state, time, yearsRange) {
    if (yearsRange === void 0) {
      yearsRange = [1900, new Date().getFullYear() + 2];
    }
    const {
      year,
      month,
      day,
      hour,
      minute,
      second
    } = state;
    const data = [{
      type: "year",
      range: yearsRange,
      value: year
    }, {
      type: "month",
      range: [1, 12],
      value: month
    }, {
      type: "day",
      range: [1, 31],
      value: day
    }];
    if (time) {
      data.push({
        type: "hour",
        range: [0, 23],
        value: hour
      }, {
        type: "minute",
        range: [0, 59],
        value: minute
      }, {
        type: "second",
        range: [0, 59],
        value: second
      });
    }
    return data;
  }
  function DateElement(_ref2) {
    let {
      type,
      range,
      value,
      select,
      rootId,
      disabled,
      readonly,
      autofocus,
      registry,
      onBlur: onBlur5,
      onFocus: onFocus5
    } = _ref2;
    const id = rootId + "_" + type;
    const {
      SelectWidget: SelectWidget4
    } = registry.widgets;
    return /* @__PURE__ */ import_react13.default.createElement(SelectWidget4, {
      schema: {
        type: "integer"
      },
      id,
      className: "form-control",
      options: {
        enumOptions: rangeOptions(range[0], range[1])
      },
      placeholder: type,
      value,
      disabled,
      readonly,
      autofocus,
      onChange: (value2) => select(type, value2),
      onBlur: onBlur5,
      onFocus: onFocus5,
      registry,
      label: ""
    });
  }
  function AltDateWidget(_ref2) {
    let {
      time = false,
      disabled = false,
      readonly = false,
      autofocus = false,
      options,
      id,
      registry,
      onBlur: onBlur5,
      onFocus: onFocus5,
      onChange: onChange2,
      value
    } = _ref2;
    const [state, setState] = (0, import_react13.useReducer)((state2, action) => {
      return {
        ...state2,
        ...action
      };
    }, parseDateString(value, time));
    (0, import_react13.useEffect)(() => {
      if (value && value !== toDateString(state, time)) {
        setState(parseDateString(value, time));
      }
    }, [value, state, time]);
    (0, import_react13.useEffect)(() => {
      if (readyForChange(state)) {
        onChange2(toDateString(state, time));
      }
    }, [state, time, onChange2]);
    const handleChange = (0, import_react13.useCallback)((property, value2) => {
      setState({
        [property]: value2
      });
    }, []);
    const handleSetNow = (0, import_react13.useCallback)((event) => {
      event.preventDefault();
      if (disabled || readonly) {
        return;
      }
      const nowDateObj = parseDateString(new Date().toJSON(), time);
      setState(nowDateObj);
    }, [disabled, readonly, time]);
    const handleClear = (0, import_react13.useCallback)((event) => {
      event.preventDefault();
      if (disabled || readonly) {
        return;
      }
      setState(parseDateString("", time));
      onChange2(void 0);
    }, [disabled, readonly, time, onChange2]);
    return /* @__PURE__ */ import_react13.default.createElement("ul", {
      className: "list-inline"
    }, dateElementProps(state, time, options.yearsRange).map((elemProps, i) => /* @__PURE__ */ import_react13.default.createElement("li", {
      key: i
    }, /* @__PURE__ */ import_react13.default.createElement(DateElement, {
      rootId: id,
      select: handleChange,
      ...elemProps,
      disabled,
      readonly,
      registry,
      onBlur: onBlur5,
      onFocus: onFocus5,
      autofocus: autofocus && i === 0
    }))), (options.hideNowButton !== "undefined" ? !options.hideNowButton : true) && /* @__PURE__ */ import_react13.default.createElement("li", null, /* @__PURE__ */ import_react13.default.createElement("a", {
      href: "#",
      className: "btn btn-info btn-now",
      onClick: handleSetNow
    }, "Now")), (options.hideClearButton !== "undefined" ? !options.hideClearButton : true) && /* @__PURE__ */ import_react13.default.createElement("li", null, /* @__PURE__ */ import_react13.default.createElement("a", {
      href: "#",
      className: "btn btn-warning btn-clear",
      onClick: handleClear
    }, "Clear")));
  }
  function AltDateTimeWidget(_ref2) {
    let {
      time = true,
      ...props
    } = _ref2;
    const {
      AltDateWidget: AltDateWidget2
    } = props.registry.widgets;
    return /* @__PURE__ */ import_react13.default.createElement(AltDateWidget2, {
      time,
      ...props
    });
  }
  function CheckboxWidget(_ref2) {
    let {
      schema,
      uiSchema: uiSchema2,
      options,
      id,
      value,
      disabled,
      readonly,
      label,
      autofocus = false,
      onBlur: onBlur5,
      onFocus: onFocus5,
      onChange: onChange2,
      registry
    } = _ref2;
    const DescriptionFieldTemplate = getTemplate("DescriptionFieldTemplate", registry, options);
    const required = schemaRequiresTrueValue(schema);
    const handleChange = (0, import_react13.useCallback)((event) => onChange2(event.target.checked), [onChange2]);
    const handleBlur = (0, import_react13.useCallback)((event) => onBlur5(id, event.target.checked), [onBlur5, id]);
    const handleFocus = (0, import_react13.useCallback)((event) => onFocus5(id, event.target.checked), [onFocus5, id]);
    return /* @__PURE__ */ import_react13.default.createElement("div", {
      className: `checkbox ${disabled || readonly ? "disabled" : ""}`
    }, schema.description && /* @__PURE__ */ import_react13.default.createElement(DescriptionFieldTemplate, {
      id: id + "__description",
      description: schema.description,
      schema,
      uiSchema: uiSchema2,
      registry
    }), /* @__PURE__ */ import_react13.default.createElement("label", null, /* @__PURE__ */ import_react13.default.createElement("input", {
      type: "checkbox",
      id,
      name: id,
      checked: typeof value === "undefined" ? false : value,
      required,
      disabled: disabled || readonly,
      autoFocus: autofocus,
      onChange: handleChange,
      onBlur: handleBlur,
      onFocus: handleFocus
    }), /* @__PURE__ */ import_react13.default.createElement("span", null, label)));
  }
  function selectValue(value, selected, all) {
    const at = all.indexOf(value);
    const updated = selected.slice(0, at).concat(value, selected.slice(at));
    return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));
  }
  function deselectValue(value, selected) {
    return selected.filter((v) => v !== value);
  }
  function CheckboxesWidget(_ref2) {
    let {
      id,
      disabled,
      options: {
        inline = false,
        enumOptions,
        enumDisabled
      },
      value,
      autofocus = false,
      readonly,
      onChange: onChange2
    } = _ref2;
    return /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "checkboxes",
      id
    }, Array.isArray(enumOptions) && enumOptions.map((option, index2) => {
      const checked = value.indexOf(option.value) !== -1;
      const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) != -1;
      const disabledCls = disabled || itemDisabled || readonly ? "disabled" : "";
      const handleChange = (event) => {
        const all = enumOptions.map((_ref22) => {
          let {
            value: value2
          } = _ref22;
          return value2;
        });
        if (event.target.checked) {
          onChange2(selectValue(option.value, value, all));
        } else {
          onChange2(deselectValue(option.value, value));
        }
      };
      const checkbox = /* @__PURE__ */ import_react13.default.createElement("span", null, /* @__PURE__ */ import_react13.default.createElement("input", {
        type: "checkbox",
        id: `${id}-${option.value}`,
        name: id,
        checked,
        disabled: disabled || itemDisabled || readonly,
        autoFocus: autofocus && index2 === 0,
        onChange: handleChange
      }), /* @__PURE__ */ import_react13.default.createElement("span", null, option.label));
      return inline ? /* @__PURE__ */ import_react13.default.createElement("label", {
        key: option.value,
        className: `checkbox-inline ${disabledCls}`
      }, checkbox) : /* @__PURE__ */ import_react13.default.createElement("div", {
        key: option.value,
        className: `checkbox ${disabledCls}`
      }, /* @__PURE__ */ import_react13.default.createElement("label", null, checkbox));
    }));
  }
  function ColorWidget(props) {
    const {
      disabled,
      readonly,
      options,
      registry
    } = props;
    const BaseInputTemplate4 = getTemplate("BaseInputTemplate", registry, options);
    return /* @__PURE__ */ import_react13.default.createElement(BaseInputTemplate4, {
      type: "color",
      ...props,
      disabled: disabled || readonly
    });
  }
  function DateWidget(props) {
    const {
      onChange: onChange2,
      options,
      registry
    } = props;
    const BaseInputTemplate4 = getTemplate("BaseInputTemplate", registry, options);
    const handleChange = (0, import_react13.useCallback)((value) => onChange2(value || void 0), [onChange2]);
    return /* @__PURE__ */ import_react13.default.createElement(BaseInputTemplate4, {
      type: "date",
      ...props,
      onChange: handleChange
    });
  }
  function DateTimeWidget(props) {
    const {
      onChange: onChange2,
      value,
      options,
      registry
    } = props;
    const BaseInputTemplate4 = getTemplate("BaseInputTemplate", registry, options);
    return /* @__PURE__ */ import_react13.default.createElement(BaseInputTemplate4, {
      type: "datetime-local",
      ...props,
      value: utcToLocal(value),
      onChange: (value2) => onChange2(localToUTC(value2))
    });
  }
  function EmailWidget(props) {
    const {
      options,
      registry
    } = props;
    const BaseInputTemplate4 = getTemplate("BaseInputTemplate", registry, options);
    return /* @__PURE__ */ import_react13.default.createElement(BaseInputTemplate4, {
      type: "email",
      ...props
    });
  }
  function addNameToDataURL(dataURL, name) {
    if (dataURL === null) {
      return null;
    }
    return dataURL.replace(";base64", `;name=${encodeURIComponent(name)};base64`);
  }
  function processFile(file) {
    const {
      name,
      size,
      type
    } = file;
    return new Promise((resolve, reject) => {
      const reader = new window.FileReader();
      reader.onerror = reject;
      reader.onload = (event) => {
        var _event$target;
        if (typeof ((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result) === "string") {
          resolve({
            dataURL: addNameToDataURL(event.target.result, name),
            name,
            size,
            type
          });
        } else {
          resolve({
            dataURL: null,
            name,
            size,
            type
          });
        }
      };
      reader.readAsDataURL(file);
    });
  }
  function processFiles(files) {
    return Promise.all(Array.from(files).map(processFile));
  }
  function FilesInfo(_ref2) {
    let {
      filesInfo
    } = _ref2;
    if (filesInfo.length === 0) {
      return null;
    }
    return /* @__PURE__ */ import_react13.default.createElement("ul", {
      className: "file-info"
    }, filesInfo.map((fileInfo, key) => {
      const {
        name,
        size,
        type
      } = fileInfo;
      return /* @__PURE__ */ import_react13.default.createElement("li", {
        key
      }, /* @__PURE__ */ import_react13.default.createElement("strong", null, name), " (", type, ", ", size, " bytes)");
    }));
  }
  function extractFileInfo(dataURLs) {
    return dataURLs.filter((dataURL) => typeof dataURL !== "undefined").map((dataURL) => {
      const {
        blob,
        name
      } = dataURItoBlob(dataURL);
      return {
        name,
        size: blob.size,
        type: blob.type
      };
    });
  }
  function FileWidget(_ref2) {
    let {
      multiple,
      id,
      readonly,
      disabled,
      onChange: onChange2,
      value,
      autofocus = false,
      options
    } = _ref2;
    const extractedFilesInfo = (0, import_react13.useMemo)(() => Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]), [value]);
    const [filesInfo, setFilesInfo] = (0, import_react13.useState)(extractedFilesInfo);
    const handleChange = (0, import_react13.useCallback)((event) => {
      if (!event.target.files) {
        return;
      }
      processFiles(event.target.files).then((filesInfoEvent) => {
        setFilesInfo(filesInfoEvent);
        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);
        if (multiple) {
          onChange2(newValue);
        } else {
          onChange2(newValue[0]);
        }
      });
    }, [multiple, onChange2]);
    return /* @__PURE__ */ import_react13.default.createElement("div", null, /* @__PURE__ */ import_react13.default.createElement("p", null, /* @__PURE__ */ import_react13.default.createElement("input", {
      id,
      name: id,
      type: "file",
      disabled: readonly || disabled,
      onChange: handleChange,
      defaultValue: "",
      autoFocus: autofocus,
      multiple,
      accept: options.accept ? String(options.accept) : void 0
    })), /* @__PURE__ */ import_react13.default.createElement(FilesInfo, {
      filesInfo
    }));
  }
  function HiddenWidget(_ref2) {
    let {
      id,
      value
    } = _ref2;
    return /* @__PURE__ */ import_react13.default.createElement("input", {
      type: "hidden",
      id,
      name: id,
      value: typeof value === "undefined" ? "" : value
    });
  }
  function PasswordWidget(props) {
    const {
      options,
      registry
    } = props;
    const BaseInputTemplate4 = getTemplate("BaseInputTemplate", registry, options);
    return /* @__PURE__ */ import_react13.default.createElement(BaseInputTemplate4, {
      type: "password",
      ...props
    });
  }
  function RadioWidget(_ref2) {
    let {
      options,
      value,
      required,
      disabled,
      readonly,
      autofocus = false,
      onBlur: onBlur5,
      onFocus: onFocus5,
      onChange: onChange2,
      id
    } = _ref2;
    const name = Math.random().toString();
    const {
      enumOptions,
      enumDisabled,
      inline
    } = options;
    const handleBlur = (0, import_react13.useCallback)((event) => onBlur5(id, event.target.value), [onBlur5, id]);
    const handleFocus = (0, import_react13.useCallback)((event) => onFocus5(id, event.target.value), [onFocus5, id]);
    return /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "field-radio-group",
      id
    }, Array.isArray(enumOptions) && enumOptions.map((option, i) => {
      const checked = option.value === value;
      const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) != -1;
      const disabledCls = disabled || itemDisabled || readonly ? "disabled" : "";
      const handleChange = () => onChange2(option.value);
      const radio = /* @__PURE__ */ import_react13.default.createElement("span", null, /* @__PURE__ */ import_react13.default.createElement("input", {
        type: "radio",
        id: `${id}-${option.value}`,
        checked,
        name,
        required,
        value: option.value,
        disabled: disabled || itemDisabled || readonly,
        autoFocus: autofocus && i === 0,
        onChange: handleChange,
        onBlur: handleBlur,
        onFocus: handleFocus
      }), /* @__PURE__ */ import_react13.default.createElement("span", null, option.label));
      return inline ? /* @__PURE__ */ import_react13.default.createElement("label", {
        key: option.value,
        className: `radio-inline ${disabledCls}`
      }, radio) : /* @__PURE__ */ import_react13.default.createElement("div", {
        key: option.value,
        className: `radio ${disabledCls}`
      }, /* @__PURE__ */ import_react13.default.createElement("label", null, radio));
    }));
  }
  function RangeWidget(props) {
    const {
      value,
      registry: {
        templates: {
          BaseInputTemplate: BaseInputTemplate4
        }
      }
    } = props;
    return /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "field-range-wrapper"
    }, /* @__PURE__ */ import_react13.default.createElement(BaseInputTemplate4, {
      type: "range",
      ...props
    }), /* @__PURE__ */ import_react13.default.createElement("span", {
      className: "range-view"
    }, value));
  }
  function getValue2(event, multiple) {
    if (multiple) {
      return Array.from(event.target.options).slice().filter((o) => o.selected).map((o) => o.value);
    }
    return event.target.value;
  }
  function SelectWidget(_ref2) {
    let {
      schema,
      id,
      options,
      value,
      required,
      disabled,
      readonly,
      multiple = false,
      autofocus = false,
      onChange: onChange2,
      onBlur: onBlur5,
      onFocus: onFocus5,
      placeholder
    } = _ref2;
    const {
      enumOptions,
      enumDisabled
    } = options;
    const emptyValue = multiple ? [] : "";
    const handleFocus = (0, import_react13.useCallback)((event) => {
      const newValue = getValue2(event, multiple);
      return onFocus5(id, processSelectValue(schema, newValue, options));
    }, [onFocus5, id, schema, multiple, options]);
    const handleBlur = (0, import_react13.useCallback)((event) => {
      const newValue = getValue2(event, multiple);
      return onBlur5(id, processSelectValue(schema, newValue, options));
    }, [onBlur5, id, schema, multiple, options]);
    const handleChange = (0, import_react13.useCallback)((event) => {
      const newValue = getValue2(event, multiple);
      return onChange2(processSelectValue(schema, newValue, options));
    }, [onChange2, schema, multiple, options]);
    return /* @__PURE__ */ import_react13.default.createElement("select", {
      id,
      name: id,
      multiple,
      className: "form-control",
      value: typeof value === "undefined" ? emptyValue : value,
      required,
      disabled: disabled || readonly,
      autoFocus: autofocus,
      onBlur: handleBlur,
      onFocus: handleFocus,
      onChange: handleChange
    }, !multiple && schema.default === void 0 && /* @__PURE__ */ import_react13.default.createElement("option", {
      value: ""
    }, placeholder), Array.isArray(enumOptions) && enumOptions.map((_ref22, i) => {
      let {
        value: value2,
        label
      } = _ref22;
      const disabled2 = enumDisabled && enumDisabled.indexOf(value2) != -1;
      return /* @__PURE__ */ import_react13.default.createElement("option", {
        key: i,
        value: value2,
        disabled: disabled2
      }, label);
    }));
  }
  function TextareaWidget(_ref2) {
    let {
      id,
      options = {},
      placeholder,
      value,
      required,
      disabled,
      readonly,
      autofocus = false,
      onChange: onChange2,
      onBlur: onBlur5,
      onFocus: onFocus5
    } = _ref2;
    const handleChange = (0, import_react13.useCallback)((_ref22) => {
      let {
        target: {
          value: value2
        }
      } = _ref22;
      return onChange2(value2 === "" ? options.emptyValue : value2);
    }, [onChange2, options.emptyValue]);
    const handleBlur = (0, import_react13.useCallback)((_ref3) => {
      let {
        target: {
          value: value2
        }
      } = _ref3;
      return onBlur5(id, value2);
    }, [onBlur5, id]);
    const handleFocus = (0, import_react13.useCallback)((_ref4) => {
      let {
        target: {
          value: value2
        }
      } = _ref4;
      return onFocus5(id, value2);
    }, [id, onFocus5]);
    return /* @__PURE__ */ import_react13.default.createElement("textarea", {
      id,
      name: id,
      className: "form-control",
      value: value ? value : "",
      placeholder,
      required,
      disabled,
      readOnly: readonly,
      autoFocus: autofocus,
      rows: options.rows,
      onBlur: handleBlur,
      onFocus: handleFocus,
      onChange: handleChange
    });
  }
  TextareaWidget.defaultProps = {
    autofocus: false,
    options: {}
  };
  function TextWidget(props) {
    const {
      options,
      registry
    } = props;
    const BaseInputTemplate4 = getTemplate("BaseInputTemplate", registry, options);
    return /* @__PURE__ */ import_react13.default.createElement(BaseInputTemplate4, {
      ...props
    });
  }
  function URLWidget(props) {
    const {
      options,
      registry
    } = props;
    const BaseInputTemplate4 = getTemplate("BaseInputTemplate", registry, options);
    return /* @__PURE__ */ import_react13.default.createElement(BaseInputTemplate4, {
      type: "url",
      ...props
    });
  }
  function UpDownWidget(props) {
    const {
      options,
      registry
    } = props;
    const BaseInputTemplate4 = getTemplate("BaseInputTemplate", registry, options);
    return /* @__PURE__ */ import_react13.default.createElement(BaseInputTemplate4, {
      type: "number",
      ...props
    });
  }
  function widgets() {
    return {
      PasswordWidget,
      RadioWidget,
      UpDownWidget,
      RangeWidget,
      SelectWidget,
      TextWidget,
      DateWidget,
      DateTimeWidget,
      AltDateWidget,
      AltDateTimeWidget,
      EmailWidget,
      URLWidget,
      TextareaWidget,
      HiddenWidget,
      ColorWidget,
      FileWidget,
      CheckboxWidget,
      CheckboxesWidget
    };
  }
  function getDefaultRegistry() {
    return {
      fields: fields(),
      templates: templates(),
      widgets: widgets(),
      rootSchema: {},
      formContext: {}
    };
  }
  var Form2 = class extends import_react13.Component {
    constructor(props) {
      super(props);
      this.formElement = void 0;
      this.getUsedFormData = (formData, fields2) => {
        if (fields2.length === 0 && typeof formData !== "object") {
          return formData;
        }
        const data = pick_default(formData, fields2);
        if (Array.isArray(formData)) {
          return Object.keys(data).map((key) => data[key]);
        }
        return data;
      };
      this.getFieldNames = (pathSchema, formData) => {
        const getAllPaths = function(_obj, acc, paths) {
          if (acc === void 0) {
            acc = [];
          }
          if (paths === void 0) {
            paths = [[]];
          }
          Object.keys(_obj).forEach((key) => {
            if (typeof _obj[key] === "object") {
              const newPaths = paths.map((path) => [...path, key]);
              if (_obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] && _obj[key][NAME_KEY] !== "") {
                acc.push(_obj[key][NAME_KEY]);
              } else {
                getAllPaths(_obj[key], acc, newPaths);
              }
            } else if (key === NAME_KEY && _obj[key] !== "") {
              paths.forEach((path) => {
                const formValue = get_default(formData, path);
                if (typeof formValue !== "object" || isEmpty_default(formValue)) {
                  acc.push(path);
                }
              });
            }
          });
          return acc;
        };
        return getAllPaths(pathSchema);
      };
      this.onChange = (formData, newErrorSchema, id) => {
        const {
          extraErrors,
          omitExtraData,
          liveOmit,
          noValidate,
          liveValidate,
          onChange: onChange2
        } = this.props;
        const {
          schemaUtils,
          schema
        } = this.state;
        if (isObject4(formData) || Array.isArray(formData)) {
          const newState = this.getStateFromProps(this.props, formData);
          formData = newState.formData;
        }
        const mustValidate = !noValidate && liveValidate;
        let state = {
          formData,
          schema
        };
        let newFormData = formData;
        if (omitExtraData === true && liveOmit === true) {
          const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);
          const pathSchema = schemaUtils.toPathSchema(retrievedSchema, "", formData);
          const fieldNames = this.getFieldNames(pathSchema, formData);
          newFormData = this.getUsedFormData(formData, fieldNames);
          state = {
            formData: newFormData
          };
        }
        if (mustValidate) {
          const schemaValidation = this.validate(newFormData);
          let errors = schemaValidation.errors;
          let errorSchema = schemaValidation.errorSchema;
          const schemaValidationErrors = errors;
          const schemaValidationErrorSchema = errorSchema;
          if (extraErrors) {
            const merged = schemaUtils.mergeValidationData(schemaValidation, extraErrors);
            errorSchema = merged.errorSchema;
            errors = merged.errors;
          }
          state = {
            formData: newFormData,
            errors,
            errorSchema,
            schemaValidationErrors,
            schemaValidationErrorSchema
          };
        } else if (!noValidate && newErrorSchema) {
          const errorSchema = extraErrors ? mergeObjects(newErrorSchema, extraErrors, true) : newErrorSchema;
          state = {
            formData: newFormData,
            errorSchema,
            errors: schemaUtils.getValidator().toErrorList(errorSchema)
          };
        }
        this.setState(state, () => onChange2 && onChange2({
          ...this.state,
          ...state
        }, id));
      };
      this.onBlur = (id, data) => {
        const {
          onBlur: onBlur5
        } = this.props;
        if (onBlur5) {
          onBlur5(id, data);
        }
      };
      this.onFocus = (id, data) => {
        const {
          onFocus: onFocus5
        } = this.props;
        if (onFocus5) {
          onFocus5(id, data);
        }
      };
      this.onSubmit = (event) => {
        event.preventDefault();
        if (event.target !== event.currentTarget) {
          return;
        }
        event.persist();
        const {
          omitExtraData,
          extraErrors,
          noValidate,
          onSubmit
        } = this.props;
        let {
          formData: newFormData
        } = this.state;
        const {
          schema,
          schemaUtils
        } = this.state;
        if (omitExtraData === true) {
          const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);
          const pathSchema = schemaUtils.toPathSchema(retrievedSchema, "", newFormData);
          const fieldNames = this.getFieldNames(pathSchema, newFormData);
          newFormData = this.getUsedFormData(newFormData, fieldNames);
        }
        if (noValidate || this.validateForm()) {
          const errorSchema = extraErrors || {};
          const errors = extraErrors ? schemaUtils.getValidator().toErrorList(extraErrors) : [];
          this.setState({
            formData: newFormData,
            errors,
            errorSchema,
            schemaValidationErrors: [],
            schemaValidationErrorSchema: {}
          }, () => {
            if (onSubmit) {
              onSubmit({
                ...this.state,
                formData: newFormData,
                status: "submitted"
              }, event);
            }
          });
        }
      };
      if (!props.validator) {
        throw new Error("A validator is required for Form functionality to work");
      }
      this.state = this.getStateFromProps(props, props.formData);
      if (this.props.onChange && !deepEquals(this.state.formData, this.props.formData)) {
        this.props.onChange(this.state);
      }
      this.formElement = /* @__PURE__ */ import_react13.default.createRef();
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
      const nextState = this.getStateFromProps(nextProps, nextProps.formData);
      if (!deepEquals(nextState.formData, nextProps.formData) && !deepEquals(nextState.formData, this.state.formData) && nextProps.onChange) {
        nextProps.onChange(nextState);
      }
      this.setState(nextState);
    }
    getStateFromProps(props, inputFormData) {
      const state = this.state || {};
      const schema = "schema" in props ? props.schema : this.props.schema;
      const uiSchema2 = ("uiSchema" in props ? props.uiSchema : this.props.uiSchema) || {};
      const edit = typeof inputFormData !== "undefined";
      const liveValidate = "liveValidate" in props ? props.liveValidate : this.props.liveValidate;
      const mustValidate = edit && !props.noValidate && liveValidate;
      const rootSchema = schema;
      let schemaUtils = state.schemaUtils;
      if (!schemaUtils || schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)) {
        schemaUtils = createSchemaUtils(props.validator, rootSchema);
      }
      const formData = schemaUtils.getDefaultFormState(schema, inputFormData);
      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);
      const getCurrentErrors = () => {
        if (props.noValidate) {
          return {
            errors: [],
            errorSchema: {}
          };
        } else if (!props.liveValidate) {
          return {
            errors: state.schemaValidationErrors || [],
            errorSchema: state.schemaValidationErrorSchema || {}
          };
        }
        return {
          errors: state.errors || [],
          errorSchema: state.errorSchema || {}
        };
      };
      let errors;
      let errorSchema;
      let schemaValidationErrors = state.schemaValidationErrors;
      let schemaValidationErrorSchema = state.schemaValidationErrorSchema;
      if (mustValidate) {
        const schemaValidation = this.validate(formData, schema, schemaUtils);
        errors = schemaValidation.errors;
        errorSchema = schemaValidation.errorSchema;
        schemaValidationErrors = errors;
        schemaValidationErrorSchema = errorSchema;
      } else {
        const currentErrors = getCurrentErrors();
        errors = currentErrors.errors;
        errorSchema = currentErrors.errorSchema;
      }
      if (props.extraErrors) {
        const merged = schemaUtils.mergeValidationData({
          errorSchema,
          errors
        }, props.extraErrors);
        errorSchema = merged.errorSchema;
        errors = merged.errors;
      }
      const idSchema = schemaUtils.toIdSchema(retrievedSchema, uiSchema2["ui:rootFieldId"], formData, props.idPrefix, props.idSeparator);
      const nextState = {
        schemaUtils,
        schema,
        uiSchema: uiSchema2,
        idSchema,
        formData,
        edit,
        errors,
        errorSchema,
        schemaValidationErrors,
        schemaValidationErrorSchema
      };
      return nextState;
    }
    shouldComponentUpdate(nextProps, nextState) {
      return shouldRender(this, nextProps, nextState);
    }
    validate(formData, schema, altSchemaUtils) {
      if (schema === void 0) {
        schema = this.props.schema;
      }
      const schemaUtils = altSchemaUtils ? altSchemaUtils : this.state.schemaUtils;
      const {
        customValidate,
        transformErrors
      } = this.props;
      const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);
      return schemaUtils.getValidator().validateFormData(formData, resolvedSchema, customValidate, transformErrors);
    }
    renderErrors(registry) {
      const {
        errors,
        errorSchema,
        schema,
        uiSchema: uiSchema2
      } = this.state;
      const {
        formContext
      } = this.props;
      const options = getUiOptions(uiSchema2);
      const ErrorListTemplate = getTemplate("ErrorListTemplate", registry, options);
      if (errors && errors.length) {
        return /* @__PURE__ */ import_react13.default.createElement(ErrorListTemplate, {
          errors,
          errorSchema: errorSchema || {},
          schema,
          uiSchema: uiSchema2,
          formContext
        });
      }
      return null;
    }
    getRegistry() {
      var _this$props$templates;
      const {
        schemaUtils
      } = this.state;
      const {
        fields: fields2,
        templates: templates2,
        widgets: widgets2,
        formContext
      } = getDefaultRegistry();
      return {
        fields: {
          ...fields2,
          ...this.props.fields
        },
        templates: {
          ...templates2,
          ...this.props.templates,
          ButtonTemplates: {
            ...templates2.ButtonTemplates,
            ...(_this$props$templates = this.props.templates) === null || _this$props$templates === void 0 ? void 0 : _this$props$templates.ButtonTemplates
          }
        },
        widgets: {
          ...widgets2,
          ...this.props.widgets
        },
        rootSchema: this.props.schema,
        formContext: this.props.formContext || formContext,
        schemaUtils
      };
    }
    submit() {
      if (this.formElement.current) {
        this.formElement.current.dispatchEvent(new CustomEvent("submit", {
          cancelable: true
        }));
        this.formElement.current.requestSubmit();
      }
    }
    validateForm() {
      const {
        extraErrors,
        onError
      } = this.props;
      const {
        formData
      } = this.state;
      const {
        schemaUtils
      } = this.state;
      const schemaValidation = this.validate(formData);
      let errors = schemaValidation.errors;
      let errorSchema = schemaValidation.errorSchema;
      const schemaValidationErrors = errors;
      const schemaValidationErrorSchema = errorSchema;
      if (errors.length > 0) {
        if (extraErrors) {
          const merged = schemaUtils.mergeValidationData(schemaValidation, extraErrors);
          errorSchema = merged.errorSchema;
          errors = merged.errors;
        }
        this.setState({
          errors,
          errorSchema,
          schemaValidationErrors,
          schemaValidationErrorSchema
        }, () => {
          if (onError) {
            onError(errors);
          } else {
            console.error("Form validation failed", errors);
          }
        });
        return false;
      }
      return true;
    }
    render() {
      const {
        children: children2,
        id,
        idPrefix,
        idSeparator,
        className = "",
        tagName,
        name,
        method,
        target,
        action,
        autoComplete,
        enctype,
        acceptcharset,
        noHtml5Validate = false,
        disabled = false,
        readonly = false,
        formContext,
        showErrorList = "top",
        _internalFormWrapper
      } = this.props;
      const {
        schema,
        uiSchema: uiSchema2,
        formData,
        errorSchema,
        idSchema
      } = this.state;
      const registry = this.getRegistry();
      const {
        SchemaField: _SchemaField
      } = registry.fields;
      const {
        SubmitButton: SubmitButton4
      } = registry.templates.ButtonTemplates;
      const as = _internalFormWrapper ? tagName : void 0;
      const FormTag = _internalFormWrapper || tagName || "form";
      return /* @__PURE__ */ import_react13.default.createElement(FormTag, {
        className: className ? className : "rjsf",
        id,
        name,
        method,
        target,
        action,
        autoComplete,
        encType: enctype,
        acceptCharset: acceptcharset,
        noValidate: noHtml5Validate,
        onSubmit: this.onSubmit,
        as,
        ref: this.formElement
      }, showErrorList === "top" && this.renderErrors(registry), /* @__PURE__ */ import_react13.default.createElement(_SchemaField, {
        name: "",
        schema,
        uiSchema: uiSchema2,
        errorSchema,
        idSchema,
        idPrefix,
        idSeparator,
        formContext,
        formData,
        onChange: this.onChange,
        onBlur: this.onBlur,
        onFocus: this.onFocus,
        registry,
        disabled,
        readonly
      }), children2 ? children2 : /* @__PURE__ */ import_react13.default.createElement(SubmitButton4, {
        uiSchema: uiSchema2
      }), showErrorList === "bottom" && this.renderErrors(registry));
    }
  };
  function withTheme(themeProps) {
    return /* @__PURE__ */ (0, import_react13.forwardRef)((_ref2, ref) => {
      var _themeProps$templates, _templates;
      let {
        fields: fields2,
        widgets: widgets2,
        templates: templates2,
        ...directProps
      } = _ref2;
      fields2 = {
        ...themeProps.fields,
        ...fields2
      };
      widgets2 = {
        ...themeProps.widgets,
        ...widgets2
      };
      templates2 = {
        ...themeProps.templates,
        ...templates2,
        ButtonTemplates: {
          ...themeProps === null || themeProps === void 0 ? void 0 : (_themeProps$templates = themeProps.templates) === null || _themeProps$templates === void 0 ? void 0 : _themeProps$templates.ButtonTemplates,
          ...(_templates = templates2) === null || _templates === void 0 ? void 0 : _templates.ButtonTemplates
        }
      };
      return /* @__PURE__ */ import_react13.default.createElement(Form2, {
        ...themeProps,
        ...directProps,
        fields: fields2,
        widgets: widgets2,
        templates: templates2,
        ref
      });
    });
  }

  // node_modules/@rjsf/bootstrap-4/dist/bootstrap-4.esm.js
  var import_react33 = __toESM(require_react());

  // node_modules/react-bootstrap/esm/Button.js
  var import_classnames = __toESM(require_classnames());
  var React71 = __toESM(require_react());

  // node_modules/@restart/ui/esm/Button.js
  var React69 = __toESM(require_react());
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  var _excluded32 = ["as", "disabled"];
  function _objectWithoutPropertiesLoose28(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function isTrivialHref(href) {
    return !href || href.trim() === "#";
  }
  function useButtonProps({
    tagName,
    disabled,
    href,
    target,
    rel,
    role,
    onClick,
    tabIndex = 0,
    type
  }) {
    if (!tagName) {
      if (href != null || target != null || rel != null) {
        tagName = "a";
      } else {
        tagName = "button";
      }
    }
    const meta = {
      tagName
    };
    if (tagName === "button") {
      return [{
        type: type || "button",
        disabled
      }, meta];
    }
    const handleClick = (event) => {
      if (disabled || tagName === "a" && isTrivialHref(href)) {
        event.preventDefault();
      }
      if (disabled) {
        event.stopPropagation();
        return;
      }
      onClick == null ? void 0 : onClick(event);
    };
    const handleKeyDown2 = (event) => {
      if (event.key === " ") {
        event.preventDefault();
        handleClick(event);
      }
    };
    if (tagName === "a") {
      href || (href = "#");
      if (disabled) {
        href = void 0;
      }
    }
    return [{
      role: role != null ? role : "button",
      disabled: void 0,
      tabIndex: disabled ? void 0 : tabIndex,
      href,
      target: tagName === "a" ? target : void 0,
      "aria-disabled": !disabled ? void 0 : disabled,
      rel: tagName === "a" ? rel : void 0,
      onClick: handleClick,
      onKeyDown: handleKeyDown2
    }, meta];
  }
  var Button2 = /* @__PURE__ */ React69.forwardRef((_ref2, ref) => {
    let {
      as: asProp,
      disabled
    } = _ref2, props = _objectWithoutPropertiesLoose28(_ref2, _excluded32);
    const [buttonProps, {
      tagName: Component15
    }] = useButtonProps(Object.assign({
      tagName: asProp,
      disabled
    }, props));
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component15, Object.assign({}, props, buttonProps, {
      ref
    }));
  });
  Button2.displayName = "Button";
  var Button_default = Button2;

  // node_modules/react-bootstrap/esm/ThemeProvider.js
  var React70 = __toESM(require_react());
  var import_react14 = __toESM(require_react());
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var DEFAULT_BREAKPOINTS = ["xxl", "xl", "lg", "md", "sm", "xs"];
  var DEFAULT_MIN_BREAKPOINT = "xs";
  var ThemeContext2 = /* @__PURE__ */ React70.createContext({
    prefixes: {},
    breakpoints: DEFAULT_BREAKPOINTS,
    minBreakpoint: DEFAULT_MIN_BREAKPOINT
  });
  var {
    Consumer: Consumer2,
    Provider: Provider3
  } = ThemeContext2;
  function useBootstrapPrefix(prefix2, defaultPrefix) {
    const {
      prefixes: prefixes7
    } = (0, import_react14.useContext)(ThemeContext2);
    return prefix2 || prefixes7[defaultPrefix] || defaultPrefix;
  }
  function useBootstrapBreakpoints() {
    const {
      breakpoints: breakpoints2
    } = (0, import_react14.useContext)(ThemeContext2);
    return breakpoints2;
  }
  function useBootstrapMinBreakpoint() {
    const {
      minBreakpoint
    } = (0, import_react14.useContext)(ThemeContext2);
    return minBreakpoint;
  }

  // node_modules/react-bootstrap/esm/Button.js
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var defaultProps2 = {
    variant: "primary",
    active: false,
    disabled: false
  };
  var Button3 = /* @__PURE__ */ React71.forwardRef(({
    as,
    bsPrefix,
    variant,
    size,
    active,
    className,
    ...props
  }, ref) => {
    const prefix2 = useBootstrapPrefix(bsPrefix, "btn");
    const [buttonProps, {
      tagName
    }] = useButtonProps({
      tagName: as,
      ...props
    });
    const Component15 = tagName;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Component15, {
      ...buttonProps,
      ...props,
      ref,
      className: (0, import_classnames.default)(className, prefix2, active && "active", variant && `${prefix2}-${variant}`, size && `${prefix2}-${size}`, props.href && props.disabled && "disabled")
    });
  });
  Button3.displayName = "Button";
  Button3.defaultProps = defaultProps2;
  var Button_default2 = Button3;

  // node_modules/@rjsf/bootstrap-4/dist/bootstrap-4.esm.js
  var import_BsPlus = __toESM(require_BsPlus());

  // node_modules/react-bootstrap/esm/Row.js
  var import_classnames2 = __toESM(require_classnames());
  var React72 = __toESM(require_react());
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var Row = /* @__PURE__ */ React72.forwardRef(({
    bsPrefix,
    className,
    as: Component15 = "div",
    ...props
  }, ref) => {
    const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, "row");
    const breakpoints2 = useBootstrapBreakpoints();
    const minBreakpoint = useBootstrapMinBreakpoint();
    const sizePrefix = `${decoratedBsPrefix}-cols`;
    const classes = [];
    breakpoints2.forEach((brkPoint) => {
      const propValue = props[brkPoint];
      delete props[brkPoint];
      let cols;
      if (propValue != null && typeof propValue === "object") {
        ({
          cols
        } = propValue);
      } else {
        cols = propValue;
      }
      const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : "";
      if (cols != null)
        classes.push(`${sizePrefix}${infix}-${cols}`);
    });
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Component15, {
      ref,
      ...props,
      className: (0, import_classnames2.default)(className, decoratedBsPrefix, ...classes)
    });
  });
  Row.displayName = "Row";
  var Row_default = Row;

  // node_modules/react-bootstrap/esm/Col.js
  var import_classnames3 = __toESM(require_classnames());
  var React73 = __toESM(require_react());
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  function useCol({
    as,
    bsPrefix,
    className,
    ...props
  }) {
    bsPrefix = useBootstrapPrefix(bsPrefix, "col");
    const breakpoints2 = useBootstrapBreakpoints();
    const minBreakpoint = useBootstrapMinBreakpoint();
    const spans = [];
    const classes = [];
    breakpoints2.forEach((brkPoint) => {
      const propValue = props[brkPoint];
      delete props[brkPoint];
      let span;
      let offset2;
      let order;
      if (typeof propValue === "object" && propValue != null) {
        ({
          span,
          offset: offset2,
          order
        } = propValue);
      } else {
        span = propValue;
      }
      const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : "";
      if (span)
        spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);
      if (order != null)
        classes.push(`order${infix}-${order}`);
      if (offset2 != null)
        classes.push(`offset${infix}-${offset2}`);
    });
    return [{
      ...props,
      className: (0, import_classnames3.default)(className, ...spans, ...classes)
    }, {
      as,
      bsPrefix,
      spans
    }];
  }
  var Col = /* @__PURE__ */ React73.forwardRef(
    (props, ref) => {
      const [{
        className,
        ...colProps
      }, {
        as: Component15 = "div",
        bsPrefix,
        spans
      }] = useCol(props);
      return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Component15, {
        ...colProps,
        ref,
        className: (0, import_classnames3.default)(className, !spans.length && bsPrefix)
      });
    }
  );
  Col.displayName = "Col";
  var Col_default = Col;

  // node_modules/react-bootstrap/esm/Container.js
  var import_classnames4 = __toESM(require_classnames());
  var React74 = __toESM(require_react());
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var defaultProps3 = {
    fluid: false
  };
  var Container2 = /* @__PURE__ */ React74.forwardRef(({
    bsPrefix,
    fluid,
    as: Component15 = "div",
    className,
    ...props
  }, ref) => {
    const prefix2 = useBootstrapPrefix(bsPrefix, "container");
    const suffix = typeof fluid === "string" ? `-${fluid}` : "-fluid";
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Component15, {
      ref,
      ...props,
      className: (0, import_classnames4.default)(className, fluid ? `${prefix2}${suffix}` : prefix2)
    });
  });
  Container2.displayName = "Container";
  Container2.defaultProps = defaultProps3;
  var Container_default = Container2;

  // node_modules/react-bootstrap/esm/Form.js
  var import_classnames16 = __toESM(require_classnames());
  var import_prop_types6 = __toESM(require_prop_types());
  var React90 = __toESM(require_react());

  // node_modules/react-bootstrap/esm/FormCheck.js
  var import_classnames8 = __toESM(require_classnames());
  var React80 = __toESM(require_react());
  var import_react17 = __toESM(require_react());

  // node_modules/react-bootstrap/esm/Feedback.js
  var import_classnames5 = __toESM(require_classnames());
  var React75 = __toESM(require_react());
  var import_prop_types5 = __toESM(require_prop_types());
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var propTypes2 = {
    type: import_prop_types5.default.string,
    tooltip: import_prop_types5.default.bool,
    as: import_prop_types5.default.elementType
  };
  var Feedback = /* @__PURE__ */ React75.forwardRef(
    ({
      as: Component15 = "div",
      className,
      type = "valid",
      tooltip = false,
      ...props
    }, ref) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Component15, {
      ...props,
      ref,
      className: (0, import_classnames5.default)(className, `${type}-${tooltip ? "tooltip" : "feedback"}`)
    })
  );
  Feedback.displayName = "Feedback";
  Feedback.propTypes = propTypes2;
  var Feedback_default = Feedback;

  // node_modules/react-bootstrap/esm/FormCheckInput.js
  var import_classnames6 = __toESM(require_classnames());
  var React77 = __toESM(require_react());
  var import_react15 = __toESM(require_react());

  // node_modules/react-bootstrap/esm/FormContext.js
  var React76 = __toESM(require_react());
  var FormContext = /* @__PURE__ */ React76.createContext({});
  var FormContext_default = FormContext;

  // node_modules/react-bootstrap/esm/FormCheckInput.js
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  var FormCheckInput = /* @__PURE__ */ React77.forwardRef(({
    id,
    bsPrefix,
    className,
    type = "checkbox",
    isValid = false,
    isInvalid = false,
    as: Component15 = "input",
    ...props
  }, ref) => {
    const {
      controlId
    } = (0, import_react15.useContext)(FormContext_default);
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-check-input");
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Component15, {
      ...props,
      ref,
      type,
      id: id || controlId,
      className: (0, import_classnames6.default)(className, bsPrefix, isValid && "is-valid", isInvalid && "is-invalid")
    });
  });
  FormCheckInput.displayName = "FormCheckInput";
  var FormCheckInput_default = FormCheckInput;

  // node_modules/react-bootstrap/esm/FormCheckLabel.js
  var import_classnames7 = __toESM(require_classnames());
  var React78 = __toESM(require_react());
  var import_react16 = __toESM(require_react());
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  var FormCheckLabel = /* @__PURE__ */ React78.forwardRef(({
    bsPrefix,
    className,
    htmlFor,
    ...props
  }, ref) => {
    const {
      controlId
    } = (0, import_react16.useContext)(FormContext_default);
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-check-label");
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("label", {
      ...props,
      ref,
      htmlFor: htmlFor || controlId,
      className: (0, import_classnames7.default)(className, bsPrefix)
    });
  });
  FormCheckLabel.displayName = "FormCheckLabel";
  var FormCheckLabel_default = FormCheckLabel;

  // node_modules/react-bootstrap/esm/ElementChildren.js
  var React79 = __toESM(require_react());
  function hasChildOfType(children2, type) {
    return React79.Children.toArray(children2).some((child) => /* @__PURE__ */ React79.isValidElement(child) && child.type === type);
  }

  // node_modules/react-bootstrap/esm/FormCheck.js
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  var FormCheck = /* @__PURE__ */ React80.forwardRef(({
    id,
    bsPrefix,
    bsSwitchPrefix,
    inline = false,
    reverse = false,
    disabled = false,
    isValid = false,
    isInvalid = false,
    feedbackTooltip = false,
    feedback,
    feedbackType,
    className,
    style,
    title = "",
    type = "checkbox",
    label,
    children: children2,
    as = "input",
    ...props
  }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-check");
    bsSwitchPrefix = useBootstrapPrefix(bsSwitchPrefix, "form-switch");
    const {
      controlId
    } = (0, import_react17.useContext)(FormContext_default);
    const innerFormContext = (0, import_react17.useMemo)(() => ({
      controlId: id || controlId
    }), [controlId, id]);
    const hasLabel = !children2 && label != null && label !== false || hasChildOfType(children2, FormCheckLabel_default);
    const input = /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(FormCheckInput_default, {
      ...props,
      type: type === "switch" ? "checkbox" : type,
      ref,
      isValid,
      isInvalid,
      disabled,
      as
    });
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(FormContext_default.Provider, {
      value: innerFormContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", {
        style,
        className: (0, import_classnames8.default)(className, hasLabel && bsPrefix, inline && `${bsPrefix}-inline`, reverse && `${bsPrefix}-reverse`, type === "switch" && bsSwitchPrefix),
        children: children2 || /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_jsx_runtime11.Fragment, {
          children: [input, hasLabel && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(FormCheckLabel_default, {
            title,
            children: label
          }), feedback && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Feedback_default, {
            type: feedbackType,
            tooltip: feedbackTooltip,
            children: feedback
          })]
        })
      })
    });
  });
  FormCheck.displayName = "FormCheck";
  var FormCheck_default = Object.assign(FormCheck, {
    Input: FormCheckInput_default,
    Label: FormCheckLabel_default
  });

  // node_modules/react-bootstrap/esm/FormControl.js
  var import_classnames9 = __toESM(require_classnames());
  var React81 = __toESM(require_react());
  var import_react18 = __toESM(require_react());
  var import_warning = __toESM(require_warning2());
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  var FormControl = /* @__PURE__ */ React81.forwardRef(({
    bsPrefix,
    type,
    size,
    htmlSize,
    id,
    className,
    isValid = false,
    isInvalid = false,
    plaintext,
    readOnly,
    as: Component15 = "input",
    ...props
  }, ref) => {
    const {
      controlId
    } = (0, import_react18.useContext)(FormContext_default);
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-control");
    let classes;
    if (plaintext) {
      classes = {
        [`${bsPrefix}-plaintext`]: true
      };
    } else {
      classes = {
        [bsPrefix]: true,
        [`${bsPrefix}-${size}`]: size
      };
    }
    true ? (0, import_warning.default)(controlId == null || !id, "`controlId` is ignored on `<FormControl>` when `id` is specified.") : void 0;
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Component15, {
      ...props,
      type,
      size: htmlSize,
      ref,
      readOnly,
      id: id || controlId,
      className: (0, import_classnames9.default)(className, classes, isValid && `is-valid`, isInvalid && `is-invalid`, type === "color" && `${bsPrefix}-color`)
    });
  });
  FormControl.displayName = "FormControl";
  var FormControl_default = Object.assign(FormControl, {
    Feedback: Feedback_default
  });

  // node_modules/react-bootstrap/esm/createWithBsPrefix.js
  var import_classnames10 = __toESM(require_classnames());

  // node_modules/dom-helpers/esm/camelize.js
  var rHyphen = /-(.)/g;
  function camelize(string2) {
    return string2.replace(rHyphen, function(_, chr) {
      return chr.toUpperCase();
    });
  }

  // node_modules/react-bootstrap/esm/createWithBsPrefix.js
  var React82 = __toESM(require_react());
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  var pascalCase = (str) => str[0].toUpperCase() + camelize(str).slice(1);
  function createWithBsPrefix(prefix2, {
    displayName = pascalCase(prefix2),
    Component: Component15,
    defaultProps: defaultProps6
  } = {}) {
    const BsComponent = /* @__PURE__ */ React82.forwardRef(({
      className,
      bsPrefix,
      as: Tag = Component15 || "div",
      ...props
    }, ref) => {
      const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix2);
      return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Tag, {
        ref,
        className: (0, import_classnames10.default)(className, resolvedPrefix),
        ...props
      });
    });
    BsComponent.defaultProps = defaultProps6;
    BsComponent.displayName = displayName;
    return BsComponent;
  }

  // node_modules/react-bootstrap/esm/FormFloating.js
  var FormFloating_default = createWithBsPrefix("form-floating");

  // node_modules/react-bootstrap/esm/FormGroup.js
  var React83 = __toESM(require_react());
  var import_react19 = __toESM(require_react());
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  var FormGroup = /* @__PURE__ */ React83.forwardRef(({
    controlId,
    as: Component15 = "div",
    ...props
  }, ref) => {
    const context3 = (0, import_react19.useMemo)(() => ({
      controlId
    }), [controlId]);
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(FormContext_default.Provider, {
      value: context3,
      children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(Component15, {
        ...props,
        ref
      })
    });
  });
  FormGroup.displayName = "FormGroup";
  var FormGroup_default = FormGroup;

  // node_modules/react-bootstrap/esm/FormLabel.js
  var import_classnames11 = __toESM(require_classnames());
  var React84 = __toESM(require_react());
  var import_react20 = __toESM(require_react());
  var import_warning2 = __toESM(require_warning2());
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  var defaultProps4 = {
    column: false,
    visuallyHidden: false
  };
  var FormLabel = /* @__PURE__ */ React84.forwardRef(({
    as: Component15 = "label",
    bsPrefix,
    column,
    visuallyHidden,
    className,
    htmlFor,
    ...props
  }, ref) => {
    const {
      controlId
    } = (0, import_react20.useContext)(FormContext_default);
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-label");
    let columnClass = "col-form-label";
    if (typeof column === "string")
      columnClass = `${columnClass} ${columnClass}-${column}`;
    const classes = (0, import_classnames11.default)(className, bsPrefix, visuallyHidden && "visually-hidden", column && columnClass);
    true ? (0, import_warning2.default)(controlId == null || !htmlFor, "`controlId` is ignored on `<FormLabel>` when `htmlFor` is specified.") : void 0;
    htmlFor = htmlFor || controlId;
    if (column)
      return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Col_default, {
        ref,
        as: "label",
        className: classes,
        htmlFor,
        ...props
      });
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Component15, {
      ref,
      className: classes,
      htmlFor,
      ...props
    });
  });
  FormLabel.displayName = "FormLabel";
  FormLabel.defaultProps = defaultProps4;
  var FormLabel_default = FormLabel;

  // node_modules/react-bootstrap/esm/FormRange.js
  var import_classnames12 = __toESM(require_classnames());
  var React85 = __toESM(require_react());
  var import_react21 = __toESM(require_react());
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  var FormRange = /* @__PURE__ */ React85.forwardRef(({
    bsPrefix,
    className,
    id,
    ...props
  }, ref) => {
    const {
      controlId
    } = (0, import_react21.useContext)(FormContext_default);
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-range");
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("input", {
      ...props,
      type: "range",
      ref,
      className: (0, import_classnames12.default)(className, bsPrefix),
      id: id || controlId
    });
  });
  FormRange.displayName = "FormRange";
  var FormRange_default = FormRange;

  // node_modules/react-bootstrap/esm/FormSelect.js
  var import_classnames13 = __toESM(require_classnames());
  var React86 = __toESM(require_react());
  var import_react22 = __toESM(require_react());
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  var FormSelect = /* @__PURE__ */ React86.forwardRef(({
    bsPrefix,
    size,
    htmlSize,
    className,
    isValid = false,
    isInvalid = false,
    id,
    ...props
  }, ref) => {
    const {
      controlId
    } = (0, import_react22.useContext)(FormContext_default);
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-select");
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("select", {
      ...props,
      size: htmlSize,
      ref,
      className: (0, import_classnames13.default)(className, bsPrefix, size && `${bsPrefix}-${size}`, isValid && `is-valid`, isInvalid && `is-invalid`),
      id: id || controlId
    });
  });
  FormSelect.displayName = "FormSelect";
  var FormSelect_default = FormSelect;

  // node_modules/react-bootstrap/esm/FormText.js
  var import_classnames14 = __toESM(require_classnames());
  var React87 = __toESM(require_react());
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  var FormText = /* @__PURE__ */ React87.forwardRef(
    ({
      bsPrefix,
      className,
      as: Component15 = "small",
      muted,
      ...props
    }, ref) => {
      bsPrefix = useBootstrapPrefix(bsPrefix, "form-text");
      return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Component15, {
        ...props,
        ref,
        className: (0, import_classnames14.default)(className, bsPrefix, muted && "text-muted")
      });
    }
  );
  FormText.displayName = "FormText";
  var FormText_default = FormText;

  // node_modules/react-bootstrap/esm/Switch.js
  var React88 = __toESM(require_react());
  var import_jsx_runtime20 = __toESM(require_jsx_runtime());
  var Switch = /* @__PURE__ */ React88.forwardRef((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(FormCheck_default, {
    ...props,
    ref,
    type: "switch"
  }));
  Switch.displayName = "Switch";
  var Switch_default = Object.assign(Switch, {
    Input: FormCheck_default.Input,
    Label: FormCheck_default.Label
  });

  // node_modules/react-bootstrap/esm/FloatingLabel.js
  var import_classnames15 = __toESM(require_classnames());
  var React89 = __toESM(require_react());
  var import_jsx_runtime21 = __toESM(require_jsx_runtime());
  var import_jsx_runtime22 = __toESM(require_jsx_runtime());
  var FloatingLabel = /* @__PURE__ */ React89.forwardRef(({
    bsPrefix,
    className,
    children: children2,
    controlId,
    label,
    ...props
  }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-floating");
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(FormGroup_default, {
      ref,
      className: (0, import_classnames15.default)(className, bsPrefix),
      controlId,
      ...props,
      children: [children2, /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("label", {
        htmlFor: controlId,
        children: label
      })]
    });
  });
  FloatingLabel.displayName = "FloatingLabel";
  var FloatingLabel_default = FloatingLabel;

  // node_modules/react-bootstrap/esm/Form.js
  var import_jsx_runtime23 = __toESM(require_jsx_runtime());
  var propTypes3 = {
    _ref: import_prop_types6.default.any,
    validated: import_prop_types6.default.bool,
    as: import_prop_types6.default.elementType
  };
  var Form3 = /* @__PURE__ */ React90.forwardRef(({
    className,
    validated,
    as: Component15 = "form",
    ...props
  }, ref) => /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Component15, {
    ...props,
    ref,
    className: (0, import_classnames16.default)(className, validated && "was-validated")
  }));
  Form3.displayName = "Form";
  Form3.propTypes = propTypes3;
  var Form_default = Object.assign(Form3, {
    Group: FormGroup_default,
    Control: FormControl_default,
    Floating: FormFloating_default,
    Check: FormCheck_default,
    Switch: Switch_default,
    Label: FormLabel_default,
    Text: FormText_default,
    Range: FormRange_default,
    Select: FormSelect_default,
    FloatingLabel: FloatingLabel_default
  });

  // node_modules/react-bootstrap/esm/Card.js
  var import_classnames20 = __toESM(require_classnames());
  var React95 = __toESM(require_react());

  // node_modules/react-bootstrap/esm/divWithClassName.js
  var React91 = __toESM(require_react());
  var import_classnames17 = __toESM(require_classnames());
  var import_jsx_runtime24 = __toESM(require_jsx_runtime());
  var divWithClassName_default = (className) => /* @__PURE__ */ React91.forwardRef((p, ref) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", {
    ...p,
    ref,
    className: (0, import_classnames17.default)(p.className, className)
  }));

  // node_modules/react-bootstrap/esm/CardImg.js
  var import_classnames18 = __toESM(require_classnames());
  var React92 = __toESM(require_react());
  var import_jsx_runtime25 = __toESM(require_jsx_runtime());
  var CardImg = /* @__PURE__ */ React92.forwardRef(
    ({
      bsPrefix,
      className,
      variant,
      as: Component15 = "img",
      ...props
    }, ref) => {
      const prefix2 = useBootstrapPrefix(bsPrefix, "card-img");
      return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(Component15, {
        ref,
        className: (0, import_classnames18.default)(variant ? `${prefix2}-${variant}` : prefix2, className),
        ...props
      });
    }
  );
  CardImg.displayName = "CardImg";
  var CardImg_default = CardImg;

  // node_modules/react-bootstrap/esm/CardHeader.js
  var import_classnames19 = __toESM(require_classnames());
  var React94 = __toESM(require_react());
  var import_react23 = __toESM(require_react());

  // node_modules/react-bootstrap/esm/CardHeaderContext.js
  var React93 = __toESM(require_react());
  var context = /* @__PURE__ */ React93.createContext(null);
  context.displayName = "CardHeaderContext";
  var CardHeaderContext_default = context;

  // node_modules/react-bootstrap/esm/CardHeader.js
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  var CardHeader = /* @__PURE__ */ React94.forwardRef(({
    bsPrefix,
    className,
    as: Component15 = "div",
    ...props
  }, ref) => {
    const prefix2 = useBootstrapPrefix(bsPrefix, "card-header");
    const contextValue = (0, import_react23.useMemo)(() => ({
      cardHeaderBsPrefix: prefix2
    }), [prefix2]);
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(CardHeaderContext_default.Provider, {
      value: contextValue,
      children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(Component15, {
        ref,
        ...props,
        className: (0, import_classnames19.default)(className, prefix2)
      })
    });
  });
  CardHeader.displayName = "CardHeader";
  var CardHeader_default = CardHeader;

  // node_modules/react-bootstrap/esm/Card.js
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  var DivStyledAsH5 = divWithClassName_default("h5");
  var DivStyledAsH6 = divWithClassName_default("h6");
  var CardBody = createWithBsPrefix("card-body");
  var CardTitle = createWithBsPrefix("card-title", {
    Component: DivStyledAsH5
  });
  var CardSubtitle = createWithBsPrefix("card-subtitle", {
    Component: DivStyledAsH6
  });
  var CardLink = createWithBsPrefix("card-link", {
    Component: "a"
  });
  var CardText = createWithBsPrefix("card-text", {
    Component: "p"
  });
  var CardFooter = createWithBsPrefix("card-footer");
  var CardImgOverlay = createWithBsPrefix("card-img-overlay");
  var defaultProps5 = {
    body: false
  };
  var Card = /* @__PURE__ */ React95.forwardRef(({
    bsPrefix,
    className,
    bg,
    text,
    border,
    body,
    children: children2,
    as: Component15 = "div",
    ...props
  }, ref) => {
    const prefix2 = useBootstrapPrefix(bsPrefix, "card");
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Component15, {
      ref,
      ...props,
      className: (0, import_classnames20.default)(className, prefix2, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),
      children: body ? /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(CardBody, {
        children: children2
      }) : children2
    });
  });
  Card.displayName = "Card";
  Card.defaultProps = defaultProps5;
  var Card_default = Object.assign(Card, {
    Img: CardImg_default,
    Title: CardTitle,
    Subtitle: CardSubtitle,
    Body: CardBody,
    Link: CardLink,
    Text: CardText,
    Header: CardHeader_default,
    Footer: CardFooter,
    ImgOverlay: CardImgOverlay
  });

  // node_modules/react-bootstrap/esm/ListGroup.js
  var import_classnames22 = __toESM(require_classnames());
  var React103 = __toESM(require_react());
  var import_warning4 = __toESM(require_warning2());

  // node_modules/uncontrollable/lib/esm/hook.js
  var import_react24 = __toESM(require_react());

  // node_modules/uncontrollable/lib/esm/utils.js
  var import_invariant = __toESM(require_browser());
  function defaultKey(key) {
    return "default" + key.charAt(0).toUpperCase() + key.substr(1);
  }

  // node_modules/uncontrollable/lib/esm/hook.js
  function _toPropertyKey2(arg) {
    var key = _toPrimitive2(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive2(input, hint) {
    if (typeof input !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function useUncontrolledProp(propValue, defaultValue, handler) {
    var wasPropRef = (0, import_react24.useRef)(propValue !== void 0);
    var _useState = (0, import_react24.useState)(defaultValue), stateValue = _useState[0], setState = _useState[1];
    var isProp2 = propValue !== void 0;
    var wasProp = wasPropRef.current;
    wasPropRef.current = isProp2;
    if (!isProp2 && wasProp && stateValue !== defaultValue) {
      setState(defaultValue);
    }
    return [isProp2 ? propValue : stateValue, (0, import_react24.useCallback)(function(value) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (handler)
        handler.apply(void 0, [value].concat(args));
      setState(value);
    }, [handler])];
  }
  function useUncontrolled(props, config) {
    return Object.keys(config).reduce(function(result, fieldName) {
      var _extends210;
      var _ref2 = result, defaultValue = _ref2[defaultKey(fieldName)], propsValue = _ref2[fieldName], rest = _objectWithoutPropertiesLoose5(_ref2, [defaultKey(fieldName), fieldName].map(_toPropertyKey2));
      var handlerName = config[fieldName];
      var _useUncontrolledProp = useUncontrolledProp(propsValue, defaultValue, props[handlerName]), value = _useUncontrolledProp[0], handler = _useUncontrolledProp[1];
      return _extends12({}, rest, (_extends210 = {}, _extends210[fieldName] = value, _extends210[handlerName] = handler, _extends210));
    }, props);
  }

  // node_modules/uncontrollable/lib/esm/uncontrollable.js
  var import_react25 = __toESM(require_react());

  // node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js
  function componentWillMount() {
    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
    if (state !== null && state !== void 0) {
      this.setState(state);
    }
  }
  function componentWillReceiveProps(nextProps) {
    function updater(prevState) {
      var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
      return state !== null && state !== void 0 ? state : null;
    }
    this.setState(updater.bind(this));
  }
  function componentWillUpdate(nextProps, nextState) {
    try {
      var prevProps = this.props;
      var prevState = this.state;
      this.props = nextProps;
      this.state = nextState;
      this.__reactInternalSnapshotFlag = true;
      this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
        prevProps,
        prevState
      );
    } finally {
      this.props = prevProps;
      this.state = prevState;
    }
  }
  componentWillMount.__suppressDeprecationWarning = true;
  componentWillReceiveProps.__suppressDeprecationWarning = true;
  componentWillUpdate.__suppressDeprecationWarning = true;

  // node_modules/uncontrollable/lib/esm/uncontrollable.js
  var import_invariant2 = __toESM(require_browser());

  // node_modules/dom-helpers/esm/querySelectorAll.js
  var toArray2 = Function.prototype.bind.call(Function.prototype.call, [].slice);
  function qsa(element, selector2) {
    return toArray2(element.querySelectorAll(selector2));
  }

  // node_modules/@restart/ui/esm/Nav.js
  var React101 = __toESM(require_react());
  var import_react31 = __toESM(require_react());

  // node_modules/@restart/hooks/esm/useForceUpdate.js
  var import_react26 = __toESM(require_react());
  function useForceUpdate() {
    var _useReducer = (0, import_react26.useReducer)(function(state) {
      return !state;
    }, false), dispatch = _useReducer[1];
    return dispatch;
  }

  // node_modules/@restart/hooks/esm/useMergedRefs.js
  var import_react27 = __toESM(require_react());
  var toFnRef = function toFnRef2(ref) {
    return !ref || typeof ref === "function" ? ref : function(value) {
      ref.current = value;
    };
  };
  function mergeRefs(refA, refB) {
    var a = toFnRef(refA);
    var b = toFnRef(refB);
    return function(value) {
      if (a)
        a(value);
      if (b)
        b(value);
    };
  }
  function useMergedRefs(refA, refB) {
    return (0, import_react27.useMemo)(function() {
      return mergeRefs(refA, refB);
    }, [refA, refB]);
  }
  var useMergedRefs_default = useMergedRefs;

  // node_modules/@restart/ui/esm/NavContext.js
  var React97 = __toESM(require_react());
  var NavContext = /* @__PURE__ */ React97.createContext(null);
  NavContext.displayName = "NavContext";
  var NavContext_default = NavContext;

  // node_modules/@restart/ui/esm/SelectableContext.js
  var React98 = __toESM(require_react());
  var SelectableContext = /* @__PURE__ */ React98.createContext(null);
  var makeEventKey = (eventKey, href = null) => {
    if (eventKey != null)
      return String(eventKey);
    return href || null;
  };
  var SelectableContext_default = SelectableContext;

  // node_modules/@restart/ui/esm/TabContext.js
  var React99 = __toESM(require_react());
  var TabContext = /* @__PURE__ */ React99.createContext(null);
  var TabContext_default = TabContext;

  // node_modules/@restart/ui/esm/DataKey.js
  var ATTRIBUTE_PREFIX = `data-rr-ui-`;
  var PROPERTY_PREFIX = `rrUi`;
  function dataAttr(property) {
    return `${ATTRIBUTE_PREFIX}${property}`;
  }
  function dataProp(property) {
    return `${PROPERTY_PREFIX}${property}`;
  }

  // node_modules/@restart/ui/esm/NavItem.js
  var React100 = __toESM(require_react());
  var import_react30 = __toESM(require_react());

  // node_modules/@restart/hooks/esm/useEventCallback.js
  var import_react29 = __toESM(require_react());

  // node_modules/@restart/hooks/esm/useCommittedRef.js
  var import_react28 = __toESM(require_react());
  function useCommittedRef(value) {
    var ref = (0, import_react28.useRef)(value);
    (0, import_react28.useEffect)(function() {
      ref.current = value;
    }, [value]);
    return ref;
  }
  var useCommittedRef_default = useCommittedRef;

  // node_modules/@restart/hooks/esm/useEventCallback.js
  function useEventCallback(fn) {
    var ref = useCommittedRef_default(fn);
    return (0, import_react29.useCallback)(function() {
      return ref.current && ref.current.apply(ref, arguments);
    }, [ref]);
  }

  // node_modules/@restart/ui/esm/NavItem.js
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  var _excluded33 = ["as", "active", "eventKey"];
  function _objectWithoutPropertiesLoose29(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function useNavItem({
    key,
    onClick,
    active,
    id,
    role,
    disabled
  }) {
    const parentOnSelect = (0, import_react30.useContext)(SelectableContext_default);
    const navContext = (0, import_react30.useContext)(NavContext_default);
    const tabContext = (0, import_react30.useContext)(TabContext_default);
    let isActive = active;
    const props = {
      role
    };
    if (navContext) {
      if (!role && navContext.role === "tablist")
        props.role = "tab";
      const contextControllerId = navContext.getControllerId(key != null ? key : null);
      const contextControlledId = navContext.getControlledId(key != null ? key : null);
      props[dataAttr("event-key")] = key;
      props.id = contextControllerId || id;
      isActive = active == null && key != null ? navContext.activeKey === key : active;
      if (isActive || !(tabContext != null && tabContext.unmountOnExit) && !(tabContext != null && tabContext.mountOnEnter))
        props["aria-controls"] = contextControlledId;
    }
    if (props.role === "tab") {
      props["aria-selected"] = isActive;
      if (!isActive) {
        props.tabIndex = -1;
      }
      if (disabled) {
        props.tabIndex = -1;
        props["aria-disabled"] = true;
      }
    }
    props.onClick = useEventCallback((e) => {
      if (disabled)
        return;
      onClick == null ? void 0 : onClick(e);
      if (key == null) {
        return;
      }
      if (parentOnSelect && !e.isPropagationStopped()) {
        parentOnSelect(key, e);
      }
    });
    return [props, {
      isActive
    }];
  }
  var NavItem2 = /* @__PURE__ */ React100.forwardRef((_ref2, ref) => {
    let {
      as: Component15 = Button_default,
      active,
      eventKey
    } = _ref2, options = _objectWithoutPropertiesLoose29(_ref2, _excluded33);
    const [props, meta] = useNavItem(Object.assign({
      key: makeEventKey(eventKey, options.href),
      active
    }, options));
    props[dataAttr("active")] = meta.isActive;
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Component15, Object.assign({}, options, props, {
      ref
    }));
  });
  NavItem2.displayName = "NavItem";
  var NavItem_default = NavItem2;

  // node_modules/@restart/ui/esm/Nav.js
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  var _excluded34 = ["as", "onSelect", "activeKey", "role", "onKeyDown"];
  function _objectWithoutPropertiesLoose30(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  var noop2 = () => {
  };
  var EVENT_KEY_ATTR = dataAttr("event-key");
  var Nav = /* @__PURE__ */ React101.forwardRef((_ref2, ref) => {
    let {
      as: Component15 = "div",
      onSelect,
      activeKey,
      role,
      onKeyDown: onKeyDown2
    } = _ref2, props = _objectWithoutPropertiesLoose30(_ref2, _excluded34);
    const forceUpdate = useForceUpdate();
    const needsRefocusRef = (0, import_react31.useRef)(false);
    const parentOnSelect = (0, import_react31.useContext)(SelectableContext_default);
    const tabContext = (0, import_react31.useContext)(TabContext_default);
    let getControlledId, getControllerId;
    if (tabContext) {
      role = role || "tablist";
      activeKey = tabContext.activeKey;
      getControlledId = tabContext.getControlledId;
      getControllerId = tabContext.getControllerId;
    }
    const listNode = (0, import_react31.useRef)(null);
    const getNextActiveTab = (offset2) => {
      const currentListNode = listNode.current;
      if (!currentListNode)
        return null;
      const items = qsa(currentListNode, `[${EVENT_KEY_ATTR}]:not([aria-disabled=true])`);
      const activeChild = currentListNode.querySelector("[aria-selected=true]");
      if (!activeChild || activeChild !== document.activeElement)
        return null;
      const index2 = items.indexOf(activeChild);
      if (index2 === -1)
        return null;
      let nextIndex2 = index2 + offset2;
      if (nextIndex2 >= items.length)
        nextIndex2 = 0;
      if (nextIndex2 < 0)
        nextIndex2 = items.length - 1;
      return items[nextIndex2];
    };
    const handleSelect = (key, event) => {
      if (key == null)
        return;
      onSelect == null ? void 0 : onSelect(key, event);
      parentOnSelect == null ? void 0 : parentOnSelect(key, event);
    };
    const handleKeyDown2 = (event) => {
      onKeyDown2 == null ? void 0 : onKeyDown2(event);
      if (!tabContext) {
        return;
      }
      let nextActiveChild;
      switch (event.key) {
        case "ArrowLeft":
        case "ArrowUp":
          nextActiveChild = getNextActiveTab(-1);
          break;
        case "ArrowRight":
        case "ArrowDown":
          nextActiveChild = getNextActiveTab(1);
          break;
        default:
          return;
      }
      if (!nextActiveChild)
        return;
      event.preventDefault();
      handleSelect(nextActiveChild.dataset[dataProp("EventKey")] || null, event);
      needsRefocusRef.current = true;
      forceUpdate();
    };
    (0, import_react31.useEffect)(() => {
      if (listNode.current && needsRefocusRef.current) {
        const activeChild = listNode.current.querySelector(`[${EVENT_KEY_ATTR}][aria-selected=true]`);
        activeChild == null ? void 0 : activeChild.focus();
      }
      needsRefocusRef.current = false;
    });
    const mergedRef = useMergedRefs_default(ref, listNode);
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(SelectableContext_default.Provider, {
      value: handleSelect,
      children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(NavContext_default.Provider, {
        value: {
          role,
          activeKey: makeEventKey(activeKey),
          getControlledId: getControlledId || noop2,
          getControllerId: getControllerId || noop2
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Component15, Object.assign({}, props, {
          onKeyDown: handleKeyDown2,
          ref: mergedRef,
          role
        }))
      })
    });
  });
  Nav.displayName = "Nav";
  var Nav_default = Object.assign(Nav, {
    Item: NavItem_default
  });

  // node_modules/react-bootstrap/esm/ListGroupItem.js
  var import_classnames21 = __toESM(require_classnames());
  var React102 = __toESM(require_react());
  var import_warning3 = __toESM(require_warning2());
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  var ListGroupItem = /* @__PURE__ */ React102.forwardRef(({
    bsPrefix,
    active,
    disabled,
    eventKey,
    className,
    variant,
    action,
    as,
    ...props
  }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "list-group-item");
    const [navItemProps, meta] = useNavItem({
      key: makeEventKey(eventKey, props.href),
      active,
      ...props
    });
    const handleClick = useEventCallback((event) => {
      if (disabled) {
        event.preventDefault();
        event.stopPropagation();
        return;
      }
      navItemProps.onClick(event);
    });
    if (disabled && props.tabIndex === void 0) {
      props.tabIndex = -1;
      props["aria-disabled"] = true;
    }
    const Component15 = as || (action ? props.href ? "a" : "button" : "div");
    true ? (0, import_warning3.default)(as || !(!action && props.href), "`action=false` and `href` should not be used together.") : void 0;
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Component15, {
      ref,
      ...props,
      ...navItemProps,
      onClick: handleClick,
      className: (0, import_classnames21.default)(className, bsPrefix, meta.isActive && "active", disabled && "disabled", variant && `${bsPrefix}-${variant}`, action && `${bsPrefix}-action`)
    });
  });
  ListGroupItem.displayName = "ListGroupItem";
  var ListGroupItem_default = ListGroupItem;

  // node_modules/react-bootstrap/esm/ListGroup.js
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  var ListGroup = /* @__PURE__ */ React103.forwardRef((props, ref) => {
    const {
      className,
      bsPrefix: initialBsPrefix,
      variant,
      horizontal,
      numbered,
      as = "div",
      ...controlledProps
    } = useUncontrolled(props, {
      activeKey: "onSelect"
    });
    const bsPrefix = useBootstrapPrefix(initialBsPrefix, "list-group");
    let horizontalVariant;
    if (horizontal) {
      horizontalVariant = horizontal === true ? "horizontal" : `horizontal-${horizontal}`;
    }
    true ? (0, import_warning4.default)(!(horizontal && variant === "flush"), '`variant="flush"` and `horizontal` should not be used together.') : void 0;
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(Nav_default, {
      ref,
      ...controlledProps,
      as,
      className: (0, import_classnames22.default)(className, bsPrefix, variant && `${bsPrefix}-${variant}`, horizontalVariant && `${bsPrefix}-${horizontalVariant}`, numbered && `${bsPrefix}-numbered`)
    });
  });
  ListGroup.displayName = "ListGroup";
  var ListGroup_default = Object.assign(ListGroup, {
    Item: ListGroupItem_default
  });

  // node_modules/@rjsf/bootstrap-4/dist/bootstrap-4.esm.js
  var import_IoIosRemove = __toESM(require_IoIosRemove());
  var import_AiOutlineArrowUp = __toESM(require_AiOutlineArrowUp());
  var import_AiOutlineArrowDown = __toESM(require_AiOutlineArrowDown());

  // node_modules/react-bootstrap/esm/InputGroup.js
  var import_classnames23 = __toESM(require_classnames());
  var React105 = __toESM(require_react());
  var import_react32 = __toESM(require_react());

  // node_modules/react-bootstrap/esm/InputGroupContext.js
  var React104 = __toESM(require_react());
  var context2 = /* @__PURE__ */ React104.createContext(null);
  context2.displayName = "InputGroupContext";
  var InputGroupContext_default = context2;

  // node_modules/react-bootstrap/esm/InputGroup.js
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  var InputGroupText = createWithBsPrefix("input-group-text", {
    Component: "span"
  });
  var InputGroupCheckbox = (props) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(InputGroupText, {
    children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(FormCheckInput_default, {
      type: "checkbox",
      ...props
    })
  });
  var InputGroupRadio = (props) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(InputGroupText, {
    children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(FormCheckInput_default, {
      type: "radio",
      ...props
    })
  });
  var InputGroup = /* @__PURE__ */ React105.forwardRef(({
    bsPrefix,
    size,
    hasValidation,
    className,
    as: Component15 = "div",
    ...props
  }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "input-group");
    const contextValue = (0, import_react32.useMemo)(() => ({}), []);
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(InputGroupContext_default.Provider, {
      value: contextValue,
      children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(Component15, {
        ref,
        ...props,
        className: (0, import_classnames23.default)(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && "has-validation")
      })
    });
  });
  InputGroup.displayName = "InputGroup";
  var InputGroup_default = Object.assign(InputGroup, {
    Text: InputGroupText,
    Radio: InputGroupRadio,
    Checkbox: InputGroupCheckbox
  });

  // node_modules/@rjsf/bootstrap-4/dist/bootstrap-4.esm.js
  function _extends44() {
    _extends44 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends44.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose31(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  var _excluded$2 = ["uiSchema"];
  var AddButton2 = function AddButton3(_ref2) {
    var props = _objectWithoutPropertiesLoose31(_ref2, _excluded$2);
    return import_react33.default.createElement(Button_default2, _extends44({}, props, {
      style: {
        width: "100%"
      },
      className: "ml-1 " + props.className,
      title: "Add Item"
    }), import_react33.default.createElement(import_BsPlus.BsPlus, null));
  };
  var ArrayFieldItemTemplate2 = function ArrayFieldItemTemplate3(props) {
    var children2 = props.children, disabled = props.disabled, hasToolbar = props.hasToolbar, hasMoveDown = props.hasMoveDown, hasMoveUp = props.hasMoveUp, hasRemove = props.hasRemove, index2 = props.index, onDropIndexClick = props.onDropIndexClick, onReorderClick = props.onReorderClick, readonly = props.readonly, registry = props.registry, uiSchema2 = props.uiSchema;
    var _registry$templates$B = registry.templates.ButtonTemplates, MoveDownButton3 = _registry$templates$B.MoveDownButton, MoveUpButton3 = _registry$templates$B.MoveUpButton, RemoveButton3 = _registry$templates$B.RemoveButton;
    var btnStyle = {
      flex: 1,
      paddingLeft: 6,
      paddingRight: 6,
      fontWeight: "bold"
    };
    return import_react33.default.createElement("div", null, import_react33.default.createElement(Row_default, {
      className: "mb-2  d-flex align-items-center"
    }, import_react33.default.createElement(Col_default, {
      xs: "9",
      lg: "9"
    }, children2), import_react33.default.createElement(Col_default, {
      xs: "3",
      lg: "3",
      className: "py-4"
    }, hasToolbar && import_react33.default.createElement("div", {
      className: "d-flex flex-row"
    }, (hasMoveUp || hasMoveDown) && import_react33.default.createElement("div", {
      className: "m-0 p-0"
    }, import_react33.default.createElement(MoveUpButton3, {
      className: "array-item-move-up",
      style: btnStyle,
      disabled: disabled || readonly || !hasMoveUp,
      onClick: onReorderClick(index2, index2 - 1),
      uiSchema: uiSchema2
    })), (hasMoveUp || hasMoveDown) && import_react33.default.createElement("div", {
      className: "m-0 p-0"
    }, import_react33.default.createElement(MoveDownButton3, {
      style: btnStyle,
      disabled: disabled || readonly || !hasMoveDown,
      onClick: onReorderClick(index2, index2 + 1),
      uiSchema: uiSchema2
    })), hasRemove && import_react33.default.createElement("div", {
      className: "m-0 p-0"
    }, import_react33.default.createElement(RemoveButton3, {
      style: btnStyle,
      disabled: disabled || readonly,
      onClick: onDropIndexClick(index2),
      uiSchema: uiSchema2
    }))))));
  };
  var _excluded$1 = ["key"];
  var ArrayFieldTemplate2 = function ArrayFieldTemplate3(props) {
    var canAdd = props.canAdd, disabled = props.disabled, idSchema = props.idSchema, uiSchema2 = props.uiSchema, items = props.items, onAddClick = props.onAddClick, readonly = props.readonly, registry = props.registry, required = props.required, schema = props.schema, title = props.title;
    var uiOptions = getUiOptions(uiSchema2);
    var ArrayFieldDescriptionTemplate2 = getTemplate("ArrayFieldDescriptionTemplate", registry, uiOptions);
    var ArrayFieldItemTemplate4 = getTemplate("ArrayFieldItemTemplate", registry, uiOptions);
    var ArrayFieldTitleTemplate2 = getTemplate("ArrayFieldTitleTemplate", registry, uiOptions);
    var AddButton4 = registry.templates.ButtonTemplates.AddButton;
    return import_react33.default.createElement("div", null, import_react33.default.createElement(Row_default, {
      className: "p-0 m-0"
    }, import_react33.default.createElement(Col_default, {
      className: "p-0 m-0"
    }, import_react33.default.createElement(ArrayFieldTitleTemplate2, {
      idSchema,
      title: uiOptions.title || title,
      schema,
      uiSchema: uiSchema2,
      required,
      registry
    }), import_react33.default.createElement(ArrayFieldDescriptionTemplate2, {
      idSchema,
      description: uiOptions.description || schema.description,
      schema,
      uiSchema: uiSchema2,
      registry
    }), import_react33.default.createElement(Container_default, {
      fluid: true,
      key: "array-item-list-" + idSchema.$id,
      className: "p-0 m-0"
    }, items && items.map(function(_ref2) {
      var key = _ref2.key, itemProps = _objectWithoutPropertiesLoose31(_ref2, _excluded$1);
      return import_react33.default.createElement(ArrayFieldItemTemplate4, _extends44({
        key
      }, itemProps));
    }), canAdd && import_react33.default.createElement(Container_default, {
      className: ""
    }, import_react33.default.createElement(Row_default, {
      className: "mt-2"
    }, import_react33.default.createElement(Col_default, {
      xs: 9
    }), import_react33.default.createElement(Col_default, {
      xs: 3,
      className: "py-4 col-lg-3 col-3"
    }, import_react33.default.createElement(AddButton4, {
      className: "array-item-add",
      onClick: onAddClick,
      disabled: disabled || readonly,
      uiSchema: uiSchema2
    }))))))));
  };
  var BaseInputTemplate2 = function BaseInputTemplate3(_ref2) {
    var id = _ref2.id, placeholder = _ref2.placeholder, required = _ref2.required, readonly = _ref2.readonly, disabled = _ref2.disabled, type = _ref2.type, value = _ref2.value, onChange2 = _ref2.onChange, onBlur5 = _ref2.onBlur, onFocus5 = _ref2.onFocus, autofocus = _ref2.autofocus, options = _ref2.options, schema = _ref2.schema, _ref$rawErrors = _ref2.rawErrors, rawErrors = _ref$rawErrors === void 0 ? [] : _ref$rawErrors, children2 = _ref2.children, extraProps = _ref2.extraProps;
    var inputProps = _extends44({}, extraProps, getInputProps(schema, type, options));
    var _onChange = function _onChange2(_ref22) {
      var value2 = _ref22.target.value;
      return onChange2(value2 === "" ? options.emptyValue : value2);
    };
    var _onBlur = function _onBlur2(_ref3) {
      var value2 = _ref3.target.value;
      return onBlur5(id, value2);
    };
    var _onFocus = function _onFocus2(_ref4) {
      var value2 = _ref4.target.value;
      return onFocus5(id, value2);
    };
    return import_react33.default.createElement(import_react33.default.Fragment, null, import_react33.default.createElement(Form_default.Control, _extends44({
      id,
      name: id,
      placeholder,
      autoFocus: autofocus,
      required,
      disabled,
      readOnly: readonly,
      className: rawErrors.length > 0 ? "is-invalid" : "",
      list: schema.examples ? "examples_" + id : void 0
    }, inputProps, {
      value: value || value === 0 ? value : "",
      onChange: _onChange,
      onBlur: _onBlur,
      onFocus: _onFocus
    })), children2, schema.examples ? import_react33.default.createElement("datalist", {
      id: "examples_" + id
    }, schema.examples.concat(schema["default"] ? [schema["default"]] : []).map(function(example) {
      return import_react33.default.createElement("option", {
        key: example,
        value: example
      });
    })) : null);
  };
  var DescriptionField2 = function DescriptionField3(_ref2) {
    var id = _ref2.id, description = _ref2.description;
    if (description) {
      return import_react33.default.createElement("div", null, import_react33.default.createElement("div", {
        id,
        className: "mb-3"
      }, description));
    }
    return null;
  };
  var ErrorList2 = function ErrorList3(_ref2) {
    var errors = _ref2.errors;
    return import_react33.default.createElement(Card_default, {
      border: "danger",
      className: "mb-4"
    }, import_react33.default.createElement(Card_default.Header, {
      className: "alert-danger"
    }, "Errors"), import_react33.default.createElement(Card_default.Body, {
      className: "p-0"
    }, import_react33.default.createElement(ListGroup_default, null, errors.map(function(error, i) {
      return import_react33.default.createElement(ListGroup_default.Item, {
        key: i,
        className: "border-0"
      }, import_react33.default.createElement("span", null, error.stack));
    }))));
  };
  var _excluded35 = ["icon", "iconType", "className", "uiSchema"];
  var IconButton2 = function IconButton3(props) {
    var icon = props.icon, iconType = props.iconType, otherProps = _objectWithoutPropertiesLoose31(props, _excluded35);
    return import_react33.default.createElement(Button_default2, _extends44({
      block: iconType === "block"
    }, otherProps, {
      variant: props.variant || "light",
      size: "sm"
    }), icon);
  };
  function MoveDownButton2(props) {
    return import_react33.default.createElement(IconButton2, _extends44({
      title: "Move down"
    }, props, {
      icon: import_react33.default.createElement(import_AiOutlineArrowDown.AiOutlineArrowDown, null)
    }));
  }
  function MoveUpButton2(props) {
    return import_react33.default.createElement(IconButton2, _extends44({
      title: "Move up"
    }, props, {
      icon: import_react33.default.createElement(import_AiOutlineArrowUp.AiOutlineArrowUp, null)
    }));
  }
  function RemoveButton2(props) {
    return import_react33.default.createElement(IconButton2, _extends44({
      title: "Remove"
    }, props, {
      variant: "danger",
      icon: import_react33.default.createElement(import_IoIosRemove.IoIosRemove, null)
    }));
  }
  function FieldErrorTemplate2(props) {
    var _props$errors = props.errors, errors = _props$errors === void 0 ? [] : _props$errors, idSchema = props.idSchema;
    if (errors.length === 0) {
      return null;
    }
    var id = idSchema.$id + "__error";
    return import_react33.default.createElement(ListGroup_default, {
      as: "ul",
      id
    }, errors.map(function(error, i) {
      return import_react33.default.createElement(ListGroup_default.Item, {
        as: "li",
        key: i,
        className: "border-0 m-0 p-0"
      }, import_react33.default.createElement("small", {
        className: "m-0 text-danger"
      }, error));
    }));
  }
  function FieldHelpTemplate2(props) {
    var idSchema = props.idSchema, help = props.help, hasErrors = props.hasErrors;
    if (!help) {
      return null;
    }
    var id = idSchema.$id + "__help";
    return import_react33.default.createElement(Form_default.Text, {
      className: hasErrors ? "text-danger" : "text-muted",
      id
    }, help);
  }
  var FieldTemplate2 = function FieldTemplate3(_ref2) {
    var id = _ref2.id, children2 = _ref2.children, displayLabel = _ref2.displayLabel, _ref$rawErrors = _ref2.rawErrors, rawErrors = _ref$rawErrors === void 0 ? [] : _ref$rawErrors, errors = _ref2.errors, help = _ref2.help, rawDescription = _ref2.rawDescription, classNames24 = _ref2.classNames, disabled = _ref2.disabled, label = _ref2.label, hidden = _ref2.hidden, onDropPropertyClick = _ref2.onDropPropertyClick, onKeyChange = _ref2.onKeyChange, readonly = _ref2.readonly, required = _ref2.required, schema = _ref2.schema, uiSchema2 = _ref2.uiSchema, registry = _ref2.registry;
    var uiOptions = getUiOptions(uiSchema2);
    var WrapIfAdditionalTemplate4 = getTemplate("WrapIfAdditionalTemplate", registry, uiOptions);
    if (hidden) {
      return import_react33.default.createElement("div", {
        className: "hidden"
      }, children2);
    }
    return import_react33.default.createElement(WrapIfAdditionalTemplate4, {
      classNames: classNames24,
      disabled,
      id,
      label,
      onDropPropertyClick,
      onKeyChange,
      readonly,
      required,
      schema,
      uiSchema: uiSchema2,
      registry
    }, import_react33.default.createElement(Form_default.Group, null, displayLabel && import_react33.default.createElement(Form_default.Label, {
      htmlFor: id,
      className: rawErrors.length > 0 ? "text-danger" : ""
    }, label, required ? "*" : null), children2, displayLabel && rawDescription && import_react33.default.createElement(Form_default.Text, {
      className: rawErrors.length > 0 ? "text-danger" : "text-muted"
    }, rawDescription), errors, help));
  };
  var ObjectFieldTemplate2 = function ObjectFieldTemplate3(_ref2) {
    var description = _ref2.description, title = _ref2.title, properties3 = _ref2.properties, required = _ref2.required, uiSchema2 = _ref2.uiSchema, idSchema = _ref2.idSchema, schema = _ref2.schema, formData = _ref2.formData, onAddClick = _ref2.onAddClick, disabled = _ref2.disabled, readonly = _ref2.readonly, registry = _ref2.registry;
    var uiOptions = getUiOptions(uiSchema2);
    var TitleFieldTemplate = getTemplate("TitleFieldTemplate", registry, uiOptions);
    var DescriptionFieldTemplate = getTemplate("DescriptionFieldTemplate", registry, uiOptions);
    var AddButton4 = registry.templates.ButtonTemplates.AddButton;
    return import_react33.default.createElement(import_react33.default.Fragment, null, (uiOptions.title || title) && import_react33.default.createElement(TitleFieldTemplate, {
      id: idSchema.$id + "-title",
      title: uiOptions.title || title,
      required,
      schema,
      uiSchema: uiSchema2,
      registry
    }), (uiOptions.description || description) && import_react33.default.createElement(DescriptionFieldTemplate, {
      id: idSchema.$id + "-description",
      description: uiOptions.description || description,
      schema,
      uiSchema: uiSchema2,
      registry
    }), import_react33.default.createElement(Container_default, {
      fluid: true,
      className: "p-0"
    }, properties3.map(function(element, index2) {
      return import_react33.default.createElement(Row_default, {
        key: index2,
        style: {
          marginBottom: "10px"
        },
        className: element.hidden ? "d-none" : void 0
      }, import_react33.default.createElement(Col_default, {
        xs: 12
      }, " ", element.content));
    }), canExpand(schema, uiSchema2, formData) ? import_react33.default.createElement(Row_default, null, import_react33.default.createElement(Col_default, {
      xs: {
        offset: 9,
        span: 3
      },
      className: "py-4"
    }, import_react33.default.createElement(AddButton4, {
      onClick: onAddClick(schema),
      disabled: disabled || readonly,
      className: "object-property-expand",
      uiSchema: uiSchema2
    }))) : null));
  };
  var SubmitButton2 = function SubmitButton3(props) {
    var _getSubmitButtonOptio = getSubmitButtonOptions(props.uiSchema), submitText = _getSubmitButtonOptio.submitText, norender = _getSubmitButtonOptio.norender, submitButtonProps = _getSubmitButtonOptio.props;
    if (norender) {
      return null;
    }
    return import_react33.default.createElement("div", null, import_react33.default.createElement(Button_default2, _extends44({
      variant: "primary",
      type: "submit"
    }, submitButtonProps), submitText));
  };
  var TitleField2 = function TitleField3(_ref2) {
    var id = _ref2.id, title = _ref2.title, uiSchema2 = _ref2.uiSchema;
    return import_react33.default.createElement(import_react33.default.Fragment, null, import_react33.default.createElement("div", {
      id,
      className: "my-1"
    }, import_react33.default.createElement("h5", null, uiSchema2 && uiSchema2["ui:title"] || title), import_react33.default.createElement("hr", {
      className: "border-0 bg-secondary",
      style: {
        height: "1px"
      }
    })));
  };
  var WrapIfAdditionalTemplate2 = function WrapIfAdditionalTemplate3(_ref2) {
    var classNames24 = _ref2.classNames, children2 = _ref2.children, disabled = _ref2.disabled, id = _ref2.id, label = _ref2.label, onDropPropertyClick = _ref2.onDropPropertyClick, onKeyChange = _ref2.onKeyChange, readonly = _ref2.readonly, required = _ref2.required, schema = _ref2.schema, uiSchema2 = _ref2.uiSchema, registry = _ref2.registry;
    var RemoveButton3 = registry.templates.ButtonTemplates.RemoveButton;
    var keyLabel = label + " Key";
    var additional = ADDITIONAL_PROPERTY_FLAG in schema;
    if (!additional) {
      return import_react33.default.createElement("div", {
        className: classNames24
      }, children2);
    }
    var handleBlur = function handleBlur2(_ref22) {
      var target = _ref22.target;
      return onKeyChange(target.value);
    };
    var keyId = id + "-key";
    return import_react33.default.createElement(Row_default, {
      className: classNames24,
      key: keyId
    }, import_react33.default.createElement(Col_default, {
      xs: 5
    }, import_react33.default.createElement(Form_default.Group, null, import_react33.default.createElement(Form_default.Label, {
      htmlFor: keyId
    }, keyLabel), import_react33.default.createElement(Form_default.Control, {
      required,
      defaultValue: label,
      disabled: disabled || readonly,
      id: keyId,
      name: keyId,
      onBlur: !readonly ? handleBlur : void 0,
      type: "text"
    }))), import_react33.default.createElement(Col_default, {
      xs: 5
    }, children2), import_react33.default.createElement(Col_default, {
      xs: 2,
      className: "py-4"
    }, import_react33.default.createElement(RemoveButton3, {
      iconType: "block",
      className: "w-100",
      disabled: disabled || readonly,
      onClick: onDropPropertyClick(label),
      uiSchema: uiSchema2
    })));
  };
  var Templates = {
    ArrayFieldItemTemplate: ArrayFieldItemTemplate2,
    ArrayFieldTemplate: ArrayFieldTemplate2,
    BaseInputTemplate: BaseInputTemplate2,
    ButtonTemplates: {
      AddButton: AddButton2,
      MoveDownButton: MoveDownButton2,
      MoveUpButton: MoveUpButton2,
      RemoveButton: RemoveButton2,
      SubmitButton: SubmitButton2
    },
    DescriptionFieldTemplate: DescriptionField2,
    ErrorListTemplate: ErrorList2,
    FieldErrorTemplate: FieldErrorTemplate2,
    FieldHelpTemplate: FieldHelpTemplate2,
    FieldTemplate: FieldTemplate2,
    ObjectFieldTemplate: ObjectFieldTemplate2,
    TitleFieldTemplate: TitleField2,
    WrapIfAdditionalTemplate: WrapIfAdditionalTemplate2
  };
  var CheckboxWidget2 = function CheckboxWidget3(props) {
    var id = props.id, value = props.value, required = props.required, disabled = props.disabled, readonly = props.readonly, label = props.label, schema = props.schema, autofocus = props.autofocus, onChange2 = props.onChange, onBlur5 = props.onBlur, onFocus5 = props.onFocus;
    var _onChange = function _onChange2(_ref2) {
      var checked = _ref2.target.checked;
      return onChange2(checked);
    };
    var _onBlur = function _onBlur2(_ref2) {
      var checked = _ref2.target.checked;
      return onBlur5(id, checked);
    };
    var _onFocus = function _onFocus2(_ref3) {
      var checked = _ref3.target.checked;
      return onFocus5(id, checked);
    };
    var desc = label || schema.description;
    return import_react33.default.createElement(Form_default.Group, {
      className: "checkbox " + (disabled || readonly ? "disabled" : "")
    }, import_react33.default.createElement(Form_default.Check, {
      id,
      name: id,
      label: desc,
      checked: typeof value === "undefined" ? false : value,
      required,
      disabled: disabled || readonly,
      autoFocus: autofocus,
      onChange: _onChange,
      type: "checkbox",
      onBlur: _onBlur,
      onFocus: _onFocus
    }));
  };
  var selectValue2 = function selectValue3(value, selected, all) {
    var at = all.indexOf(value);
    var updated = selected.slice(0, at).concat(value, selected.slice(at));
    return updated.sort(function(a, b) {
      return all.indexOf(a) > all.indexOf(b);
    });
  };
  var deselectValue2 = function deselectValue3(value, selected) {
    return selected.filter(function(v) {
      return v !== value;
    });
  };
  var CheckboxesWidget2 = function CheckboxesWidget3(_ref2) {
    var id = _ref2.id, disabled = _ref2.disabled, options = _ref2.options, value = _ref2.value, autofocus = _ref2.autofocus, readonly = _ref2.readonly, required = _ref2.required, onChange2 = _ref2.onChange, onBlur5 = _ref2.onBlur, onFocus5 = _ref2.onFocus;
    var enumOptions = options.enumOptions, enumDisabled = options.enumDisabled, inline = options.inline;
    var _onChange = function _onChange2(option) {
      return function(_ref22) {
        var checked = _ref22.target.checked;
        var all = enumOptions.map(function(_ref3) {
          var value2 = _ref3.value;
          return value2;
        });
        if (checked) {
          onChange2(selectValue2(option.value, value, all));
        } else {
          onChange2(deselectValue2(option.value, value));
        }
      };
    };
    var _onBlur = function _onBlur2(_ref4) {
      var value2 = _ref4.target.value;
      return onBlur5(id, value2);
    };
    var _onFocus = function _onFocus2(_ref5) {
      var value2 = _ref5.target.value;
      return onFocus5(id, value2);
    };
    return import_react33.default.createElement(Form_default.Group, null, Array.isArray(enumOptions) && enumOptions.map(function(option, index2) {
      var checked = value.indexOf(option.value) !== -1;
      var itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;
      return import_react33.default.createElement(Form_default.Check, {
        key: option.value,
        inline,
        custom: true,
        required,
        checked,
        className: "bg-transparent border-0",
        type: "checkbox",
        id: id + "-" + option.value,
        name: id,
        label: option.label,
        autoFocus: autofocus && index2 === 0,
        onChange: _onChange(option),
        onBlur: _onBlur,
        onFocus: _onFocus,
        disabled: disabled || itemDisabled || readonly
      });
    }));
  };
  var RadioWidget2 = function RadioWidget3(_ref2) {
    var id = _ref2.id, schema = _ref2.schema, options = _ref2.options, value = _ref2.value, required = _ref2.required, disabled = _ref2.disabled, readonly = _ref2.readonly, onChange2 = _ref2.onChange, onBlur5 = _ref2.onBlur, onFocus5 = _ref2.onFocus;
    var enumOptions = options.enumOptions, enumDisabled = options.enumDisabled;
    var _onChange = function _onChange2(_ref22) {
      var value2 = _ref22.target.value;
      return onChange2(schema.type == "boolean" ? value2 !== "false" : value2);
    };
    var _onBlur = function _onBlur2(_ref3) {
      var value2 = _ref3.target.value;
      return onBlur5(id, value2);
    };
    var _onFocus = function _onFocus2(_ref4) {
      var value2 = _ref4.target.value;
      return onFocus5(id, value2);
    };
    var inline = Boolean(options && options.inline);
    return import_react33.default.createElement(Form_default.Group, {
      className: "mb-0"
    }, Array.isArray(enumOptions) && enumOptions.map(function(option) {
      var itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;
      var checked = option.value == value;
      var radio = import_react33.default.createElement(Form_default.Check, {
        inline,
        label: option.label,
        id: id + "-" + option.value,
        key: option.value,
        name: id,
        type: "radio",
        disabled: disabled || itemDisabled || readonly,
        checked,
        required,
        value: option.value,
        onChange: _onChange,
        onBlur: _onBlur,
        onFocus: _onFocus
      });
      return radio;
    }));
  };
  var RangeWidget2 = function RangeWidget3(props) {
    var value = props.value, label = props.label, options = props.options, registry = props.registry;
    var BaseInputTemplate4 = getTemplate("BaseInputTemplate", registry, options);
    return import_react33.default.createElement(BaseInputTemplate4, _extends44({}, props, {
      extraProps: label
    }), import_react33.default.createElement("span", {
      className: "range-view"
    }, value));
  };
  var SelectWidget2 = function SelectWidget3(_ref2) {
    var schema = _ref2.schema, id = _ref2.id, options = _ref2.options, required = _ref2.required, disabled = _ref2.disabled, readonly = _ref2.readonly, value = _ref2.value, multiple = _ref2.multiple, autofocus = _ref2.autofocus, _onChange = _ref2.onChange, onBlur5 = _ref2.onBlur, onFocus5 = _ref2.onFocus, placeholder = _ref2.placeholder, _ref$rawErrors = _ref2.rawErrors, rawErrors = _ref$rawErrors === void 0 ? [] : _ref$rawErrors;
    var enumOptions = options.enumOptions, enumDisabled = options.enumDisabled;
    var emptyValue = multiple ? [] : "";
    function getValue3(event, multiple2) {
      if (multiple2) {
        return [].slice.call(event.target.options).filter(function(o) {
          return o.selected;
        }).map(function(o) {
          return o.value;
        });
      } else {
        return event.target.value;
      }
    }
    return import_react33.default.createElement(Form_default.Control, {
      as: "select",
      bsPrefix: "custom-select",
      id,
      name: id,
      value: typeof value === "undefined" ? emptyValue : value,
      required,
      multiple,
      disabled: disabled || readonly,
      autoFocus: autofocus,
      className: rawErrors.length > 0 ? "is-invalid" : "",
      onBlur: onBlur5 && function(event) {
        var newValue = getValue3(event, multiple);
        onBlur5(id, processSelectValue(schema, newValue, options));
      },
      onFocus: onFocus5 && function(event) {
        var newValue = getValue3(event, multiple);
        onFocus5(id, processSelectValue(schema, newValue, options));
      },
      onChange: function onChange2(event) {
        var newValue = getValue3(event, multiple);
        _onChange(processSelectValue(schema, newValue, options));
      }
    }, !multiple && schema["default"] === void 0 && import_react33.default.createElement("option", {
      value: ""
    }, placeholder), enumOptions.map(function(_ref22, i) {
      var value2 = _ref22.value, label = _ref22.label;
      var disabled2 = Array.isArray(enumDisabled) && enumDisabled.indexOf(value2) != -1;
      return import_react33.default.createElement("option", {
        key: i,
        id: label,
        value: value2,
        disabled: disabled2
      }, label);
    }));
  };
  var TextareaWidget2 = function TextareaWidget3(_ref2) {
    var id = _ref2.id, placeholder = _ref2.placeholder, value = _ref2.value, required = _ref2.required, disabled = _ref2.disabled, autofocus = _ref2.autofocus, readonly = _ref2.readonly, onBlur5 = _ref2.onBlur, onFocus5 = _ref2.onFocus, onChange2 = _ref2.onChange, options = _ref2.options;
    var _onChange = function _onChange2(_ref22) {
      var value2 = _ref22.target.value;
      return onChange2(value2 === "" ? options.emptyValue : value2);
    };
    var _onBlur = function _onBlur2(_ref3) {
      var value2 = _ref3.target.value;
      return onBlur5(id, value2);
    };
    var _onFocus = function _onFocus2(_ref4) {
      var value2 = _ref4.target.value;
      return onFocus5(id, value2);
    };
    return import_react33.default.createElement(InputGroup_default, null, import_react33.default.createElement(FormControl_default, {
      id,
      name: id,
      as: "textarea",
      placeholder,
      disabled,
      readOnly: readonly,
      value,
      required,
      autoFocus: autofocus,
      rows: options.rows || 5,
      onChange: _onChange,
      onBlur: _onBlur,
      onFocus: _onFocus
    }));
  };
  var FileWidget2 = function FileWidget3(props) {
    var options = props.options, registry = props.registry;
    var BaseInputTemplate4 = getTemplate("BaseInputTemplate", registry, options);
    return import_react33.default.createElement(BaseInputTemplate4, _extends44({}, props, {
      type: "file"
    }));
  };
  var Widgets = {
    CheckboxWidget: CheckboxWidget2,
    CheckboxesWidget: CheckboxesWidget2,
    RadioWidget: RadioWidget2,
    RangeWidget: RangeWidget2,
    SelectWidget: SelectWidget2,
    TextareaWidget: TextareaWidget2,
    FileWidget: FileWidget2
  };
  var Theme = {
    templates: Templates,
    widgets: Widgets
  };
  var Form4 = /* @__PURE__ */ withTheme(Theme);

  // src/routes/Recipe/Save/RecipeForm.tsx
  var recipeSchema = {
    "title": "Recipe",
    "type": "object",
    "required": [],
    "properties": {
      "name": { "type": "string" },
      "sourceProvider": { "type": "string" },
      "sourcePath": { "type": "string" },
      "imageUrl": { "type": "string" },
      "videoUrl": { "type": "string" },
      "tags": {
        "type": "array",
        "items": { "$ref": "#/definitions/Tag" }
      },
      "ingredients": {
        "type": "array",
        "items": { "$ref": "#/definitions/Ingredient" }
      },
      "directions": {
        "type": "array",
        "items": { "$ref": "#/definitions/Direction" }
      }
    },
    "definitions": {
      "Direction": {
        "type": "object",
        "properties": {
          "text": { "type": "string" }
        }
      },
      "Ingredient": {
        "type": "object",
        "properties": {
          "text": { "type": "string" }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "name": { "type": "string" }
        }
      }
    }
  };
  var uiSchema = {
    "directions": {
      "items": {
        "step": {
          "ui:widget": "textarea"
        }
      }
    }
  };
  var InsertRecipeMutation = (RecipeFormMutation_graphql_default.hash && RecipeFormMutation_graphql_default.hash !== "17b10eb359ee86309ccfecd8a2b30a35" && console.error("The definition of 'RecipeFormMutation' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data."), RecipeFormMutation_graphql_default);
  var RecipeForm = () => {
    const [formData, setFormData] = (0, import_react34.useState)(null);
    const [commitMutation, isMutationInFlight] = (0, import_react_relay2.useMutation)(InsertRecipeMutation);
    const onSubmit = async (data, event) => {
      event.preventDefault();
      const recipe = formData;
      if (recipe === null) {
        return;
      }
      const newRecipe = {
        name: recipe.name,
        imageUrl: recipe.imageUrl,
        sourcePath: recipe.sourcePath,
        creatorId: "492d74ea-f4f5-4a38-9a60-bb3f5a8c7c8e",
        source_provider: {
          data: {
            name: recipe.sourceProvider
          },
          onConflict: {
            constraint: "source_provider_name_key",
            update_columns: ["name"]
          }
        },
        directions: {
          data: (recipe.directions || []).map((direction, idx) => {
            return {
              seq: idx,
              text: direction.text
            };
          }),
          onConflict: {
            constraint: "direction_recipe_id_seq_key",
            update_columns: ["recipeId", "seq", "text"]
          }
        },
        tags: {
          data: (recipe.tags || []).map((tag, idx) => {
            return {
              seq: idx,
              name: tag.name
            };
          }),
          onConflict: {
            constraint: "tags_recipe_id_name_key",
            update_columns: ["recipeId", "name"]
          }
        },
        ingredients: {
          data: (recipe.ingredients || []).map((ingredient, idx) => {
            return {
              seq: idx,
              text: ingredient.text
            };
          }),
          onConflict: {
            constraint: "ingredient_recipe_id_seq_key",
            update_columns: ["recipeId", "seq", "text"]
          }
        }
      };
      commitMutation({
        variables: {
          object: newRecipe
        }
      });
    };
    return /* @__PURE__ */ import_react34.default.createElement(import_react34.default.Fragment, null, /* @__PURE__ */ import_react34.default.createElement(
      Form4,
      {
        schema: recipeSchema,
        uiSchema,
        formData,
        onChange: (e) => {
          setFormData(e.formData);
        },
        onSubmit,
        validator: index
      }
    ), isMutationInFlight && /* @__PURE__ */ import_react34.default.createElement(StyledSpinner, null));
  };

  // src/routes/Recipe/Save/index.tsx
  var Save = () => {
    return /* @__PURE__ */ import_react35.default.createElement(import_react35.default.Fragment, null, /* @__PURE__ */ import_react35.default.createElement("h1", null, "Save Recipe"), /* @__PURE__ */ import_react35.default.createElement(RecipeForm, null));
  };

  // src/routes/Recipe/View/__generated__/ViewRecipeQuery.graphql.ts
  var node4 = function() {
    var v0 = [
      {
        "defaultValue": null,
        "kind": "LocalArgument",
        "name": "id"
      }
    ], v1 = [
      {
        "kind": "Literal",
        "name": "orderBy",
        "value": {
          "seq": "ASC"
        }
      }
    ], v2 = [
      {
        "alias": null,
        "args": null,
        "kind": "ScalarField",
        "name": "id",
        "storageKey": null
      },
      {
        "alias": null,
        "args": null,
        "kind": "ScalarField",
        "name": "seq",
        "storageKey": null
      },
      {
        "alias": null,
        "args": null,
        "kind": "ScalarField",
        "name": "text",
        "storageKey": null
      }
    ], v3 = [
      {
        "alias": null,
        "args": [
          {
            "kind": "Variable",
            "name": "id",
            "variableName": "id"
          }
        ],
        "concreteType": "RecipeRecipe",
        "kind": "LinkedField",
        "name": "recipeRecipeByPk",
        "plural": false,
        "selections": [
          {
            "alias": null,
            "args": null,
            "kind": "ScalarField",
            "name": "name",
            "storageKey": null
          },
          {
            "alias": null,
            "args": v1,
            "concreteType": "RecipeIngredient",
            "kind": "LinkedField",
            "name": "ingredients",
            "plural": true,
            "selections": v2,
            "storageKey": 'ingredients(orderBy:{"seq":"ASC"})'
          },
          {
            "alias": null,
            "args": v1,
            "concreteType": "RecipeDirection",
            "kind": "LinkedField",
            "name": "directions",
            "plural": true,
            "selections": v2,
            "storageKey": 'directions(orderBy:{"seq":"ASC"})'
          }
        ],
        "storageKey": null
      }
    ];
    return {
      "fragment": {
        "argumentDefinitions": v0,
        "kind": "Fragment",
        "metadata": null,
        "name": "ViewRecipeQuery",
        "selections": v3,
        "type": "query_root",
        "abstractKey": null
      },
      "kind": "Request",
      "operation": {
        "argumentDefinitions": v0,
        "kind": "Operation",
        "name": "ViewRecipeQuery",
        "selections": v3
      },
      "params": {
        "cacheID": "043d1f9085d505eb50c916f6f02ca634",
        "id": null,
        "metadata": {},
        "name": "ViewRecipeQuery",
        "operationKind": "query",
        "text": "query ViewRecipeQuery(\n  $id: uuid!\n) {\n  recipeRecipeByPk(id: $id) {\n    name\n    ingredients(orderBy: {seq: ASC}) {\n      id\n      seq\n      text\n    }\n    directions(orderBy: {seq: ASC}) {\n      id\n      seq\n      text\n    }\n  }\n}\n"
      }
    };
  }();
  node4.hash = "dec88146147263c5a30fbb1fc1adc0bc";
  var ViewRecipeQuery_graphql_default = node4;

  // src/routes/Recipe/View/index.tsx
  var import_react36 = __toESM(require_react());
  var import_react_relay3 = __toESM(require_react_relay());
  var ViewRecipeQuery = (ViewRecipeQuery_graphql_default.hash && ViewRecipeQuery_graphql_default.hash !== "dec88146147263c5a30fbb1fc1adc0bc" && console.error("The definition of 'ViewRecipeQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data."), ViewRecipeQuery_graphql_default);
  var View = () => {
    const params = useParams();
    const recipeId = params.recipeId;
    if (!recipeId) {
      return /* @__PURE__ */ import_react36.default.createElement(import_react36.default.Fragment, null, "Invalid recipeId");
    }
    const data = (0, import_react_relay3.useLazyLoadQuery)(ViewRecipeQuery, {
      id: recipeId
    });
    const recipe = data.recipeRecipeByPk;
    if (!recipe) {
      return /* @__PURE__ */ import_react36.default.createElement(StyledSpinner, null);
    }
    return /* @__PURE__ */ import_react36.default.createElement(import_react36.default.Fragment, null, /* @__PURE__ */ import_react36.default.createElement(DisplayLarge, null, recipe.name), /* @__PURE__ */ import_react36.default.createElement(import_react36.default.Fragment, null, /* @__PURE__ */ import_react36.default.createElement(DisplayMedium, null, "Ingredients"), recipe.ingredients.map((i) => /* @__PURE__ */ import_react36.default.createElement(list_item_default, null, /* @__PURE__ */ import_react36.default.createElement(list_item_label_default, null, i.text))), /* @__PURE__ */ import_react36.default.createElement(DisplayMedium, null, "Directions"), recipe.directions.map((i) => /* @__PURE__ */ import_react36.default.createElement(list_item_default, null, /* @__PURE__ */ import_react36.default.createElement(list_item_label_default, null, i.text)))));
  };

  // src/App.tsx
  var engine = new client_default();
  var App = () => {
    return /* @__PURE__ */ import_react37.default.createElement(import_hooks2.RelayEnvironmentProvider, { environment: RelayEnvironment }, /* @__PURE__ */ import_react37.default.createElement(Recoil_index_5, null, /* @__PURE__ */ import_react37.default.createElement(Provider, { value: engine }, /* @__PURE__ */ import_react37.default.createElement(base_provider_default, { theme: LightTheme }, /* @__PURE__ */ import_react37.default.createElement(Routes, null, /* @__PURE__ */ import_react37.default.createElement(Route, { path: "/", element: /* @__PURE__ */ import_react37.default.createElement(PageLayout, null) }, /* @__PURE__ */ import_react37.default.createElement(Route, { index: true, element: /* @__PURE__ */ import_react37.default.createElement(Home, null) }), /* @__PURE__ */ import_react37.default.createElement(Route, { path: "recipe" }, /* @__PURE__ */ import_react37.default.createElement(Route, { path: "search", element: /* @__PURE__ */ import_react37.default.createElement(Search, null) }), /* @__PURE__ */ import_react37.default.createElement(Route, { path: "save", element: /* @__PURE__ */ import_react37.default.createElement(Save, null) }), /* @__PURE__ */ import_react37.default.createElement(Route, { path: "view/:recipeId", element: /* @__PURE__ */ import_react37.default.createElement(View, null) }))))))));
  };

  // src/index.tsx
  var container = document.getElementById("root");
  var root2 = (0, import_client2.createRoot)(container);
  root2.render(/* @__PURE__ */ import_react38.default.createElement(BrowserRouter, null, /* @__PURE__ */ import_react38.default.createElement(App, null)));
})();
//# sourceMappingURL=index.js.map
