LET doc = PARSE(IO::FS::READ(@file))

LET pageTitle = LOWER(CLEAN_TEXT(INNER_TEXT(FIRST(ELEMENTS(doc, 'b > font')))))

LET mainSection = ELEMENT(doc, 'blockquote')
LET mainTips = ELEMENT_EXISTS(doc, 'blockquote > ul') && CONCAT_SEPARATOR("\n", (
    FOR e IN ELEMENTS(doc, 'blockquote > ul > li')
      RETURN CONCAT('* ', CLEAN_TEXT(INNER_TEXT(e)))
  )
)

LET mainSubstitutes = ELEMENT_EXISTS(doc, 'blockquote > p') && CONCAT_SEPARATOR("\n", (
  FOR e in ELEMENTS(doc, 'blockquote > p')
    FILTER ELEMENT_EXISTS(e, 'b > i')
    LET a = ELEMENT(e, 'b > i')
    FILTER INNER_TEXT(a) == 'Substitutes:'
    LET removeBold = ELEMENT_EXISTS(e, 'b') && INNER_TEXT_SET(e, 'b', '')
    RETURN CONCAT_SEPARATOR("\n", (
      FOR e IN SPLIT(CLEAN_TEXT(INNER_TEXT(e)), " OR ")
        RETURN CONCAT("* ", e)
    ))
))

LET tableIngredients = (
  FOR table IN ELEMENTS(mainSection, 'blockquote > table')
    FILTER ELEMENT_EXISTS(table, 'tr > td:nth-child(2)')
    FOR infoRow IN ELEMENTS(table, 'tr > td:nth-child(2)')
      LET ingName = FIRST(ELEMENT_EXISTS(infoRow, 'b') ? ELEMENTS(infoRow, 'b') : ELEMENTS(doc, 'b > font'))
      LET removeItalics = ELEMENT_EXISTS(ingName, 'i') && INNER_TEXT_SET(ingName, 'i', '')

      LET formattedName = CLEAN_TEXT(INNER_TEXT(ingName))

      LET mainPage = formattedName == ''
      LET names = SPLIT(mainPage ? pageTitle : formattedName, " = ")
      
      LET ingText = (
        ELEMENT_EXISTS(infoRow, 'p') && CLEAN_TEXT(ELEMENT(infoRow, 'p')) != '' ?
        INNER_TEXT_ALL(infoRow, 'p') :
        INNER_TEXT(infoRow)
      )

      LET formattedText = CLEAN_TEXT(CONCAT_SEPARATOR(", ", ingText))
      LET fullText = mainPage || POSITION(names, pageTitle) ? CONCAT(
        formattedText,
        "\n\n### Tips\n", mainTips,
        "\n\n### Substitutes\n", mainSubstitutes
      ) : formattedText

      RETURN {
        name: names[0],
        names: names,
        mainPage: mainPage,
        link: false,
        text: fullText 
      }
)

LET wrappedTableIngredients = (
  FOR table IN ELEMENTS(mainSection, 'blockquote > p > table')
    FILTER ELEMENT_EXISTS(table, 'tr > td:nth-child(2)')
    FOR infoRow IN ELEMENTS(table, 'tr > td:nth-child(2)')
      LET ingName = FIRST(ELEMENT_EXISTS(infoRow, 'b') ? (
        FOR e IN ELEMENTS(infoRow, 'b')
          FILTER CLEAN_TEXT(INNER_TEXT(e)) != ""
          RETURN e
       ) : ELEMENTS(doc, 'b > font'))
      LET removeItalics = ELEMENT_EXISTS(ingName, 'i') && INNER_HTML_SET(ingName, 'i', '')

      LET formattedName = CLEAN_TEXT(INNER_TEXT(ingName))
      LET formattedText = CLEAN_TEXT(INNER_TEXT(infoRow))

      LET names = SPLIT(formattedName, ' = ')

      RETURN {
        name: names[0],
        names: names,
        link: false,
        text: formattedText
      }
)

LET varieties = (
  FOR infoRow IN ELEMENTS(mainSection, 'blockquote > p')
    FILTER ELEMENT_EXISTS(infoRow, 'b')
    LET ingName = FIRST((
      FOR e IN ELEMENTS(infoRow, 'b')
        FILTER CLEAN_TEXT(INNER_TEXT(e)) != ""
        RETURN e
    ))
    FILTER ingName != null

    LET italics = ELEMENT_EXISTS(ingName, 'i') && (
      FOR e IN ELEMENTS(ingName, 'i')
        RETURN INNER_HTML_SET(e, '')
    )

    LET formattedName = CLEAN_TEXT(INNER_TEXT(ingName))
    LET formattedText = CLEAN_TEXT(INNER_TEXT(infoRow))

    FILTER !REGEX_TEST(formattedName, '(Link|Varieties|Equivalencies|Suggested Varieties|Other Classifications|Tips)')

    LET names = SPLIT(formattedName, ' = ')

    RETURN {
      name: names[0],
      names: names,
      link: false,
      text: formattedText
    }
)

LET links = (
  FOR p IN ELEMENTS(mainSection, 'blockquote > p')
    FILTER ELEMENT_EXISTS(p, 'b > a')
    LET link = ELEMENT(p, 'b > a')
    FILTER INNER_TEXT(link) != ''
    
    LET e = FIRST(ELEMENTS(p, 'b'))
    LET linkUrl = ATTR_GET(link, 'href').href
    LET linkName = CLEAN_TEXT(INNER_TEXT(link))

    LET removeItalics = ELEMENT_EXISTS(e, 'i') ? INNER_HTML_SET(e, 'i', '') : null
    LET removeAnchor = ELEMENT_EXISTS(e, 'a') ? INNER_HTML_SET(e, 'a', '') : null
    
    LET bText = CLEAN_TEXT(INNER_TEXT(e))
    LET name = REGEX_REPLACE(bText, '\s+\.', '')
    LET fixedName = name == '' ? INNER_TEXT(link) : name

    RETURN {
      name: fixedName,
      link: true,
      text: linkUrl
    }
)

LET categoryLinks = (
  FOR link IN ELEMENTS(mainSection, 'p font a')
    LET linkUrl = ATTR_GET(link, 'href').href
    LET name = CLEAN_TEXT(INNER_TEXT(link))
    FILTER REGEX_TEST(name, '^[A-Z]')
    RETURN {
      name: name,
      link: true,
      text: linkUrl
    }
)

LET ret = LENGTH(categoryLinks) > 0 ? {
  name: pageTitle,
  ingredients: categoryLinks
} : {
  name: pageTitle,
  ingredients: UNION(links, wrappedTableIngredients, varieties, tableIngredients)
}

RETURN ret