LET doc = PARSE(IO::FS::READ(@file))

LET ingredients = (
	FOR ing IN ELEMENTS(doc, 'p')
    FILTER ATTR_GET(ing, 'align').align == null

    LET isLink = ELEMENT_EXISTS(ing, 'div > a')
    FILTER isLink OR ELEMENT_EXISTS(ing, 'div')

    LET linkUrl = isLink ? (
      ATTR_GET(ELEMENT(ing, 'a'), 'href').href
    ) : null

    LET name = isLink ? INNER_TEXT(ELEMENT(ing, 'a')) : INNER_TEXT(ELEMENT(ing, 'div'))

    INNER_TEXT_SET(ing, 'div', '')

    LET formattedName = TRIM(REGEX_SPLIT(name, '\s.*:')[0])
		RETURN {
      name: formattedName,
      link: isLink,
      text: isLink ? linkUrl : REGEX_REPLACE(INNER_TEXT(ing), '\n\s*', ' ')
    }
)

LET tableIngredients = (
  FOR ing IN ELEMENTS(doc, 'table tr')
    FILTER ELEMENT_EXISTS(ing, 'td b')
    LET ingName = ELEMENT(ing, 'b')
    LET asdf = ELEMENT_EXISTS(ingName, 'i') && INNER_TEXT_SET(ingName, 'i', '')
    LET name = INNER_TEXT(ingName)
    LET formattedName = TRIM(REGEX_SPLIT(name, '(Notes):')[0])
    LET textElem = ELEMENT_EXISTS(ing, 'td p') ? ELEMENT(ing, 'td p') : ''
    RETURN {
      name: formattedName,
      link: false,
      text: TRIM(REGEX_REPLACE(textElem, '\n\s*', ' '))
    }
)

RETURN {
  ingredients: UNION(ingredients, tableIngredients)
}