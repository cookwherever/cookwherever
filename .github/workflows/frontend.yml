name: Frontend Build

on:
  workflow_dispatch:
  push:
    paths:
      - 'frontend/**'
      - '.github/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v5.2
    - name: Setup Node
      uses: actions/setup-node@v2-beta
      with:
        node-version: '12'

    - name: Get yarn cache
      id: yarn-cache
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ${{ steps.yarn-cache.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - run: |
        cd frontend
        yarn install --frozen-lockfile
        CI=false yarn build
        docker build . --file Dockerfile --tag build
      name: "Build app and image"
      env:
        REACT_APP_GIT_SHA: ${{ github.SHA }}
        
    - name: Log into registry
      if: steps.branch-name.outputs.current_branch == 'master'
      run: echo "${{ secrets.GH_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Push image
      if: steps.branch-name.outputs.current_branch == 'master'
      run: |
        IMAGE_ID=ghcr.io/cookwherever/frontend
        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        docker tag build $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION

